@(request: Request[AnyContent])
WELCOME to CM-Well SP (advanced subquerying API)

Input - should be POSTed to /_sp?format=<output format>
<source name>
<list of sources, one per line>
<an empty line>
<querying language name>
<query sources, separated by an empty line>

Supported sources:
  PATHS (of CM-Well)
Supported query languages:
  SPARQL
  Gremlin (not yet supported)
Supported output formats for SPARQL:
  json, rdf, xml, ascii, tsv



Examples:

First, let's upload some data.

curl -X POST "http://@request.host/_in?format=nquads" -H "Content-Type: text/plain" --data-binary '
  <http://example.org/Individuals/DaisyDuck> <http://purl.org/vocab/relationship/colleagueOf> <http://example.org/Individuals/BruceWayne> .
  <http://example.org/Individuals/DaisyDuck> <http://www.tr-lbd.com/bold#active> "false" .
  <http://example.org/Individuals/BruceWayne> <http://purl.org/vocab/relationship/employedBy> <http://example.org/Individuals/DonaldDuck> .
  <http://example.org/Individuals/BruceWayne> <http://www.tr-lbd.com/bold#active> "true" .
  <http://example.org/Individuals/DonaldDuck> <http://purl.org/vocab/relationship/mentorOf> <http://example.org/Individuals/JohnSmith> .
  <http://example.org/Individuals/DonaldDuck> <http://purl.org/vocab/relationship/knowsByReputation> <http://example.org/Individuals/MartinOdersky> .
  <http://example.org/Individuals/DonaldDuck> <http://www.tr-lbd.com/bold#active> "true" .
  <http://example.org/Individuals/JohnSmith> <http://purl.org/vocab/relationship/friendOf> <http://example.org/Individuals/PeterParker> <http://example.org/graphs/spiderman> .
  <http://example.org/Individuals/JohnSmith> <http://purl.org/vocab/relationship/parentOf> <http://example.org/Individuals/SaraSmith> <http://example.org/graphs/spiderman> .
  <http://example.org/Individuals/JohnSmith> <http://www.tr-lbd.com/bold#active> "true" .
  <http://example.org/Individuals/SaraSmith> <http://purl.org/vocab/relationship/siblingOf> <http://example.org/Individuals/RebbecaSmith> .
  <http://example.org/Individuals/SaraSmith> <http://www.tr-lbd.com/bold#active> "true" .
  <http://example.org/Individuals/RebbecaSmith> <http://purl.org/vocab/relationship/siblingOf> <http://example.org/Individuals/SaraSmith> .
  <http://example.org/Individuals/RebbecaSmith> <http://www.tr-lbd.com/bold#active> "false" .
  <http://example.org/Individuals/PeterParker> <http://purl.org/vocab/relationship/worksWith> <http://example.org/Individuals/HarryMiller> .
  <http://example.org/Individuals/PeterParker> <http://purl.org/vocab/relationship/neighborOf> <http://example.org/Individuals/ClarkKent> .
  <http://example.org/Individuals/PeterParker> <http://www.tr-lbd.com/bold#active> "true" .
  <http://example.org/Individuals/HarryMiller> <http://purl.org/vocab/relationship/parentOf> <http://example.org/Individuals/NatalieMiller> .
  <http://example.org/Individuals/HarryMiller> <http://www.tr-lbd.com/bold#active> "true" .
  <http://example.org/Individuals/NatalieMiller> <http://purl.org/vocab/relationship/childOf> <http://example.org/Individuals/HarryMiller> .
  <http://example.org/Individuals/NatalieMiller> <http://www.tr-lbd.com/bold#active> "true" .
  <http://example.org/Individuals/MartinOdersky> <http://purl.org/vocab/relationship/collaboratesWith> <http://example.org/Individuals/RonaldKhun> .
  <http://example.org/Individuals/MartinOdersky> <http://www.tr-lbd.com/bold#active> "true" .
  <http://example.org/Individuals/RonaldKhun> <http://purl.org/vocab/relationship/collaboratesWith> <http://example.org/Individuals/MartinOdersky> .
  <http://example.org/Individuals/RonaldKhun> <http://www.tr-lbd.com/bold#active> "true" .
  <http://example.org/Individuals/RonaldKhun> <http://www.tr-lbd.com/bold#category> "deals" .
  <http://example.org/Individuals/RonaldKhun> <http://www.tr-lbd.com/bold#category> "news" .
'

(response will be 200 {success:true}).

Visually, that relationships data looks like this:

    (Daisy Duck)
         |
    [colleagueOf]
         |
         V
    (Bruce Wayne)
         |
    [employedBy]
         |                         .--[parentOf]-->(Sara Smith)<--[siblingOf]-->(Rebbeca Smith)    .-----[childOf]-------.
         |                         |                                                               |                     |
         V                         |                                                               V                     |
    (Donald Duck)--[mentorOf]-->(John Smith)--[friendOf]-->(Peter Parker)--[worksWith]-->(Harry Miller)--[parentOf]-->(Natalie Miller)
         |                                                        |
         |                                                        `--[neighborOf]-->(Clark Kent)
         |
         `--[knowsByReputation]-->(Martin Odersky)<--[collaboratesWith]-->(Ronald Khun)



SPARQL Example:

A subset of the data above might consist of:
Some search results: http://@request.host/example.org/Individuals?op=search&length=1000&with-data
A single Infoton:    http://@request.host/example.org/Individuals/RonaldKhun
Some xg results:     http://@request.host/example.org/Individuals/JohnSmith?xg=3

Let's run a SPARQL query on that data:

curl -X POST "http://@request.host/_sp?format=ascii" --data-binary '
PATHS
/example.org/Individuals?op=search&length=1000&with-data
/example.org/Individuals/RonaldKhun
/example.org/Individuals/JohnSmith?xg=3

SPARQL
SELECT DISTINCT ?name ?active WHERE { ?name <http://www.tr-lbd.com/bold#active> ?active . } ORDER BY DESC(?active)
'

and the results are:

-------------------------------------------------------------
| name                                            | active  |
=============================================================
| <http://example.org/Individuals/BruceWayne>     | "true"  |
| <http://example.org/Individuals/DonaldDuck>     | "true"  |
| <http://example.org/Individuals/HarryMiller>    | "true"  |
| <http://example.org/Individuals/JohnSmith>      | "true"  |
| <http://example.org/Individuals/MartinOdersky>  | "true"  |
| <http://example.org/Individuals/NatalieMiller>  | "true"  |
| <http://example.org/Individuals/PeterParker>    | "true"  |
| <http://example.org/Individuals/RonaldKhun>     | "true"  |
| <http://example.org/Individuals/SaraSmith>      | "true"  |
| <http://example.org/Individuals/DaisyDuck>      | "false" |
| <http://example.org/Individuals/RebbecaSmith>   | "false" |
-------------------------------------------------------------



More SPARQL options:
Additional acceptable query parameters are
    1. "quads"
    2. "verbose"
    3. "show-graph"
All are optional.
Each combination of them is acceptable.

1. Quads Support
If you wish to use Quads on your SPARQL Query, please supply the "quads" query parameter.

Example

curl -X POST "http://@request.host/_sp?format=ascii&quads" --data-binary '
PATHS
/example.org/Individuals?op=search&length=1000&with-data
/example.org/Individuals/RonaldKhun
/example.org/Individuals/JohnSmith?xg=3

SPARQL
SELECT *
FROM NAMED <http://example.org/graphs/spiderman>
WHERE { GRAPH ?g { ?s ?p ?o . } }
'

and the results are:

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| s                                          | p                                             | o                                            | g                                     |
=====================================================================================================================================================================================
| <http://example.org/Individuals/JohnSmith> | <http://purl.org/vocab/relationship/parentOf> | <http://example.org/Individuals/SaraSmith>   | <http://example.org/graphs/spiderman> |
| <http://example.org/Individuals/JohnSmith> | <http://purl.org/vocab/relationship/friendOf> | <http://example.org/Individuals/PeterParker> | <http://example.org/graphs/spiderman> |
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



2. Verbose Mode
Only when using ?format=ascii, you can add &verbose
Then the response will be leaded by time-metrics of gathering the data, and processing the query.

Example:
curl -X POST "http://@request.host/_sp?format=ascii&verbose" --data-binary '
PATHS
/example.org/Individuals?op=search&length=1000&with-data
/example.org/Individuals/RonaldKhun
/example.org/Individuals/JohnSmith?xg=3

SPARQL
SELECT DISTINCT ?name ?active WHERE { ?name <http://www.tr-lbd.com/bold#active> ?active . } ORDER BY DESC(?active)
'

and the results are:

Time metrics:
Start         End         Type     Task
00:00:00.489 00:00:00.556 Subgraph /example.org/Individuals?op=search&length=1000&with-data=&format=nquads
00:00:00.490 00:00:00.505 Subgraph /example.org/Individuals/RonaldKhun?=&format=nquads
00:00:00.499 00:00:00.552 Subgraph /example.org/Individuals/JohnSmith?xg=3&format=nquads
00:00:00.561 00:00:00.566 SPARQL   SELECT DISTINCT ?name ?active WHERE @{123.asInstanceOf[Char]} ?name <http://www.tr-lbd.c...

Results:
------------------------------------------------------------
| name                                           | active  |
============================================================
| <http://example.org/Individuals/BruceWayne>    | "true"  |
| <http://example.org/Individuals/DonaldDuck>    | "true"  |
| <http://example.org/Individuals/HarryMiller>   | "true"  |
| <http://example.org/Individuals/JohnSmith>     | "true"  |
| <http://example.org/Individuals/MartinOdersky> | "true"  |
| <http://example.org/Individuals/NatalieMiller> | "true"  |
| <http://example.org/Individuals/PeterParker>   | "true"  |
| <http://example.org/Individuals/RonaldKhun>    | "true"  |
| <http://example.org/Individuals/SaraSmith>     | "true"  |
| <http://example.org/Individuals/DaisyDuck>     | "false" |
| <http://example.org/Individuals/RebbecaSmith>  | "false" |
------------------------------------------------------------



3. Show Graph
Only when using ?format=ascii, you can add &show-graph
Then the response will be leaded the graph on which the query runs.

Example:
curl -X POST "http://@request.host/_sp?format=ascii&show-graph" --data-binary '
PATHS
/example.org/Individuals?op=search&length=1000&with-data
/example.org/Individuals/RonaldKhun
/example.org/Individuals/JohnSmith?xg=3

SPARQL
SELECT DISTINCT ?name ?active WHERE { ?name <http://www.tr-lbd.com/bold#active> ?active . } ORDER BY DESC(?active)
'

and the results are:

Graph:
<http://example.org/Individuals/DonaldDuck> <http://purl.org/vocab/relationship/knowsByReputation> <http://example.org/Individuals/MartinOdersky> .
<http://example.org/Individuals/DonaldDuck> <http://www.tr-lbd.com/bold#active> "true" .
<http://example.org/Individuals/DonaldDuck> <http://purl.org/vocab/relationship/mentorOf> <http://example.org/Individuals/JohnSmith> .
<http://example.org/Individuals/RebbecaSmith> <http://www.tr-lbd.com/bold#active> "false" .
<http://example.org/Individuals/RebbecaSmith> <http://purl.org/vocab/relationship/siblingOf> <http://example.org/Individuals/SaraSmith> .
<http://example.org/Individuals/MartinOdersky> <http://purl.org/vocab/relationship/collaboratesWith> <http://example.org/Individuals/RonaldKhun> .
<http://example.org/Individuals/MartinOdersky> <http://www.tr-lbd.com/bold#active> "true" .
<http://example.org/Individuals/BruceWayne> <http://purl.org/vocab/relationship/employedBy> <http://example.org/Individuals/DonaldDuck> .
<http://example.org/Individuals/BruceWayne> <http://www.tr-lbd.com/bold#active> "true" .
<http://example.org/Individuals/PeterParker> <http://www.tr-lbd.com/bold#active> "true" .
<http://example.org/Individuals/PeterParker> <http://purl.org/vocab/relationship/worksWith> <http://example.org/Individuals/HarryMiller> .
<http://example.org/Individuals/PeterParker> <http://purl.org/vocab/relationship/neighborOf> <http://example.org/Individuals/ClarkKent> .
<http://example.org/Individuals/SaraSmith> <http://www.tr-lbd.com/bold#active> "true" .
<http://example.org/Individuals/SaraSmith> <http://purl.org/vocab/relationship/siblingOf> <http://example.org/Individuals/RebbecaSmith> .
<http://example.org/Individuals/RonaldKhun> <http://www.tr-lbd.com/bold#category> "deals" .
<http://example.org/Individuals/RonaldKhun> <http://www.tr-lbd.com/bold#category> "news" .
<http://example.org/Individuals/RonaldKhun> <http://www.tr-lbd.com/bold#active> "true" .
<http://example.org/Individuals/RonaldKhun> <http://purl.org/vocab/relationship/collaboratesWith> <http://example.org/Individuals/MartinOdersky> .
<http://example.org/Individuals/JohnSmith> <http://www.tr-lbd.com/bold#active> "true" .
<http://example.org/Individuals/NatalieMiller> <http://www.tr-lbd.com/bold#active> "true" .
<http://example.org/Individuals/NatalieMiller> <http://purl.org/vocab/relationship/childOf> <http://example.org/Individuals/HarryMiller> .
<http://example.org/Individuals/HarryMiller> <http://purl.org/vocab/relationship/parentOf> <http://example.org/Individuals/NatalieMiller> .
<http://example.org/Individuals/HarryMiller> <http://www.tr-lbd.com/bold#active> "true" .
<http://example.org/Individuals/DaisyDuck> <http://purl.org/vocab/relationship/colleagueOf> <http://example.org/Individuals/BruceWayne> .
<http://example.org/Individuals/DaisyDuck> <http://www.tr-lbd.com/bold#active> "false" .
<http://example.org/Individuals/JohnSmith> <http://purl.org/vocab/relationship/parentOf> <http://example.org/Individuals/SaraSmith> .
<http://example.org/Individuals/JohnSmith> <http://purl.org/vocab/relationship/friendOf> <http://example.org/Individuals/PeterParker> .

Results:
------------------------------------------------------------
| name                                           | active  |
============================================================
| <http://example.org/Individuals/BruceWayne>    | "true"  |
| <http://example.org/Individuals/DonaldDuck>    | "true"  |
| <http://example.org/Individuals/HarryMiller>   | "true"  |
| <http://example.org/Individuals/JohnSmith>     | "true"  |
| <http://example.org/Individuals/MartinOdersky> | "true"  |
| <http://example.org/Individuals/NatalieMiller> | "true"  |
| <http://example.org/Individuals/PeterParker>   | "true"  |
| <http://example.org/Individuals/RonaldKhun>    | "true"  |
| <http://example.org/Individuals/SaraSmith>     | "true"  |
| <http://example.org/Individuals/DaisyDuck>     | "false" |
| <http://example.org/Individuals/RebbecaSmith>  | "false" |
------------------------------------------------------------




Custom query parameters to populate queries with placeholders:

Each SPARQL query can have placeholders, windows-batch style syntax, i.e. %ARG%
Prior to executing the query, CM-Well will replace those with given values from query parameters.
The syntax in query parameters, where values are supplied, is adding a "sp." prefix.

Example:

curl -X POST "http://@request.host/_sp?sp.boldpred=active" --data-binary '
PATHS
/example.org/Individuals?op=search&length=1000&with-data

SPARQL
SELECT DISTINCT ?name
WHERE { ?name <http://www.tr-lbd.com/bold#%BOLDPRED%> "true" . }
'

This will make the following WHERE clause:
WHERE { ?name <http://www.tr-lbd.com/bold#active> "true" . }

* Placeholders can appear ANYWHERE within the SPARQL query
* Matching between placeholder and query parameter is case insensitive





You can have multiple SPARQL Queries per _sp POST. They should be separated by a line of dashes (at least three dashes).
Example:
curl -X POST "http://@request.host/_sp?verbose" --data-binary '
PATHS
/example.org/Individuals?op=search&length=1000&with-data
/example.org/Individuals/RonaldKhun
/example.org/Individuals/JohnSmith?xg=3

SPARQL
SELECT DISTINCT ?name ?active
WHERE { ?name <http://www.tr-lbd.com/bold#active> ?active . } ORDER BY DESC(?active)
--------------------------
SELECT DISTINCT ?name
WHERE { ?name <http://www.tr-lbd.com/bold#active> "false" . }
'

and the results are:


Time metrics:
Start        End          Type     Task
00:00:00.033 00:00:02.007 Subgraph /example.org/Individuals?op=search&length=1000&with-data=&format=ntriples
00:00:01.512 00:00:02.008 Subgraph /example.org/Individuals/RonaldKhun?=&format=ntriples
00:00:01.582 00:00:02.007 Subgraph /example.org/Individuals/JohnSmith?xg=3&format=ntriples
00:00:02.077 00:00:02.260 SPARQL   SELECT DISTINCT ?name ?active WHERE @{123.asInstanceOf[Char]} ?name <http://www.tr-lbd.c...
00:00:02.260 00:00:02.263 SPARQL   SELECT DISTINCT ?name WHERE @{123.asInstanceOf[Char]} ?name <http://www.tr-lbd.com/bold#...

Results:
------------------------------------------------------------
| name                                           | active  |
============================================================
| <http://example.org/Individuals/BruceWayne>    | "true"  |
| <http://example.org/Individuals/DonaldDuck>    | "true"  |
| <http://example.org/Individuals/HarryMiller>   | "true"  |
| <http://example.org/Individuals/JohnSmith>     | "true"  |
| <http://example.org/Individuals/MartinOdersky> | "true"  |
| <http://example.org/Individuals/NatalieMiller> | "true"  |
| <http://example.org/Individuals/PeterParker>   | "true"  |
| <http://example.org/Individuals/RonaldKhun>    | "true"  |
| <http://example.org/Individuals/SaraSmith>     | "true"  |
| <http://example.org/Individuals/DaisyDuck>     | "false" |
| <http://example.org/Individuals/RebbecaSmith>  | "false" |
------------------------------------------------------------

-------------------------------------------------
| name                                          |
=================================================
| <http://example.org/Individuals/DaisyDuck>    |
| <http://example.org/Individuals/RebbecaSmith> |
-------------------------------------------------





Other supported SPARQL Query Types than SELECT:
- CONSTRUCT

Example:
curl -X POST "http://@request.host/_sp" --data-binary '
PATHS
/example.org/Individuals?op=search&length=1000&with-data

SPARQL
PREFIX rel: <http://purl.org/vocab/relationship/>

CONSTRUCT { ?uncle rel:demoUncleOf ?nephew . }
WHERE {
  ?uncle rel:parentOf ?x .
  ?x rel:siblingOf ?nephew .
}'

and the results are:
<http://example.org/Individuals/JohnSmith> <http://purl.org/vocab/relationship/demoUncleOf> <http://example.org/Individuals/RebbecaSmith> .






Imports
=======

* You can import pre-uploaded CONSTRUCT queries to your _sp POST.
* Add an "IMPORT" directive after the "PATHS" part, and before "SPARQL" (see example below), following by queries paths
* Each imporetd query must be
  - of CONSTRUCT type
  - an exising FileInfoton, with content-type "text/plain"
* Wildcards can be used to import an entire "directory", see in the example below. Supported wildcards are * and _ (they have same meaning)
* Each query path can be absolute (starts with a "/"), or relative (to /meta/sp/)
* Custom query parameters are supporetd for the imported queries as well (i.e. the imported queries can have placeholders)
* The original subgraph will be transformed to the union of the imported queries results, the main SPARQL query will run against that union.


Example:

First, let's upload some graph expanding query:

curl "http://@request.host/myQueries/xyz/baz.sparql" -H "X-CM-Well-Type:File" \
-H "Content-Type:text/plain" --data-binary 'CONSTRUCT { ?s <http://purl.org/vocab/relationship/siblingOf> "his sister" . }
WHERE { ?s <http://www.tr-lbd.com/bold#active> "true" }'


Now let's use it:

curl -X POST "http://@request.host/_sp?format=ascii" --data-binary '
PATHS
/example.org/Individuals?op=search&length=1000&with-data

IMPORT
/myQueries/xyz/baz.sparql

SPARQL
PREFIX rel: <http://purl.org/vocab/relationship/>
SELECT ?name WHERE { ?name rel:siblingOf "his sister" . }
'

... and the results are:

--------------------------------------------------
| name                                           |
==================================================
| <http://example.org/Individuals/HarryMiller>   |
| <http://example.org/Individuals/JohnSmith>     |
| <http://example.org/Individuals/NatalieMiller> |
| <http://example.org/Individuals/RonaldKhun>    |
| <http://example.org/Individuals/SaraSmith>     |
| <http://example.org/Individuals/PeterParker>   |
| <http://example.org/Individuals/BruceWayne>    |
| <http://example.org/Individuals/MartinOdersky> |
| <http://example.org/Individuals/DonaldDuck>    |
--------------------------------------------------









Gremlin:

1. CM-Well will bind the required subset of data to the Groovy variable "g".
   In other words, you may start your Gremlin Query with "g."

2. Literal values will be mapped to Vertex Properties in the following manner:
   If there's a single value, it would be as simple as key/value.
   If there are multiple values for the same predicate, the Vertex Property value will be an array.
   You can see the difference in the filter Closure of examples 2,3 below.


Gremlin Examples:

1.

curl -X POST "http://@request.host/_sp" --data-binary '
PATHS
/example.org/Individuals?op=search&length=1000&with-data
/example.org/Individuals/RonaldKhun
/example.org/Individuals/JohnSmith?xg=3

Gremlin
g.v("http://example.org/Individuals/PeterParker").outE.inV.filter{it.id.matches(".*Miller.*")}.outE.inV
'

and the results are:

    v[http://example.org/Individuals/NatalieMiller]


2.

curl -X POST "http://@request.host/_sp" --data-binary '
PATHS
/example.org/Individuals?op=search&length=1000&with-data
/example.org/Individuals/RonaldKhun
/example.org/Individuals/JohnSmith?xg=3

Gremlin
g.v("http://example.org/Individuals/SaraSmith").out().filter{it["http://www.tr-lbd.com/bold#active"]=="false"}
'

and the results are:

    v[http://example.org/Individuals/RebbecaSmith]


3.

curl -X POST "http://@request.host/_sp" --data-binary '
PATHS
/example.org/Individuals?op=search&length=1000&with-data
/example.org/Individuals/RonaldKhun
/example.org/Individuals/JohnSmith?xg=3

Gremlin
g.v("http://example.org/Individuals/MartinOdersky").out().filter{it["http://www.tr-lbd.com/bold#category"].contains("news")}
'

and the results are:

    v[http://example.org/Individuals/RonaldKhun]
