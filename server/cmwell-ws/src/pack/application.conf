# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.crypto.secret=changeMeFromCMWellConsole
play.crypto.secret=${?PLAY_CRYPTO_SECRET}

# The application languages
# ~~~~~
play.i18n.langs=["en"]

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
#logger.root=INFO

# Logger used by the framework:
#logger.play=INFO

# Logger provided to your application:
#logger.application=INFO

play.http.parser.maxDiskBuffer=128M
# TODO: reduce back to default (100K) after propagating a "stream" instead of Array[Byte] everywhere (e.g. FileInfoton's content)
play.http.parser.maxMemoryBuffer=128M
tLogs {
  hostName = "localhost:9160"
  cluster.name = Test Cluster
  keyspace = data
  columnFamilyName = TLog
  maxConnections = 10
}

kafka {
  url = "{{kafka.url}}" #"localhost:9092"
  persist.topic.name = persist_topic
  numOfPartitions = {{kafka.numOfPartitions}} #1
  zkServers = "{{kafka.zkServers}}" #"localhost:2181"
}

updatesTlog.name=UpdateTLog
uuidsTlog.name=UuidsTLog

irwServiceDao {
  hostName = "{{irwServiceDao.hostName}}" #localhost
  clusterName = cmwell
  keySpace = data
  keySpace2 = data2
  ColumnFamily.data = Infoton
  ColumnFamily.path = Path
  maxConnections = 10
}

indexer {
  pollingInterval = 1000
  bucketsSize = 10
}

ftsService {
  isTransportClient = true
  scrollTTL = 3600
  scrollLength = 100
  default.timeout = 10
  waitForGreen = true
  transportAddress = "{{ftsService.transportAddress}}"
  defaultPartitionNew = "cm_well"
}

webservice {
  max {
    upload.size = 5
    bulkCommand {
      size = 100
      weight = 5K
    }
    search.contexts = 613000000
    chunk.size = 512K
  }
  xg.limit = 10000
  max-offset = 1000
  max-length = 10000
  graphreplace {
    search.timeoutsec = 60
    maxStatements = 20
  }
  login.penaltysec = 3
  irwServiceDao.readCache.enabled = true
}

metrics {
  reportMetricsJMX = true
  reportMetricsGraphite = false
  reportMetricsSlf4j = false
  graphite.host = notused.com
}

cmwell {
  flag {
    newBG = {{cmwell.flag.newBG}}
    oldBG = {{cmwell.flag.oldBG}}
  }
  clusterName = "{{cmwell.clusterName}}" #"cm-well-p"

  ws {
    nbg = {{cmwell.ws.nbg}}
    cache.fieldsNamesTimeout = 2m
    consume.bulk.threshold = 1000000
    consume.bulk.binarySearchTimeout = 6 seconds
    switch-over-to-zstore.file-size = 512K

    pushbackpressure.trigger = "new"

    trafficshaping {
      requests-penalty-threshold = 15000
      check-frequency-sec = 20
      max-request-time-sec = 9
      stress-threshold = 200
    }

    cassandra-driver.history-versions-limit = 100000

    zcache {
      ttlSeconds = 90
      pollingMaxRetries = 10
      pollingIntervalSeconds = 1
      L1Size = 1024
    }
  }

  grid {
    clusterName = ${cmwell.clusterName}
    dmap.persistence.data-dir = "{{cmwell.grid.dmap.persistence.data-dir}}"
    bind.host = "{{cmwell.grid.bind.host}}" #127.0.0.1
    bind.port = {{cmwell.grid.bind.port}} #0
    seeds = "{{cmwell.grid.seeds}}" #"127.0.0.1:7777"
    min-members = {{cmwell.grid.min-members}}
    monitor.port = {{cmwell.grid.monitor.port}}
  }
}

crashableworker {
  results {
    maxLength = 1400000
    baseFileName = "tempFile"
  }
}

cassandra.bulk.size=25
elasticsearch.scroll.buffer.size=10
dataCenter.id = "{{dataCenter.id}}"
dataCenter.maxInstances=16
quads.cache.size=1000
quads.globalOperations.results.maxLength=10000
xfix.num.retries=3
authorization.token.expiry.maxDays=60
auth.system.version=2

ws {
  meta.ns.initialLoadingAmount = 2000
  es.gracfulDegradationTimeout = 4
}


akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  #akka is configured to log in DEBUG level. The actual level is determined by logback
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  http.host-connection-pool.max-open-requests=1024
}

ftsService.clusterName = "{{ftsService.clusterName}}"
cmwell.home = "{{cmwell.home}}" #for the time being it's also as system property (-D) until the System.getproperty in code will be fixed

#the port that Play will bind to
http.port = {{http.port}}

#prevents Play from writing the process pid to a file
pidfile.path = /dev/null

#user.dir = $home/app/ws ??? should it be deleted?
