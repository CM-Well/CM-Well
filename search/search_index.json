{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s]+"},"docs":[{"location":"index.html","text":"Welcome to CM-Well! CM-Well is an open-source, writable Linked Data repository, developed by Thomson Reuters Refinitiv and used as its central Knowledge Graph database. CM-Well adheres to RDF principles, meaning that data is in a standard , machine-readable format. We hope you enjoy exploring this documentation site to learn more about CM-Well and how to build, run, maintain and use it. Here are some useful links to help you get started: Introduction to CM-Well API Overview New to CM-Well? (for Developers) Quick Start (for Developers) API Reference Tutorials","title":"Index"},{"location":"index.html#welcome-to-cm-well","text":"CM-Well is an open-source, writable Linked Data repository, developed by Thomson Reuters Refinitiv and used as its central Knowledge Graph database. CM-Well adheres to RDF principles, meaning that data is in a standard , machine-readable format. We hope you enjoy exploring this documentation site to learn more about CM-Well and how to build, run, maintain and use it. Here are some useful links to help you get started: Introduction to CM-Well API Overview New to CM-Well? (for Developers) Quick Start (for Developers) API Reference Tutorials","title":"Welcome to CM-Well!"},{"location":"ContactAndContribution.html","text":"Contact and Contribution Reporting Issues You can report CM-Well issues at the CM-Well GitHub Issues Page . Discuss We use Gitter to talk about CM-Well. Feel free to come join us! Code Contributions If you want to make a contribution to CM-Well's code, either as an individual or as a company or other legal entity, please read, sign and send us the appropriate form (see further instructions inside the forms). CM-Well Individual Contributor License Agreement CM-Well Entity Contributor License Agreement","title":"Contact and Contribution"},{"location":"ContactAndContribution.html#contact-and-contribution","text":"","title":"Contact and Contribution"},{"location":"ContactAndContribution.html#reporting-issues","text":"You can report CM-Well issues at the CM-Well GitHub Issues Page .","title":"Reporting Issues"},{"location":"ContactAndContribution.html#discuss","text":"We use Gitter to talk about CM-Well. Feel free to come join us!","title":"Discuss"},{"location":"ContactAndContribution.html#code-contributions","text":"If you want to make a contribution to CM-Well's code, either as an individual or as a company or other legal entity, please read, sign and send us the appropriate form (see further instructions inside the forms). CM-Well Individual Contributor License Agreement CM-Well Entity Contributor License Agreement","title":"Code Contributions"},{"location":"License.html","text":"License CM-Well is Open Source and available under the Apache 2 License. See the CM-Well License Page to learn more.","title":"License"},{"location":"License.html#license","text":"CM-Well is Open Source and available under the Apache 2 License. See the CM-Well License Page to learn more.","title":"License"},{"location":"APIReference/Authorization/API.Auth.ChangePassword.html","text":"Change Password Description Usually new users are assigned random passwords. After creating a CM-Well user, you may want to change the user's password to a customized value. You can do this with the change-password function. Note To change a user's password, you'll need an access token for the user. To obtain an access token, you can call the _login API . Syntax URL: CMWellHost /_auth?op=change-password current=87654321 new=12345678 -H \"X-CM-Well-Token: AccessToken \" REST verb: GET Mandatory parameters: Access token in the X-CM-Well-Token header Special Parameters Parameter Description current The user's current password new The user's new password Code Example Call CMWellHost /_auth?op=change-password current=$2a$10$7AnXsjks.IZXTbpRiAGN4OQItwiz4sgxM49lvTiCjWgOhbbOQkg2m new=12345678 -H X-CM-Well-Token: AccessToken Results { success :true} Related Topics CM-Well Security Features Login API Managing CM-Well Users Generate Password API Invalidate Cache API","title":"Change Password"},{"location":"APIReference/Authorization/API.Auth.ChangePassword.html#change-password","text":"","title":"Change Password"},{"location":"APIReference/Authorization/API.Auth.ChangePassword.html#description","text":"Usually new users are assigned random passwords. After creating a CM-Well user, you may want to change the user's password to a customized value. You can do this with the change-password function. Note To change a user's password, you'll need an access token for the user. To obtain an access token, you can call the _login API .","title":"Description"},{"location":"APIReference/Authorization/API.Auth.ChangePassword.html#syntax","text":"URL: CMWellHost /_auth?op=change-password current=87654321 new=12345678 -H \"X-CM-Well-Token: AccessToken \" REST verb: GET Mandatory parameters: Access token in the X-CM-Well-Token header","title":"Syntax"},{"location":"APIReference/Authorization/API.Auth.ChangePassword.html#special-parameters","text":"Parameter Description current The user's current password new The user's new password","title":"Special Parameters"},{"location":"APIReference/Authorization/API.Auth.ChangePassword.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Authorization/API.Auth.ChangePassword.html#call","text":"CMWellHost /_auth?op=change-password current=$2a$10$7AnXsjks.IZXTbpRiAGN4OQItwiz4sgxM49lvTiCjWgOhbbOQkg2m new=12345678 -H X-CM-Well-Token: AccessToken","title":"Call"},{"location":"APIReference/Authorization/API.Auth.ChangePassword.html#results","text":"{ success :true}","title":"Results"},{"location":"APIReference/Authorization/API.Auth.ChangePassword.html#related-topics","text":"CM-Well Security Features Login API Managing CM-Well Users Generate Password API Invalidate Cache API","title":"Related Topics"},{"location":"APIReference/Authorization/API.Auth.GeneratePassword.html","text":"Generate Password Description When creating a new CM-Well user, you can use the generate-password API to generate a random password and its encrypted value. This password can be changed later if required (see Change Password API ). Syntax URL: CMWellHost /_auth?op=generate-password REST verb: GET Mandatory parameters: None. Code Example Call curl cm-well-host /_auth?op=generate-password Results { password : t0OlrZGEM9 , encrypted : $2a$10$7AnXsjks.IZXTbpRiAGN4OQItwiz4sgxM49lvTiCjWgOhbbOQkg2m } Related Topics CM-Well Security Features Login API Managing CM-Well Users Change Password API Invalidate Cache API","title":"Generate Password"},{"location":"APIReference/Authorization/API.Auth.GeneratePassword.html#generate-password","text":"","title":"Generate Password"},{"location":"APIReference/Authorization/API.Auth.GeneratePassword.html#description","text":"When creating a new CM-Well user, you can use the generate-password API to generate a random password and its encrypted value. This password can be changed later if required (see Change Password API ).","title":"Description"},{"location":"APIReference/Authorization/API.Auth.GeneratePassword.html#syntax","text":"URL: CMWellHost /_auth?op=generate-password REST verb: GET Mandatory parameters: None.","title":"Syntax"},{"location":"APIReference/Authorization/API.Auth.GeneratePassword.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Authorization/API.Auth.GeneratePassword.html#call","text":"curl cm-well-host /_auth?op=generate-password","title":"Call"},{"location":"APIReference/Authorization/API.Auth.GeneratePassword.html#results","text":"{ password : t0OlrZGEM9 , encrypted : $2a$10$7AnXsjks.IZXTbpRiAGN4OQItwiz4sgxM49lvTiCjWgOhbbOQkg2m }","title":"Results"},{"location":"APIReference/Authorization/API.Auth.GeneratePassword.html#related-topics","text":"CM-Well Security Features Login API Managing CM-Well Users Change Password API Invalidate Cache API","title":"Related Topics"},{"location":"APIReference/Authorization/API.Auth.InvalidateCache.html","text":"Invalidate Cache Description CM-Well manages a cache with authorization information for better performance. If you've made a change to authorization information such as creating a new user, creating a new role or changing a password, and you want the change to take immediate effect, you will need to refresh this cache. You do this by calling the invalidate-cache API. Note You will need an access token with admin permissions to call this API. If you have several CM-Well nodes, then in order to refresh the caches on all nodes, you'll need to send a separate invalidate-cache command to each node in your cluster. Syntax URL: CMWellHost /_auth?op=invalidate-cache -H \"X-CM-Well-Token: AdminToken \" REST verb: GET Mandatory parameters: Admin-permissions token in the X-CM-Well-Token header Code Example Call CMWellHost /_auth?op=invalidate-cache -H X-CM-Well-Token: AdminToken Results { success :true} Note Occasionally you may get a failure response when attempting to refresh the cache. This might be because a cache update is in progress when you make your request. If this happens, please retry the invalidate-cache request. Related Topics CM-Well Security Features Login API Managing CM-Well Users Generate Password API Change Password API","title":"Invalidate Cache"},{"location":"APIReference/Authorization/API.Auth.InvalidateCache.html#invalidate-cache","text":"","title":"Invalidate Cache"},{"location":"APIReference/Authorization/API.Auth.InvalidateCache.html#description","text":"CM-Well manages a cache with authorization information for better performance. If you've made a change to authorization information such as creating a new user, creating a new role or changing a password, and you want the change to take immediate effect, you will need to refresh this cache. You do this by calling the invalidate-cache API. Note You will need an access token with admin permissions to call this API. If you have several CM-Well nodes, then in order to refresh the caches on all nodes, you'll need to send a separate invalidate-cache command to each node in your cluster.","title":"Description"},{"location":"APIReference/Authorization/API.Auth.InvalidateCache.html#syntax","text":"URL: CMWellHost /_auth?op=invalidate-cache -H \"X-CM-Well-Token: AdminToken \" REST verb: GET Mandatory parameters: Admin-permissions token in the X-CM-Well-Token header","title":"Syntax"},{"location":"APIReference/Authorization/API.Auth.InvalidateCache.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Authorization/API.Auth.InvalidateCache.html#call","text":"CMWellHost /_auth?op=invalidate-cache -H X-CM-Well-Token: AdminToken","title":"Call"},{"location":"APIReference/Authorization/API.Auth.InvalidateCache.html#results","text":"{ success :true} Note Occasionally you may get a failure response when attempting to refresh the cache. This might be because a cache update is in progress when you make your request. If this happens, please retry the invalidate-cache request.","title":"Results"},{"location":"APIReference/Authorization/API.Auth.InvalidateCache.html#related-topics","text":"CM-Well Security Features Login API Managing CM-Well Users Generate Password API Change Password API","title":"Related Topics"},{"location":"APIReference/Authorization/API.Auth.Login.html","text":"Login Description The _login API call allows you to log into CM-Well and receive a corresponding authentication token. You pass the token to subsequent API calls as the value of the X-CM-WELL-TOKEN HTTP header. This enables the access permissions assigned to your user. Note If you are running a privately compiled version of CM-Well, the default root user name and password are \"root\" and \"root\". By default, tokens are valid for 24 hours after they are created. You can call _login again to receive a new token when the previous one expires. Optionally, you can request a custom expiration period (up to 60 days) when logging in. If you browse to the CM-Well _login endpoint, you will be prompted to enter your username and password in a dialog. If you call _login programatically, you must pass your encoded credentials, using the basic or digest format, in the Authorization HTTP header. Basic authentication credentials: Template: \"Basic \" + Base64( + ':' + ) Example: \"Basic \" + Base64(\"mynewsapp\" + ':' + \"opensesame\") Digest authentication credentials: The digest authentication method is a more complex (and more secure) multiple-step protocol (see Digest Access Authentication to learn more). Syntax URL: CMWellHost /_login REST verb: GET Mandatory parameters: Authorization string (encoding username and password) Template: CMWellHost /_login Or: CMWellHost /_login?exp= expiration period URL example: cm-well-host /_login Curl example (REST API): For Basic authentication: curl -u myUser:myPassword cm-well-host /_login For Digest authentication: curl -u myUser:myPassword --digest cm-well-host /_login Special Parameters Parameter Description Values Example Reference exp The time period before the token expires. Maximum allowed is 60 days. Time string with days (d), hours (h) and minutes (m) integer values. Case-insensitive. Optional separators of any kind (spaces, dashes, etc.) exp=\"30d\", exp=\"3d 5h\", exp=\"2h30m\" N/A Note See Description section for details about constructing the Authorization HTTP header. Code Example Call curl -u myUser:myPassword cm-well-host /_login Results Success: 200 OK { token : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJteVVzZXJuYW1lIiwiZXhwIjoxNDY2NTg5NzYzMDMzLCJyZXYiOjB9.17s3USkZaZYbifXsgmm8eaEmr66SP6udbuUQCLwcWKY } Failure (the user does not exist or the given password doesn't match the user): 401 Unauthorized Not authenticated. 401 - User/Pass don t match. Related Topics CM-Well Security Features","title":"Login"},{"location":"APIReference/Authorization/API.Auth.Login.html#login","text":"","title":"Login"},{"location":"APIReference/Authorization/API.Auth.Login.html#description","text":"The _login API call allows you to log into CM-Well and receive a corresponding authentication token. You pass the token to subsequent API calls as the value of the X-CM-WELL-TOKEN HTTP header. This enables the access permissions assigned to your user. Note If you are running a privately compiled version of CM-Well, the default root user name and password are \"root\" and \"root\". By default, tokens are valid for 24 hours after they are created. You can call _login again to receive a new token when the previous one expires. Optionally, you can request a custom expiration period (up to 60 days) when logging in. If you browse to the CM-Well _login endpoint, you will be prompted to enter your username and password in a dialog. If you call _login programatically, you must pass your encoded credentials, using the basic or digest format, in the Authorization HTTP header. Basic authentication credentials: Template: \"Basic \" + Base64( + ':' + ) Example: \"Basic \" + Base64(\"mynewsapp\" + ':' + \"opensesame\") Digest authentication credentials: The digest authentication method is a more complex (and more secure) multiple-step protocol (see Digest Access Authentication to learn more).","title":"Description"},{"location":"APIReference/Authorization/API.Auth.Login.html#syntax","text":"URL: CMWellHost /_login REST verb: GET Mandatory parameters: Authorization string (encoding username and password) Template: CMWellHost /_login Or: CMWellHost /_login?exp= expiration period URL example: cm-well-host /_login Curl example (REST API): For Basic authentication: curl -u myUser:myPassword cm-well-host /_login For Digest authentication: curl -u myUser:myPassword --digest cm-well-host /_login","title":"Syntax"},{"location":"APIReference/Authorization/API.Auth.Login.html#special-parameters","text":"Parameter Description Values Example Reference exp The time period before the token expires. Maximum allowed is 60 days. Time string with days (d), hours (h) and minutes (m) integer values. Case-insensitive. Optional separators of any kind (spaces, dashes, etc.) exp=\"30d\", exp=\"3d 5h\", exp=\"2h30m\" N/A Note See Description section for details about constructing the Authorization HTTP header.","title":"Special Parameters"},{"location":"APIReference/Authorization/API.Auth.Login.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Authorization/API.Auth.Login.html#call","text":"curl -u myUser:myPassword cm-well-host /_login","title":"Call"},{"location":"APIReference/Authorization/API.Auth.Login.html#results","text":"Success: 200 OK { token : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJteVVzZXJuYW1lIiwiZXhwIjoxNDY2NTg5NzYzMDMzLCJyZXYiOjB9.17s3USkZaZYbifXsgmm8eaEmr66SP6udbuUQCLwcWKY } Failure (the user does not exist or the given password doesn't match the user): 401 Unauthorized Not authenticated. 401 - User/Pass don t match.","title":"Results"},{"location":"APIReference/Authorization/API.Auth.Login.html#related-topics","text":"CM-Well Security Features","title":"Related Topics"},{"location":"APIReference/Get/API.Get.GetMultipleInfotonsByURI.html","text":"Get Multiple Infotons by URI Description Retrieve multiple infotons, by URI, in the same query. Syntax URL: hostURL /_out REST verb: POST Mandatory parameters: Data containing paths of infotons to retrieve. Template: CMWellHost /_out?format= format -d infoton path data URL example: N/A Curl examples (REST API): Plain text input: curl -X POST cm-well-host /_out?format=ntriples -H Content-Type: text/plain -d /example.org/JohnSmith JSON input: curl -X POST cm-well-host /_out?format=ntriples -H Content-Type: application/json -d { type : InfotonPaths , paths :[ /example.org/JohnSmith , /example.org/JaneSmith ] } Code Example Call curl -X POST cm-well-host /_out?format=ntriples -H Content-Type: text/plain --data-binary @curlInput.txt File Contents /example.org/JohnSmith /example.org/JaneSmith Results _ : BretrievablePaths cm - well - host /meta/sys#infotons http://example.org/Individuals/ JohnSmith . _ : BretrievablePaths cm - well - host /meta/sys#irretrievablePaths /example.org/Individuals/ JaneSmith . _:BretrievablePaths cm-well-host/meta/sys#size 1 ^^ http://www.w3.org/2001/XMLSchema#int . _:BretrievablePaths cm-well-host/meta/sys#type RetrievablePaths . http://example.org/Individuals/JohnSmith http://purl.org/vocab/relationship/friendOf http://example.org/Individuals/PeterParker . http://example.org/Individuals/JohnSmith cm-well-host/meta/sys#dataCenter dc1 . http://example.org/Individuals/JohnSmith http://www.lbd.com/bold#active true . http://example.org/Individuals/JohnSmith cm-well-host/meta/sys#uuid aa4726dea9981964553c79b12d643274 . http://example.org/Individuals/JohnSmith cm-well-host/meta/sys#indexTime 1460043319486 ^^ http://www.w3.org/2001/XMLSchema#long . http://example.org/Individuals/JohnSmith cm-well-host/meta/sys#parent /example.org/ Individuals . http://example.org/Individuals/JohnSmith cm-well-host/meta/sys#path /example.org/Individuals/ JohnSmith . http://example.org/Individuals/JohnSmith cm-well-host/meta/sys#type ObjectInfoton . http://example.org/Individuals/JohnSmith cm-well-host/meta/sys#lastModified 2016 - 04 - 07 T15 : 35 : 18.091 Z ^^ http :// www . w3 . org /2001/ XMLSchema # dateTime . http :// example . org /Individuals/JohnSmith http://purl.org/vocab/relationship/parentOf http://example.org/Individuals/ SaraSmith . Note Use the PUT verb as well as the POST verb when directing a call to the _out endpoint. Related Topics Retrieve Single Infoton by URI","title":"Get Multiple Infotons by URI"},{"location":"APIReference/Get/API.Get.GetMultipleInfotonsByURI.html#get-multiple-infotons-by-uri","text":"","title":"Get Multiple Infotons by URI"},{"location":"APIReference/Get/API.Get.GetMultipleInfotonsByURI.html#description","text":"Retrieve multiple infotons, by URI, in the same query.","title":"Description"},{"location":"APIReference/Get/API.Get.GetMultipleInfotonsByURI.html#syntax","text":"URL: hostURL /_out REST verb: POST Mandatory parameters: Data containing paths of infotons to retrieve. Template: CMWellHost /_out?format= format -d infoton path data URL example: N/A Curl examples (REST API): Plain text input: curl -X POST cm-well-host /_out?format=ntriples -H Content-Type: text/plain -d /example.org/JohnSmith JSON input: curl -X POST cm-well-host /_out?format=ntriples -H Content-Type: application/json -d { type : InfotonPaths , paths :[ /example.org/JohnSmith , /example.org/JaneSmith ] }","title":"Syntax"},{"location":"APIReference/Get/API.Get.GetMultipleInfotonsByURI.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Get/API.Get.GetMultipleInfotonsByURI.html#call","text":"curl -X POST cm-well-host /_out?format=ntriples -H Content-Type: text/plain --data-binary @curlInput.txt","title":"Call"},{"location":"APIReference/Get/API.Get.GetMultipleInfotonsByURI.html#file-contents","text":"/example.org/JohnSmith /example.org/JaneSmith","title":"File Contents"},{"location":"APIReference/Get/API.Get.GetMultipleInfotonsByURI.html#results","text":"_ : BretrievablePaths cm - well - host /meta/sys#infotons http://example.org/Individuals/ JohnSmith . _ : BretrievablePaths cm - well - host /meta/sys#irretrievablePaths /example.org/Individuals/ JaneSmith . _:BretrievablePaths cm-well-host/meta/sys#size 1 ^^ http://www.w3.org/2001/XMLSchema#int . _:BretrievablePaths cm-well-host/meta/sys#type RetrievablePaths . http://example.org/Individuals/JohnSmith http://purl.org/vocab/relationship/friendOf http://example.org/Individuals/PeterParker . http://example.org/Individuals/JohnSmith cm-well-host/meta/sys#dataCenter dc1 . http://example.org/Individuals/JohnSmith http://www.lbd.com/bold#active true . http://example.org/Individuals/JohnSmith cm-well-host/meta/sys#uuid aa4726dea9981964553c79b12d643274 . http://example.org/Individuals/JohnSmith cm-well-host/meta/sys#indexTime 1460043319486 ^^ http://www.w3.org/2001/XMLSchema#long . http://example.org/Individuals/JohnSmith cm-well-host/meta/sys#parent /example.org/ Individuals . http://example.org/Individuals/JohnSmith cm-well-host/meta/sys#path /example.org/Individuals/ JohnSmith . http://example.org/Individuals/JohnSmith cm-well-host/meta/sys#type ObjectInfoton . http://example.org/Individuals/JohnSmith cm-well-host/meta/sys#lastModified 2016 - 04 - 07 T15 : 35 : 18.091 Z ^^ http :// www . w3 . org /2001/ XMLSchema # dateTime . http :// example . org /Individuals/JohnSmith http://purl.org/vocab/relationship/parentOf http://example.org/Individuals/ SaraSmith . Note Use the PUT verb as well as the POST verb when directing a call to the _out endpoint.","title":"Results"},{"location":"APIReference/Get/API.Get.GetMultipleInfotonsByURI.html#related-topics","text":"Retrieve Single Infoton by URI","title":"Related Topics"},{"location":"APIReference/Get/API.Get.GetSingleInfotonByURI.html","text":"Get Single Infoton by URI Description If you have an infoton's CM-Well URI (the path in CM-Well pointing to the infoton), you can perform a simple GET command to retrieve all of the infoton's field names and values. Syntax URL: Infoton's URI. REST verb: GET Mandatory parameters: N/A Template: CMWellHost / InfotonPath URL example: cm-well-host /permid.org/1-5050986961 Curl example (REST API): Curl -X GET cm-well-host /permid.org/1-5050986961 Code Example Call cm-well-host /permid.org/1-5050986961?format=ttl Results @ prefix nn : cm-well-host / meta / nn # . @ prefix mdaas : http :// ont . com / mdaas / . @ prefix rdf : http :// www . w3 . org / 1999 / 02 / 22-rdf-syntax-ns # . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix sys : cm-well-host / meta / sys # . @ prefix o : http :// permid . org / . o : 1-5050986961 a mdaas : Organization ; sys : dataCenter dc1 ; sys : indexTime 1463668800037 ^^ xsd : long ; sys : lastModified 2016-05-19T14:39:59.335Z ^^ xsd : dateTime ; sys : parent /permid.org ; sys : path /permid.org/1-5050986961 ; sys : type ObjectInfoton ; sys : uuid 5c7293a6d8af048efd38168a5f624fbd ; mdaas : CommonName URSUS Medical LLC ; mdaas : OrganizationProviderTypeCode 1 ; mdaas : equityInstrumentCount 0 ; mdaas : hasRegistrationAuthority o : 1-5000007206 ; mdaas : instrumentCount 0 ; mdaas : isIncorporatedIn United States @ en ; mdaas : isPublicFlag false ; mdaas : officialName URSUS Medical LLC ; mdaas : organizationFoundedDay 21 ; mdaas : organizationFoundedMonth 4 ; mdaas : organizationFoundedYear 2014 ; mdaas : organizationStatusCode Active ; mdaas : organizationSubtypeCode Company ; mdaas : organizationTypeCode Business Organization ; mdaas : shortName URSUS Medical ; mdaas : subsidiariesCount 0 . Note Paste an infoton's URI in a browser's address bar to see an HTML presentation of the infoton's fields. Each time an infoton is updated, an additional \"historical\" version of the infoton is saved, and the infoton's URL will point to the newest version. Related Topics Basic Queries Get Multiple Infotons by URI","title":"Get Single Infoton by URI"},{"location":"APIReference/Get/API.Get.GetSingleInfotonByURI.html#get-single-infoton-by-uri","text":"","title":"Get Single Infoton by URI"},{"location":"APIReference/Get/API.Get.GetSingleInfotonByURI.html#description","text":"If you have an infoton's CM-Well URI (the path in CM-Well pointing to the infoton), you can perform a simple GET command to retrieve all of the infoton's field names and values.","title":"Description"},{"location":"APIReference/Get/API.Get.GetSingleInfotonByURI.html#syntax","text":"URL: Infoton's URI. REST verb: GET Mandatory parameters: N/A Template: CMWellHost / InfotonPath URL example: cm-well-host /permid.org/1-5050986961 Curl example (REST API): Curl -X GET cm-well-host /permid.org/1-5050986961","title":"Syntax"},{"location":"APIReference/Get/API.Get.GetSingleInfotonByURI.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Get/API.Get.GetSingleInfotonByURI.html#call","text":"cm-well-host /permid.org/1-5050986961?format=ttl","title":"Call"},{"location":"APIReference/Get/API.Get.GetSingleInfotonByURI.html#results","text":"@ prefix nn : cm-well-host / meta / nn # . @ prefix mdaas : http :// ont . com / mdaas / . @ prefix rdf : http :// www . w3 . org / 1999 / 02 / 22-rdf-syntax-ns # . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix sys : cm-well-host / meta / sys # . @ prefix o : http :// permid . org / . o : 1-5050986961 a mdaas : Organization ; sys : dataCenter dc1 ; sys : indexTime 1463668800037 ^^ xsd : long ; sys : lastModified 2016-05-19T14:39:59.335Z ^^ xsd : dateTime ; sys : parent /permid.org ; sys : path /permid.org/1-5050986961 ; sys : type ObjectInfoton ; sys : uuid 5c7293a6d8af048efd38168a5f624fbd ; mdaas : CommonName URSUS Medical LLC ; mdaas : OrganizationProviderTypeCode 1 ; mdaas : equityInstrumentCount 0 ; mdaas : hasRegistrationAuthority o : 1-5000007206 ; mdaas : instrumentCount 0 ; mdaas : isIncorporatedIn United States @ en ; mdaas : isPublicFlag false ; mdaas : officialName URSUS Medical LLC ; mdaas : organizationFoundedDay 21 ; mdaas : organizationFoundedMonth 4 ; mdaas : organizationFoundedYear 2014 ; mdaas : organizationStatusCode Active ; mdaas : organizationSubtypeCode Company ; mdaas : organizationTypeCode Business Organization ; mdaas : shortName URSUS Medical ; mdaas : subsidiariesCount 0 . Note Paste an infoton's URI in a browser's address bar to see an HTML presentation of the infoton's fields. Each time an infoton is updated, an additional \"historical\" version of the infoton is saved, and the infoton's URL will point to the newest version.","title":"Results"},{"location":"APIReference/Get/API.Get.GetSingleInfotonByURI.html#related-topics","text":"Basic Queries Get Multiple Infotons by URI","title":"Related Topics"},{"location":"APIReference/Get/API.Get.GetSingleInfotonByUUID.html","text":"Get Single Infoton by UUID Description Every infoton has a UUID (UUID = Unique Universal IDentifier) field and value, in addition to having a unique URL. The UUID is used to differentiate among different versions of the same infoton. As CM-Well maintains an immutable-data principle, every time an infoton is updated, a new version of it is written, with a new UUID. You can retrieve all historical versions of an infoton by performing a GET action on it while using the with-history flag. Once you have the list of versions, you can retrieve each version using a special path composed of the ii endpoint and the UUID value. Syntax URL: CMWellHost /ii REST verb: GET Mandatory parameters: N/A Template: CMWellHost /ii/ InfotonUUID URL example: cm-well-host /ii/c6d3d9acf8c174b9d1fdc8d16fc43fa6 Curl example (REST API): Curl -X GET cm-well-host /ii/c6d3d9acf8c174b9d1fdc8d16fc43fa6 Code Example Call cm-well-host /ii/c6d3d9acf8c174b9d1fdc8d16fc43fa6?format=ttl Results @ prefix nn : cm-well-host / meta / nn # . @ prefix rdf : http :// www . w3 . org / 1999 / 02 / 22-rdf-syntax-ns # . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix sys : cm-well-host / meta / sys # . @ prefix prov : http :// www . w3 . org / ns / prov # . @ prefix o : http :// data . com / . o : 2-38caa59fd622a62c5449d7d76b91dee7c46827b9eb936abf0ec299f3b7dbe544 a http :// metadata . com / IngestActivity ; sys : dataCenter dc1 ; sys : indexTime 1472776555879 ^^ xsd : long ; sys : lastModified 2016-09-02T00:35:55.040Z ^^ xsd : dateTime ; sys : parent /data.com ; sys : path /data.com/2-38caa59fd622a62c5449d7d76b91dee7c46827b9eb936abf0ec299f3b7dbe544 ; sys : type ObjectInfoton ; sys : uuid c6d3d9acf8c174b9d1fdc8d16fc43fa6 ; prov : endedAt 2016-09-01T19:33:52Z ^^ xsd : dateTime ; prov : startedAt 2016-09-01T19:33:52Z ^^ xsd : dateTime ; prov : wasAssociatedWith urn : com . etl . ld : cmp-ingestor : unspecified . 7831935 : 2016-06-24T10 : 33 : 43-0500 : jenkins-cmp-full-ingest-180 : 180 : 2016-06-24_10-33-22 : shadowJar . Related Topics Get Single Infoton by URI Using the with-history Flag","title":"Get Single Infoton by UUID"},{"location":"APIReference/Get/API.Get.GetSingleInfotonByUUID.html#get-single-infoton-by-uuid","text":"","title":"Get Single Infoton by UUID"},{"location":"APIReference/Get/API.Get.GetSingleInfotonByUUID.html#description","text":"Every infoton has a UUID (UUID = Unique Universal IDentifier) field and value, in addition to having a unique URL. The UUID is used to differentiate among different versions of the same infoton. As CM-Well maintains an immutable-data principle, every time an infoton is updated, a new version of it is written, with a new UUID. You can retrieve all historical versions of an infoton by performing a GET action on it while using the with-history flag. Once you have the list of versions, you can retrieve each version using a special path composed of the ii endpoint and the UUID value.","title":"Description"},{"location":"APIReference/Get/API.Get.GetSingleInfotonByUUID.html#syntax","text":"URL: CMWellHost /ii REST verb: GET Mandatory parameters: N/A Template: CMWellHost /ii/ InfotonUUID URL example: cm-well-host /ii/c6d3d9acf8c174b9d1fdc8d16fc43fa6 Curl example (REST API): Curl -X GET cm-well-host /ii/c6d3d9acf8c174b9d1fdc8d16fc43fa6","title":"Syntax"},{"location":"APIReference/Get/API.Get.GetSingleInfotonByUUID.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Get/API.Get.GetSingleInfotonByUUID.html#call","text":"cm-well-host /ii/c6d3d9acf8c174b9d1fdc8d16fc43fa6?format=ttl","title":"Call"},{"location":"APIReference/Get/API.Get.GetSingleInfotonByUUID.html#results","text":"@ prefix nn : cm-well-host / meta / nn # . @ prefix rdf : http :// www . w3 . org / 1999 / 02 / 22-rdf-syntax-ns # . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix sys : cm-well-host / meta / sys # . @ prefix prov : http :// www . w3 . org / ns / prov # . @ prefix o : http :// data . com / . o : 2-38caa59fd622a62c5449d7d76b91dee7c46827b9eb936abf0ec299f3b7dbe544 a http :// metadata . com / IngestActivity ; sys : dataCenter dc1 ; sys : indexTime 1472776555879 ^^ xsd : long ; sys : lastModified 2016-09-02T00:35:55.040Z ^^ xsd : dateTime ; sys : parent /data.com ; sys : path /data.com/2-38caa59fd622a62c5449d7d76b91dee7c46827b9eb936abf0ec299f3b7dbe544 ; sys : type ObjectInfoton ; sys : uuid c6d3d9acf8c174b9d1fdc8d16fc43fa6 ; prov : endedAt 2016-09-01T19:33:52Z ^^ xsd : dateTime ; prov : startedAt 2016-09-01T19:33:52Z ^^ xsd : dateTime ; prov : wasAssociatedWith urn : com . etl . ld : cmp-ingestor : unspecified . 7831935 : 2016-06-24T10 : 33 : 43-0500 : jenkins-cmp-full-ingest-180 : 180 : 2016-06-24_10-33-22 : shadowJar .","title":"Results"},{"location":"APIReference/Get/API.Get.GetSingleInfotonByUUID.html#related-topics","text":"Get Single Infoton by URI Using the with-history Flag","title":"Related Topics"},{"location":"APIReference/Query/API.Query.ApplyGremlinToQueryResults.html","text":"Apply Gremlin to Query Results Description Gremlin is a graph traversal language that provides a convenient, compact syntax for performing queries on graphs. It is a DSL (Domain Specific Language) on top of the Groovy programming language (thus it uses the Groovy syntax). CM-Well supports a plugin that allows you to apply Gremlin queries to infotons. A Gremlin query to CM-Well has two parts. The first part is a set of paths within CM-Well on which you want to run the Gremlin query. The \"paths\" are in fact regular queries to CM-Well, which produce a list of infotons. After retrieving this list, CM-Well applies the second part - the Gremlin query - to the list. When CM-Well retrieves the list of infotons defined by the PATHS section of your query, it assigns the list as the value of the Groovy variable \"g\". You can then use the \"g\" variable to run the Gremlin query (see example below). Literal infoton field values are mapped to Vertex Properties as follows: Scalar values are mapped as simple key/value pairs. Multiple values of the same field are implemented as arrays. Syntax URL: CMWellHost /_sp REST verb: POST Mandatory parameters: PATHS section, Gremlin section (see below) Template: CMWellHost /_sp? PATHS CMWellPath with query parameters, one per line CMWellPath with query parameters, one per line CMWellPath with query parameters, one per line ... empty line Gremlin Gremlin query Note Unlike the SPARQL plugin, the Gremlin plugin does not support multiple Gremlin queries in a single call. URL example: N/A Curl example (REST API): See Code Example. Code Example The query example refers to this input data: curl -X POST cm-well-host /_in?format=nquads -H Content-Type: text/plain --data-binary @curlInput.txt File Contents http://example.org/Individuals/DaisyDuck http://purl.org/vocab/relationship/colleagueOf http://example.org/Individuals/BruceWayne . http://example.org/Individuals/DaisyDuck http://www.lbd.com/bold#active false . http://example.org/Individuals/BruceWayne http://purl.org/vocab/relationship/employedBy http://example.org/Individuals/DonaldDuck . http://example.org/Individuals/BruceWayne http://www.lbd.com/bold#active true . http://example.org/Individuals/DonaldDuck http://purl.org/vocab/relationship/mentorOf http://example.org/Individuals/JohnSmith . http://example.org/Individuals/DonaldDuck http://purl.org/vocab/relationship/knowsByReputation http://example.org/Individuals/MartinOdersky . http://example.org/Individuals/DonaldDuck http://www.lbd.com/bold#active true . http://example.org/Individuals/JohnSmith http://purl.org/vocab/relationship/friendOf http://example.org/Individuals/PeterParker http://example.org/graphs/spiderman . http://example.org/Individuals/JohnSmith http://purl.org/vocab/relationship/parentOf http://example.org/Individuals/SaraSmith http://example.org/graphs/spiderman . http://example.org/Individuals/JohnSmith http://www.lbd.com/bold#active true . http://example.org/Individuals/SaraSmith http://purl.org/vocab/relationship/siblingOf http://example.org/Individuals/RebbecaSmith . http://example.org/Individuals/SaraSmith http://www.lbd.com/bold#active true . http://example.org/Individuals/RebbecaSmith http://purl.org/vocab/relationship/siblingOf http://example.org/Individuals/SaraSmith . http://example.org/Individuals/RebbecaSmith http://www.lbd.com/bold#active false . http://example.org/Individuals/PeterParker http://purl.org/vocab/relationship/worksWith http://example.org/Individuals/HarryMiller . http://example.org/Individuals/PeterParker http://purl.org/vocab/relationship/neighborOf http://example.org/Individuals/ClarkKent . http://example.org/Individuals/PeterParker http://www.lbd.com/bold#active true . http://example.org/Individuals/HarryMiller http://purl.org/vocab/relationship/parentOf http://example.org/Individuals/NatalieMiller . http://example.org/Individuals/HarryMiller http://www.lbd.com/bold#active true . http://example.org/Individuals/NatalieMiller http://purl.org/vocab/relationship/childOf http://example.org/Individuals/HarryMiller . http://example.org/Individuals/NatalieMiller http://www.lbd.com/bold#active true . http://example.org/Individuals/MartinOdersky http://purl.org/vocab/relationship/collaboratesWith http://example.org/Individuals/RonaldKhun . http://example.org/Individuals/MartinOdersky http://www.lbd.com/bold#active true . http://example.org/Individuals/RonaldKhun http://purl.org/vocab/relationship/collaboratesWith http://example.org/Individuals/MartinOdersky . http://example.org/Individuals/RonaldKhun http://www.lbd.com/bold#active true . http://example.org/Individuals/RonaldKhun http://www.lbd.com/bold#category deals . http://example.org/Individuals/RonaldKhun http://www.lbd.com/bold#category news . Call curl -X POST cm-well-host /_sp --data-binary @curlInput.txt File Contents PATHS /example.org/Individuals?op=search length=1000 with-data /example.org/Individuals/RonaldKhun /example.org/Individuals/JohnSmith?xg=3 Gremlin g.v( http://example.org/Individuals/PeterParker ).outE.inV.filter{it.id.matches( .*Miller.* )}.outE.inV Results v[http://example.org/Individuals/NatalieMiller] Note When referring to field names in Gremlin queries, you must use the full URI notation. When applying a Gremlin query to CM-Well data, there is no option to choose the output format. Output is formatted according to the Gremlin engine's default. Related Topics Apply SPARQL to Query Results","title":"Apply Gremlin to Query Results"},{"location":"APIReference/Query/API.Query.ApplyGremlinToQueryResults.html#apply-gremlin-to-query-results","text":"","title":"Apply Gremlin to Query Results"},{"location":"APIReference/Query/API.Query.ApplyGremlinToQueryResults.html#description","text":"Gremlin is a graph traversal language that provides a convenient, compact syntax for performing queries on graphs. It is a DSL (Domain Specific Language) on top of the Groovy programming language (thus it uses the Groovy syntax). CM-Well supports a plugin that allows you to apply Gremlin queries to infotons. A Gremlin query to CM-Well has two parts. The first part is a set of paths within CM-Well on which you want to run the Gremlin query. The \"paths\" are in fact regular queries to CM-Well, which produce a list of infotons. After retrieving this list, CM-Well applies the second part - the Gremlin query - to the list. When CM-Well retrieves the list of infotons defined by the PATHS section of your query, it assigns the list as the value of the Groovy variable \"g\". You can then use the \"g\" variable to run the Gremlin query (see example below). Literal infoton field values are mapped to Vertex Properties as follows: Scalar values are mapped as simple key/value pairs. Multiple values of the same field are implemented as arrays.","title":"Description"},{"location":"APIReference/Query/API.Query.ApplyGremlinToQueryResults.html#syntax","text":"URL: CMWellHost /_sp REST verb: POST Mandatory parameters: PATHS section, Gremlin section (see below) Template: CMWellHost /_sp? PATHS CMWellPath with query parameters, one per line CMWellPath with query parameters, one per line CMWellPath with query parameters, one per line ... empty line Gremlin Gremlin query Note Unlike the SPARQL plugin, the Gremlin plugin does not support multiple Gremlin queries in a single call. URL example: N/A Curl example (REST API): See Code Example.","title":"Syntax"},{"location":"APIReference/Query/API.Query.ApplyGremlinToQueryResults.html#code-example","text":"The query example refers to this input data: curl -X POST cm-well-host /_in?format=nquads -H Content-Type: text/plain --data-binary @curlInput.txt","title":"Code Example"},{"location":"APIReference/Query/API.Query.ApplyGremlinToQueryResults.html#file-contents","text":"http://example.org/Individuals/DaisyDuck http://purl.org/vocab/relationship/colleagueOf http://example.org/Individuals/BruceWayne . http://example.org/Individuals/DaisyDuck http://www.lbd.com/bold#active false . http://example.org/Individuals/BruceWayne http://purl.org/vocab/relationship/employedBy http://example.org/Individuals/DonaldDuck . http://example.org/Individuals/BruceWayne http://www.lbd.com/bold#active true . http://example.org/Individuals/DonaldDuck http://purl.org/vocab/relationship/mentorOf http://example.org/Individuals/JohnSmith . http://example.org/Individuals/DonaldDuck http://purl.org/vocab/relationship/knowsByReputation http://example.org/Individuals/MartinOdersky . http://example.org/Individuals/DonaldDuck http://www.lbd.com/bold#active true . http://example.org/Individuals/JohnSmith http://purl.org/vocab/relationship/friendOf http://example.org/Individuals/PeterParker http://example.org/graphs/spiderman . http://example.org/Individuals/JohnSmith http://purl.org/vocab/relationship/parentOf http://example.org/Individuals/SaraSmith http://example.org/graphs/spiderman . http://example.org/Individuals/JohnSmith http://www.lbd.com/bold#active true . http://example.org/Individuals/SaraSmith http://purl.org/vocab/relationship/siblingOf http://example.org/Individuals/RebbecaSmith . http://example.org/Individuals/SaraSmith http://www.lbd.com/bold#active true . http://example.org/Individuals/RebbecaSmith http://purl.org/vocab/relationship/siblingOf http://example.org/Individuals/SaraSmith . http://example.org/Individuals/RebbecaSmith http://www.lbd.com/bold#active false . http://example.org/Individuals/PeterParker http://purl.org/vocab/relationship/worksWith http://example.org/Individuals/HarryMiller . http://example.org/Individuals/PeterParker http://purl.org/vocab/relationship/neighborOf http://example.org/Individuals/ClarkKent . http://example.org/Individuals/PeterParker http://www.lbd.com/bold#active true . http://example.org/Individuals/HarryMiller http://purl.org/vocab/relationship/parentOf http://example.org/Individuals/NatalieMiller . http://example.org/Individuals/HarryMiller http://www.lbd.com/bold#active true . http://example.org/Individuals/NatalieMiller http://purl.org/vocab/relationship/childOf http://example.org/Individuals/HarryMiller . http://example.org/Individuals/NatalieMiller http://www.lbd.com/bold#active true . http://example.org/Individuals/MartinOdersky http://purl.org/vocab/relationship/collaboratesWith http://example.org/Individuals/RonaldKhun . http://example.org/Individuals/MartinOdersky http://www.lbd.com/bold#active true . http://example.org/Individuals/RonaldKhun http://purl.org/vocab/relationship/collaboratesWith http://example.org/Individuals/MartinOdersky . http://example.org/Individuals/RonaldKhun http://www.lbd.com/bold#active true . http://example.org/Individuals/RonaldKhun http://www.lbd.com/bold#category deals . http://example.org/Individuals/RonaldKhun http://www.lbd.com/bold#category news .","title":"File Contents"},{"location":"APIReference/Query/API.Query.ApplyGremlinToQueryResults.html#call","text":"curl -X POST cm-well-host /_sp --data-binary @curlInput.txt","title":"Call"},{"location":"APIReference/Query/API.Query.ApplyGremlinToQueryResults.html#file-contents_1","text":"PATHS /example.org/Individuals?op=search length=1000 with-data /example.org/Individuals/RonaldKhun /example.org/Individuals/JohnSmith?xg=3 Gremlin g.v( http://example.org/Individuals/PeterParker ).outE.inV.filter{it.id.matches( .*Miller.* )}.outE.inV","title":"File Contents"},{"location":"APIReference/Query/API.Query.ApplyGremlinToQueryResults.html#results","text":"v[http://example.org/Individuals/NatalieMiller] Note When referring to field names in Gremlin queries, you must use the full URI notation. When applying a Gremlin query to CM-Well data, there is no option to choose the output format. Output is formatted according to the Gremlin engine's default.","title":"Results"},{"location":"APIReference/Query/API.Query.ApplyGremlinToQueryResults.html#related-topics","text":"Apply SPARQL to Query Results","title":"Related Topics"},{"location":"APIReference/Query/API.Query.ApplySPARQLToEntireGraph.html","text":"Apply SPARQL to the Entire Graph Description SPARQL (SPARQL Protocol and RDF Query Language - pronounced \"sparkle\") is an industry-standard query language designed to work with graph databases. It is similar in syntax to SQL. You can use SPARQL queries on CM-Well in order to apply database operations to infotons, which are the type of \"database records\" that CM-Well provides. You can apply SPARQL queries to specific paths within the CM-Well graph, using the _sp endpoint (see Apply SPARQL to Query Results ). The _sparql endpoint initiates a query that is optimized to handle the entire CM-Well graph. Use this endpoint when you want to process the whole graph and not just specific paths within it. Syntax URL: CMWellHost /_sparql REST verb: POST Mandatory parameters: SPARQL query (see below) Template: CMWellHost /_sparql SPARQL query URL example: N/A Curl example (REST API): See Code Example. Special Parameters See CM-Well Query Parameters to learn more about CM-Well query syntax. In addition, here are some special parameters you can add to a SPARQL query: Parameter Description verbose Displays information about the query planning and execution runtimes. intermediate-limit Using this limit causes triples to be fetched in iterative batches of this size. This may help return at least partial results (rather than just getting a timeout), in case of large result sets. The value must be a positive integer. results-limit Limits the number of results returned. The value must be a positive integer. explain-only You can use this flag to see CM-Well's query optimization and execution plan, without actually running the query. See Using the explain-only Flag below for more details. Code Example Call curl -X POST cm-well-host /_sparql?verbose results-limit=5 --data-binary @curlInput.txt File Contents SELECT DISTINCT ?name ?active WHERE { ?name http://www.tr-lbd.com/bold#active ?active . } ORDER BY DESC(?active) Results [Plan 43] 00:00:00.093 Planning started. [Plan 43] 00:00:05.399 Planning completed. [Exec 43] 00:00:05.400 Executing started. [Exec 43] 00:00:05.944 Executing completed. ----------------------------------------------------------- | name | active | =========================================================== | http://example.org/Individuals/BruceWayne | true | | http://example.org/Individuals/DonaldDuck | true | | http://example.org/Individuals/HarryMiller | true | | http://example.org/Individuals/JohnSmith | true | | http://example.org/Individuals/MartinOdersky | true | ----------------------------------------------------------- Using the explain-only Flag You can use the optional explain-only flag to see CM-Well's query optimization and execution plan, without actually running the query. You might want to use this option to investigate why you're getting unexpected results from a whole-graph query, or when composing a new query, to understand how the query will be executed. Using the explain-only flag displays the following information for the query: The Abstract Syntax Tree of the given query, in Server-Sent Events format. The count results of the different object types in the query. Sorted Triple Patterns - the output of the optimizer before executing the ARQ query. Note The explain-only output uses the internal CM-Well namespace representation. Here is an example of the output that is produced when you use the explain-only flag: [Expl] 00:00:00.001 AST: (prefix ((data: http://data.com/ ) (metadata: http://data.schemas.financial.com/metadata/2009-09-01/ )) (project (?x ?name) (order (?name) (bgp (triple ?typebridge metadata:geographyType data:1-308005) (triple ?x metadata:geographyType ?typebridge) (triple ?x metadata:geographyUniqueName ?name) )))) [Expl] 00:00:00.017 Objects count for geographyType.NWadZg: 324749 [Expl] 00:00:00.035 Objects count for geographyUniqueName.NWadZg: 162148 [Expl] 00:00:00.080 Sorted Triple Patterns: ?x @geographyUniqueName.NWadZg ?name ?typebridge @geographyType.NWadZg http://data.com/1-308005 ?x @geographyType.NWadZg ?typebridge Note Queries to the _sparql endpoint will time out if not completed within 90 seconds. This feature is currently in beta - not all queries will return Queries on quads are not yet supported for the _sparql endpoint. If only partial results are returned due to a timeout, a message stating this appears in the output. Currently, the only SPARQL operations that CM-Well supports are SELECT and CONSTRUCT. Using the SPARQL OPTIONAL and FILTER options is very expensive when performed on the entire graph. Avoid using these options if possible. When referring to field names in SPARQL queries, you must use the full URI notation. The _sparql endpoint does not support multiple output formats, and will ignore any value passed in the format parameter. Results of SELECT commands are sent in ASCII, and results of CONSTRUCT commands are sent as ntriples. To learn how to upload and use SPARQL \"stored procedures\", see Using SPARQL on CM-Well Infotons . Related Topics Using SPARQL on CM-Well Infotons Apply SPARQL to Query Results","title":"Apply SPARQL to the Entire Graph"},{"location":"APIReference/Query/API.Query.ApplySPARQLToEntireGraph.html#apply-sparql-to-the-entire-graph","text":"","title":"Apply SPARQL to the Entire Graph"},{"location":"APIReference/Query/API.Query.ApplySPARQLToEntireGraph.html#description","text":"SPARQL (SPARQL Protocol and RDF Query Language - pronounced \"sparkle\") is an industry-standard query language designed to work with graph databases. It is similar in syntax to SQL. You can use SPARQL queries on CM-Well in order to apply database operations to infotons, which are the type of \"database records\" that CM-Well provides. You can apply SPARQL queries to specific paths within the CM-Well graph, using the _sp endpoint (see Apply SPARQL to Query Results ). The _sparql endpoint initiates a query that is optimized to handle the entire CM-Well graph. Use this endpoint when you want to process the whole graph and not just specific paths within it.","title":"Description"},{"location":"APIReference/Query/API.Query.ApplySPARQLToEntireGraph.html#syntax","text":"URL: CMWellHost /_sparql REST verb: POST Mandatory parameters: SPARQL query (see below) Template: CMWellHost /_sparql SPARQL query URL example: N/A Curl example (REST API): See Code Example.","title":"Syntax"},{"location":"APIReference/Query/API.Query.ApplySPARQLToEntireGraph.html#special-parameters","text":"See CM-Well Query Parameters to learn more about CM-Well query syntax. In addition, here are some special parameters you can add to a SPARQL query: Parameter Description verbose Displays information about the query planning and execution runtimes. intermediate-limit Using this limit causes triples to be fetched in iterative batches of this size. This may help return at least partial results (rather than just getting a timeout), in case of large result sets. The value must be a positive integer. results-limit Limits the number of results returned. The value must be a positive integer. explain-only You can use this flag to see CM-Well's query optimization and execution plan, without actually running the query. See Using the explain-only Flag below for more details.","title":"Special Parameters"},{"location":"APIReference/Query/API.Query.ApplySPARQLToEntireGraph.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Query/API.Query.ApplySPARQLToEntireGraph.html#call","text":"curl -X POST cm-well-host /_sparql?verbose results-limit=5 --data-binary @curlInput.txt","title":"Call"},{"location":"APIReference/Query/API.Query.ApplySPARQLToEntireGraph.html#file-contents","text":"SELECT DISTINCT ?name ?active WHERE { ?name http://www.tr-lbd.com/bold#active ?active . } ORDER BY DESC(?active)","title":"File Contents"},{"location":"APIReference/Query/API.Query.ApplySPARQLToEntireGraph.html#results","text":"[Plan 43] 00:00:00.093 Planning started. [Plan 43] 00:00:05.399 Planning completed. [Exec 43] 00:00:05.400 Executing started. [Exec 43] 00:00:05.944 Executing completed. ----------------------------------------------------------- | name | active | =========================================================== | http://example.org/Individuals/BruceWayne | true | | http://example.org/Individuals/DonaldDuck | true | | http://example.org/Individuals/HarryMiller | true | | http://example.org/Individuals/JohnSmith | true | | http://example.org/Individuals/MartinOdersky | true | -----------------------------------------------------------","title":"Results"},{"location":"APIReference/Query/API.Query.ApplySPARQLToEntireGraph.html#using-the-explain-only-flag","text":"You can use the optional explain-only flag to see CM-Well's query optimization and execution plan, without actually running the query. You might want to use this option to investigate why you're getting unexpected results from a whole-graph query, or when composing a new query, to understand how the query will be executed. Using the explain-only flag displays the following information for the query: The Abstract Syntax Tree of the given query, in Server-Sent Events format. The count results of the different object types in the query. Sorted Triple Patterns - the output of the optimizer before executing the ARQ query. Note The explain-only output uses the internal CM-Well namespace representation. Here is an example of the output that is produced when you use the explain-only flag: [Expl] 00:00:00.001 AST: (prefix ((data: http://data.com/ ) (metadata: http://data.schemas.financial.com/metadata/2009-09-01/ )) (project (?x ?name) (order (?name) (bgp (triple ?typebridge metadata:geographyType data:1-308005) (triple ?x metadata:geographyType ?typebridge) (triple ?x metadata:geographyUniqueName ?name) )))) [Expl] 00:00:00.017 Objects count for geographyType.NWadZg: 324749 [Expl] 00:00:00.035 Objects count for geographyUniqueName.NWadZg: 162148 [Expl] 00:00:00.080 Sorted Triple Patterns: ?x @geographyUniqueName.NWadZg ?name ?typebridge @geographyType.NWadZg http://data.com/1-308005 ?x @geographyType.NWadZg ?typebridge Note Queries to the _sparql endpoint will time out if not completed within 90 seconds. This feature is currently in beta - not all queries will return Queries on quads are not yet supported for the _sparql endpoint. If only partial results are returned due to a timeout, a message stating this appears in the output. Currently, the only SPARQL operations that CM-Well supports are SELECT and CONSTRUCT. Using the SPARQL OPTIONAL and FILTER options is very expensive when performed on the entire graph. Avoid using these options if possible. When referring to field names in SPARQL queries, you must use the full URI notation. The _sparql endpoint does not support multiple output formats, and will ignore any value passed in the format parameter. Results of SELECT commands are sent in ASCII, and results of CONSTRUCT commands are sent as ntriples. To learn how to upload and use SPARQL \"stored procedures\", see Using SPARQL on CM-Well Infotons .","title":"Using the explain-only Flag"},{"location":"APIReference/Query/API.Query.ApplySPARQLToEntireGraph.html#related-topics","text":"Using SPARQL on CM-Well Infotons Apply SPARQL to Query Results","title":"Related Topics"},{"location":"APIReference/Query/API.Query.ApplySPARQLToQueryResults.html","text":"Apply SPARQL to Query Results Description SPARQL (SPARQL Protocol and RDF Query Language - pronounced \"sparkle\") is an industry-standard query language designed to work with graph databases. It is similar in syntax to SQL. You can use SPARQL queries on CM-Well in order to apply database operations to infotons, which are the type of \"database records\" that CM-Well provides. A SPARQL query to CM-Well has two parts. The first part is a set of paths within CM-Well on which you want to run the SPARQL query. The \"paths\" are in fact regular queries to CM-Well, which produce a list of infotons. After retrieving this list, CM-Well applies the second part - the SPARQL query - to the list. See Using SPARQL on CM-Well Infotons for detailed explanations and examples. Syntax URL: cm-well-host /_sp REST verb: POST Mandatory parameters: PATHS section, SPARQL section (see below) Template: cm-well-host /_sp PATHS CMWellPath with query parameters, one per line CMWellPath with query parameters, one per line CMWellPath with query parameters, one per line ... empty line SPARQL SPARQL query - one or several separated by empty lines SPARQL query SPARQL query ... URL example: N/A Curl example (REST API): See Code Example. Special Parameters Each line in the PATHS section is a query to CM-Well, and its syntax is identical to that of a regular (non-SPARQL) query. See CM-Well Query Parameters to learn more about CM-Well query syntax. In addition, here are some special parameters you can add to a SPARQL query: Parameter Description quads Returns RDF \"quadruples\" rather than \"triples\", meaning that in addition to the subject, predicate and object, it also returns the graph name for each triple. verbose Returns the time-metrics of data retrieval and processing operations, as well as the data itself. show-graph Shows the list of infotons, which are the result of the initial CM-Well query (and the input to the SPARQL query). Code Example Call curl -X POST cm-well-host /_sp?format=ascii @curlInput.txt File Contents PATHS /example.org/Individuals?op=search length=1000 with-data /example.org/Individuals/RonaldKhun /example.org/Individuals/JohnSmith?xg=3 SPARQL SELECT DISTINCT ?name ?active WHERE { ?name http://www.lbd.com/bold#active ?active . } ORDER BY DESC(?active) Note The empty line between the end of the paths and the \"SPARQL\" header is mandatory. Results ------------------------------------------------------------- | name| active | ============================================================= | http://example.org/Individuals/BruceWayne | true | | http://example.org/Individuals/DonaldDuck | true | | http://example.org/Individuals/HarryMiller | true | | http://example.org/Individuals/JohnSmith | true | | http://example.org/Individuals/MartinOdersky | true | | http://example.org/Individuals/NatalieMiller | true | | http://example.org/Individuals/PeterParker | true | | http://example.org/Individuals/RonaldKhun | true | | http://example.org/Individuals/SaraSmith | true | | http://example.org/Individuals/DaisyDuck | false | | http://example.org/Individuals/RebbecaSmith | false | ------------------------------------------------------------- Note Currently, the only SPARQL operations that CM-Well supports are SELECT and CONSTRUCT. When referring to field names in SPARQL queries, you must use the full URI notation. For SPARQL queries, you must use the header \u201cContent Type: text/plain\u201d. If you need to include non-English characters in a SPARQL query (including the PATHS sections), add the Content Type: text/plain;charset=utf-8 header to the HTTP request. If you choose to URL-encode the non-English characters, make sure to encode all of them (don't mix URL-encoded and non-encoded characters in the same query). This is because once CM-Well detects URL-encoding, it will assume that all characters are URL-encoded. Only the following output formats are supported for SPARQL queries: ascii, json, rdf, tsv, xml. To learn how to upload and use SPARQL \"stored procedures\", see Using SPARQL on CM-Well Infotons . Related Topics Using SPARQL on CM-Well Infotons","title":"Apply SPARQL to Query Results"},{"location":"APIReference/Query/API.Query.ApplySPARQLToQueryResults.html#apply-sparql-to-query-results","text":"","title":"Apply SPARQL to Query Results"},{"location":"APIReference/Query/API.Query.ApplySPARQLToQueryResults.html#description","text":"SPARQL (SPARQL Protocol and RDF Query Language - pronounced \"sparkle\") is an industry-standard query language designed to work with graph databases. It is similar in syntax to SQL. You can use SPARQL queries on CM-Well in order to apply database operations to infotons, which are the type of \"database records\" that CM-Well provides. A SPARQL query to CM-Well has two parts. The first part is a set of paths within CM-Well on which you want to run the SPARQL query. The \"paths\" are in fact regular queries to CM-Well, which produce a list of infotons. After retrieving this list, CM-Well applies the second part - the SPARQL query - to the list. See Using SPARQL on CM-Well Infotons for detailed explanations and examples.","title":"Description"},{"location":"APIReference/Query/API.Query.ApplySPARQLToQueryResults.html#syntax","text":"URL: cm-well-host /_sp REST verb: POST Mandatory parameters: PATHS section, SPARQL section (see below) Template: cm-well-host /_sp PATHS CMWellPath with query parameters, one per line CMWellPath with query parameters, one per line CMWellPath with query parameters, one per line ... empty line SPARQL SPARQL query - one or several separated by empty lines SPARQL query SPARQL query ... URL example: N/A Curl example (REST API): See Code Example.","title":"Syntax"},{"location":"APIReference/Query/API.Query.ApplySPARQLToQueryResults.html#special-parameters","text":"Each line in the PATHS section is a query to CM-Well, and its syntax is identical to that of a regular (non-SPARQL) query. See CM-Well Query Parameters to learn more about CM-Well query syntax. In addition, here are some special parameters you can add to a SPARQL query: Parameter Description quads Returns RDF \"quadruples\" rather than \"triples\", meaning that in addition to the subject, predicate and object, it also returns the graph name for each triple. verbose Returns the time-metrics of data retrieval and processing operations, as well as the data itself. show-graph Shows the list of infotons, which are the result of the initial CM-Well query (and the input to the SPARQL query).","title":"Special Parameters"},{"location":"APIReference/Query/API.Query.ApplySPARQLToQueryResults.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Query/API.Query.ApplySPARQLToQueryResults.html#call","text":"curl -X POST cm-well-host /_sp?format=ascii @curlInput.txt","title":"Call"},{"location":"APIReference/Query/API.Query.ApplySPARQLToQueryResults.html#file-contents","text":"PATHS /example.org/Individuals?op=search length=1000 with-data /example.org/Individuals/RonaldKhun /example.org/Individuals/JohnSmith?xg=3 SPARQL SELECT DISTINCT ?name ?active WHERE { ?name http://www.lbd.com/bold#active ?active . } ORDER BY DESC(?active) Note The empty line between the end of the paths and the \"SPARQL\" header is mandatory.","title":"File Contents"},{"location":"APIReference/Query/API.Query.ApplySPARQLToQueryResults.html#results","text":"------------------------------------------------------------- | name| active | ============================================================= | http://example.org/Individuals/BruceWayne | true | | http://example.org/Individuals/DonaldDuck | true | | http://example.org/Individuals/HarryMiller | true | | http://example.org/Individuals/JohnSmith | true | | http://example.org/Individuals/MartinOdersky | true | | http://example.org/Individuals/NatalieMiller | true | | http://example.org/Individuals/PeterParker | true | | http://example.org/Individuals/RonaldKhun | true | | http://example.org/Individuals/SaraSmith | true | | http://example.org/Individuals/DaisyDuck | false | | http://example.org/Individuals/RebbecaSmith | false | ------------------------------------------------------------- Note Currently, the only SPARQL operations that CM-Well supports are SELECT and CONSTRUCT. When referring to field names in SPARQL queries, you must use the full URI notation. For SPARQL queries, you must use the header \u201cContent Type: text/plain\u201d. If you need to include non-English characters in a SPARQL query (including the PATHS sections), add the Content Type: text/plain;charset=utf-8 header to the HTTP request. If you choose to URL-encode the non-English characters, make sure to encode all of them (don't mix URL-encoded and non-encoded characters in the same query). This is because once CM-Well detects URL-encoding, it will assume that all characters are URL-encoded. Only the following output formats are supported for SPARQL queries: ascii, json, rdf, tsv, xml. To learn how to upload and use SPARQL \"stored procedures\", see Using SPARQL on CM-Well Infotons .","title":"Results"},{"location":"APIReference/Query/API.Query.ApplySPARQLToQueryResults.html#related-topics","text":"Using SPARQL on CM-Well Infotons","title":"Related Topics"},{"location":"APIReference/Query/API.Query.DataStatistics.html","text":"Query with Data Statistics Description Elastic Search is the underlying search engine that CM-Well uses when performing a query (which involves a full-text search on infoton field values). Elastic Search supports several types of statistical metrics of field values within a given group of infotons. For example, using statistical features, you can discover how many distinct values there are for a certain field in a certain group of infotons. (The Elastic Search statistical feature is called \"aggregations\", and you may see some references to this term in the search syntax and results.) CM-Well passes the statistical query to Elastic Search, which performs the analysis and returns its results, which are passed back to the caller. You can learn more about Elastic Search aggregation options here . Note You can use all the regular CM-Well query parameters such as qp , recursive , date filters and so on, before applying a statistical query. The statistical analysis is applied on the subset of the data that passes the filters. Syntax URL: hostURL / PATH REST verb: GET Mandatory parameters: op=stats ap=type: statsType ,field: statsField Template: cmwellPath ?op=stats ap=type: statsType ,field: statsField ,name: outputName format= outputFormat URL example: cm-well-host /permid.org?op=stats ap=type:card,name:MyCurrencyStats,field:iso4217.currency format=json pretty Curl example (REST API): Curl -X GET cm-well-host /permid.org?op=stats ap=type:card,name:MyCurrencyStats,field:iso4217.currency format=json pretty Special Parameters Parameter Description Values Example ap Aggregation parameters that define the statistical query type and field. See below in this table. type The type of statistical query to perform. See Using Elastic Search Statistics to learn more. card, stats, term, sig ap=type:card name Optional. If supplied, its value is returned as the name value in the response. Any string ap=name:MyQueryName field The name of the field on whose values you want to apply the query. Any valid CM-Well field name ap=field:CommonName.mdaas Code Example Call curl cm-well-host /permid.org?op=stats ap=type:card,name:MyCurrencyStats,field:iso4217.currency format=json pretty Results { AggregationResponse : [ { name : MyCurrencyStats , type : CardinalityAggregationResponse , filter : { name : MyCurrencyStats , type : CardinalityAggregation , field : iso4217.currency }, count : 266 } ] } Note All counts returned by statistical queries are approximate . This is because Elastic Search is a distributed application, and data updates may take time to replicate on all machines. Usually counts are accurate to within 5%-10% of the true value. Accuracy is affected by the optional precision_threshold parameter. The values defined in ap (aggregation parameters) are passed on to Elastic Search as they are. The aggregation parameters must be passed in this order: Type Parameter Order Defaults term type:term[,name:MyName],field(:|::)MyFieldName[,size:MySize][subaggregations] size = 10 sig type:sig[,name:MyName],field(:|::)MyFieldName[,backgroundTerm:FieldName*Value][,minDocCount:MyCount][,size:MySize][subaggregations] size = 10, minDocCount = 10 card type:card[,name:MyName],field(:|::)MyFieldName[,precisionThreshold:MyLong] stats type:stats[,name:MyName],field(:|::)MyFieldName The output format must be one of: csv, json, jsonl. When using sub-queries, you can only request a total of 2 queries with the csv format, as a table only has 2 dimensions. For larger numbers of queries, use the json format, which has no limit on its nesting levels. Related Topics Using Elastic Search Statistics","title":"Query with Data Statistics"},{"location":"APIReference/Query/API.Query.DataStatistics.html#query-with-data-statistics","text":"","title":"Query with Data Statistics"},{"location":"APIReference/Query/API.Query.DataStatistics.html#description","text":"Elastic Search is the underlying search engine that CM-Well uses when performing a query (which involves a full-text search on infoton field values). Elastic Search supports several types of statistical metrics of field values within a given group of infotons. For example, using statistical features, you can discover how many distinct values there are for a certain field in a certain group of infotons. (The Elastic Search statistical feature is called \"aggregations\", and you may see some references to this term in the search syntax and results.) CM-Well passes the statistical query to Elastic Search, which performs the analysis and returns its results, which are passed back to the caller. You can learn more about Elastic Search aggregation options here . Note You can use all the regular CM-Well query parameters such as qp , recursive , date filters and so on, before applying a statistical query. The statistical analysis is applied on the subset of the data that passes the filters.","title":"Description"},{"location":"APIReference/Query/API.Query.DataStatistics.html#syntax","text":"URL: hostURL / PATH REST verb: GET Mandatory parameters: op=stats ap=type: statsType ,field: statsField Template: cmwellPath ?op=stats ap=type: statsType ,field: statsField ,name: outputName format= outputFormat URL example: cm-well-host /permid.org?op=stats ap=type:card,name:MyCurrencyStats,field:iso4217.currency format=json pretty Curl example (REST API): Curl -X GET cm-well-host /permid.org?op=stats ap=type:card,name:MyCurrencyStats,field:iso4217.currency format=json pretty","title":"Syntax"},{"location":"APIReference/Query/API.Query.DataStatistics.html#special-parameters","text":"Parameter Description Values Example ap Aggregation parameters that define the statistical query type and field. See below in this table. type The type of statistical query to perform. See Using Elastic Search Statistics to learn more. card, stats, term, sig ap=type:card name Optional. If supplied, its value is returned as the name value in the response. Any string ap=name:MyQueryName field The name of the field on whose values you want to apply the query. Any valid CM-Well field name ap=field:CommonName.mdaas","title":"Special Parameters"},{"location":"APIReference/Query/API.Query.DataStatistics.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Query/API.Query.DataStatistics.html#call","text":"curl cm-well-host /permid.org?op=stats ap=type:card,name:MyCurrencyStats,field:iso4217.currency format=json pretty","title":"Call"},{"location":"APIReference/Query/API.Query.DataStatistics.html#results","text":"{ AggregationResponse : [ { name : MyCurrencyStats , type : CardinalityAggregationResponse , filter : { name : MyCurrencyStats , type : CardinalityAggregation , field : iso4217.currency }, count : 266 } ] } Note All counts returned by statistical queries are approximate . This is because Elastic Search is a distributed application, and data updates may take time to replicate on all machines. Usually counts are accurate to within 5%-10% of the true value. Accuracy is affected by the optional precision_threshold parameter. The values defined in ap (aggregation parameters) are passed on to Elastic Search as they are. The aggregation parameters must be passed in this order: Type Parameter Order Defaults term type:term[,name:MyName],field(:|::)MyFieldName[,size:MySize][subaggregations] size = 10 sig type:sig[,name:MyName],field(:|::)MyFieldName[,backgroundTerm:FieldName*Value][,minDocCount:MyCount][,size:MySize][subaggregations] size = 10, minDocCount = 10 card type:card[,name:MyName],field(:|::)MyFieldName[,precisionThreshold:MyLong] stats type:stats[,name:MyName],field(:|::)MyFieldName The output format must be one of: csv, json, jsonl. When using sub-queries, you can only request a total of 2 queries with the csv format, as a table only has 2 dimensions. For larger numbers of queries, use the json format, which has no limit on its nesting levels.","title":"Results"},{"location":"APIReference/Query/API.Query.DataStatistics.html#related-topics","text":"Using Elastic Search Statistics","title":"Related Topics"},{"location":"APIReference/Query/API.Query.QueryForInfotonsUsingFieldConditions.html","text":"Query with Field Conditions Description This function enables you to search for infotons whose field values meet specific conditions. You can define one or more conditions on field values, and you can specify different types of comparison operators (e.g. exact or partial string match, numeric inequality...). The search returns only those infotons that reside under the path you specify, which meet the field value conditions. For example, you can search for all organizations under the permid.org branch of CM-Well which are located in New York state, by defining a query with the permid.org path and a condition on the value of the organizationStateProvince field. Note By default, search queries are not recursive. So, for example, if you supply a search path of /\\ SomePath>, the query returns only infotons that are directly under SomePath. If they have other descendant infotons, these are not returned unless explicitly requested. To make a search operation recursive, use the recursive flag, as follows: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Coca%20Cola length=1 format=n3 recursive Syntax 1 URL: hostURL / PATH REST verb: GET Mandatory parameters: op=search qp= fieldConditions Template: cm-well-path ?op=search qp= fieldConditions otherParameters... URL example: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Coca%20Cola length=1 format=n3 with-data Curl example (REST API): Curl -X GET cm-well-host /permid.org?op=search qp=CommonName.mdaas:Coca%20Cola length=1 format=n3 with-data Code Example Call cm-well-host /permid.org?op=search qp=CommonName.mdaas:Coca%20Cola length=1 format=n3 with-data Results @ prefix nn : cm-well-host / meta / nn # . @ prefix mdaas : http :// ont . com / mdaas / . @ prefix rdf : http :// www . w3 . org / 1999 / 02 / 22-rdf-syntax-ns # . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix sys : cm-well-host / meta / sys # . http :// permid . org / 1-21588085919 amdaas : Quote ; sys : dataCenter dc1 ; sys : indexTime 1463590815956 ^^ xsd : long ; sys : lastModified 2016-05-18T17:00:14.565Z ^^ xsd : dateTime ; sys : parent /permid.org ; sys : path /permid.org/1-21588085919 ; sys : type ObjectInfoton ; sys : uuid 4342745f947e9abb5c32367dd0e4689f ; mdaas : CommonName COCA-COLA AM SSBA 31DEC2029 7.65CWNT ; mdaas : ExchangeTicker CCLKOA ; mdaas : IsTradingIn AUD ; mdaas : QuoteExchangeCode ASX ; mdaas : RCSAssetClass TRAD ; mdaas : RIC CCLKOAta.AX ; mdaas : TRCSAssetClass Traditional Warrants . [ sys : pagination [ sys : first cm -well-host / permid.org ? format = n3 ? op = search from= 2016 - 05 - 18 T17 % 3 A00 % 3 A14.565Z to= 2016 - 05 - 18 T17 % 3 A00 % 3 A14.565Z qp= CommonName.mdaas % 3 ACoca + Cola length= 1 offset= 0 ; sys : last cm -well-host / permid.org ? format = n3 ? op = search from= 2016 - 05 - 18 T17 % 3 A00 % 3 A14.565Z to= 2016 - 05 - 18 T17 % 3 A00 % 3 A14.565Z qp= CommonName.mdaas % 3 ACoca + Cola length= 1 offset= 11605 ; sys : next cm -well-host / permid.org ? format = n3 ? op = search from= 2016 - 05 - 18 T17 % 3 A00 % 3 A14.565Z to= 2016 - 05 - 18 T17 % 3 A00 % 3 A14.565Z qp= CommonName.mdaas % 3 ACoca + Cola length= 1 offset= 1 ; sys : self cm -well-host / permid.org ? format = n3 ? op = search from= 2016 - 05 - 18 T17 % 3 A00 % 3 A14.565Z to= 2016 - 05 - 18 T17 % 3 A00 % 3 A14.565Z qp= CommonName.mdaas % 3 ACoca + Cola length= 1 offset= 0 ; sys : type PaginationInfo ] ; sys : results [ sys : fromDate 2016-05-18T17:00:14.565Z ^^ xsd : dateTime ; sys : infotons http : //permid.org/1-21588085919 ; sys : length 1 ^^ xsd : long ; sys : offset 0 ^^ xsd : long ; sys : toDate 2016-05-18T17:00:14.565Z ^^ xsd : dateTime ; sys : total 11605 ^^ xsd : long ; sys : type SearchResults ] ; sys : type SearchResponse ] . Syntax 2 For some complex queries, the length of the field conditions might exceed the limitation that some clients impose on GET commands. In this case, you can use an alternate POST syntax, while providing the query parameters in the request's body rather than in its URL, as in the example below. Note If you use this syntax, please pay attention to the following: op=search is a mandatory query parameter and cannot be moved to the request body. All other parameters, including qp , can be moved to the request body. The path value still determines which CM-Well directory will be searched. * For this syntax, the content type should be application/x-www-form-urlencoded . URL: hostURL / PATH REST verb: POST Mandatory parameters: op=search Curl example (REST API): curl \u2013X POST \"cmwell/example.org?op=search\" -H Content-Type:application/x-www-form-urlencoded --data-binary 'recursive=true qp=FN.vcard::Jane%20Smith format=tsv' Results /example.org/JaneSmith 2018-07-29T08:47:15.665Z 844a646f09b1e39b1be144e8d4f4fbbf 1532854035927 Note If you don\u2019t know the precise field name to search in, you can indicate that you want to search in all fields, as follows: qp=_all:Marriott%20Ownership%20Resorts . Use this option with caution as it may be expensive in terms of run-time. Special characters must be escaped in the usual way for URIs. For example, spaces are escaped via %20, # characters are encoded using %23, and so on. Although most RDF structures use the standard of prefix:fieldname , in CM-Well you add the field name prefix after the name itself, as follows: fieldname.prefix . For example \"CommonName.mdaas\". You can surround a list of conditions with square brackets [...], so they can be defined as mandatory or optional as a group. Note that using fuzzy matching may produce a very large number of results. When using fuzzy match, it's recommended to include other criteria in your search in order to narrow down the results set. Related Topics Basic Queries Advanced Queries Applying SPARQL to Query Results","title":"Query with Field Conditions"},{"location":"APIReference/Query/API.Query.QueryForInfotonsUsingFieldConditions.html#query-with-field-conditions","text":"","title":"Query with Field Conditions"},{"location":"APIReference/Query/API.Query.QueryForInfotonsUsingFieldConditions.html#description","text":"This function enables you to search for infotons whose field values meet specific conditions. You can define one or more conditions on field values, and you can specify different types of comparison operators (e.g. exact or partial string match, numeric inequality...). The search returns only those infotons that reside under the path you specify, which meet the field value conditions. For example, you can search for all organizations under the permid.org branch of CM-Well which are located in New York state, by defining a query with the permid.org path and a condition on the value of the organizationStateProvince field. Note By default, search queries are not recursive. So, for example, if you supply a search path of /\\ SomePath>, the query returns only infotons that are directly under SomePath. If they have other descendant infotons, these are not returned unless explicitly requested. To make a search operation recursive, use the recursive flag, as follows: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Coca%20Cola length=1 format=n3 recursive","title":"Description"},{"location":"APIReference/Query/API.Query.QueryForInfotonsUsingFieldConditions.html#syntax-1","text":"URL: hostURL / PATH REST verb: GET Mandatory parameters: op=search qp= fieldConditions Template: cm-well-path ?op=search qp= fieldConditions otherParameters... URL example: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Coca%20Cola length=1 format=n3 with-data Curl example (REST API): Curl -X GET cm-well-host /permid.org?op=search qp=CommonName.mdaas:Coca%20Cola length=1 format=n3 with-data","title":"Syntax 1"},{"location":"APIReference/Query/API.Query.QueryForInfotonsUsingFieldConditions.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Query/API.Query.QueryForInfotonsUsingFieldConditions.html#call","text":"cm-well-host /permid.org?op=search qp=CommonName.mdaas:Coca%20Cola length=1 format=n3 with-data","title":"Call"},{"location":"APIReference/Query/API.Query.QueryForInfotonsUsingFieldConditions.html#results","text":"@ prefix nn : cm-well-host / meta / nn # . @ prefix mdaas : http :// ont . com / mdaas / . @ prefix rdf : http :// www . w3 . org / 1999 / 02 / 22-rdf-syntax-ns # . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix sys : cm-well-host / meta / sys # . http :// permid . org / 1-21588085919 amdaas : Quote ; sys : dataCenter dc1 ; sys : indexTime 1463590815956 ^^ xsd : long ; sys : lastModified 2016-05-18T17:00:14.565Z ^^ xsd : dateTime ; sys : parent /permid.org ; sys : path /permid.org/1-21588085919 ; sys : type ObjectInfoton ; sys : uuid 4342745f947e9abb5c32367dd0e4689f ; mdaas : CommonName COCA-COLA AM SSBA 31DEC2029 7.65CWNT ; mdaas : ExchangeTicker CCLKOA ; mdaas : IsTradingIn AUD ; mdaas : QuoteExchangeCode ASX ; mdaas : RCSAssetClass TRAD ; mdaas : RIC CCLKOAta.AX ; mdaas : TRCSAssetClass Traditional Warrants . [ sys : pagination [ sys : first cm -well-host / permid.org ? format = n3 ? op = search from= 2016 - 05 - 18 T17 % 3 A00 % 3 A14.565Z to= 2016 - 05 - 18 T17 % 3 A00 % 3 A14.565Z qp= CommonName.mdaas % 3 ACoca + Cola length= 1 offset= 0 ; sys : last cm -well-host / permid.org ? format = n3 ? op = search from= 2016 - 05 - 18 T17 % 3 A00 % 3 A14.565Z to= 2016 - 05 - 18 T17 % 3 A00 % 3 A14.565Z qp= CommonName.mdaas % 3 ACoca + Cola length= 1 offset= 11605 ; sys : next cm -well-host / permid.org ? format = n3 ? op = search from= 2016 - 05 - 18 T17 % 3 A00 % 3 A14.565Z to= 2016 - 05 - 18 T17 % 3 A00 % 3 A14.565Z qp= CommonName.mdaas % 3 ACoca + Cola length= 1 offset= 1 ; sys : self cm -well-host / permid.org ? format = n3 ? op = search from= 2016 - 05 - 18 T17 % 3 A00 % 3 A14.565Z to= 2016 - 05 - 18 T17 % 3 A00 % 3 A14.565Z qp= CommonName.mdaas % 3 ACoca + Cola length= 1 offset= 0 ; sys : type PaginationInfo ] ; sys : results [ sys : fromDate 2016-05-18T17:00:14.565Z ^^ xsd : dateTime ; sys : infotons http : //permid.org/1-21588085919 ; sys : length 1 ^^ xsd : long ; sys : offset 0 ^^ xsd : long ; sys : toDate 2016-05-18T17:00:14.565Z ^^ xsd : dateTime ; sys : total 11605 ^^ xsd : long ; sys : type SearchResults ] ; sys : type SearchResponse ] .","title":"Results"},{"location":"APIReference/Query/API.Query.QueryForInfotonsUsingFieldConditions.html#syntax-2","text":"For some complex queries, the length of the field conditions might exceed the limitation that some clients impose on GET commands. In this case, you can use an alternate POST syntax, while providing the query parameters in the request's body rather than in its URL, as in the example below. Note If you use this syntax, please pay attention to the following: op=search is a mandatory query parameter and cannot be moved to the request body. All other parameters, including qp , can be moved to the request body. The path value still determines which CM-Well directory will be searched. * For this syntax, the content type should be application/x-www-form-urlencoded . URL: hostURL / PATH REST verb: POST Mandatory parameters: op=search Curl example (REST API): curl \u2013X POST \"cmwell/example.org?op=search\" -H Content-Type:application/x-www-form-urlencoded --data-binary 'recursive=true qp=FN.vcard::Jane%20Smith format=tsv'","title":"Syntax 2"},{"location":"APIReference/Query/API.Query.QueryForInfotonsUsingFieldConditions.html#results_1","text":"/example.org/JaneSmith 2018-07-29T08:47:15.665Z 844a646f09b1e39b1be144e8d4f4fbbf 1532854035927 Note If you don\u2019t know the precise field name to search in, you can indicate that you want to search in all fields, as follows: qp=_all:Marriott%20Ownership%20Resorts . Use this option with caution as it may be expensive in terms of run-time. Special characters must be escaped in the usual way for URIs. For example, spaces are escaped via %20, # characters are encoded using %23, and so on. Although most RDF structures use the standard of prefix:fieldname , in CM-Well you add the field name prefix after the name itself, as follows: fieldname.prefix . For example \"CommonName.mdaas\". You can surround a list of conditions with square brackets [...], so they can be defined as mandatory or optional as a group. Note that using fuzzy matching may produce a very large number of results. When using fuzzy match, it's recommended to include other criteria in your search in order to narrow down the results set.","title":"Results"},{"location":"APIReference/Query/API.Query.QueryForInfotonsUsingFieldConditions.html#related-topics","text":"Basic Queries Advanced Queries Applying SPARQL to Query Results","title":"Related Topics"},{"location":"APIReference/Query/API.Query.QueryForQuadsByTheirLabel.html","text":"Query for Quads by their Label Description Sometimes you may want to group some infotons and/or field values together under a specific label. The CM-Well feature that supports this is called a \"named sub-graph\", where the label is the name, and the sub-graph are the items in the Linked Data graph that have the specific label. In this case, relationships in the graph are represented not by triples but by quads, which include the subject, predicate, object and label (sub-graph name). See Working with Named Sub-Graphs to learn more about this feature. You can retrieve all quads with a certain label with one query to CM-Well. Syntax URL: hostURL REST verb: GET Mandatory parameters: op=search recursive qp=quad.system:: quadValue Template: cm-well-path ?op=search recursive qp=quad.system:: quadValue URL example: cm-well-host /example.org?op=search recursive qp=quad.system::http://MyOrgs/Startups Curl example (REST API): curl cm-well-host /example.org?op=search recursive qp=quad.system::http://MyOrgs/Startups Code Example Call curl cm-well-host /example.org/movies?op=search recursive format=ttl qp=quad.system::http://MyOntology/NewYorkTimes Results @ prefix nn : cm-well-host / meta / nn # . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix sys : cm-well-host / meta / sys # . http :// example . org / movies / TheAvenger sys : dataCenter dc1 ; sys : indexTime 1469543439610 ^^ xsd : long ; sys : lastModified 2016-07-26T14:30:38.600Z ^^ xsd : dateTime ; sys : parent /example.org/movies ; sys : path /example.org/movies/TheAvenger ; sys : type ObjectInfoton ; sys : uuid fe628dbe6298f263fecf548e85b33b37 . [ sys : pagination [ sys : first cm -well-host / example.org / movies ? format = ttl ? recursive = op= search from= 2016 - 07 - 06 T20 % 3 A38 % 3 A33.085Z to= 2016 - 07 - 26 T14 % 3 A30 % 3 A38.600Z qp= quad.system % 3 A % 3 Ahttp % 3 A % 2 F % 2 FMyOntology % 2 FNewYorkTimes length= 4 offset= 0 ; sys : last cm -well-host / example.org / movies ? format = ttl ? recursive = op= search from= 2016 - 07 - 06 T20 % 3 A38 % 3 A33.085Z to= 2016 - 07 - 26 T14 % 3 A30 % 3 A38.600Z qp= quad.system % 3 A % 3 Ahttp % 3 A % 2 F % 2 FMyOntology % 2 FNewYorkTimes length= 4 offset= 4 ; sys : self cm -well-host / example.org / movies ? format = ttl ? recursive = op= search from= 2016 - 07 - 06 T20 % 3 A38 % 3 A33.085Z to= 2016 - 07 - 26 T14 % 3 A30 % 3 A38.600Z qp= quad.system % 3 A % 3 Ahttp % 3 A % 2 F % 2 FMyOntology % 2 FNewYorkTimes length= 4 offset= 0 ; sys : type PaginationInfo ] ; sys : results [ sys : fromDate 2016-07-06T20:38:33.085Z ^^ xsd : dateTime ; sys : infotons http : //example.org/movies/GoneWithTheWind , http://example.org/movies/ET , http://example.org/movies/TheAvenger ; sys : length 4 ^^ xsd : long ; sys : offset 0 ^^ xsd : long ; sys : toDate 2016-07-26T14:30:38.600Z ^^ xsd : dateTime ; sys : total 4 ^^ xsd : long ; sys : type SearchResults ] ; sys : type SearchResponse ] . http :// example . org / movies / GoneWithTheWind sys : dataCenter dc1 ; sys : indexTime 1468938865750 ^^ xsd : long ; sys : lastModified 2016-07-19T14:34:24.579Z ^^ xsd : dateTime ; sys : parent /example.org/movies ; sys : path /example.org/movies/GoneWithTheWind ; sys : type ObjectInfoton ; sys : uuid 4d8acc0536c1e3bd299aec9a694b647d . http :// example . org / movies / ET sys : dataCenter dc1 ; sys : indexTime 1468938865750 ^^ xsd : long , 1469467055354 ^^ xsd : long ; sys : lastModified 2016-07-06T20:38:33.085Z ^^ xsd : dateTime , 2016-07-19T14:34:24.579Z ^^ xsd : dateTime ; sys : parent /example.org/movies ; sys : path /example.org/movies/ET ; sys : type ObjectInfoton ; sys : uuid ec183a3c152fe16057ed52a5cfc74d80 , 233e1ab260c4d18307e82138cf281050 . Related Topics Working with Named Sub-Graphs Add Infotons and Fields to a Sub-Graph Delete and Replace Field Values in Named Sub-Graphs","title":"Query for Quads by their Label"},{"location":"APIReference/Query/API.Query.QueryForQuadsByTheirLabel.html#query-for-quads-by-their-label","text":"","title":"Query for Quads by their Label"},{"location":"APIReference/Query/API.Query.QueryForQuadsByTheirLabel.html#description","text":"Sometimes you may want to group some infotons and/or field values together under a specific label. The CM-Well feature that supports this is called a \"named sub-graph\", where the label is the name, and the sub-graph are the items in the Linked Data graph that have the specific label. In this case, relationships in the graph are represented not by triples but by quads, which include the subject, predicate, object and label (sub-graph name). See Working with Named Sub-Graphs to learn more about this feature. You can retrieve all quads with a certain label with one query to CM-Well.","title":"Description"},{"location":"APIReference/Query/API.Query.QueryForQuadsByTheirLabel.html#syntax","text":"URL: hostURL REST verb: GET Mandatory parameters: op=search recursive qp=quad.system:: quadValue Template: cm-well-path ?op=search recursive qp=quad.system:: quadValue URL example: cm-well-host /example.org?op=search recursive qp=quad.system::http://MyOrgs/Startups Curl example (REST API): curl cm-well-host /example.org?op=search recursive qp=quad.system::http://MyOrgs/Startups","title":"Syntax"},{"location":"APIReference/Query/API.Query.QueryForQuadsByTheirLabel.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Query/API.Query.QueryForQuadsByTheirLabel.html#call","text":"curl cm-well-host /example.org/movies?op=search recursive format=ttl qp=quad.system::http://MyOntology/NewYorkTimes","title":"Call"},{"location":"APIReference/Query/API.Query.QueryForQuadsByTheirLabel.html#results","text":"@ prefix nn : cm-well-host / meta / nn # . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix sys : cm-well-host / meta / sys # . http :// example . org / movies / TheAvenger sys : dataCenter dc1 ; sys : indexTime 1469543439610 ^^ xsd : long ; sys : lastModified 2016-07-26T14:30:38.600Z ^^ xsd : dateTime ; sys : parent /example.org/movies ; sys : path /example.org/movies/TheAvenger ; sys : type ObjectInfoton ; sys : uuid fe628dbe6298f263fecf548e85b33b37 . [ sys : pagination [ sys : first cm -well-host / example.org / movies ? format = ttl ? recursive = op= search from= 2016 - 07 - 06 T20 % 3 A38 % 3 A33.085Z to= 2016 - 07 - 26 T14 % 3 A30 % 3 A38.600Z qp= quad.system % 3 A % 3 Ahttp % 3 A % 2 F % 2 FMyOntology % 2 FNewYorkTimes length= 4 offset= 0 ; sys : last cm -well-host / example.org / movies ? format = ttl ? recursive = op= search from= 2016 - 07 - 06 T20 % 3 A38 % 3 A33.085Z to= 2016 - 07 - 26 T14 % 3 A30 % 3 A38.600Z qp= quad.system % 3 A % 3 Ahttp % 3 A % 2 F % 2 FMyOntology % 2 FNewYorkTimes length= 4 offset= 4 ; sys : self cm -well-host / example.org / movies ? format = ttl ? recursive = op= search from= 2016 - 07 - 06 T20 % 3 A38 % 3 A33.085Z to= 2016 - 07 - 26 T14 % 3 A30 % 3 A38.600Z qp= quad.system % 3 A % 3 Ahttp % 3 A % 2 F % 2 FMyOntology % 2 FNewYorkTimes length= 4 offset= 0 ; sys : type PaginationInfo ] ; sys : results [ sys : fromDate 2016-07-06T20:38:33.085Z ^^ xsd : dateTime ; sys : infotons http : //example.org/movies/GoneWithTheWind , http://example.org/movies/ET , http://example.org/movies/TheAvenger ; sys : length 4 ^^ xsd : long ; sys : offset 0 ^^ xsd : long ; sys : toDate 2016-07-26T14:30:38.600Z ^^ xsd : dateTime ; sys : total 4 ^^ xsd : long ; sys : type SearchResults ] ; sys : type SearchResponse ] . http :// example . org / movies / GoneWithTheWind sys : dataCenter dc1 ; sys : indexTime 1468938865750 ^^ xsd : long ; sys : lastModified 2016-07-19T14:34:24.579Z ^^ xsd : dateTime ; sys : parent /example.org/movies ; sys : path /example.org/movies/GoneWithTheWind ; sys : type ObjectInfoton ; sys : uuid 4d8acc0536c1e3bd299aec9a694b647d . http :// example . org / movies / ET sys : dataCenter dc1 ; sys : indexTime 1468938865750 ^^ xsd : long , 1469467055354 ^^ xsd : long ; sys : lastModified 2016-07-06T20:38:33.085Z ^^ xsd : dateTime , 2016-07-19T14:34:24.579Z ^^ xsd : dateTime ; sys : parent /example.org/movies ; sys : path /example.org/movies/ET ; sys : type ObjectInfoton ; sys : uuid ec183a3c152fe16057ed52a5cfc74d80 , 233e1ab260c4d18307e82138cf281050 .","title":"Results"},{"location":"APIReference/Query/API.Query.QueryForQuadsByTheirLabel.html#related-topics","text":"Working with Named Sub-Graphs Add Infotons and Fields to a Sub-Graph Delete and Replace Field Values in Named Sub-Graphs","title":"Related Topics"},{"location":"APIReference/Stream/API.Stream.ConsumeNextBulk.html","text":"Consume Next Bulk Description If you wish to retrieve a large number of infotons, but you want to quickly iterate over \"chunks\" of data in a controlled fashion, you can use the create-consumer API and the _bulk-consume endpoint. The _bulk-consume API is similar to the _consume API, with the following differences: _bulk-consume is significantly faster than _consume . Results returned by _consume are sorted by individual infoton, according to their lastModified value. (This is what makes _consume so much slower than _bulk-consume .) The process requires two different API calls: Call create-consumer to receive a position identifier (in the X-CM-WELL-POSITION header). Repeatedly call _bulk-consume , to receive chunks of infotons. When you call _bulk-consume , you pass the position identifier and you receive and new one in the response. Pass the new position identifier to the next call to _bulk-consume . The process ends when CM-Well returns a 204 status code (no more content). Up to 1 million results are returned in each chunk. The X-CM-WELL-N header in the response indicates the number of infotons you should expect to receive in the chunk. This allows you to verify that you've received all the expected data. If you receive fewer infotons due to errors, you can retry the _bulk-consume call, using the same position identifier and adding the optional to-hint parameter. You set the to-hint value to the value you received in the X-CM-WELL-TO header of the response. The X-CM-WELL-TO value is a timestamp which is the upper limit on the update times of the infotons in the bulk. Note The position identifier enables you to restart consuming from the same position even if the consume process fails in the middle. Syntax URL: cm-well-host /_bulk-consume REST verb: GET Mandatory parameters: position= position identifier Template: cm-well-host /_bulk-consume?position= position identifier URL example: N/A Curl example (REST API): curl -vX GET cm-well-host /_bulk-consume?position=eQA5eJwzNDE1sDQ3NDI0tjQ2rjGoMTE0MDI1NjS0BIEa_dSKxNyCnFS9_KJ0fc-8lMyyzJTSxJzimpoa format=json Special Parameters Parameter Description Values Example position Defines the position of the chunk in the stream Position ID returned by create-consumer or last call to _bulk-consume position=eQA5eJwzNDE1sDQ3NDI0tjQ2rjGoMTE0MDI1NjS0BIEa_dSKxNyCnFS9_KJ0fc-8lMyyzJTSxJzimpoa slow-bulk Optional. If added, streaming is slower than the regular bulk-consume streaming. You may want to use this flag for slow network connections, to avoid timeouts. None; Boolean flag. _bulk-consume?format=json slow-bulk to-hint Optional; to be used in retries. A timestamp which is the upper limit on the update times of the infotons in the bulk. Take the value returned in the X-CM-WELL-TO header of the bulk response you're retrying. Timestamp values to-hint=1425817923290 parallelism The number of threads used for concurrent streaming. Positive integers. Default is 10 parallelism=15 Code Example Call curl -vX GET cm-well-host /_bulk-consume?position=eQA5eJwzNDE1sDQ3NDI0tjQ2rjGoMTE0MDI1NjS0BIEa_dSKxNyCnFS9_KJ0fc-8lMyyzJTSxJzimpoa format=json to-hint=1425817923290 Results HTTP / 1 . 1 200 OK Transfer-Encoding : chunked X-CM-WELL-N : 592421 X-CMWELL-BG : O X-CMWELL-RT : 5986ms X-CM-WELL-TO : 1425817923290 X-CMWELL-Version : 1 . 5 . 51 X-CMWELL-Hostname : cmwellhost . com X-CM-WELL-POSITION : 5gAAMTQyNTgxNzkyMzI5MCwxNDI1ODE4MDcwNDU4fC9wZXJtaWQub3JnfDEwMDAwMDA Content-Type : application / json ; charset = UTF8 Date : Wed , 01 Nov 2017 15 : 09 : 16 GMT { type : ObjectInfoton , system :{ uuid : 0388ef115736cff149e51c2afde61058 , lastModified : 2015-03-08 T12 : 31 : 38.095 Z , path : / permid . org / 1-21477092480 , dataCenter : dc1 , indexTime :1460123264522, parent : / permid . org }, fields :{ IsTradingIn . mdaas : [ EUR ] , QuoteExchangeCode . mdaas : [ FRA ] , CommonName . mdaas : [ BNP SND BNZT 12 ] , IsQuoteOf . mdaas : [ http://permid.org/1-21477084414 ] , type . rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ] , TRCSAssetClass . mdaas : [ Buffered Risk / Bonus Certificates ] , RCSAssetClass . mdaas : [ CRTBON ] , RIC . mdaas : [ DEBP1R7Q.F^L11 ] }} { type : ObjectInfoton , system :{ uuid : f995e339b1d67f1fee39eca19b7d6439 , lastModified : 2015-03-08 T12 : 30 : 47.602 Z , path : / permid . org / 1-21476179024 , dataCenter : dc1 , indexTime :1460123171404, parent : / permid . org }, fields :{ IsTradingIn . mdaas : [ EUR ] , QuoteExchangeCode . mdaas : [ EWX ] , CommonName . mdaas : [ HVM SX5E CAL 12C ] , IsQuoteOf . mdaas : [ http://permid.org/1-21476166691 ] , type . rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ] , TRCSAssetClass . mdaas : [ Traditional Warrants ] , RCSAssetClass . mdaas : [ TRAD ] , RIC . mdaas : [ DEHV5K4Y.EW^C12 ] }} { type : ObjectInfoton , system :{ uuid : 8378 d4d7e9c7ee9ceb27359b198431ce , lastModified : 2015-03-08 T12 : 30 : 40.552 Z , path : / permid . org / 1-21476043443 , dataCenter : dc1 , indexTime :1460123158656, parent : / permid . org }, fields :{ QuoteExchangeCode . mdaas : [ RCT ] , CommonName . mdaas : [ DAX 30 ] , IsQuoteOf . mdaas : [ http://permid.org/1-21475980349 ] , type . rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ] , TRCSAssetClass . mdaas : [ Discount Certificates ] , RCSAssetClass . mdaas : [ CRTDISC ] , RIC . mdaas : [ DECK413N=COBA^B13 ] } } ... TRUNCATED Note Although _bulk-consume results are not sorted at the level of the single infoton, they are sorted \"per bulk\", that is, every bulk contains infotons that are newer than those of the previous bulk, and older than those of the next bulk. It may take some time for a _bulk-consume command to \"warm up\". This is because before results are returned, there is a pre-processing stage that arranges results in time-ordered bulks. Once the pre-processing stage is over, retrieval of results is very fast. Because the start position of the next bulk to be read is returned in the response header, you can actually process two (or sometimes more) bulks in parallel, by creating a reader thread for each position you receive. The same location token is used for both the consume and the bulk-consume APIs. You can also switch between calls to consume and bulk-consume , using the same token instance. You may want to switch from bulk-consume to consume if network load is causing bulk-consume operations to fail. Only the following formats are supported for the _bulk-consume API: Format format= Mimetype Text text text/plain Tab-Separated Values tsv text/plain NTriples ntriples text/plain NQuads nquads text/turtle Related Topics Create Iterator Create Consumer Consume Next Chunk","title":"Consume Next Bulk"},{"location":"APIReference/Stream/API.Stream.ConsumeNextBulk.html#consume-next-bulk","text":"","title":"Consume Next Bulk"},{"location":"APIReference/Stream/API.Stream.ConsumeNextBulk.html#description","text":"If you wish to retrieve a large number of infotons, but you want to quickly iterate over \"chunks\" of data in a controlled fashion, you can use the create-consumer API and the _bulk-consume endpoint. The _bulk-consume API is similar to the _consume API, with the following differences: _bulk-consume is significantly faster than _consume . Results returned by _consume are sorted by individual infoton, according to their lastModified value. (This is what makes _consume so much slower than _bulk-consume .) The process requires two different API calls: Call create-consumer to receive a position identifier (in the X-CM-WELL-POSITION header). Repeatedly call _bulk-consume , to receive chunks of infotons. When you call _bulk-consume , you pass the position identifier and you receive and new one in the response. Pass the new position identifier to the next call to _bulk-consume . The process ends when CM-Well returns a 204 status code (no more content). Up to 1 million results are returned in each chunk. The X-CM-WELL-N header in the response indicates the number of infotons you should expect to receive in the chunk. This allows you to verify that you've received all the expected data. If you receive fewer infotons due to errors, you can retry the _bulk-consume call, using the same position identifier and adding the optional to-hint parameter. You set the to-hint value to the value you received in the X-CM-WELL-TO header of the response. The X-CM-WELL-TO value is a timestamp which is the upper limit on the update times of the infotons in the bulk. Note The position identifier enables you to restart consuming from the same position even if the consume process fails in the middle.","title":"Description"},{"location":"APIReference/Stream/API.Stream.ConsumeNextBulk.html#syntax","text":"URL: cm-well-host /_bulk-consume REST verb: GET Mandatory parameters: position= position identifier Template: cm-well-host /_bulk-consume?position= position identifier URL example: N/A Curl example (REST API): curl -vX GET cm-well-host /_bulk-consume?position=eQA5eJwzNDE1sDQ3NDI0tjQ2rjGoMTE0MDI1NjS0BIEa_dSKxNyCnFS9_KJ0fc-8lMyyzJTSxJzimpoa format=json","title":"Syntax"},{"location":"APIReference/Stream/API.Stream.ConsumeNextBulk.html#special-parameters","text":"Parameter Description Values Example position Defines the position of the chunk in the stream Position ID returned by create-consumer or last call to _bulk-consume position=eQA5eJwzNDE1sDQ3NDI0tjQ2rjGoMTE0MDI1NjS0BIEa_dSKxNyCnFS9_KJ0fc-8lMyyzJTSxJzimpoa slow-bulk Optional. If added, streaming is slower than the regular bulk-consume streaming. You may want to use this flag for slow network connections, to avoid timeouts. None; Boolean flag. _bulk-consume?format=json slow-bulk to-hint Optional; to be used in retries. A timestamp which is the upper limit on the update times of the infotons in the bulk. Take the value returned in the X-CM-WELL-TO header of the bulk response you're retrying. Timestamp values to-hint=1425817923290 parallelism The number of threads used for concurrent streaming. Positive integers. Default is 10 parallelism=15","title":"Special Parameters"},{"location":"APIReference/Stream/API.Stream.ConsumeNextBulk.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Stream/API.Stream.ConsumeNextBulk.html#call","text":"curl -vX GET cm-well-host /_bulk-consume?position=eQA5eJwzNDE1sDQ3NDI0tjQ2rjGoMTE0MDI1NjS0BIEa_dSKxNyCnFS9_KJ0fc-8lMyyzJTSxJzimpoa format=json to-hint=1425817923290","title":"Call"},{"location":"APIReference/Stream/API.Stream.ConsumeNextBulk.html#results","text":"HTTP / 1 . 1 200 OK Transfer-Encoding : chunked X-CM-WELL-N : 592421 X-CMWELL-BG : O X-CMWELL-RT : 5986ms X-CM-WELL-TO : 1425817923290 X-CMWELL-Version : 1 . 5 . 51 X-CMWELL-Hostname : cmwellhost . com X-CM-WELL-POSITION : 5gAAMTQyNTgxNzkyMzI5MCwxNDI1ODE4MDcwNDU4fC9wZXJtaWQub3JnfDEwMDAwMDA Content-Type : application / json ; charset = UTF8 Date : Wed , 01 Nov 2017 15 : 09 : 16 GMT { type : ObjectInfoton , system :{ uuid : 0388ef115736cff149e51c2afde61058 , lastModified : 2015-03-08 T12 : 31 : 38.095 Z , path : / permid . org / 1-21477092480 , dataCenter : dc1 , indexTime :1460123264522, parent : / permid . org }, fields :{ IsTradingIn . mdaas : [ EUR ] , QuoteExchangeCode . mdaas : [ FRA ] , CommonName . mdaas : [ BNP SND BNZT 12 ] , IsQuoteOf . mdaas : [ http://permid.org/1-21477084414 ] , type . rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ] , TRCSAssetClass . mdaas : [ Buffered Risk / Bonus Certificates ] , RCSAssetClass . mdaas : [ CRTBON ] , RIC . mdaas : [ DEBP1R7Q.F^L11 ] }} { type : ObjectInfoton , system :{ uuid : f995e339b1d67f1fee39eca19b7d6439 , lastModified : 2015-03-08 T12 : 30 : 47.602 Z , path : / permid . org / 1-21476179024 , dataCenter : dc1 , indexTime :1460123171404, parent : / permid . org }, fields :{ IsTradingIn . mdaas : [ EUR ] , QuoteExchangeCode . mdaas : [ EWX ] , CommonName . mdaas : [ HVM SX5E CAL 12C ] , IsQuoteOf . mdaas : [ http://permid.org/1-21476166691 ] , type . rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ] , TRCSAssetClass . mdaas : [ Traditional Warrants ] , RCSAssetClass . mdaas : [ TRAD ] , RIC . mdaas : [ DEHV5K4Y.EW^C12 ] }} { type : ObjectInfoton , system :{ uuid : 8378 d4d7e9c7ee9ceb27359b198431ce , lastModified : 2015-03-08 T12 : 30 : 40.552 Z , path : / permid . org / 1-21476043443 , dataCenter : dc1 , indexTime :1460123158656, parent : / permid . org }, fields :{ QuoteExchangeCode . mdaas : [ RCT ] , CommonName . mdaas : [ DAX 30 ] , IsQuoteOf . mdaas : [ http://permid.org/1-21475980349 ] , type . rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ] , TRCSAssetClass . mdaas : [ Discount Certificates ] , RCSAssetClass . mdaas : [ CRTDISC ] , RIC . mdaas : [ DECK413N=COBA^B13 ] } } ... TRUNCATED Note Although _bulk-consume results are not sorted at the level of the single infoton, they are sorted \"per bulk\", that is, every bulk contains infotons that are newer than those of the previous bulk, and older than those of the next bulk. It may take some time for a _bulk-consume command to \"warm up\". This is because before results are returned, there is a pre-processing stage that arranges results in time-ordered bulks. Once the pre-processing stage is over, retrieval of results is very fast. Because the start position of the next bulk to be read is returned in the response header, you can actually process two (or sometimes more) bulks in parallel, by creating a reader thread for each position you receive. The same location token is used for both the consume and the bulk-consume APIs. You can also switch between calls to consume and bulk-consume , using the same token instance. You may want to switch from bulk-consume to consume if network load is causing bulk-consume operations to fail. Only the following formats are supported for the _bulk-consume API: Format format= Mimetype Text text text/plain Tab-Separated Values tsv text/plain NTriples ntriples text/plain NQuads nquads text/turtle","title":"Results"},{"location":"APIReference/Stream/API.Stream.ConsumeNextBulk.html#related-topics","text":"Create Iterator Create Consumer Consume Next Chunk","title":"Related Topics"},{"location":"APIReference/Stream/API.Stream.ConsumeNextChunk.html","text":"Consume Next Chunk Description If you wish to retrieve a large number of infotons, but you want to iterate over small \"chunks\" of data in a controlled fashion, you can use the create-consumer API and the _consume endpoint. The process requires two different API calls: Call create-consumer to receive a position identifier (in the X-CM-WELL-POSITION header). Repeatedly call _consume , to receive chunks of infotons. When you call _consume , you pass the position identifier and you receive and new one in the response. Pass the new position identifier to the next call to _consume . The process ends when CM-Well returns a 204 status code (no more content). Note If during the streaming process a chunk is encountered that contains some invalid data, that chunk arrives with a 206 (Partial Content) result code. You can still continue to consume chunks after receiving this error. The consume API does not support a guaranteed chunk length (number of infotons in a chunk). About 100 results are returned in each chunk. Note You must use the -v (verbose) flag, as you'll need to retrieve the new position identifier from the X-CM-WELL-POSITION response header. The position identifier enables you to restart consuming from the same position even if the consume process fails in the middle. Syntax URL: cm-well-host /_consume REST verb: GET Mandatory parameters: position= position identifier Template: cm-well-host /_consume?position= position identifier URL example: N/A Curl example (REST API): curl -vX GET cm-well-host /_consume?position=eQA5eJwzNDE1sDQ3NDI0tjQ2rjGoMTE0MDI1NjS0BIEa_dSKxNyCnFS9_KJ0fc-8lMyyzJTSxJzimpoa format=json Special Parameters Parameter Description Values Example position Defines the position of the chunk in the stream Position ID returned by create-consumer or last call to _consume position=eQA5eJwzNDE1sDQ3NDI0tjQ2rjGoMTE0MDI1NjS0BIEa_dSKxNyCnFS9_KJ0fc-8lMyyzJTSxJzimpoa Code Example Call curl -vX GET cm-well-host /_consume?position=eQA5eJwzNDE1sDQ3NDI0tjQ2rjGoMTE0MDI1NjS0BIEa_dSKxNyCnFS9_KJ0fc-8lMyyzJTSxJzimpoa format=json Results The following results are truncated. HTTP / 1 . 1 200 OK X-CMWELL-BG : O X-CMWELL-RT : 546ms X-CM-WELL-N-LEFT : 162130 X-CMWELL-Version : 1 . 5 . 51 X-CMWELL-Hostname : 127 . 0 . 0 . 1 . int . data . com X-CM-WELL-POSITION : UACDeJwzNDEzMrYwMjc1NzS3qNFPSSxJ1CvJyM8tzs8rSi0tSS0q1kvOz60pqSxI1VPJqfIzdHO0ssooKSmw0ocoLk7OSM1NLNZLy8xLzEvOTMzBol0_N7UkEaRa38jAwFIXhAz13VPz04sSCzIqAYuQLXc Content-Length : 149580 Content-Type : application / json-seq ; charset = UTF8 Date : Thu , 19 Oct 2017 23 : 01 : 07 GMT { type : ObjectInfoton , system : { uuid : 814e6f06dbff4007e0013dfb95e3b41b , lastModified : 2016-05-04 T17 : 25 : 23.522 Z , path : \\ / data . com \\ / 1-1001301743 , dataCenter : dc1 , indexTime : 1462382724112, parent : \\ / data . com }, fields : { pred-IsChildObjectOf . ont : [ http:\\/\\/data.com\\/1-1001296749 ] , geographyId . metadata : [ http:\\/\\/data.com\\/1-1001301743 ] , geographyUniqueName . metadata : [ Oceania (Analytics Content) ] , geographyName . metadata : [ http:\\/\\/data.com\\/2-af3e93de80b26a50c5374d03811bef87724a79559481c8ec9db6cd209f541d38 ] , pred-IsChildObjectOf-Relationship . ont : [ http:\\/\\/data.com\\/2-cba4655cc54a343e77565033c27b9466b81dc55a25b19974a85103353f73e4e8 ] , geographyType . metadata : [ http:\\/\\/data.com\\/2-ca7291187cf20c0103cb2b1852f7b44317f19cd37466767c6a4bf95eac10c745 ] , type . rdf : [ http:\\/\\/data.schemas.financial.com\\/metadata\\/2009-09-01\\/Geography ] , permId . ont : [ 1001301743 ] , activeFrom . Common : [ 1900-01-01T00:00:00 ] } } { type : ObjectInfoton , system : { uuid : 580345 c3a713bd8daa6ab116be85e72b , lastModified : 2016-05-04 T17 : 25 : 23.522 Z , path : \\ / data . com \\ / 1-1001301739 , dataCenter : dc1 , indexTime : 1462382724113, parent : \\ / data . com }, fields : { pred-IsChildObjectOf . ont : [ http:\\/\\/data.com\\/1-1001296749 ] , geographyId . metadata : [ http:\\/\\/data.com\\/1-1001301739 ] , geographyUniqueName . metadata : [ Africa (Analytics Content) ] , geographyName . metadata : [ http:\\/\\/data.com\\/2-55783c09e9ac4758f8a95a6fb8c2f452c6b05f105d661e9040a202c7666fafa6 ] , pred-IsChildObjectOf-Relationship . ont : [ http:\\/\\/data.com\\/2-ff399495b74cc2654077fa5790533f1f7714f8b18deb382e5487fcbded3edf3f ] , geographyType . metadata : [ http:\\/\\/data.com\\/2-1a6770a2f210b212cef7e0ff0622d549d2af009bbb429de656d918fcfa83476b ] , type . rdf : [ http:\\/\\/data.schemas.financial.com\\/metadata\\/2009-09-01\\/Geography ] , permId . ont : [ 1001301739 ] , activeFrom . Common : [ 1900-01-01T00:00:00 ] } } { type : ObjectInfoton , system : { uuid : 34 f40000d92156379dcb1d5600d6a08c , lastModified : 2016-05-04 T17 : 25 : 56.327 Z , path : \\ / data . com \\ / 1-110213 , dataCenter : dc1 , indexTime : 1462382757178, parent : \\ / data . com }, fields : { pred-GeospatialUnitIn-Relationship . ont : [ http:\\/\\/data.com\\/2-b5f997278753cae99a00cddf269a4395f4ea9970cec5e21a63e8448b063c6d63 ] , pred-NgaGnsUfi . ont : [ http:\\/\\/data.com\\/2-a651fe2f6ca1871268ec2bf7e79cfad899a54ec752388609a7ed2dc4b01a93d8 ] , geographyId . metadata : [ http:\\/\\/data.com\\/1-110213 ] , pred-OACityCode . ont : [ http:\\/\\/data.com\\/2-b5e578a2543d975b40d85eb98a1c5f419de4fbcbca5e13a06596630dc1af2594 ] , pred-SinotrustCityCode . ont : [ http:\\/\\/data.com\\/2-252cd8a7d3ab08ee230f6bacf522ed29042c265b1815dfc82a64e8a8e5702313 , http:\\/\\/data.com\\/2-654acbc1c245d0ba039db31824d086def17e058224d14800c843f5625c0a8163 , http:\\/\\/data.com\\/2-37e1bfb89b6c947233fb22f93fed18f2a4a99a2e2efc5a917266dabeb9606421 , http:\\/\\/data.com\\/2-0b6fe6f4312c087639d5ca177c802463fd17ec0aebbed1d3d6526379b06adcb6 , http:\\/\\/data.com\\/2-618a6979e12c2e2cfa4d17cd0329d3936949250c45830cf8dfe8a4208bdc88c8 ] , geographyLatitude . metadata : [ 23.6651 ] , geographyLongitude . metadata : [ 116.638 ] , pred-DunAndBradstreetCityCode . ont : [ http:\\/\\/data.com\\/2-7cb6179e8edab68ca66e5f612fc2c153ee7f61ee6d576bc0aa0ff99e94bc8851 ] , geographyUniqueName . metadata : [ Chaozhou (city) ] , geographyName . metadata : [ http:\\/\\/data.com\\/2-84820596124da9e8ad6f6bf0ee446317b0738c7e1630365b619ffe8f92fb4e86 , http:\\/\\/data.com\\/2-cf6c348523a6441ce6c1df6d43e37c22d308744977ed182fc70f19bc0057a898 , http:\\/\\/data.com\\/2-6751587f830b54c9d4a50351d7f6140dbaf35c08f05b517dd4a1396a1ec2832b , http:\\/\\/data.com\\/2-0bc480e82026c07da99eb5d67e7a19077e4cfb8cc7853f11d4748e79d9e0fb65 ] , geographyType . metadata : [ http:\\/\\/data.com\\/2-27db6ae4e64cd18655c66c36683708e7f23def3afda2c859cfd82d931e0a2585 ] , type . rdf : [ http:\\/\\/data.schemas.financial.com\\/metadata\\/2009-09-01\\/Geography ] , permId . ont : [ 110213 ] , pred-GeospatialUnitIn . ont : [ http:\\/\\/data.com\\/1-101175 ] , activeFrom . Common : [ 1900-01-01T00:00:00 ] } } ... TRUNCATED Note For a faster implementation of recoverable streaming, see bulk consume . Related Topics Create Iterator Create Consumer Consume Next Chunk Consume Next Bulk","title":"Consume Next Chunk"},{"location":"APIReference/Stream/API.Stream.ConsumeNextChunk.html#consume-next-chunk","text":"","title":"Consume Next Chunk"},{"location":"APIReference/Stream/API.Stream.ConsumeNextChunk.html#description","text":"If you wish to retrieve a large number of infotons, but you want to iterate over small \"chunks\" of data in a controlled fashion, you can use the create-consumer API and the _consume endpoint. The process requires two different API calls: Call create-consumer to receive a position identifier (in the X-CM-WELL-POSITION header). Repeatedly call _consume , to receive chunks of infotons. When you call _consume , you pass the position identifier and you receive and new one in the response. Pass the new position identifier to the next call to _consume . The process ends when CM-Well returns a 204 status code (no more content). Note If during the streaming process a chunk is encountered that contains some invalid data, that chunk arrives with a 206 (Partial Content) result code. You can still continue to consume chunks after receiving this error. The consume API does not support a guaranteed chunk length (number of infotons in a chunk). About 100 results are returned in each chunk. Note You must use the -v (verbose) flag, as you'll need to retrieve the new position identifier from the X-CM-WELL-POSITION response header. The position identifier enables you to restart consuming from the same position even if the consume process fails in the middle.","title":"Description"},{"location":"APIReference/Stream/API.Stream.ConsumeNextChunk.html#syntax","text":"URL: cm-well-host /_consume REST verb: GET Mandatory parameters: position= position identifier Template: cm-well-host /_consume?position= position identifier URL example: N/A Curl example (REST API): curl -vX GET cm-well-host /_consume?position=eQA5eJwzNDE1sDQ3NDI0tjQ2rjGoMTE0MDI1NjS0BIEa_dSKxNyCnFS9_KJ0fc-8lMyyzJTSxJzimpoa format=json","title":"Syntax"},{"location":"APIReference/Stream/API.Stream.ConsumeNextChunk.html#special-parameters","text":"Parameter Description Values Example position Defines the position of the chunk in the stream Position ID returned by create-consumer or last call to _consume position=eQA5eJwzNDE1sDQ3NDI0tjQ2rjGoMTE0MDI1NjS0BIEa_dSKxNyCnFS9_KJ0fc-8lMyyzJTSxJzimpoa","title":"Special Parameters"},{"location":"APIReference/Stream/API.Stream.ConsumeNextChunk.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Stream/API.Stream.ConsumeNextChunk.html#call","text":"curl -vX GET cm-well-host /_consume?position=eQA5eJwzNDE1sDQ3NDI0tjQ2rjGoMTE0MDI1NjS0BIEa_dSKxNyCnFS9_KJ0fc-8lMyyzJTSxJzimpoa format=json","title":"Call"},{"location":"APIReference/Stream/API.Stream.ConsumeNextChunk.html#results","text":"The following results are truncated. HTTP / 1 . 1 200 OK X-CMWELL-BG : O X-CMWELL-RT : 546ms X-CM-WELL-N-LEFT : 162130 X-CMWELL-Version : 1 . 5 . 51 X-CMWELL-Hostname : 127 . 0 . 0 . 1 . int . data . com X-CM-WELL-POSITION : UACDeJwzNDEzMrYwMjc1NzS3qNFPSSxJ1CvJyM8tzs8rSi0tSS0q1kvOz60pqSxI1VPJqfIzdHO0ssooKSmw0ocoLk7OSM1NLNZLy8xLzEvOTMzBol0_N7UkEaRa38jAwFIXhAz13VPz04sSCzIqAYuQLXc Content-Length : 149580 Content-Type : application / json-seq ; charset = UTF8 Date : Thu , 19 Oct 2017 23 : 01 : 07 GMT { type : ObjectInfoton , system : { uuid : 814e6f06dbff4007e0013dfb95e3b41b , lastModified : 2016-05-04 T17 : 25 : 23.522 Z , path : \\ / data . com \\ / 1-1001301743 , dataCenter : dc1 , indexTime : 1462382724112, parent : \\ / data . com }, fields : { pred-IsChildObjectOf . ont : [ http:\\/\\/data.com\\/1-1001296749 ] , geographyId . metadata : [ http:\\/\\/data.com\\/1-1001301743 ] , geographyUniqueName . metadata : [ Oceania (Analytics Content) ] , geographyName . metadata : [ http:\\/\\/data.com\\/2-af3e93de80b26a50c5374d03811bef87724a79559481c8ec9db6cd209f541d38 ] , pred-IsChildObjectOf-Relationship . ont : [ http:\\/\\/data.com\\/2-cba4655cc54a343e77565033c27b9466b81dc55a25b19974a85103353f73e4e8 ] , geographyType . metadata : [ http:\\/\\/data.com\\/2-ca7291187cf20c0103cb2b1852f7b44317f19cd37466767c6a4bf95eac10c745 ] , type . rdf : [ http:\\/\\/data.schemas.financial.com\\/metadata\\/2009-09-01\\/Geography ] , permId . ont : [ 1001301743 ] , activeFrom . Common : [ 1900-01-01T00:00:00 ] } } { type : ObjectInfoton , system : { uuid : 580345 c3a713bd8daa6ab116be85e72b , lastModified : 2016-05-04 T17 : 25 : 23.522 Z , path : \\ / data . com \\ / 1-1001301739 , dataCenter : dc1 , indexTime : 1462382724113, parent : \\ / data . com }, fields : { pred-IsChildObjectOf . ont : [ http:\\/\\/data.com\\/1-1001296749 ] , geographyId . metadata : [ http:\\/\\/data.com\\/1-1001301739 ] , geographyUniqueName . metadata : [ Africa (Analytics Content) ] , geographyName . metadata : [ http:\\/\\/data.com\\/2-55783c09e9ac4758f8a95a6fb8c2f452c6b05f105d661e9040a202c7666fafa6 ] , pred-IsChildObjectOf-Relationship . ont : [ http:\\/\\/data.com\\/2-ff399495b74cc2654077fa5790533f1f7714f8b18deb382e5487fcbded3edf3f ] , geographyType . metadata : [ http:\\/\\/data.com\\/2-1a6770a2f210b212cef7e0ff0622d549d2af009bbb429de656d918fcfa83476b ] , type . rdf : [ http:\\/\\/data.schemas.financial.com\\/metadata\\/2009-09-01\\/Geography ] , permId . ont : [ 1001301739 ] , activeFrom . Common : [ 1900-01-01T00:00:00 ] } } { type : ObjectInfoton , system : { uuid : 34 f40000d92156379dcb1d5600d6a08c , lastModified : 2016-05-04 T17 : 25 : 56.327 Z , path : \\ / data . com \\ / 1-110213 , dataCenter : dc1 , indexTime : 1462382757178, parent : \\ / data . com }, fields : { pred-GeospatialUnitIn-Relationship . ont : [ http:\\/\\/data.com\\/2-b5f997278753cae99a00cddf269a4395f4ea9970cec5e21a63e8448b063c6d63 ] , pred-NgaGnsUfi . ont : [ http:\\/\\/data.com\\/2-a651fe2f6ca1871268ec2bf7e79cfad899a54ec752388609a7ed2dc4b01a93d8 ] , geographyId . metadata : [ http:\\/\\/data.com\\/1-110213 ] , pred-OACityCode . ont : [ http:\\/\\/data.com\\/2-b5e578a2543d975b40d85eb98a1c5f419de4fbcbca5e13a06596630dc1af2594 ] , pred-SinotrustCityCode . ont : [ http:\\/\\/data.com\\/2-252cd8a7d3ab08ee230f6bacf522ed29042c265b1815dfc82a64e8a8e5702313 , http:\\/\\/data.com\\/2-654acbc1c245d0ba039db31824d086def17e058224d14800c843f5625c0a8163 , http:\\/\\/data.com\\/2-37e1bfb89b6c947233fb22f93fed18f2a4a99a2e2efc5a917266dabeb9606421 , http:\\/\\/data.com\\/2-0b6fe6f4312c087639d5ca177c802463fd17ec0aebbed1d3d6526379b06adcb6 , http:\\/\\/data.com\\/2-618a6979e12c2e2cfa4d17cd0329d3936949250c45830cf8dfe8a4208bdc88c8 ] , geographyLatitude . metadata : [ 23.6651 ] , geographyLongitude . metadata : [ 116.638 ] , pred-DunAndBradstreetCityCode . ont : [ http:\\/\\/data.com\\/2-7cb6179e8edab68ca66e5f612fc2c153ee7f61ee6d576bc0aa0ff99e94bc8851 ] , geographyUniqueName . metadata : [ Chaozhou (city) ] , geographyName . metadata : [ http:\\/\\/data.com\\/2-84820596124da9e8ad6f6bf0ee446317b0738c7e1630365b619ffe8f92fb4e86 , http:\\/\\/data.com\\/2-cf6c348523a6441ce6c1df6d43e37c22d308744977ed182fc70f19bc0057a898 , http:\\/\\/data.com\\/2-6751587f830b54c9d4a50351d7f6140dbaf35c08f05b517dd4a1396a1ec2832b , http:\\/\\/data.com\\/2-0bc480e82026c07da99eb5d67e7a19077e4cfb8cc7853f11d4748e79d9e0fb65 ] , geographyType . metadata : [ http:\\/\\/data.com\\/2-27db6ae4e64cd18655c66c36683708e7f23def3afda2c859cfd82d931e0a2585 ] , type . rdf : [ http:\\/\\/data.schemas.financial.com\\/metadata\\/2009-09-01\\/Geography ] , permId . ont : [ 110213 ] , pred-GeospatialUnitIn . ont : [ http:\\/\\/data.com\\/1-101175 ] , activeFrom . Common : [ 1900-01-01T00:00:00 ] } } ... TRUNCATED Note For a faster implementation of recoverable streaming, see bulk consume .","title":"Results"},{"location":"APIReference/Stream/API.Stream.ConsumeNextChunk.html#related-topics","text":"Create Iterator Create Consumer Consume Next Chunk Consume Next Bulk","title":"Related Topics"},{"location":"APIReference/Stream/API.Stream.CreateConsumer.html","text":"Create Consumer Description If you wish to retrieve a large number of infotons, but you want to iterate over small \"chunks\" of data in a controlled fashion, you can use the create-consumer API and the _consume endpoint. The process requires two different API calls: Call create-consumer to receive a position identifier (in the X-CM-WELL-POSITION response header). Repeatedly call _consume , to receive chunks of infotons. When you call _consume , you pass the position identifier and you receive a new one in the response. Pass the new position identifier to the next _consume call. The process ends when CM-Well returns a 204 status code (\"No more content\"). The consume API does not support a guaranteed chunk length (number of infotons in a chunk). About 100 results are returned in each chunk. Note The position identifier enables you to restart consuming from the same position even if the consume process fails in the middle. Syntax 1 URL: cm-well-host / cm-well-path REST verb: GET Mandatory parameters: op=create-consumer Template: cm-well-host / cm-well-path ?op=create-consumer URL example: N/A Curl example (REST API): curl -vX GET cm-well-host /example.org/Individuals?op=create-consumer Syntax 2 URL: cm-well-host / cm-well-path REST verb: POST Mandatory parameters: op=create-consumer Template: cm-well-host / cm-well-path ?op=create-consumer URL example: N/A Curl example (REST API): curl -vX POST cm-well-host /permid.org?op=create-consumer -H Content-Type:application/x-www-form-urlencoded --data-binary index-time=123456789 qp=\\*type.rdf::http://permid.org/ontology/organization/Organization,\\*type.rdf::http://ont.com/mdaas/Organization Note You can use this syntax if you need to define a very long string for the qp value. This syntax allows sending the qp value as data rather than part of the URL, which avoids the length limitation that some clients impose on GET commands. Special Parameters Parameter Description Values Example index-time An optional parameter that contains the time from which you want to start streaming. If omitted, all results are returned, regardless of their index time. Set the index-time value to be the indexTime value returned in the last infoton you read. An integer value. index-time=1476811252896 Code Example Call curl -vX GET cm-well-host /example.org/Individuals?op=create-consumer Note Use the -v (verbose) flag, as you'll need to retrieve the position identifier from the X-CM-WELL-POSITION response header. Results HTTP / 1 . 1 200 OK Content-Type : text / plain ; charset = utf-8 X-CM-WELL-POSITION : -AAteJwzqDGoMTE0MDI1NjS0BIEa_dSKxNyCnFS9_KJ0fc-8lMyyzJTSxJzimpoa X-CMWELL-Hostname : michael-laptop X-CMWELL-RT : 1 X-CMWELL-Version : 1 . 3 . x-SNAPSHOT Content-Length : 0 Note For a faster implementation of streaming, see bulk consume . Related Topics Consume Next Chunk Create Iterator Get Next Chunk Consume Next Bulk","title":"Create Consumer"},{"location":"APIReference/Stream/API.Stream.CreateConsumer.html#create-consumer","text":"","title":"Create Consumer"},{"location":"APIReference/Stream/API.Stream.CreateConsumer.html#description","text":"If you wish to retrieve a large number of infotons, but you want to iterate over small \"chunks\" of data in a controlled fashion, you can use the create-consumer API and the _consume endpoint. The process requires two different API calls: Call create-consumer to receive a position identifier (in the X-CM-WELL-POSITION response header). Repeatedly call _consume , to receive chunks of infotons. When you call _consume , you pass the position identifier and you receive a new one in the response. Pass the new position identifier to the next _consume call. The process ends when CM-Well returns a 204 status code (\"No more content\"). The consume API does not support a guaranteed chunk length (number of infotons in a chunk). About 100 results are returned in each chunk. Note The position identifier enables you to restart consuming from the same position even if the consume process fails in the middle.","title":"Description"},{"location":"APIReference/Stream/API.Stream.CreateConsumer.html#syntax-1","text":"URL: cm-well-host / cm-well-path REST verb: GET Mandatory parameters: op=create-consumer Template: cm-well-host / cm-well-path ?op=create-consumer URL example: N/A Curl example (REST API): curl -vX GET cm-well-host /example.org/Individuals?op=create-consumer","title":"Syntax 1"},{"location":"APIReference/Stream/API.Stream.CreateConsumer.html#syntax-2","text":"URL: cm-well-host / cm-well-path REST verb: POST Mandatory parameters: op=create-consumer Template: cm-well-host / cm-well-path ?op=create-consumer URL example: N/A Curl example (REST API): curl -vX POST cm-well-host /permid.org?op=create-consumer -H Content-Type:application/x-www-form-urlencoded --data-binary index-time=123456789 qp=\\*type.rdf::http://permid.org/ontology/organization/Organization,\\*type.rdf::http://ont.com/mdaas/Organization Note You can use this syntax if you need to define a very long string for the qp value. This syntax allows sending the qp value as data rather than part of the URL, which avoids the length limitation that some clients impose on GET commands.","title":"Syntax 2"},{"location":"APIReference/Stream/API.Stream.CreateConsumer.html#special-parameters","text":"Parameter Description Values Example index-time An optional parameter that contains the time from which you want to start streaming. If omitted, all results are returned, regardless of their index time. Set the index-time value to be the indexTime value returned in the last infoton you read. An integer value. index-time=1476811252896","title":"Special Parameters"},{"location":"APIReference/Stream/API.Stream.CreateConsumer.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Stream/API.Stream.CreateConsumer.html#call","text":"curl -vX GET cm-well-host /example.org/Individuals?op=create-consumer Note Use the -v (verbose) flag, as you'll need to retrieve the position identifier from the X-CM-WELL-POSITION response header.","title":"Call"},{"location":"APIReference/Stream/API.Stream.CreateConsumer.html#results","text":"HTTP / 1 . 1 200 OK Content-Type : text / plain ; charset = utf-8 X-CM-WELL-POSITION : -AAteJwzqDGoMTE0MDI1NjS0BIEa_dSKxNyCnFS9_KJ0fc-8lMyyzJTSxJzimpoa X-CMWELL-Hostname : michael-laptop X-CMWELL-RT : 1 X-CMWELL-Version : 1 . 3 . x-SNAPSHOT Content-Length : 0 Note For a faster implementation of streaming, see bulk consume .","title":"Results"},{"location":"APIReference/Stream/API.Stream.CreateConsumer.html#related-topics","text":"Consume Next Chunk Create Iterator Get Next Chunk Consume Next Bulk","title":"Related Topics"},{"location":"APIReference/Stream/API.Stream.CreateIterator.html","text":"Create Iterator Description If you wish to retrieve a large number of infotons, but you want to iterate over small \"chunks\" of data in a controlled fashion, you can use the create-iterator and next-chunk APIs. This allows you to request the number of infotons you want to process, and receive only that number during each iteration. The process requires two different API calls: Call create-iterator to receive an iterator ID (in the iteratorId field) for the query. Repeatedly call next-chunk , specifying a length value, to receive that number of infotons. When you call next-chunk , you pass the iterator ID you received when you called create-iterator . The process ends when CM-Well returns an empty list. Note When creating the iterator, you can add all valid query parameters to the command, so as to filter the streamed infotons by conditions of your choice (field values etc.). See Query Parameters for more details. Syntax URL: cm-well-host / cm-well-path REST verb: GET Mandatory parameters: op=create-iterator Template: cm-well-host / cm-well-path ?op=create-iterator parameters URL example: ` cm-well-host /permid.org?op=create-iterator session-ttl=15 length=500` Curl example (REST API): Curl -X GET cm-well-host /permid.org?op=create-iterator session-ttl=15 length=500 Special Parameters Parameter Description Values Example session-ttl The time, in seconds, until the iteration session expires. The iteration token is only valid for this length of time. The default value is 15 seconds; the maximal value is 60 seconds. A positive integer up to 60. session-ttl=20 (20 seconds) Code Example Call cm-well-host /permid.org?op=create-iterator length=5 Results { type : IterationResults , iteratorId : YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjE3Ny40OjM5MjczL3VzZXIvJHVEaSMtMTEzMjgyNDQ5OA , totalHits :90964672, infotons :[]} Note If the iteration process fails in the middle for any reason, you might be able to resume with last token within the TTL window. Otherwise you'll have to restart the process from the beginning (that is, iterate again over all infotons that match the query). An alternative is to use the consumer API (see Related Topics ), which allows you to save the iteration state and restart from the same point after a failure. Related Topics Get Next Chunk Create Consumer Consume Next Chunk","title":"Create Iterator"},{"location":"APIReference/Stream/API.Stream.CreateIterator.html#create-iterator","text":"","title":"Create Iterator"},{"location":"APIReference/Stream/API.Stream.CreateIterator.html#description","text":"If you wish to retrieve a large number of infotons, but you want to iterate over small \"chunks\" of data in a controlled fashion, you can use the create-iterator and next-chunk APIs. This allows you to request the number of infotons you want to process, and receive only that number during each iteration. The process requires two different API calls: Call create-iterator to receive an iterator ID (in the iteratorId field) for the query. Repeatedly call next-chunk , specifying a length value, to receive that number of infotons. When you call next-chunk , you pass the iterator ID you received when you called create-iterator . The process ends when CM-Well returns an empty list. Note When creating the iterator, you can add all valid query parameters to the command, so as to filter the streamed infotons by conditions of your choice (field values etc.). See Query Parameters for more details.","title":"Description"},{"location":"APIReference/Stream/API.Stream.CreateIterator.html#syntax","text":"URL: cm-well-host / cm-well-path REST verb: GET Mandatory parameters: op=create-iterator Template: cm-well-host / cm-well-path ?op=create-iterator parameters URL example: ` cm-well-host /permid.org?op=create-iterator session-ttl=15 length=500` Curl example (REST API): Curl -X GET cm-well-host /permid.org?op=create-iterator session-ttl=15 length=500","title":"Syntax"},{"location":"APIReference/Stream/API.Stream.CreateIterator.html#special-parameters","text":"Parameter Description Values Example session-ttl The time, in seconds, until the iteration session expires. The iteration token is only valid for this length of time. The default value is 15 seconds; the maximal value is 60 seconds. A positive integer up to 60. session-ttl=20 (20 seconds)","title":"Special Parameters"},{"location":"APIReference/Stream/API.Stream.CreateIterator.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Stream/API.Stream.CreateIterator.html#call","text":"cm-well-host /permid.org?op=create-iterator length=5","title":"Call"},{"location":"APIReference/Stream/API.Stream.CreateIterator.html#results","text":"{ type : IterationResults , iteratorId : YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjE3Ny40OjM5MjczL3VzZXIvJHVEaSMtMTEzMjgyNDQ5OA , totalHits :90964672, infotons :[]} Note If the iteration process fails in the middle for any reason, you might be able to resume with last token within the TTL window. Otherwise you'll have to restart the process from the beginning (that is, iterate again over all infotons that match the query). An alternative is to use the consumer API (see Related Topics ), which allows you to save the iteration state and restart from the same point after a failure.","title":"Results"},{"location":"APIReference/Stream/API.Stream.CreateIterator.html#related-topics","text":"Get Next Chunk Create Consumer Consume Next Chunk","title":"Related Topics"},{"location":"APIReference/Stream/API.Stream.GetNextChunk.html","text":"Get Next Chunk Description If you wish to retrieve a large number of infotons, but you want to iterate over small \"chunks\" of data in a controlled fashion, you can use the create-iterator and next-chunk APIs. This allows you to request the number of infotons you want to process, and receive only that number during each iteration. The process requires two different API calls: Call create-iterator to receive an iterator ID (in the iteratorId field) for the query. Repeatedly call next-chunk , while passing the iterator ID that you received in the iteratorId field in the previous chunk results. The process ends when CM-Well returns an empty list. Syntax URL: cm-well-host / cm-well-path REST verb: GET Mandatory parameters: op=next-chunk Template: cm-well-host / cm-well-path ?op=next-chunk format= format iterator-id= iteratorId URL example: cm-well-host /permid.org?op=next-chunk format=json iterator-id=YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjE3Ny43OjUzMDY3L3VzZXIvJENscCM4MjY5NjY1NzQ Curl example (REST API): Curl -X GET cm-well-host /permid.org?op=next-chunk format=json iterator-id=YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjE3Ny43OjUzMDY3L3VzZXIvJENscCM4MjY5NjY1NzQ Note An alternate syntax for retrieving the next chunk is: Template: cm-well-host /_iterate?iterator-id= token Example: curl \" cm-well-host /_iterate?iterator-id=YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjczLjE2MTo0MDEzMi91c2VyLyRHfmViIy04MDc5OTg5OTQ\" Special Parameters Parameter Description Values Example session-ttl The time, in milliseconds, until the iteration session expires. The iteration token is only valid for this length of time. The default value is 15 seconds; the maximal value is 60 seconds. A positive integer up to 60. session-ttl=20 format The output format of the streamed chunks. The default value is ntriples . See Query Parameters . format=ttl Code Example Call curl cm-well-host /permid.org?op=next-chunk iterator-id=YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjE3Ny43OjUzMDY3L3VzZXIvJENscCM4MjY5NjY1NzQ format=json Results { type : IterationResults , iteratorId : YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjE3Ny41OjQxNDAwL3VzZXIvJGdicCMxMjI5ODU0NDI2 , totalHits : 91053224, infotons : [ { type : ObjectInfoton , system : { uuid : b55c0bcc1b97d5488cef8619b7bde9cf , lastModified : 2015-03-08T12:15:03.285Z , path : \\/permid.org\\/1-30064778964 , dataCenter : dc1 , parent : \\/permid.org } }, { type : ObjectInfoton , system : { uuid : f872f4986fd9f3aa5db39b6b492da7cf , lastModified : 2015-04-01T02:05:08.331Z , path : \\/permid.org\\/1-21557484859 , dataCenter : dc1 , parent : \\/permid.org } }, { type : ObjectInfoton , system : { uuid : b5d00287d5de49bfdc583849416f7659 , lastModified : 2015-06-02T22:30:37.385Z , path : \\/permid.org\\/1-5045869909 , dataCenter : dc1 , parent : \\/permid.org } } ] } Note If the iteration process fails in the middle for any reason, you can retry the same request, as long as session-ttl has not passed. And in case the last iterator-id is no longer valid, you will have to restart the process from the beginning (that is, iterate again over all infotons that match the query). An alternative is to use the consumer API, which allows you to save the iteration state and restart from the same point after a failure. See Create Consumer to learn more. Related Topics Create Iterator","title":"Get Next Chunk"},{"location":"APIReference/Stream/API.Stream.GetNextChunk.html#get-next-chunk","text":"","title":"Get Next Chunk"},{"location":"APIReference/Stream/API.Stream.GetNextChunk.html#description","text":"If you wish to retrieve a large number of infotons, but you want to iterate over small \"chunks\" of data in a controlled fashion, you can use the create-iterator and next-chunk APIs. This allows you to request the number of infotons you want to process, and receive only that number during each iteration. The process requires two different API calls: Call create-iterator to receive an iterator ID (in the iteratorId field) for the query. Repeatedly call next-chunk , while passing the iterator ID that you received in the iteratorId field in the previous chunk results. The process ends when CM-Well returns an empty list.","title":"Description"},{"location":"APIReference/Stream/API.Stream.GetNextChunk.html#syntax","text":"URL: cm-well-host / cm-well-path REST verb: GET Mandatory parameters: op=next-chunk Template: cm-well-host / cm-well-path ?op=next-chunk format= format iterator-id= iteratorId URL example: cm-well-host /permid.org?op=next-chunk format=json iterator-id=YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjE3Ny43OjUzMDY3L3VzZXIvJENscCM4MjY5NjY1NzQ Curl example (REST API): Curl -X GET cm-well-host /permid.org?op=next-chunk format=json iterator-id=YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjE3Ny43OjUzMDY3L3VzZXIvJENscCM4MjY5NjY1NzQ Note An alternate syntax for retrieving the next chunk is: Template: cm-well-host /_iterate?iterator-id= token Example: curl \" cm-well-host /_iterate?iterator-id=YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjczLjE2MTo0MDEzMi91c2VyLyRHfmViIy04MDc5OTg5OTQ\"","title":"Syntax"},{"location":"APIReference/Stream/API.Stream.GetNextChunk.html#special-parameters","text":"Parameter Description Values Example session-ttl The time, in milliseconds, until the iteration session expires. The iteration token is only valid for this length of time. The default value is 15 seconds; the maximal value is 60 seconds. A positive integer up to 60. session-ttl=20 format The output format of the streamed chunks. The default value is ntriples . See Query Parameters . format=ttl","title":"Special Parameters"},{"location":"APIReference/Stream/API.Stream.GetNextChunk.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Stream/API.Stream.GetNextChunk.html#call","text":"curl cm-well-host /permid.org?op=next-chunk iterator-id=YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjE3Ny43OjUzMDY3L3VzZXIvJENscCM4MjY5NjY1NzQ format=json","title":"Call"},{"location":"APIReference/Stream/API.Stream.GetNextChunk.html#results","text":"{ type : IterationResults , iteratorId : YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjE3Ny41OjQxNDAwL3VzZXIvJGdicCMxMjI5ODU0NDI2 , totalHits : 91053224, infotons : [ { type : ObjectInfoton , system : { uuid : b55c0bcc1b97d5488cef8619b7bde9cf , lastModified : 2015-03-08T12:15:03.285Z , path : \\/permid.org\\/1-30064778964 , dataCenter : dc1 , parent : \\/permid.org } }, { type : ObjectInfoton , system : { uuid : f872f4986fd9f3aa5db39b6b492da7cf , lastModified : 2015-04-01T02:05:08.331Z , path : \\/permid.org\\/1-21557484859 , dataCenter : dc1 , parent : \\/permid.org } }, { type : ObjectInfoton , system : { uuid : b5d00287d5de49bfdc583849416f7659 , lastModified : 2015-06-02T22:30:37.385Z , path : \\/permid.org\\/1-5045869909 , dataCenter : dc1 , parent : \\/permid.org } } ] } Note If the iteration process fails in the middle for any reason, you can retry the same request, as long as session-ttl has not passed. And in case the last iterator-id is no longer valid, you will have to restart the process from the beginning (that is, iterate again over all infotons that match the query). An alternative is to use the consumer API, which allows you to save the iteration state and restart from the same point after a failure. See Create Consumer to learn more.","title":"Results"},{"location":"APIReference/Stream/API.Stream.GetNextChunk.html#related-topics","text":"Create Iterator","title":"Related Topics"},{"location":"APIReference/Stream/API.Stream.StreamInfotons.html","text":"Stream Infotons Description If you want to perform a one-time retrieval of a large amount of CM-Well data, you can do this by using the stream operation. You can define the data you want by its path in CM-Well, and optionally add a query filter and query parameters. The data returned is the list of infotons under the path you specified that match your query filter. Special Parameters Parameter Description Values Example parallelism ( NOTE : Only for the sstream operation.) The number of threads used for concurrent streaming. Positive integers. Default is 10 parallelism=15 Syntax URL: CMWellHost REST verb: GET Mandatory parameters: op=stream Template: cm-well-host ?op=stream format= format qp= field conditions URL example: N/A Curl example (REST API): `curl -X GET cm-well-host /data.com?op=stream format=ntriples qp=type.rdf::http://ont.com/mdaas/Organization ` Code Example Call curl -X GET cm-well-host /data.com?op=stream format=ntriples qp=type.rdf::http://ont.com/mdaas/Organization Results /data.com/2-d9c64e914747b50cc0580159cafd672977f87a2d8f7c424cc0177d60699faa01 /data.com/11-5040863809 /data.com/2-66080e4c7e1711c91d26b608749e7c25a6add39595692be6d001604e2aac28ff /data.com/2-d82480d63501cecdd2b252087043e3a694c6cb1c20d126cbacfdc1aafa9478a0 /data.com/2-91d3d82402a1ef373c3fa47510ffbf3eddab0cb10e8c14061fc1816e0972d8a8 /data.com/2-f0a213ab46218e324fe706fecef492c2413b7a660bdfd7ce3c283f098a7c7e08 /data.com/11-5014941732 /data.com/2-1c1244bb2da2c93b3713c3268797fb3eda3955b794f742baa6c42c9e74a8749a /data.com/2-8d210ecb2c6e6c8407e7ad26df6a663bb75f48f1409e569104b54fac94869adc /data.com/1-39535720416 /data.com/2-5755b0fc4a315fe7a4c161e49694aedf7a1e4bf0114b13399427aa3974ca7958 /data.com/11-5027817174 /data.com/2-cc45840b28a43791097e0dc092e3c6cc76c54692e55aa4e04585fc18f685cc01 /data.com/2-26cfa845e59944ebdee5079e8dd622db85b593e214d17915b7a3431c646f3dc2 /data.com/2-8550d1186554359939b3da9dd8c9809aba7ee03ff0a50d8b2916ac1370face28 /data.com/2-5b4999182e5243784fedccfda13acbb31e8ef081206dcd3bc9cc6a84dbdc7aec /data.com/11-5015222445 /data.com/2-2b152d666e8b3ed47a974a3212999b81d0c2ffcd483a3ad459a7efa51ce10fbe /data.com/2-672d1ece5bb588880c7aeafc23f05927da23fd759914ed4d6e36726eb2059ebf /data.com/2-948cad8a8a3bade9af7576495928a292256f3264641361c70c6fc092fe430289 ... Note A common way to handle data streams is to use the Chunked-Response HTTP Encoding protocol. As the size of the response is unknown when streaming starts, chunks of data are sent, each preceded by its size. A chunk of zero length indicates the end of the stream. If for any reason the streaming operation fails, you will have to retrieve all the data from the beginning. An alternative method is the Consumer API , which is slower than streaming, but if interrupted allows you to resume from where you left off. There are several different implementations of the streaming feature, with different operation names (stream, nstream, mstream, qstream, sstream). They have different approaches and may work better for different types of data (e.g. a small collection vs. a larger collection). If the format is supplied in the call, the resulting infotons' data is returned. If you omit the format parameter, only the infotons' URIs are returned. Only the following formats are supported for the stream command: Format format= Mimetype Text text text/plain Tab-Separated Values tsv text/plain NTriples ntriples text/plain NQuads nquads text/turtle Related Topics Subscribing to Real-Time Updates","title":"Stream Infotons"},{"location":"APIReference/Stream/API.Stream.StreamInfotons.html#stream-infotons","text":"","title":"Stream Infotons"},{"location":"APIReference/Stream/API.Stream.StreamInfotons.html#description","text":"If you want to perform a one-time retrieval of a large amount of CM-Well data, you can do this by using the stream operation. You can define the data you want by its path in CM-Well, and optionally add a query filter and query parameters. The data returned is the list of infotons under the path you specified that match your query filter.","title":"Description"},{"location":"APIReference/Stream/API.Stream.StreamInfotons.html#special-parameters","text":"Parameter Description Values Example parallelism ( NOTE : Only for the sstream operation.) The number of threads used for concurrent streaming. Positive integers. Default is 10 parallelism=15","title":"Special Parameters"},{"location":"APIReference/Stream/API.Stream.StreamInfotons.html#syntax","text":"URL: CMWellHost REST verb: GET Mandatory parameters: op=stream Template: cm-well-host ?op=stream format= format qp= field conditions URL example: N/A Curl example (REST API): `curl -X GET cm-well-host /data.com?op=stream format=ntriples qp=type.rdf::http://ont.com/mdaas/Organization `","title":"Syntax"},{"location":"APIReference/Stream/API.Stream.StreamInfotons.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Stream/API.Stream.StreamInfotons.html#call","text":"curl -X GET cm-well-host /data.com?op=stream format=ntriples qp=type.rdf::http://ont.com/mdaas/Organization","title":"Call"},{"location":"APIReference/Stream/API.Stream.StreamInfotons.html#results","text":"/data.com/2-d9c64e914747b50cc0580159cafd672977f87a2d8f7c424cc0177d60699faa01 /data.com/11-5040863809 /data.com/2-66080e4c7e1711c91d26b608749e7c25a6add39595692be6d001604e2aac28ff /data.com/2-d82480d63501cecdd2b252087043e3a694c6cb1c20d126cbacfdc1aafa9478a0 /data.com/2-91d3d82402a1ef373c3fa47510ffbf3eddab0cb10e8c14061fc1816e0972d8a8 /data.com/2-f0a213ab46218e324fe706fecef492c2413b7a660bdfd7ce3c283f098a7c7e08 /data.com/11-5014941732 /data.com/2-1c1244bb2da2c93b3713c3268797fb3eda3955b794f742baa6c42c9e74a8749a /data.com/2-8d210ecb2c6e6c8407e7ad26df6a663bb75f48f1409e569104b54fac94869adc /data.com/1-39535720416 /data.com/2-5755b0fc4a315fe7a4c161e49694aedf7a1e4bf0114b13399427aa3974ca7958 /data.com/11-5027817174 /data.com/2-cc45840b28a43791097e0dc092e3c6cc76c54692e55aa4e04585fc18f685cc01 /data.com/2-26cfa845e59944ebdee5079e8dd622db85b593e214d17915b7a3431c646f3dc2 /data.com/2-8550d1186554359939b3da9dd8c9809aba7ee03ff0a50d8b2916ac1370face28 /data.com/2-5b4999182e5243784fedccfda13acbb31e8ef081206dcd3bc9cc6a84dbdc7aec /data.com/11-5015222445 /data.com/2-2b152d666e8b3ed47a974a3212999b81d0c2ffcd483a3ad459a7efa51ce10fbe /data.com/2-672d1ece5bb588880c7aeafc23f05927da23fd759914ed4d6e36726eb2059ebf /data.com/2-948cad8a8a3bade9af7576495928a292256f3264641361c70c6fc092fe430289 ... Note A common way to handle data streams is to use the Chunked-Response HTTP Encoding protocol. As the size of the response is unknown when streaming starts, chunks of data are sent, each preceded by its size. A chunk of zero length indicates the end of the stream. If for any reason the streaming operation fails, you will have to retrieve all the data from the beginning. An alternative method is the Consumer API , which is slower than streaming, but if interrupted allows you to resume from where you left off. There are several different implementations of the streaming feature, with different operation names (stream, nstream, mstream, qstream, sstream). They have different approaches and may work better for different types of data (e.g. a small collection vs. a larger collection). If the format is supplied in the call, the resulting infotons' data is returned. If you omit the format parameter, only the infotons' URIs are returned. Only the following formats are supported for the stream command: Format format= Mimetype Text text text/plain Tab-Separated Values tsv text/plain NTriples ntriples text/plain NQuads nquads text/turtle","title":"Results"},{"location":"APIReference/Stream/API.Stream.StreamInfotons.html#related-topics","text":"Subscribing to Real-Time Updates","title":"Related Topics"},{"location":"APIReference/Subscribe/API.Subscribe.PullNewData.html","text":"Pull New Data Description You may want to subscribe to real-time updates of CM-Well, so that your application always has the latest data available. For example, if your application shows Organization data, you may want to ensure that you have the latest information before displaying an organization's details. CM-Well supports two types of real-time subscriptions: Push - Your application provides an address to which CM-Well will post all new infotons that were created under the path you specified (see Subscribe for Pushed Data ). Pull - Your application requests new data created under a specific path. You make one call to subscribe to pulled updates , which returns a token. You then make a call to pull the updates . The pull call only returns when there is new data available. You can make repeated calls to pull , to obtain the latest updates. When you no longer need the real-time updates, terminate the subscription (by calling unsubscribe ), while passing the token you received from the subscribe call. Syntax URL: cm-well-host / cm-well-path REST verb: GET Mandatory parameters: op=pull sub= token Template: curl cm-well-host / cm-well-path ?op=pull sub= token URL example: cm-well-host /permid.org?op=pull sub=YWtrYS50Y3A6Ly9jbS13ZWxsLXBwZUAxMC4yMDQuNzMuMTQ0OjM5NzQwL3VzZXIvYzU3MTY1MTE Curl example (REST API): curl cm-well-host /permid.org?op=pull sub=YWtrYS50Y3A6Ly9jbS13ZWxsLXBwZUAxMC4yMDQuNzMuMTQ0OjM5NzQwL3VzZXIvYzU3MTY1MTE Special Parameters Parameter Description Example sub= token The token you received in response to the subscribe call sub=YWtrYS50Y3A6Ly9jbS13ZWxsLXBwZUAxMC4yMDQuNzMuMTQ0OjM5NzQwL3VzZXIvYzU3MTY1MTE Code Example Call curl cm-well-host /permid.org?op=pull sub=YWtrYS50Y3A6Ly9jbS13ZWxsLXBwZUAxMC4yMDQuNzMuMTQ0OjM5NzQwL3VzZXIvYzU3MTY1MTE format=text Results o:nRSR4409Ea-2016-07-18 sys:data Document \\n Source RNS /Source ... ; sys:dataCenter dc1 ; sys:indexTime 1468833593106 ^^xsd:long ; sys:lastModified 2016-07-18T09:19:51.344Z ^^xsd:dateTime ; sys:length 11981 ^^xsd:long ; sys:mimeType text/plain; utf-8 ; sys:parent /data.com/sc/docs/input/news ; sys:path /data.com/sc/docs/input/news/nRSR4409Ea-2016-07-18 ; sys:type FileInfoton ; sys:uuid 05e3ae867c2928cb7cd2e8ec254bf005 ; supplyChain:Codes LSEN ; supplyChain:DATE 2016-07-18 ^^xsd:dateTime ; supplyChain:Feed UCDP ; supplyChain:MetaCodes.product LSEN ; supplyChain:Source RNS ; supplyChain:Urgency 3 ^^xsd:int . Note Remember to unsubscribe if you no longer need real-time updates. Related Topics Subscribe for Pulled Data Subscribe for Pushed Data Unsubscribe","title":"Pull New Data"},{"location":"APIReference/Subscribe/API.Subscribe.PullNewData.html#pull-new-data","text":"","title":"Pull New Data"},{"location":"APIReference/Subscribe/API.Subscribe.PullNewData.html#description","text":"You may want to subscribe to real-time updates of CM-Well, so that your application always has the latest data available. For example, if your application shows Organization data, you may want to ensure that you have the latest information before displaying an organization's details. CM-Well supports two types of real-time subscriptions: Push - Your application provides an address to which CM-Well will post all new infotons that were created under the path you specified (see Subscribe for Pushed Data ). Pull - Your application requests new data created under a specific path. You make one call to subscribe to pulled updates , which returns a token. You then make a call to pull the updates . The pull call only returns when there is new data available. You can make repeated calls to pull , to obtain the latest updates. When you no longer need the real-time updates, terminate the subscription (by calling unsubscribe ), while passing the token you received from the subscribe call.","title":"Description"},{"location":"APIReference/Subscribe/API.Subscribe.PullNewData.html#syntax","text":"URL: cm-well-host / cm-well-path REST verb: GET Mandatory parameters: op=pull sub= token Template: curl cm-well-host / cm-well-path ?op=pull sub= token URL example: cm-well-host /permid.org?op=pull sub=YWtrYS50Y3A6Ly9jbS13ZWxsLXBwZUAxMC4yMDQuNzMuMTQ0OjM5NzQwL3VzZXIvYzU3MTY1MTE Curl example (REST API): curl cm-well-host /permid.org?op=pull sub=YWtrYS50Y3A6Ly9jbS13ZWxsLXBwZUAxMC4yMDQuNzMuMTQ0OjM5NzQwL3VzZXIvYzU3MTY1MTE","title":"Syntax"},{"location":"APIReference/Subscribe/API.Subscribe.PullNewData.html#special-parameters","text":"Parameter Description Example sub= token The token you received in response to the subscribe call sub=YWtrYS50Y3A6Ly9jbS13ZWxsLXBwZUAxMC4yMDQuNzMuMTQ0OjM5NzQwL3VzZXIvYzU3MTY1MTE","title":"Special Parameters"},{"location":"APIReference/Subscribe/API.Subscribe.PullNewData.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Subscribe/API.Subscribe.PullNewData.html#call","text":"curl cm-well-host /permid.org?op=pull sub=YWtrYS50Y3A6Ly9jbS13ZWxsLXBwZUAxMC4yMDQuNzMuMTQ0OjM5NzQwL3VzZXIvYzU3MTY1MTE format=text","title":"Call"},{"location":"APIReference/Subscribe/API.Subscribe.PullNewData.html#results","text":"o:nRSR4409Ea-2016-07-18 sys:data Document \\n Source RNS /Source ... ; sys:dataCenter dc1 ; sys:indexTime 1468833593106 ^^xsd:long ; sys:lastModified 2016-07-18T09:19:51.344Z ^^xsd:dateTime ; sys:length 11981 ^^xsd:long ; sys:mimeType text/plain; utf-8 ; sys:parent /data.com/sc/docs/input/news ; sys:path /data.com/sc/docs/input/news/nRSR4409Ea-2016-07-18 ; sys:type FileInfoton ; sys:uuid 05e3ae867c2928cb7cd2e8ec254bf005 ; supplyChain:Codes LSEN ; supplyChain:DATE 2016-07-18 ^^xsd:dateTime ; supplyChain:Feed UCDP ; supplyChain:MetaCodes.product LSEN ; supplyChain:Source RNS ; supplyChain:Urgency 3 ^^xsd:int . Note Remember to unsubscribe if you no longer need real-time updates.","title":"Results"},{"location":"APIReference/Subscribe/API.Subscribe.PullNewData.html#related-topics","text":"Subscribe for Pulled Data Subscribe for Pushed Data Unsubscribe","title":"Related Topics"},{"location":"APIReference/Subscribe/API.Subscribe.SubscribeForPulledData.html","text":"Subscribe for Pulled Data Description You may want to subscribe to real-time updates of CM-Well, so that your application always has the latest data available. For example, if your application shows Organization data, you may want to ensure that you have the latest information before displaying an organization's details. CM-Well supports two types of real-time subscriptions: Push - Your application provides an address to which CM-Well will post all new infotons that were created under the path you specified (see Subscribe for Pushed Data ). Pull - Your application requests new data created under a specific path. You make one call to subscribe to pulled updates, which returns a token. You then make a call to pull the updates . The pull call only returns when there is new data available. You can make repeated calls to pull , to obtain the latest updates. When you no longer need the real-time updates, terminate the subscription (by calling unsubscribe ), while passing the token you received from the subscribe call. Syntax URL: cm-well-host REST verb: GET Mandatory parameters: op=subscribe method=pull Template: curl -X GET cm-well-host / cm-well-path ?op=subscribe method=pull format= format qp= query parameters bulk-size= nofInfotons URL example: cm-well-host /permid.org?op=subscribe method=pull qp=CommonName.mdaas:Intel format=ttl bulk-size=1 Curl example (REST API): curl -X GET cm-well-host /permid.org?op=subscribe method=pull qp=CommonName.mdaas:Intel format=ttl bulk-size=1 Special Parameters Parameter Description Values Example method=pull Indicates that the subscription is in pull mode N/A N/A bulk-size The number of infotons you want to pull Integer value =1 bulk-size=10 Code Example Call curl -X GET cm-well-host /permid.org?op=subscribe method=pull qp=CommonName.mdaas:Intel format=ttl bulk-size=1 Results The call returns a subscription token: YWtrYS50Y3A6Ly9jbS13ZWxsLXBwZUAxMC4yMDQuNzMuMTQ3OjU4Nzg1L3VzZXIvMWVlYzg1ZGEs Note Remember to unsubscribe if you no longer need real-time updates. Related Topics Pull New Data Subscribe for Pushed Data Unsubscribe","title":"Subscribe for Pulled Data"},{"location":"APIReference/Subscribe/API.Subscribe.SubscribeForPulledData.html#subscribe-for-pulled-data","text":"","title":"Subscribe for Pulled Data"},{"location":"APIReference/Subscribe/API.Subscribe.SubscribeForPulledData.html#description","text":"You may want to subscribe to real-time updates of CM-Well, so that your application always has the latest data available. For example, if your application shows Organization data, you may want to ensure that you have the latest information before displaying an organization's details. CM-Well supports two types of real-time subscriptions: Push - Your application provides an address to which CM-Well will post all new infotons that were created under the path you specified (see Subscribe for Pushed Data ). Pull - Your application requests new data created under a specific path. You make one call to subscribe to pulled updates, which returns a token. You then make a call to pull the updates . The pull call only returns when there is new data available. You can make repeated calls to pull , to obtain the latest updates. When you no longer need the real-time updates, terminate the subscription (by calling unsubscribe ), while passing the token you received from the subscribe call.","title":"Description"},{"location":"APIReference/Subscribe/API.Subscribe.SubscribeForPulledData.html#syntax","text":"URL: cm-well-host REST verb: GET Mandatory parameters: op=subscribe method=pull Template: curl -X GET cm-well-host / cm-well-path ?op=subscribe method=pull format= format qp= query parameters bulk-size= nofInfotons URL example: cm-well-host /permid.org?op=subscribe method=pull qp=CommonName.mdaas:Intel format=ttl bulk-size=1 Curl example (REST API): curl -X GET cm-well-host /permid.org?op=subscribe method=pull qp=CommonName.mdaas:Intel format=ttl bulk-size=1","title":"Syntax"},{"location":"APIReference/Subscribe/API.Subscribe.SubscribeForPulledData.html#special-parameters","text":"Parameter Description Values Example method=pull Indicates that the subscription is in pull mode N/A N/A bulk-size The number of infotons you want to pull Integer value =1 bulk-size=10","title":"Special Parameters"},{"location":"APIReference/Subscribe/API.Subscribe.SubscribeForPulledData.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Subscribe/API.Subscribe.SubscribeForPulledData.html#call","text":"curl -X GET cm-well-host /permid.org?op=subscribe method=pull qp=CommonName.mdaas:Intel format=ttl bulk-size=1","title":"Call"},{"location":"APIReference/Subscribe/API.Subscribe.SubscribeForPulledData.html#results","text":"The call returns a subscription token: YWtrYS50Y3A6Ly9jbS13ZWxsLXBwZUAxMC4yMDQuNzMuMTQ3OjU4Nzg1L3VzZXIvMWVlYzg1ZGEs Note Remember to unsubscribe if you no longer need real-time updates.","title":"Results"},{"location":"APIReference/Subscribe/API.Subscribe.SubscribeForPulledData.html#related-topics","text":"Pull New Data Subscribe for Pushed Data Unsubscribe","title":"Related Topics"},{"location":"APIReference/Subscribe/API.Subscribe.SubscribeForPushedData.html","text":"Subscribe for Pushed Data Description You may want to subscribe to real-time updates of CM-Well, so that your application always has the latest data available. For example, if your application shows Organization data, you may want to ensure that you have the latest information before displaying an organization's details. CM-Well supports two types of real-time subscriptions: Push - Your application provides an address to which CM-Well will post all new infotons that were created under the path you specified. Pull - Your application requests new data created under a specific path. The call only returns when there is new data available (see Subscribe for Pulled Data ). The subscribe call returns a token that you use when terminating the subscription (calling unsubscribe ). Syntax URL: cm-well-host REST verb: GET Mandatory parameters: op=subscribe method=push Template: curl -X GET cm-well-host / cm-well-path ?op=subscribe method=push qp= query parameters format= format callback= callbackURL URL example: cm-well-host /permid.org?op=subscribe method=push qp=CommonName.mdaas=Intel format=ttl callback=http://mycallback/path Curl example (REST API): curl -X GET cm-well-host /permid.org?op=subscribe method=push qp=CommonName.mdaas=Intel format=ttl callback=http://mycallback/path Special Parameters Parameter Description method=push Indicates that the subscription is in push mode Code Example Call curl -X GET cm-well-host /permid.org?op=subscribe method=push qp=CommonName.mdaas=Intel format=ttl callback=http://mycallback/path Results The call returns a subscription token: YWtrYS50Y3A6Ly9jbS13ZWxsLXBwZUAxMC4yMDQuNzMuMTQ3OjU4Nzg1L3VzZXIvMWVlYzg1ZGEs Note Remember to unsubscribe if you no longer need real-time updates. Related Topics Subscribe for Pulled Data Unsubscribe","title":"Subscribe for Pushed Data"},{"location":"APIReference/Subscribe/API.Subscribe.SubscribeForPushedData.html#subscribe-for-pushed-data","text":"","title":"Subscribe for Pushed Data"},{"location":"APIReference/Subscribe/API.Subscribe.SubscribeForPushedData.html#description","text":"You may want to subscribe to real-time updates of CM-Well, so that your application always has the latest data available. For example, if your application shows Organization data, you may want to ensure that you have the latest information before displaying an organization's details. CM-Well supports two types of real-time subscriptions: Push - Your application provides an address to which CM-Well will post all new infotons that were created under the path you specified. Pull - Your application requests new data created under a specific path. The call only returns when there is new data available (see Subscribe for Pulled Data ). The subscribe call returns a token that you use when terminating the subscription (calling unsubscribe ).","title":"Description"},{"location":"APIReference/Subscribe/API.Subscribe.SubscribeForPushedData.html#syntax","text":"URL: cm-well-host REST verb: GET Mandatory parameters: op=subscribe method=push Template: curl -X GET cm-well-host / cm-well-path ?op=subscribe method=push qp= query parameters format= format callback= callbackURL URL example: cm-well-host /permid.org?op=subscribe method=push qp=CommonName.mdaas=Intel format=ttl callback=http://mycallback/path Curl example (REST API): curl -X GET cm-well-host /permid.org?op=subscribe method=push qp=CommonName.mdaas=Intel format=ttl callback=http://mycallback/path","title":"Syntax"},{"location":"APIReference/Subscribe/API.Subscribe.SubscribeForPushedData.html#special-parameters","text":"Parameter Description method=push Indicates that the subscription is in push mode","title":"Special Parameters"},{"location":"APIReference/Subscribe/API.Subscribe.SubscribeForPushedData.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Subscribe/API.Subscribe.SubscribeForPushedData.html#call","text":"curl -X GET cm-well-host /permid.org?op=subscribe method=push qp=CommonName.mdaas=Intel format=ttl callback=http://mycallback/path","title":"Call"},{"location":"APIReference/Subscribe/API.Subscribe.SubscribeForPushedData.html#results","text":"The call returns a subscription token: YWtrYS50Y3A6Ly9jbS13ZWxsLXBwZUAxMC4yMDQuNzMuMTQ3OjU4Nzg1L3VzZXIvMWVlYzg1ZGEs Note Remember to unsubscribe if you no longer need real-time updates.","title":"Results"},{"location":"APIReference/Subscribe/API.Subscribe.SubscribeForPushedData.html#related-topics","text":"Subscribe for Pulled Data Unsubscribe","title":"Related Topics"},{"location":"APIReference/Subscribe/API.Subscribe.Unsubscribe.html","text":"Unsubscribe from Updates Description If you have subscribed for real-time updates via pushed or pulled data, you can unsubscribe if you no longer need these updates. The call to unsubscribe is the same, regardless of whether you have requested pushed or pulled data. Syntax URL: CMWellHost REST verb: GET Mandatory parameters: op=unsubscribe sub= subscriptionToken Template: curl -X GET cm-well-host / cm-well-path ?op=unsubscribe sub= subscriptionToken URL example: cm-well-host /permid.org?op=unsubscribe sub=YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjczLjE2ODo1NjA2MS91c2VyLzNkMDZjZWE1 Curl example (REST API): curl -X GET cm-well-host /permid.org?op=unsubscribe sub=YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjczLjE2ODo1NjA2MS91c2VyLzNkMDZjZWE1 Special Parameters Parameter Description Example sub The token you received from the subscription call sub=YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjczLjE2ODo1NjA2MS91c2VyLzNkMDZjZWE1 Code Example Call curl -X GET cm-well-host /permid.org?op=unsubscribe sub=YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjczLjE2ODo1NjA2MS91c2VyLzNkMDZjZWE1 Results The call returns a subscription token: unsubscribe YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjczLjE2ODo1NjA2MS91c2VyLzNkMDZjZWE1 Related Topics Subscribe for Pulled Data Subscribe for Pushed Data","title":"Unsubscribe from Updates"},{"location":"APIReference/Subscribe/API.Subscribe.Unsubscribe.html#unsubscribe-from-updates","text":"","title":"Unsubscribe from Updates"},{"location":"APIReference/Subscribe/API.Subscribe.Unsubscribe.html#description","text":"If you have subscribed for real-time updates via pushed or pulled data, you can unsubscribe if you no longer need these updates. The call to unsubscribe is the same, regardless of whether you have requested pushed or pulled data.","title":"Description"},{"location":"APIReference/Subscribe/API.Subscribe.Unsubscribe.html#syntax","text":"URL: CMWellHost REST verb: GET Mandatory parameters: op=unsubscribe sub= subscriptionToken Template: curl -X GET cm-well-host / cm-well-path ?op=unsubscribe sub= subscriptionToken URL example: cm-well-host /permid.org?op=unsubscribe sub=YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjczLjE2ODo1NjA2MS91c2VyLzNkMDZjZWE1 Curl example (REST API): curl -X GET cm-well-host /permid.org?op=unsubscribe sub=YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjczLjE2ODo1NjA2MS91c2VyLzNkMDZjZWE1","title":"Syntax"},{"location":"APIReference/Subscribe/API.Subscribe.Unsubscribe.html#special-parameters","text":"Parameter Description Example sub The token you received from the subscription call sub=YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjczLjE2ODo1NjA2MS91c2VyLzNkMDZjZWE1","title":"Special Parameters"},{"location":"APIReference/Subscribe/API.Subscribe.Unsubscribe.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Subscribe/API.Subscribe.Unsubscribe.html#call","text":"curl -X GET cm-well-host /permid.org?op=unsubscribe sub=YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjczLjE2ODo1NjA2MS91c2VyLzNkMDZjZWE1","title":"Call"},{"location":"APIReference/Subscribe/API.Subscribe.Unsubscribe.html#results","text":"The call returns a subscription token: unsubscribe YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjczLjE2ODo1NjA2MS91c2VyLzNkMDZjZWE1","title":"Results"},{"location":"APIReference/Subscribe/API.Subscribe.Unsubscribe.html#related-topics","text":"Subscribe for Pulled Data Subscribe for Pushed Data","title":"Related Topics"},{"location":"APIReference/Traversal/API.Traversal.Intro.html","text":"Introduction to Graph Traversal Outbound and Inbound Links As you know by now, CM-Well is a linked data repository. This means that CM-Well entities (infotons) are stored in a graph structure, where infotons are graph nodes, and links between them are graph edges. But what are the links between infotons? Infoton field values can be links to infotons, or in other words, URIs of other infotons. For example, if an infoton represents CompanyA, and in its hasImmediateParent field there's a URI pointing to CompanyB, then CompanyA is said to have an outbound link to CompanyB, and CompanyB has an inbound link from CompanyA. If we have the CompanyA infoton and we want to find its parent company, we can retrieve it by following the outbound link in CompanyA's hasImmediateParent field. On the other hand, if we want to find CompanyA's child companies, we could follow inbound links from other infotons' hasImmediateParent fields that point to CompanyA. Traversing the CM-Well Graph CM-Well's graph structure allows you to discover direct and indirect connections between entities, by exploring the links between infotons. To find those connections, you need to traverse the CM-Well graph from one infoton to the next. Two infotons might be connected indirectly by several links, and each time you traverse a link, you might be \"traveling\" in an outbound or inbound direction, relative to the infoton you started from. For example, in the following graph, circles represent infotons and black arrows represent their inbound and outbound links with each other. The green arrows show a directed path from A (the orange infoton) to B (the pink infoton). To arrive from A to B we traverse: An outbound link to the blue node. An inbound link to the purple node. An inbound link to the green node. An outbound link to the pink node. The CM-Well API supports the graph traversal operators xg , yg and gqp . These operators allow you to perform the following actions on query results: xg - Add outbound links to query results. yg - Add both inbound and outbound links to query results. qgp - Filter query results according to field values of inbound and outbound links. Click on the xg , yg and gqp links above to read more about each operator. Note You cannot use the graph traversal operators together with the with-history flag (an attempt to do this will result in an error). This is because the inbound and outbound links are not well-defined when including multiple historical versions of each infoton.","title":"Introduction to Graph Traversal"},{"location":"APIReference/Traversal/API.Traversal.Intro.html#introduction-to-graph-traversal","text":"","title":"Introduction to Graph Traversal"},{"location":"APIReference/Traversal/API.Traversal.Intro.html#outbound-and-inbound-links","text":"As you know by now, CM-Well is a linked data repository. This means that CM-Well entities (infotons) are stored in a graph structure, where infotons are graph nodes, and links between them are graph edges. But what are the links between infotons? Infoton field values can be links to infotons, or in other words, URIs of other infotons. For example, if an infoton represents CompanyA, and in its hasImmediateParent field there's a URI pointing to CompanyB, then CompanyA is said to have an outbound link to CompanyB, and CompanyB has an inbound link from CompanyA. If we have the CompanyA infoton and we want to find its parent company, we can retrieve it by following the outbound link in CompanyA's hasImmediateParent field. On the other hand, if we want to find CompanyA's child companies, we could follow inbound links from other infotons' hasImmediateParent fields that point to CompanyA.","title":"Outbound and Inbound Links"},{"location":"APIReference/Traversal/API.Traversal.Intro.html#traversing-the-cm-well-graph","text":"CM-Well's graph structure allows you to discover direct and indirect connections between entities, by exploring the links between infotons. To find those connections, you need to traverse the CM-Well graph from one infoton to the next. Two infotons might be connected indirectly by several links, and each time you traverse a link, you might be \"traveling\" in an outbound or inbound direction, relative to the infoton you started from. For example, in the following graph, circles represent infotons and black arrows represent their inbound and outbound links with each other. The green arrows show a directed path from A (the orange infoton) to B (the pink infoton). To arrive from A to B we traverse: An outbound link to the blue node. An inbound link to the purple node. An inbound link to the green node. An outbound link to the pink node. The CM-Well API supports the graph traversal operators xg , yg and gqp . These operators allow you to perform the following actions on query results: xg - Add outbound links to query results. yg - Add both inbound and outbound links to query results. qgp - Filter query results according to field values of inbound and outbound links. Click on the xg , yg and gqp links above to read more about each operator. Note You cannot use the graph traversal operators together with the with-history flag (an attempt to do this will result in an error). This is because the inbound and outbound links are not well-defined when including multiple historical versions of each infoton.","title":"Traversing the CM-Well Graph"},{"location":"APIReference/Traversal/API.Traversal.Operands.html","text":"Traversal Operands Traversal Operands Summary Table The following table summarizes the operands that the xg , yg and gqp flags can take, and how they affect query results. See more details about the operands in the sections below the table (or by clicking the links in the table). Operand Description Supported for Example xg with no operands Adds all level-1 outbound links in all fields xg cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership with-data xg xg traversal level Adds all outbound links in all fields of query results, then all outbound links of the expanded set, and so on up to the traversal level specified. xg cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership with-data xg=3 xg traversal fields Adds all outbound links in the specified field or fields. As this option is only available for the xg flag, it refers implicitly to outbound links, even though the operator is not used. xg cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership with-data xg=hasImmediateParent.mdaas Multiple inbound or outbound traversal fields Comma-separated field lists can also appear after the and operators. xg, yg, gqp cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership with-data yg= hasImmediateParent.mdaas,hasUltimateParent.mdaas >[FieldName] Extends the traversal path with outbound links in the specified field. xg, yg, gqp cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership with-data xg=hasImmediateParent.mdaas hasUltimateParent.mdaas Field wildcard _ In field name clauses, refers to any field containing an infoton URI. xg cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership with-data xg=hasImmediateParent.mdaas _ Field value filter Only continue along the traversal path if the infoton in the path meets the field value condition. xg, yg, gqp cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership with-data xg=hasImmediateParent.mdaas[organizationCity.mdaas:New%20York] \\ [FieldName] Extend the traversal path with inbound links to the specified field. yg, gqp cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership with-data yg= hasImmediateParent.mdaas Multiple pipe-separated traversal paths For yg : traverse several paths in one query. For gqp : perform an \"or\" among the filters. yg, gqp yg : cm-well-host /example.org/Individuals/MrPresident?yg= hasTenant.xmpl location.locn\\| birthPlace.madsrdf . gqp : cm-well-host /?op=search qp=type.rdf:Person gqp= hasTenant.xmpl[hasBeginning.time 2000-01-01] location.locn[name.geonames::The White House]\\| birthPlace.madsrdf[-countryCode::US] Traversal Operands Details xg with No Operands When the xg flag appears with no operands, the query results will contain (in addition to the infotons that matched the query) all infotons that are outbound links of the matched infotons. These outbound links may be infotons of any type. xg Traversal Level You can add a numeric traversal level operand to the xg flag, which is a value between 1 and 9. xg= integer For example: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando with-data format=ttl xg=2 The query above returns the matched infotons, their outbound links, and the outbound links of the \"level 1\" outbound links. In other words, xg=2 retrieves both 1st and 2nd level outbound links, originating from the query matches. Note xg=1 is equivalent to xg with no operands. The value of the xg parameter is limited to 9, but it is recommended to use smaller values (e.g. 1 or 2). The xg parameter should be used with caution, as larger numbers may result in very large data sets being returned. If you find you need a larger expansion level (e.g. 9 or above), this may indicate an inefficient data model or query. xg Traversal Fields Rather than requesting all outbound links, you can request only the outbound links that appear in a certain field or list of fields. To do this, add xg= followed by a single field name or list of comma-separated field names. xg= fieldName xg= fieldName , fieldName ,..., fieldName For example, if you're querying for organizations and you're only interested in retrieving their immediate parent organizations, you could run the following query: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando format=ttl with-data xg=hasImmediateParent.mdaas If you wanted to retrieve both immediate parents and ultimate parents, you could run the following query: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando format=ttl with-data xg=hasImmediateParent.mdaas,hasUltimateParent.mdaas Multiple Inbound or Outbound Traversal Fields The previous section refers only to field lists in the xg value, with no other operands. You can also use comma-separated field lists after the and operators. For example, the following query retrieves all infotons that point to the initial query's result set through the hasImmediateParent and hasUltimateParent fields: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando format=ttl with-data yg= hasImmediateParent.mdaas,hasUltimateParent.mdaas Outbound Link Operator (' ') Suppose you have defined an xg value that returns a certain set of outbound links. You can then further expand this set to refer to higher levels of outbound links, using the ' ' operator. xg= outboundExpansion fieldIdentifier For example: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando format=ttl with-data xg=hasImmediateParent.mdaas hasUltimateParent.mdaas This query retrieves the outbound links in the hasImmediateParent fields of the matched infotons, and in addition, the outbound links in the hasUltimateParent fields of the level 1 outbound links. You can add a \"chain\" of several outbound link operators with field identifiers, to retrieve more and more remote links, as follows: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando format=ttl with-data xg=hasImmediateParent.mdaas hasImmediateParent.mdaas hasImmediateParent.mdaas Field Wildcard Instead of adding a specific field name after the ' ' operator, you can use the wildcard character '_' to indicate all fields. For example: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando format=ttl with-data xg=hasImmediateParent.mdaas _ This query retrieves the outbound links in the hasImmediateParent fields of the matched infotons, and in addition, the outbound links all fields of the level 1 outbound links. Field Value Filter You can add field filters to constrain the additional infotons retrieved by the traversal flag. You do this by adding the field filters in [ ] brackets after the expansion definition. xg = traversalClause [ field filter ] yg = traversalClause [ field filter ] gqp = traversalClause [ field filter ] Note The syntax of the field filter is the same as for the qp parameter . The fuzzy match operator ~ is not supported for outbound links. For example: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando format=ttl with-data xg=hasImmediateParent.mdaas[organizationCity.mdaas:New%20York] This query retrieves the outbound links in the hasImmediateParent fields of the matched infotons, but only those whose city field value is \"New York\". Inbound Link Operator (' ') The yg flag allows you to traverse both infotons' outbound links and their inbound links. When you add yg to a CM-Well query, for each infoton result of the query, CM-Well traverses the path defined by the yg value, and adds the infotons in that path to the query results. In yg syntax, indicates an outbound link and indicates an inbound link. Here is an example of a query that traverses inbound links: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando format=ttl with-data yg= hasImmediateParent.mdaas hasImmediateParent.mdaas This query retrieves all infotons that point to the matched infotons through their hasImmediateParent field, and also all infotons that point to the level 1 inbound links through their hasImmediateParent field. In other words, it retrieves the child companies of the matched infotons, and also the child companies of those child companies. Multiple Pipe-Separated Traversal Paths Multiple Paths for yg If you want to expand along several paths using a single query, you can add several expansion expressions separated by the pipe ('|') operator. For example, supposed we've uploaded the following information to CM-Well, which refers to the individual MrPresident : @ prefix foaf : http :// xmlns . com / foaf / 0 . 1 / . @ prefix dc : http :// purl . org / dc / terms / . @ prefix locn : http :// www . w3 . org / ns / locn # . @ prefix madsrdf : http :// www . loc . gov / mads / rdf / v1 # . @ prefix geonames : http :// www . geonames . org / ontology # . @ prefix geo : http :// www . w3 . org / 2003 / 01 / geo / wgs84_pos # . @ prefix xmpl : http :// ont . example . org / 2017 / v1 . 0 # . @ prefix time : http :// www . w3 . org / 2006 / time # . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix rdfs : http :// www . w3 . org / 2000 / 01 / rdf-schema # . @ prefix cc : http :// creativecommons . org / ns # . http :// example . org / Individuals / MrPresident a foaf : Person ; madsrdf : birthPlace http :// sws . geonames . org / 5122525 / . http :// example . org / Residence / fedcba98-7654-3210-1234-56789abcdef0 a xmpl : Residence ; locn : location http :// sws . geonames . org / 5122525 / ; xmpl : hasTenant http :// example . org / Individuals / MrPresident ; time : hasBeginning 2017-01-20 ^^ xsd : date ; time : hasEnd TBD . http :// sws . geonames . org / 5122525 / a geonames : Feature ; rdfs : isDefinedBy http :// sws . geonames . org / 5122525 / about . rdf ; geonames : name Jamaica Hospital Medical Center ; geonames : alternateName Jamaica Hospital ; geonames : officialName Jamaica Hospital Medical Center @ en ; geonames : featureClass geonames : S ; geonames : featureCode geonames : S \\ . HSP ; geonames : countryCode US ; geo : lat 40.70078 ^^ xsd : decimal ; geo : long -73.81635 ^^ xsd : decimal ; geo : alt 18 ^^ xsd : decimal ; geonames : parentFeature http :// sws . geonames . org / 5133268 / ; geonames : parentCountry http :// sws . geonames . org / 6252001 / ; geonames : parentADM1 http :// sws . geonames . org / 5128638 / ; geonames : parentADM2 http :// sws . geonames . org / 5133268 / ; geonames : nearbyFeatures http :// sws . geonames . org / 5122525 / nearby . rdf ; geonames : locationMap http :// www . geonames . org / 5122525 / jamaica-hospital-medical-center . html . http :// sws . geonames . org / 5122525 / about . rdf a foaf : Document ; foaf : primaryTopic http :// sws . geonames . org / 5122525 / ; cc : license http :// creativecommons . org / licenses / by / 3 . 0 / ; cc : attributionURL http :// sws . geonames . org / 5122525 / ; cc : attributionName GeoNames ^^ xsd : string ; dc : created 2006-01-15 ^^ xsd : date ; dc : modified 2016-12-06 ^^ xsd : date . http :// sws . geonames . org / 4140704 / a http :// www . geonames . org / ontology # Feature ; rdfs : isDefinedBy http :// sws . geonames . org / 4140704 / about . rdf ; geonames : name The White House ; geonames : alternateName Executive Mansion , Presidents House , Presidents Palace , White House @ en ; geonames : officialName Maison Blanche @ fr , The White House @ en , Wei\u00dfes Haus @ de ; geonames : featureClass geonames : S ; geonames : featureCode geonames : S \\ . BLDG ; geonames : countryCode US ; geo : lat 38.89761 ^^ xsd : decimal ; geo : long -77.03637 ^^ xsd : decimal ; geo : alt 17 ^^ xsd : decimal ; geonames : parentFeature http :// sws . geonames . org / 4140987 / ; geonames : parentCountry http :// sws . geonames . org / 6252001 / ; geonames : parentADM1 http :// sws . geonames . org / 4138106 / ; geonames : parentADM2 http :// sws . geonames . org / 4140987 / ; geonames : nearbyFeatures http :// sws . geonames . org / 4140704 / nearby . rdf ; geonames : locationMap http :// www . geonames . org / 4140704 / the-white-house . html . http :// sws . geonames . org / 4140704 / about . rdf a foaf : Document ; foaf : primaryTopic http :// sws . geonames . org / 4140704 / ; cc : license http :// creativecommons . org / licenses / by / 3 . 0 / ; cc : attributionURL http :// sws . geonames . org / 4140704 / ; cc : attributionName GeoNames ^^ xsd : string ; dc : created 2006-01-15 ^^ xsd : date ; dc : modified 2014-08-04 ^^ xsd : date . In a single query, the following call retrieves both the place that MrPresident was born (via an outbound link), and all the places where MrPresident lived (via a combination of inbound and outbound links): cm-well-host /example.org/Individuals/MrPresident?yg= hasTenant.xmpl location.locn| birthPlace.madsrdf You can add as many pipe-separated expansion expressions to one query as you want. The results are the equivalent of running each expansion query separately and pooling all their results. Multiple Paths for gqp As for the yg query, you can add several filter expressions to a single gqp query, separated by the pipe ('|') operator. However, the behavior of the complex expression is different than for yg . When piped expressions are used with gqp , CM-Well applies \"or\" logic among them. This means that in order to match the filter, an infoton only needs to match one of the piped expressions. For example, if applied to the RDF data above , the following query retrieves all the US presidents that either were born outside the US, or were living in the White House before 2000: cm-well-host /?op=search qp=type.rdf:Person gqp= hasTenant.xmpl[hasBeginning.time 2000-01-01] location.locn[name.geonames::The White House]| birthPlace.madsrdf[-countryCode::US]","title":"Traversal Operands"},{"location":"APIReference/Traversal/API.Traversal.Operands.html#traversal-operands","text":"","title":"Traversal Operands"},{"location":"APIReference/Traversal/API.Traversal.Operands.html#traversal-operands-summary-table","text":"The following table summarizes the operands that the xg , yg and gqp flags can take, and how they affect query results. See more details about the operands in the sections below the table (or by clicking the links in the table). Operand Description Supported for Example xg with no operands Adds all level-1 outbound links in all fields xg cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership with-data xg xg traversal level Adds all outbound links in all fields of query results, then all outbound links of the expanded set, and so on up to the traversal level specified. xg cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership with-data xg=3 xg traversal fields Adds all outbound links in the specified field or fields. As this option is only available for the xg flag, it refers implicitly to outbound links, even though the operator is not used. xg cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership with-data xg=hasImmediateParent.mdaas Multiple inbound or outbound traversal fields Comma-separated field lists can also appear after the and operators. xg, yg, gqp cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership with-data yg= hasImmediateParent.mdaas,hasUltimateParent.mdaas >[FieldName] Extends the traversal path with outbound links in the specified field. xg, yg, gqp cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership with-data xg=hasImmediateParent.mdaas hasUltimateParent.mdaas Field wildcard _ In field name clauses, refers to any field containing an infoton URI. xg cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership with-data xg=hasImmediateParent.mdaas _ Field value filter Only continue along the traversal path if the infoton in the path meets the field value condition. xg, yg, gqp cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership with-data xg=hasImmediateParent.mdaas[organizationCity.mdaas:New%20York] \\ [FieldName] Extend the traversal path with inbound links to the specified field. yg, gqp cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership with-data yg= hasImmediateParent.mdaas Multiple pipe-separated traversal paths For yg : traverse several paths in one query. For gqp : perform an \"or\" among the filters. yg, gqp yg : cm-well-host /example.org/Individuals/MrPresident?yg= hasTenant.xmpl location.locn\\| birthPlace.madsrdf . gqp : cm-well-host /?op=search qp=type.rdf:Person gqp= hasTenant.xmpl[hasBeginning.time 2000-01-01] location.locn[name.geonames::The White House]\\| birthPlace.madsrdf[-countryCode::US]","title":"Traversal Operands Summary Table"},{"location":"APIReference/Traversal/API.Traversal.Operands.html#traversal-operands-details","text":"","title":"Traversal Operands Details"},{"location":"APIReference/Traversal/API.Traversal.Operands.html#xg-with-no-operands","text":"When the xg flag appears with no operands, the query results will contain (in addition to the infotons that matched the query) all infotons that are outbound links of the matched infotons. These outbound links may be infotons of any type.","title":"xg with No Operands"},{"location":"APIReference/Traversal/API.Traversal.Operands.html#xg-traversal-level","text":"You can add a numeric traversal level operand to the xg flag, which is a value between 1 and 9. xg= integer For example: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando with-data format=ttl xg=2 The query above returns the matched infotons, their outbound links, and the outbound links of the \"level 1\" outbound links. In other words, xg=2 retrieves both 1st and 2nd level outbound links, originating from the query matches. Note xg=1 is equivalent to xg with no operands. The value of the xg parameter is limited to 9, but it is recommended to use smaller values (e.g. 1 or 2). The xg parameter should be used with caution, as larger numbers may result in very large data sets being returned. If you find you need a larger expansion level (e.g. 9 or above), this may indicate an inefficient data model or query.","title":"xg Traversal Level"},{"location":"APIReference/Traversal/API.Traversal.Operands.html#xg-traversal-fields","text":"Rather than requesting all outbound links, you can request only the outbound links that appear in a certain field or list of fields. To do this, add xg= followed by a single field name or list of comma-separated field names. xg= fieldName xg= fieldName , fieldName ,..., fieldName For example, if you're querying for organizations and you're only interested in retrieving their immediate parent organizations, you could run the following query: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando format=ttl with-data xg=hasImmediateParent.mdaas If you wanted to retrieve both immediate parents and ultimate parents, you could run the following query: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando format=ttl with-data xg=hasImmediateParent.mdaas,hasUltimateParent.mdaas","title":"xg Traversal Fields"},{"location":"APIReference/Traversal/API.Traversal.Operands.html#multiple-inbound-or-outbound-traversal-fields","text":"The previous section refers only to field lists in the xg value, with no other operands. You can also use comma-separated field lists after the and operators. For example, the following query retrieves all infotons that point to the initial query's result set through the hasImmediateParent and hasUltimateParent fields: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando format=ttl with-data yg= hasImmediateParent.mdaas,hasUltimateParent.mdaas","title":"Multiple Inbound or Outbound Traversal Fields"},{"location":"APIReference/Traversal/API.Traversal.Operands.html#outbound-link-operator","text":"Suppose you have defined an xg value that returns a certain set of outbound links. You can then further expand this set to refer to higher levels of outbound links, using the ' ' operator. xg= outboundExpansion fieldIdentifier For example: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando format=ttl with-data xg=hasImmediateParent.mdaas hasUltimateParent.mdaas This query retrieves the outbound links in the hasImmediateParent fields of the matched infotons, and in addition, the outbound links in the hasUltimateParent fields of the level 1 outbound links. You can add a \"chain\" of several outbound link operators with field identifiers, to retrieve more and more remote links, as follows: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando format=ttl with-data xg=hasImmediateParent.mdaas hasImmediateParent.mdaas hasImmediateParent.mdaas","title":"Outbound Link Operator ('&gt;')"},{"location":"APIReference/Traversal/API.Traversal.Operands.html#field-wildcard","text":"Instead of adding a specific field name after the ' ' operator, you can use the wildcard character '_' to indicate all fields. For example: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando format=ttl with-data xg=hasImmediateParent.mdaas _ This query retrieves the outbound links in the hasImmediateParent fields of the matched infotons, and in addition, the outbound links all fields of the level 1 outbound links.","title":"Field Wildcard"},{"location":"APIReference/Traversal/API.Traversal.Operands.html#field-value-filter","text":"You can add field filters to constrain the additional infotons retrieved by the traversal flag. You do this by adding the field filters in [ ] brackets after the expansion definition. xg = traversalClause [ field filter ] yg = traversalClause [ field filter ] gqp = traversalClause [ field filter ] Note The syntax of the field filter is the same as for the qp parameter . The fuzzy match operator ~ is not supported for outbound links. For example: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando format=ttl with-data xg=hasImmediateParent.mdaas[organizationCity.mdaas:New%20York] This query retrieves the outbound links in the hasImmediateParent fields of the matched infotons, but only those whose city field value is \"New York\".","title":"Field Value Filter"},{"location":"APIReference/Traversal/API.Traversal.Operands.html#inbound-link-operator","text":"The yg flag allows you to traverse both infotons' outbound links and their inbound links. When you add yg to a CM-Well query, for each infoton result of the query, CM-Well traverses the path defined by the yg value, and adds the infotons in that path to the query results. In yg syntax, indicates an outbound link and indicates an inbound link. Here is an example of a query that traverses inbound links: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando format=ttl with-data yg= hasImmediateParent.mdaas hasImmediateParent.mdaas This query retrieves all infotons that point to the matched infotons through their hasImmediateParent field, and also all infotons that point to the level 1 inbound links through their hasImmediateParent field. In other words, it retrieves the child companies of the matched infotons, and also the child companies of those child companies.","title":"Inbound Link Operator ('&lt;')"},{"location":"APIReference/Traversal/API.Traversal.Operands.html#multiple-pipe-separated-traversal-paths","text":"","title":"Multiple Pipe-Separated Traversal Paths"},{"location":"APIReference/Traversal/API.Traversal.Operands.html#multiple-paths-for-yg","text":"If you want to expand along several paths using a single query, you can add several expansion expressions separated by the pipe ('|') operator. For example, supposed we've uploaded the following information to CM-Well, which refers to the individual MrPresident : @ prefix foaf : http :// xmlns . com / foaf / 0 . 1 / . @ prefix dc : http :// purl . org / dc / terms / . @ prefix locn : http :// www . w3 . org / ns / locn # . @ prefix madsrdf : http :// www . loc . gov / mads / rdf / v1 # . @ prefix geonames : http :// www . geonames . org / ontology # . @ prefix geo : http :// www . w3 . org / 2003 / 01 / geo / wgs84_pos # . @ prefix xmpl : http :// ont . example . org / 2017 / v1 . 0 # . @ prefix time : http :// www . w3 . org / 2006 / time # . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix rdfs : http :// www . w3 . org / 2000 / 01 / rdf-schema # . @ prefix cc : http :// creativecommons . org / ns # . http :// example . org / Individuals / MrPresident a foaf : Person ; madsrdf : birthPlace http :// sws . geonames . org / 5122525 / . http :// example . org / Residence / fedcba98-7654-3210-1234-56789abcdef0 a xmpl : Residence ; locn : location http :// sws . geonames . org / 5122525 / ; xmpl : hasTenant http :// example . org / Individuals / MrPresident ; time : hasBeginning 2017-01-20 ^^ xsd : date ; time : hasEnd TBD . http :// sws . geonames . org / 5122525 / a geonames : Feature ; rdfs : isDefinedBy http :// sws . geonames . org / 5122525 / about . rdf ; geonames : name Jamaica Hospital Medical Center ; geonames : alternateName Jamaica Hospital ; geonames : officialName Jamaica Hospital Medical Center @ en ; geonames : featureClass geonames : S ; geonames : featureCode geonames : S \\ . HSP ; geonames : countryCode US ; geo : lat 40.70078 ^^ xsd : decimal ; geo : long -73.81635 ^^ xsd : decimal ; geo : alt 18 ^^ xsd : decimal ; geonames : parentFeature http :// sws . geonames . org / 5133268 / ; geonames : parentCountry http :// sws . geonames . org / 6252001 / ; geonames : parentADM1 http :// sws . geonames . org / 5128638 / ; geonames : parentADM2 http :// sws . geonames . org / 5133268 / ; geonames : nearbyFeatures http :// sws . geonames . org / 5122525 / nearby . rdf ; geonames : locationMap http :// www . geonames . org / 5122525 / jamaica-hospital-medical-center . html . http :// sws . geonames . org / 5122525 / about . rdf a foaf : Document ; foaf : primaryTopic http :// sws . geonames . org / 5122525 / ; cc : license http :// creativecommons . org / licenses / by / 3 . 0 / ; cc : attributionURL http :// sws . geonames . org / 5122525 / ; cc : attributionName GeoNames ^^ xsd : string ; dc : created 2006-01-15 ^^ xsd : date ; dc : modified 2016-12-06 ^^ xsd : date . http :// sws . geonames . org / 4140704 / a http :// www . geonames . org / ontology # Feature ; rdfs : isDefinedBy http :// sws . geonames . org / 4140704 / about . rdf ; geonames : name The White House ; geonames : alternateName Executive Mansion , Presidents House , Presidents Palace , White House @ en ; geonames : officialName Maison Blanche @ fr , The White House @ en , Wei\u00dfes Haus @ de ; geonames : featureClass geonames : S ; geonames : featureCode geonames : S \\ . BLDG ; geonames : countryCode US ; geo : lat 38.89761 ^^ xsd : decimal ; geo : long -77.03637 ^^ xsd : decimal ; geo : alt 17 ^^ xsd : decimal ; geonames : parentFeature http :// sws . geonames . org / 4140987 / ; geonames : parentCountry http :// sws . geonames . org / 6252001 / ; geonames : parentADM1 http :// sws . geonames . org / 4138106 / ; geonames : parentADM2 http :// sws . geonames . org / 4140987 / ; geonames : nearbyFeatures http :// sws . geonames . org / 4140704 / nearby . rdf ; geonames : locationMap http :// www . geonames . org / 4140704 / the-white-house . html . http :// sws . geonames . org / 4140704 / about . rdf a foaf : Document ; foaf : primaryTopic http :// sws . geonames . org / 4140704 / ; cc : license http :// creativecommons . org / licenses / by / 3 . 0 / ; cc : attributionURL http :// sws . geonames . org / 4140704 / ; cc : attributionName GeoNames ^^ xsd : string ; dc : created 2006-01-15 ^^ xsd : date ; dc : modified 2014-08-04 ^^ xsd : date . In a single query, the following call retrieves both the place that MrPresident was born (via an outbound link), and all the places where MrPresident lived (via a combination of inbound and outbound links): cm-well-host /example.org/Individuals/MrPresident?yg= hasTenant.xmpl location.locn| birthPlace.madsrdf You can add as many pipe-separated expansion expressions to one query as you want. The results are the equivalent of running each expansion query separately and pooling all their results.","title":"Multiple Paths for yg"},{"location":"APIReference/Traversal/API.Traversal.Operands.html#multiple-paths-for-gqp","text":"As for the yg query, you can add several filter expressions to a single gqp query, separated by the pipe ('|') operator. However, the behavior of the complex expression is different than for yg . When piped expressions are used with gqp , CM-Well applies \"or\" logic among them. This means that in order to match the filter, an infoton only needs to match one of the piped expressions. For example, if applied to the RDF data above , the following query retrieves all the US presidents that either were born outside the US, or were living in the White House before 2000: cm-well-host /?op=search qp=type.rdf:Person gqp= hasTenant.xmpl[hasBeginning.time 2000-01-01] location.locn[name.geonames::The White House]| birthPlace.madsrdf[-countryCode::US]","title":"Multiple Paths for gqp"},{"location":"APIReference/Traversal/API.Traversal.gqp.html","text":"Filtering Results by Inbound and Outbound Links (gqp) The gqp Operator In some cases you may want to filter a group of infotons according to their inbound/outbound links and their field values, without actually retrieving those links . The gqp flag's syntax is identical to the yg flag's syntax, but it operates differently. As yg traverses the links defined in its value expression, it adds all the infotons in the link paths to its results. gqp does not add infotons to the results in the set returned by the search query. Rather it attempts to evaluate its path expression for each result infoton, and if it fails at some stage in the evaluation or the expression evaluates as false , then the \"root\" infoton from which the path originated is removed from the result set. The gqp flag can be used together with xg and yg . In this case, gqp takes precedence, meaning that first results are filtered by the gqp expression, and then expanded by yg and xg . Note See Traversal Operands to learn about gqp operands. The ghost skips behavior applies to qgp as well as yg . The gqp flag can be applied to both consume and search operations. Note that when using gqp with consume, it's possible to filter out the entire chunk and therefore to receive no results for some iterations. If in this case you receive a 204 return code, but the position token in the header is different than the one sent, you still need to keep consuming. The total value returned with results of a gqp-filtered query reflects the number of infotons retrieved before the filtering process. Example: Filtering Person Infotons by Address Values Suppose you want to retrieve all persons of an age greater than 32, who live in New York. This condition must be applied to the following linked infotons: We would like to retrieve only the Person infotons, while applying filters on the linked AddressRelation and Address infotons, but without retrieving those linked infotons. Here is an example of a search clause that uses gqp for the scenario described above: cm-well-host /?op=search qp=type.rdf:Person,age 32 gqp= addressOfPerson physicalAddress[city::New%20York] This query only returns Person infotons for which the path defined in the gqp clause exists. It doesn't return the Address and AddressRelation infotons that were traversed during evaluation. Using the gqp-chunk-size Parameter You can add the gqp-chunk-size parameter to a gqp query.The gqp-chunk-size value determines how many infoton paths (that resulted from the query preceding the gqp query) will be processed at a time in a single gqp query. This prevents heavy gqp queries from \"starving\" other operations. The gqp query is processed in chunks of gqp-chunk-size until all input paths are processed. The default value for gqp-chunk-size is 10. For best results, you may need to adjust the value according to the specific query you're running.","title":"Filtering Results by Inbound and Outbound Links (gqp)"},{"location":"APIReference/Traversal/API.Traversal.gqp.html#filtering-results-by-inbound-and-outbound-links-gqp","text":"","title":"Filtering Results by Inbound and Outbound Links (gqp)"},{"location":"APIReference/Traversal/API.Traversal.gqp.html#the-gqp-operator","text":"In some cases you may want to filter a group of infotons according to their inbound/outbound links and their field values, without actually retrieving those links . The gqp flag's syntax is identical to the yg flag's syntax, but it operates differently. As yg traverses the links defined in its value expression, it adds all the infotons in the link paths to its results. gqp does not add infotons to the results in the set returned by the search query. Rather it attempts to evaluate its path expression for each result infoton, and if it fails at some stage in the evaluation or the expression evaluates as false , then the \"root\" infoton from which the path originated is removed from the result set. The gqp flag can be used together with xg and yg . In this case, gqp takes precedence, meaning that first results are filtered by the gqp expression, and then expanded by yg and xg . Note See Traversal Operands to learn about gqp operands. The ghost skips behavior applies to qgp as well as yg . The gqp flag can be applied to both consume and search operations. Note that when using gqp with consume, it's possible to filter out the entire chunk and therefore to receive no results for some iterations. If in this case you receive a 204 return code, but the position token in the header is different than the one sent, you still need to keep consuming. The total value returned with results of a gqp-filtered query reflects the number of infotons retrieved before the filtering process.","title":"The gqp Operator"},{"location":"APIReference/Traversal/API.Traversal.gqp.html#example-filtering-person-infotons-by-address-values","text":"Suppose you want to retrieve all persons of an age greater than 32, who live in New York. This condition must be applied to the following linked infotons: We would like to retrieve only the Person infotons, while applying filters on the linked AddressRelation and Address infotons, but without retrieving those linked infotons. Here is an example of a search clause that uses gqp for the scenario described above: cm-well-host /?op=search qp=type.rdf:Person,age 32 gqp= addressOfPerson physicalAddress[city::New%20York] This query only returns Person infotons for which the path defined in the gqp clause exists. It doesn't return the Address and AddressRelation infotons that were traversed during evaluation.","title":"Example: Filtering Person Infotons by Address Values"},{"location":"APIReference/Traversal/API.Traversal.gqp.html#using-the-gqp-chunk-size-parameter","text":"You can add the gqp-chunk-size parameter to a gqp query.The gqp-chunk-size value determines how many infoton paths (that resulted from the query preceding the gqp query) will be processed at a time in a single gqp query. This prevents heavy gqp queries from \"starving\" other operations. The gqp query is processed in chunks of gqp-chunk-size until all input paths are processed. The default value for gqp-chunk-size is 10. For best results, you may need to adjust the value according to the specific query you're running.","title":"Using the gqp-chunk-size Parameter"},{"location":"APIReference/Traversal/API.Traversal.xg.html","text":"Traversing Outbound Links (xg) The xg Operator The xg operator allows you to traverse infotons' outbound links. When you add xg to a CM-Well query, for each infoton result of the query, CM-Well traverses the outbound links defined by xg , and adds those links to the query results. Note The xg flag has several optional operands that allow you to define the outbound fields you want to traverse, and the level of indirection you want to traverse. See Traversal Operands to learn more. Let's look at an example of how to use the xg flag. Example: Using xg to Retrieve Parent Organizations The following query searches for Organization infotons whose name contains \"Marriott Ownership\" and whose city contains \"Orlando\": cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando with-data format=ttl length=1 Running the query produces the following single infoton result (truncated for readability): http :// permid . org / 1-4294969614 a mdaas : Organization , organization : Organization ; mdaas : CIK 0001541356 ; mdaas : CommonName Marriott Ownership Resorts Inc @ en ; mdaas : LEI BW4532OH033VURR0IT68 ; mdaas : MXID 108194567 ; mdaas : OrganizationProviderTypeCode 1 ; mdaas : RCPID 600073966 ; mdaas : TaxID 521320904 ; mdaas : akaName Marriott Ownership Resorts ; mdaas : entityLastReviewedDate 2010-02-26 05:00:00 ; mdaas : equityInstrumentCount 0 ; mdaas : hasImmediateParent http :// permid . org / 1-5035948006 ; mdaas : hasRegistrationAuthority http :// permid . org / 1-5000008957 ; mdaas : hasUltimateParent http :// permid . org / 1-5035948006 ; mdaas : headquartersAddress ORLANDO\\nFLORIDA\\n32821-6066\\nUnited States\\n @ en , 6649 Westwood Blvd Ste 300\\nORLANDO\\nFLORIDA\\n32821-6066\\nUnited States\\n ; ... In the infoton retrieved by the query, we can see 3 fields that contain links to other infotons: hasImmediateParent , hasRegistrationAuthority and hasUltimateParent . If we wanted to retrieve these outbound link infotons as well, we could use the xg flag, as in the following modified query: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando with-data format=ttl xg This produces the following (truncated) results: http :// permid . org / 1-4294969614 a mdaas : Organization , organization : Organization ; mdaas : CIK 0001541356 ; mdaas : CommonName Marriott Ownership Resorts Inc @ en ; mdaas : LEI BW4532OH033VURR0IT68 ; mdaas : MXID 108194567 ; mdaas : OrganizationProviderTypeCode 1 ; mdaas : RCPID 600073966 ; mdaas : TaxID 521320904 ; mdaas : akaName Marriott Ownership Resorts ; mdaas : entityLastReviewedDate 2010-02-26 05:00:00 ; mdaas : equityInstrumentCount 0 ; mdaas : hasImmediateParent http :// permid . org / 1-5035948006 ; mdaas : hasRegistrationAuthority http :// permid . org / 1-5000008957 ; mdaas : hasUltimateParent http :// permid . org / 1-5035948006 ; ... http :// permid . org / 1-5035948006 a mdaas : Organization , organization : Organization ; mdaas : CIK 0001524358 ; mdaas : CommonName Marriott Vacations Worldwide Corp ; mdaas : ExchangeTicker VAC ; mdaas : InvestextID VAC ; mdaas : LEI 549300WA6BT5H4F7IO94 ; mdaas : MXID 111800547 ; mdaas : RCPID 600304172 ; mdaas : RIC VAC.N ; mdaas : SDCID 1218547002 ; mdaas : SDCusip 56655E ; mdaas : TaxID 452598330 ; mdaas : entityLastReviewedDate 2016-03-02 05:00:00 ; mdaas : equityInstrumentCount 1 ; mdaas : hasImmediateParent http :// permid . org / 1-5035948006 ; mdaas : hasRegistrationAuthority http :// permid . org / 1-5000008957 ; mdaas : hasUltimateParent http :// permid . org / 1-5035948006 ; ... http :// permid . org / 1-5000008957 a mdaas : Organization , organization : Organization ; mdaas : officialLatinName Delaware Department of State @ en ; tr-common : hasPermId 5000008957 ; organization : hasActivityStatus organization : statusActive ; organization : hasHeadquartersAddress http :// permid . org / 2-c59eac8479e6106496cb322e1d4705657db9708018a2dec5b178fe193d549879 ; organization : hasImmediateParent http :// permid . org / 1-5000008957 ; organization : hasLegacyPI 15894917 ; organization : hasMXID 107548790 ; organization : hasNDAOrgID 106227913 ; organization : hasOfficialName Delaware Department of State @ en ; ... http :// data . thomsonreuters . com / 1-4294969614 a oa : Organization ; Common : organizationFoundedDaysourceLink https://icis.corp.delaware.gov/Ecorp/EntitySearch/NameSearch.aspx ; Common : organizationFoundedDaysourceType http :// data . thomsonreuters . com / 1-2010107 ; Common : organizationFoundedDaysourceUpdateDate 2015-12-28T17:22:50 ; Common : organizationFoundedMonthsourceLink https://icis.corp.delaware.gov/Ecorp/EntitySearch/NameSearch.aspx ; Common : organizationFoundedMonthsourceType http :// data . thomsonreuters . com / 1-2010107 ; Common : organizationFoundedMonthsourceUpdateDate 2015-12-28T17:22:50 ; Common : organizationFoundedYearsourceLink https://icis.corp.delaware.gov/Ecorp/EntitySearch/NameSearch.aspx ; Common : organizationFoundedYearsourceType http :// data . thomsonreuters . com / 1-2010107 ; Common : organizationFoundedYearsourceUpdateDate 2015-12-28T17:22:50 ; ... http :// permid . org / 2-29ea9a58f0cf50bd968c58b8b301903bec0a3d793d3c9cc562a80d130a61555c a vcard : Address ; vcard : country-name US ; vcard : locality WILMINGTON ; vcard : postal-code 19808 ; vcard : region DELAWARE ; vcard : street-address Suite 400\\n2711 Centerville Road\\nNew Castle @ en . ... http :// permid . org / 2-0ea63bd5da91dc26c362f09a984b27eb4ada52b0bd494e3e0b8ec54e8fb6ac3d a vcard : Address ; vcard : country-name US ; vcard : locality ORLANDO ; vcard : postal-code 32821-6066 ; vcard : region FLORIDA ; vcard : street-address 6649 Westwood Blvd Ste 300 @ en . ... Note that these results contain the original infoton result, the 3 Organization infotons that are referenced in its fields, and also 2 Address infotons that are referenced in its fields. The last 5 infotons were retrieved because we used the xg flag. Suppose we're only interested in Marriott Ownership Resorts' immediate parent. We can run the following query: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando with-data format=ttl xg=hasImmediateParent.mdaas By specifying the field name hasImmediateParent as the xg value, we now constrain the query to return only outbound links contained in the original infoton's hasImmediateParent field. If we're interested both in Marriott Ownership Resorts' immediate parent and its ultimate parent, we can specify two field names in the xg flag, as follows: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando with-data format=ttl xg=hasImmediateParent.mdaas,hasUltimateParent.mdaas Note See Traversal Operands to learn more about xg operands.","title":"Traversing Outbound Links (xg)"},{"location":"APIReference/Traversal/API.Traversal.xg.html#traversing-outbound-links-xg","text":"","title":"Traversing Outbound Links (xg)"},{"location":"APIReference/Traversal/API.Traversal.xg.html#the-xg-operator","text":"The xg operator allows you to traverse infotons' outbound links. When you add xg to a CM-Well query, for each infoton result of the query, CM-Well traverses the outbound links defined by xg , and adds those links to the query results. Note The xg flag has several optional operands that allow you to define the outbound fields you want to traverse, and the level of indirection you want to traverse. See Traversal Operands to learn more. Let's look at an example of how to use the xg flag.","title":"The xg Operator"},{"location":"APIReference/Traversal/API.Traversal.xg.html#example-using-xg-to-retrieve-parent-organizations","text":"The following query searches for Organization infotons whose name contains \"Marriott Ownership\" and whose city contains \"Orlando\": cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando with-data format=ttl length=1 Running the query produces the following single infoton result (truncated for readability): http :// permid . org / 1-4294969614 a mdaas : Organization , organization : Organization ; mdaas : CIK 0001541356 ; mdaas : CommonName Marriott Ownership Resorts Inc @ en ; mdaas : LEI BW4532OH033VURR0IT68 ; mdaas : MXID 108194567 ; mdaas : OrganizationProviderTypeCode 1 ; mdaas : RCPID 600073966 ; mdaas : TaxID 521320904 ; mdaas : akaName Marriott Ownership Resorts ; mdaas : entityLastReviewedDate 2010-02-26 05:00:00 ; mdaas : equityInstrumentCount 0 ; mdaas : hasImmediateParent http :// permid . org / 1-5035948006 ; mdaas : hasRegistrationAuthority http :// permid . org / 1-5000008957 ; mdaas : hasUltimateParent http :// permid . org / 1-5035948006 ; mdaas : headquartersAddress ORLANDO\\nFLORIDA\\n32821-6066\\nUnited States\\n @ en , 6649 Westwood Blvd Ste 300\\nORLANDO\\nFLORIDA\\n32821-6066\\nUnited States\\n ; ... In the infoton retrieved by the query, we can see 3 fields that contain links to other infotons: hasImmediateParent , hasRegistrationAuthority and hasUltimateParent . If we wanted to retrieve these outbound link infotons as well, we could use the xg flag, as in the following modified query: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando with-data format=ttl xg This produces the following (truncated) results: http :// permid . org / 1-4294969614 a mdaas : Organization , organization : Organization ; mdaas : CIK 0001541356 ; mdaas : CommonName Marriott Ownership Resorts Inc @ en ; mdaas : LEI BW4532OH033VURR0IT68 ; mdaas : MXID 108194567 ; mdaas : OrganizationProviderTypeCode 1 ; mdaas : RCPID 600073966 ; mdaas : TaxID 521320904 ; mdaas : akaName Marriott Ownership Resorts ; mdaas : entityLastReviewedDate 2010-02-26 05:00:00 ; mdaas : equityInstrumentCount 0 ; mdaas : hasImmediateParent http :// permid . org / 1-5035948006 ; mdaas : hasRegistrationAuthority http :// permid . org / 1-5000008957 ; mdaas : hasUltimateParent http :// permid . org / 1-5035948006 ; ... http :// permid . org / 1-5035948006 a mdaas : Organization , organization : Organization ; mdaas : CIK 0001524358 ; mdaas : CommonName Marriott Vacations Worldwide Corp ; mdaas : ExchangeTicker VAC ; mdaas : InvestextID VAC ; mdaas : LEI 549300WA6BT5H4F7IO94 ; mdaas : MXID 111800547 ; mdaas : RCPID 600304172 ; mdaas : RIC VAC.N ; mdaas : SDCID 1218547002 ; mdaas : SDCusip 56655E ; mdaas : TaxID 452598330 ; mdaas : entityLastReviewedDate 2016-03-02 05:00:00 ; mdaas : equityInstrumentCount 1 ; mdaas : hasImmediateParent http :// permid . org / 1-5035948006 ; mdaas : hasRegistrationAuthority http :// permid . org / 1-5000008957 ; mdaas : hasUltimateParent http :// permid . org / 1-5035948006 ; ... http :// permid . org / 1-5000008957 a mdaas : Organization , organization : Organization ; mdaas : officialLatinName Delaware Department of State @ en ; tr-common : hasPermId 5000008957 ; organization : hasActivityStatus organization : statusActive ; organization : hasHeadquartersAddress http :// permid . org / 2-c59eac8479e6106496cb322e1d4705657db9708018a2dec5b178fe193d549879 ; organization : hasImmediateParent http :// permid . org / 1-5000008957 ; organization : hasLegacyPI 15894917 ; organization : hasMXID 107548790 ; organization : hasNDAOrgID 106227913 ; organization : hasOfficialName Delaware Department of State @ en ; ... http :// data . thomsonreuters . com / 1-4294969614 a oa : Organization ; Common : organizationFoundedDaysourceLink https://icis.corp.delaware.gov/Ecorp/EntitySearch/NameSearch.aspx ; Common : organizationFoundedDaysourceType http :// data . thomsonreuters . com / 1-2010107 ; Common : organizationFoundedDaysourceUpdateDate 2015-12-28T17:22:50 ; Common : organizationFoundedMonthsourceLink https://icis.corp.delaware.gov/Ecorp/EntitySearch/NameSearch.aspx ; Common : organizationFoundedMonthsourceType http :// data . thomsonreuters . com / 1-2010107 ; Common : organizationFoundedMonthsourceUpdateDate 2015-12-28T17:22:50 ; Common : organizationFoundedYearsourceLink https://icis.corp.delaware.gov/Ecorp/EntitySearch/NameSearch.aspx ; Common : organizationFoundedYearsourceType http :// data . thomsonreuters . com / 1-2010107 ; Common : organizationFoundedYearsourceUpdateDate 2015-12-28T17:22:50 ; ... http :// permid . org / 2-29ea9a58f0cf50bd968c58b8b301903bec0a3d793d3c9cc562a80d130a61555c a vcard : Address ; vcard : country-name US ; vcard : locality WILMINGTON ; vcard : postal-code 19808 ; vcard : region DELAWARE ; vcard : street-address Suite 400\\n2711 Centerville Road\\nNew Castle @ en . ... http :// permid . org / 2-0ea63bd5da91dc26c362f09a984b27eb4ada52b0bd494e3e0b8ec54e8fb6ac3d a vcard : Address ; vcard : country-name US ; vcard : locality ORLANDO ; vcard : postal-code 32821-6066 ; vcard : region FLORIDA ; vcard : street-address 6649 Westwood Blvd Ste 300 @ en . ... Note that these results contain the original infoton result, the 3 Organization infotons that are referenced in its fields, and also 2 Address infotons that are referenced in its fields. The last 5 infotons were retrieved because we used the xg flag. Suppose we're only interested in Marriott Ownership Resorts' immediate parent. We can run the following query: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando with-data format=ttl xg=hasImmediateParent.mdaas By specifying the field name hasImmediateParent as the xg value, we now constrain the query to return only outbound links contained in the original infoton's hasImmediateParent field. If we're interested both in Marriott Ownership Resorts' immediate parent and its ultimate parent, we can specify two field names in the xg flag, as follows: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando with-data format=ttl xg=hasImmediateParent.mdaas,hasUltimateParent.mdaas Note See Traversal Operands to learn more about xg operands.","title":"Example: Using xg to Retrieve Parent Organizations"},{"location":"APIReference/Traversal/API.Traversal.yg.html","text":"Traversing Inbound and Outbound Links (yg) The yg Operator The yg operator allows you to traverse both infotons' outbound links and their inbound links. When you add yg to a CM-Well query, for each infoton result of the query, CM-Well traverses the path defined by the yg value, and adds the infotons in that path to the query results. In yg syntax, indicates an outbound link and indicates an inbound link. Note The yg flag has several optional operands that allow you to define the path you want to traverse. See Traversal Operands to learn more. Example: Inbound Links Here is an example of a query that traverses inbound links: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando format=ttl with-data yg= hasImmediateParent.mdaas hasImmediateParent.mdaas This query retrieves all infotons that point to the matched infotons through their hasImmediateParent field, and also all infotons that point to the level 1 inbound links through their hasImmediateParent field. In other words, it retrieves the child companies of the matched infotons, and also the child companies of those child companies. This is illustrated in the diagram below. The black circle represents the single infoton (Marriott in Orlando) returned by the qp query. The dark-blue circle is a 1st-level inbound link, and the 3 light-blue circles are 2nd-level inbound links. All 5 infotons would be returned by the query above. Example: Outbound and Inbound Links Here is an example that traverses both outbound and inbound links. Suppose we have a Quote, with a known RIC code of VAC. We want to find the corporate address of the company that issues it. We know the model in Open PermID includes Quotes, which link out to Instruments via the IsQuoteOf field. Organization infotons also link to Instruments, via the primaryInstrument field. The following diagram illustrates these relationships. You can see that in order to retrieve the organization that issued the quote, we can follow the quote's outbound link to an instrument, and then follow the instrument's inbound link to the organization. To achieve this, we can run this query: cm-well-host /permid.org?op=search qp=RIC.mdaas::VAC with-data yg= IsQuoteOf.mdaas primaryInstrument.mdaas Note the use of the operator to traverse an outbound link, and the operator to traverse an inbound link. Once we retrieve the desired organization's infoton using the query above, we can obtain its address value. Example: Using xg and yg Together You can use the xg and yg flags together in the same search. In this case, first the yg traversal is processed and then the xg traversal. This can be useful in cases where you want to collect a certain group of infotons using yg , and then expand them along a certain link using xg . This feature is often used in conjunction with SPARQL queries, the generate the input for the SPARQL query. ADD EXAMPLE HERE. Using the yg-chunk-size Parameter You can add the yg-chunk-size parameter to a yg query.The yg-chunk-size value determines how many infoton paths (that resulted from the query preceding the yg query) will be processed at a time in a single yg query. This prevents heavy yg queries from \"starving\" other operations. The yg query is processed in chunks of yg-chunk-size until all input paths are processed. The default value for yg-chunk-size is 10. For best results, you may need to adjust the value according to the specific query you're running. Ghost Skips In some cases, when using yg to filter infotons according to their indirect relationships with other infotons, you may be interested in filtering by the relationship itself, while the intermediate infoton within the relationship is not important. Here is an example: Suppose we want to find PersonB, who is the grandparent of PersonA. We can determine this relationship by finding that the PersonA and PersonB infotons both point to PersonC, with the respective relationships of isChildOf and isParentOf. However, we can do this even if the PersonC infoton doesn't exist, that is, only its URI exists and appears in the fields of PersonA and PersonB. CM-Well tolerates this situation when applying yg filters. That is, it skips over such \"ghost\" infotons as long as their URIs satisfy the relationship defined in the filter. If, on the other hand, if you want to constrain your query to return only results for which the intermediate infoton does exist, you can do this by adding a filter on the intermediate infoton's fields. For example: \\ aField[uuid.system:] bField This filter requires only that the intermediate infoton have a uuid.system field with any value, and it works because every infoton has a uuid.system field. Alternatively, for our example searching for Person infotons, we could add this filter: \\ childOf[type.rdf:Person] parentOf","title":"Traversing Inbound and Outbound Links (yg)"},{"location":"APIReference/Traversal/API.Traversal.yg.html#traversing-inbound-and-outbound-links-yg","text":"","title":"Traversing Inbound and Outbound Links (yg)"},{"location":"APIReference/Traversal/API.Traversal.yg.html#the-yg-operator","text":"The yg operator allows you to traverse both infotons' outbound links and their inbound links. When you add yg to a CM-Well query, for each infoton result of the query, CM-Well traverses the path defined by the yg value, and adds the infotons in that path to the query results. In yg syntax, indicates an outbound link and indicates an inbound link. Note The yg flag has several optional operands that allow you to define the path you want to traverse. See Traversal Operands to learn more.","title":"The yg Operator"},{"location":"APIReference/Traversal/API.Traversal.yg.html#example-inbound-links","text":"Here is an example of a query that traverses inbound links: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando format=ttl with-data yg= hasImmediateParent.mdaas hasImmediateParent.mdaas This query retrieves all infotons that point to the matched infotons through their hasImmediateParent field, and also all infotons that point to the level 1 inbound links through their hasImmediateParent field. In other words, it retrieves the child companies of the matched infotons, and also the child companies of those child companies. This is illustrated in the diagram below. The black circle represents the single infoton (Marriott in Orlando) returned by the qp query. The dark-blue circle is a 1st-level inbound link, and the 3 light-blue circles are 2nd-level inbound links. All 5 infotons would be returned by the query above.","title":"Example: Inbound Links"},{"location":"APIReference/Traversal/API.Traversal.yg.html#example-outbound-and-inbound-links","text":"Here is an example that traverses both outbound and inbound links. Suppose we have a Quote, with a known RIC code of VAC. We want to find the corporate address of the company that issues it. We know the model in Open PermID includes Quotes, which link out to Instruments via the IsQuoteOf field. Organization infotons also link to Instruments, via the primaryInstrument field. The following diagram illustrates these relationships. You can see that in order to retrieve the organization that issued the quote, we can follow the quote's outbound link to an instrument, and then follow the instrument's inbound link to the organization. To achieve this, we can run this query: cm-well-host /permid.org?op=search qp=RIC.mdaas::VAC with-data yg= IsQuoteOf.mdaas primaryInstrument.mdaas Note the use of the operator to traverse an outbound link, and the operator to traverse an inbound link. Once we retrieve the desired organization's infoton using the query above, we can obtain its address value.","title":"Example: Outbound and Inbound Links"},{"location":"APIReference/Traversal/API.Traversal.yg.html#example-using-xg-and-yg-together","text":"You can use the xg and yg flags together in the same search. In this case, first the yg traversal is processed and then the xg traversal. This can be useful in cases where you want to collect a certain group of infotons using yg , and then expand them along a certain link using xg . This feature is often used in conjunction with SPARQL queries, the generate the input for the SPARQL query. ADD EXAMPLE HERE.","title":"Example: Using xg and yg Together"},{"location":"APIReference/Traversal/API.Traversal.yg.html#using-the-yg-chunk-size-parameter","text":"You can add the yg-chunk-size parameter to a yg query.The yg-chunk-size value determines how many infoton paths (that resulted from the query preceding the yg query) will be processed at a time in a single yg query. This prevents heavy yg queries from \"starving\" other operations. The yg query is processed in chunks of yg-chunk-size until all input paths are processed. The default value for yg-chunk-size is 10. For best results, you may need to adjust the value according to the specific query you're running.","title":"Using the yg-chunk-size Parameter"},{"location":"APIReference/Traversal/API.Traversal.yg.html#ghost-skips","text":"In some cases, when using yg to filter infotons according to their indirect relationships with other infotons, you may be interested in filtering by the relationship itself, while the intermediate infoton within the relationship is not important. Here is an example: Suppose we want to find PersonB, who is the grandparent of PersonA. We can determine this relationship by finding that the PersonA and PersonB infotons both point to PersonC, with the respective relationships of isChildOf and isParentOf. However, we can do this even if the PersonC infoton doesn't exist, that is, only its URI exists and appears in the fields of PersonA and PersonB. CM-Well tolerates this situation when applying yg filters. That is, it skips over such \"ghost\" infotons as long as their URIs satisfy the relationship defined in the filter. If, on the other hand, if you want to constrain your query to return only results for which the intermediate infoton does exist, you can do this by adding a filter on the intermediate infoton's fields. For example: \\ aField[uuid.system:] bField This filter requires only that the intermediate infoton have a uuid.system field with any value, and it works because every infoton has a uuid.system field. Alternatively, for our example searching for Person infotons, we could add this filter: \\ childOf[type.rdf:Person] parentOf","title":"Ghost Skips"},{"location":"APIReference/Update/API.Update.AddFileInfoton.html","text":"Add a File Infoton Description In addition to infotons used for data modeling, CM-Well allows you to add files as infotons. The file can be of any type, and it can have field values just like any other infoton. The file contents are stored on CM-Well in addition to the field values. For example, you may want to store documentation or image files on CM-Well, which describe your CM-Well data model. There are two ways to add a file to CM-Well: A simple POST command that takes a pointer to the added file. A POST to the _in endpoint that takes RDF triples, allowing you to add field values in the same call. Both methods are described in the following sections. Note When adding a file infoton, you can use either the POST or the PUT REST verbs; their behavior is the same. Syntax 1 URL: URI of the file in its CM-Well path. REST verb: POST Mandatory parameters: X-CM-WELL-TYPE and Content-Type HTTP headers, and the file to add. Template: curl -X POST cm-well-path -H X-CM-WELL-TYPE: FILE -H Content-Type: contentType --data-binary @ localFilePath URL example: N/A Curl example (REST API): curl -X POST cm-well-host /example/files/f1.png -H X-CM-WELL-TYPE: FILE -H Content-Type: image/png --data-binary @image.file.png Parameters 1 Parameter Description Values Example Reference X-CM-WELL-TYPE HTTP header that indicates that this is a file infoton Constant: \"X-CM-WELL-TYPE: FILE\" N/A N/A Content-Type HTTP header that indicates the file's MIME type. See reference \"Content-Type: image/png\" W3 Content-Type Code Example 1 Call curl -X POST cm-well-host /example/files/f1.png -H X-CM-WELL-TYPE: FILE -H Content-Type: image/png --data-binary @image.file.png Results { success :true} Syntax 2 URL: CMWellHost /_in REST verb: POST Mandatory parameters: new file triple Template: curl -X POST cm-well-host /_in?format= format new file triple optional field value triples URL example: N/A Curl example (REST API): curl -X POST cm-well-host /_in?format=ntriples --data-binary @curlInput.txt File Contents http://example/files/f3.txt cmwell://meta/sys#data plain text content . http://example/files/f3.txt cmwell://meta/sys#mimeType text/plain . http://example/files/f3.txt cmwell://meta/nn#someField some value . Parameters 2 Parameter Description Values Example Reference format The format in which the triples are provided json, jsonl, jsonld, n3, rdfxml, ntriples, nquads, turtle/ttl, yaml, trig, trix format=n3 CM-Well Input and Output Formats Code Example 2 Call curl -X POST cm-well-host /_in?format=ntriples --data-binary @curlInput.txt File Contents http://example/files/f2.png cmwell://meta/sys#base64-data iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAYJJREFUeNqkUztOAzEUnGd7d8NKSNyAO1AgcQ/K1Ei5AAXKOUgfpaahRsoduAH0FBEfxWv7Mc+rIFAqEq/W9rM943ljW1QVxxSHI0tYLpf3bGcH4hch5zybTqcHoVer1cwIanD9uEETKMkJWv6N8vdAw35nsXNsXY0Bxe1VA8OGlBLMyNYpPAQ+K8TAogji4AgwjCIjWkc8tJSKMayzyortao56tiKCbfGIJNMkGOygSCZFMeTEuVG1YcMwDJWtJ7mjZBFbXeBlJK5AmzNQMI3UUlAxhv0h6NpcVXh+TbAUPBUx58ahqONo5hqPnj6lqPsE533BKXM4ablb23GhYELCvnP4ShFFRl8mXYAMsk9wJhET7tNLQTDp2sLs+WDONAaOa5xPiO/mg5nYjQQ7E5+eX7A1g+jYJ4c2RWBWKStLJjP3Qg94WFQBrG8u/pr48EqZTKHESFCxRIF6R4iQejw8Qe7MoO1+eWCXwYK3u8t/3ULD7C7SYj6fH/wW5Njn/C3AAGZG6t+dQqFoAAAAAElFTkSuQmCC . http://example/files/f2.png cmwell://meta/sys#mimeType image/png . http://example/files/f2.png cmwell://meta/nn#someField some value . Results { success :true} Note When using syntax #1 (simple POST command), if you don't supply the Content-Type header, CM-Well will guess the file's MIME type. This is prone to error; therefore it's recommended to supply the Content-Type header. When supplying binary file contents within the command, encode them in base64.","title":"Add a File Infoton"},{"location":"APIReference/Update/API.Update.AddFileInfoton.html#add-a-file-infoton","text":"","title":"Add a File Infoton"},{"location":"APIReference/Update/API.Update.AddFileInfoton.html#description","text":"In addition to infotons used for data modeling, CM-Well allows you to add files as infotons. The file can be of any type, and it can have field values just like any other infoton. The file contents are stored on CM-Well in addition to the field values. For example, you may want to store documentation or image files on CM-Well, which describe your CM-Well data model. There are two ways to add a file to CM-Well: A simple POST command that takes a pointer to the added file. A POST to the _in endpoint that takes RDF triples, allowing you to add field values in the same call. Both methods are described in the following sections. Note When adding a file infoton, you can use either the POST or the PUT REST verbs; their behavior is the same.","title":"Description"},{"location":"APIReference/Update/API.Update.AddFileInfoton.html#syntax-1","text":"URL: URI of the file in its CM-Well path. REST verb: POST Mandatory parameters: X-CM-WELL-TYPE and Content-Type HTTP headers, and the file to add. Template: curl -X POST cm-well-path -H X-CM-WELL-TYPE: FILE -H Content-Type: contentType --data-binary @ localFilePath URL example: N/A Curl example (REST API): curl -X POST cm-well-host /example/files/f1.png -H X-CM-WELL-TYPE: FILE -H Content-Type: image/png --data-binary @image.file.png","title":"Syntax 1"},{"location":"APIReference/Update/API.Update.AddFileInfoton.html#parameters-1","text":"Parameter Description Values Example Reference X-CM-WELL-TYPE HTTP header that indicates that this is a file infoton Constant: \"X-CM-WELL-TYPE: FILE\" N/A N/A Content-Type HTTP header that indicates the file's MIME type. See reference \"Content-Type: image/png\" W3 Content-Type","title":"Parameters 1"},{"location":"APIReference/Update/API.Update.AddFileInfoton.html#code-example-1","text":"","title":"Code Example 1"},{"location":"APIReference/Update/API.Update.AddFileInfoton.html#call","text":"curl -X POST cm-well-host /example/files/f1.png -H X-CM-WELL-TYPE: FILE -H Content-Type: image/png --data-binary @image.file.png","title":"Call"},{"location":"APIReference/Update/API.Update.AddFileInfoton.html#results","text":"{ success :true}","title":"Results"},{"location":"APIReference/Update/API.Update.AddFileInfoton.html#syntax-2","text":"URL: CMWellHost /_in REST verb: POST Mandatory parameters: new file triple Template: curl -X POST cm-well-host /_in?format= format new file triple optional field value triples URL example: N/A Curl example (REST API): curl -X POST cm-well-host /_in?format=ntriples --data-binary @curlInput.txt","title":"Syntax 2"},{"location":"APIReference/Update/API.Update.AddFileInfoton.html#file-contents","text":"http://example/files/f3.txt cmwell://meta/sys#data plain text content . http://example/files/f3.txt cmwell://meta/sys#mimeType text/plain . http://example/files/f3.txt cmwell://meta/nn#someField some value .","title":"File Contents"},{"location":"APIReference/Update/API.Update.AddFileInfoton.html#parameters-2","text":"Parameter Description Values Example Reference format The format in which the triples are provided json, jsonl, jsonld, n3, rdfxml, ntriples, nquads, turtle/ttl, yaml, trig, trix format=n3 CM-Well Input and Output Formats","title":"Parameters 2"},{"location":"APIReference/Update/API.Update.AddFileInfoton.html#code-example-2","text":"","title":"Code Example 2"},{"location":"APIReference/Update/API.Update.AddFileInfoton.html#call_1","text":"curl -X POST cm-well-host /_in?format=ntriples --data-binary @curlInput.txt","title":"Call"},{"location":"APIReference/Update/API.Update.AddFileInfoton.html#file-contents_1","text":"http://example/files/f2.png cmwell://meta/sys#base64-data iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAYJJREFUeNqkUztOAzEUnGd7d8NKSNyAO1AgcQ/K1Ei5AAXKOUgfpaahRsoduAH0FBEfxWv7Mc+rIFAqEq/W9rM943ljW1QVxxSHI0tYLpf3bGcH4hch5zybTqcHoVer1cwIanD9uEETKMkJWv6N8vdAw35nsXNsXY0Bxe1VA8OGlBLMyNYpPAQ+K8TAogji4AgwjCIjWkc8tJSKMayzyortao56tiKCbfGIJNMkGOygSCZFMeTEuVG1YcMwDJWtJ7mjZBFbXeBlJK5AmzNQMI3UUlAxhv0h6NpcVXh+TbAUPBUx58ahqONo5hqPnj6lqPsE533BKXM4ablb23GhYELCvnP4ShFFRl8mXYAMsk9wJhET7tNLQTDp2sLs+WDONAaOa5xPiO/mg5nYjQQ7E5+eX7A1g+jYJ4c2RWBWKStLJjP3Qg94WFQBrG8u/pr48EqZTKHESFCxRIF6R4iQejw8Qe7MoO1+eWCXwYK3u8t/3ULD7C7SYj6fH/wW5Njn/C3AAGZG6t+dQqFoAAAAAElFTkSuQmCC . http://example/files/f2.png cmwell://meta/sys#mimeType image/png . http://example/files/f2.png cmwell://meta/nn#someField some value .","title":"File Contents"},{"location":"APIReference/Update/API.Update.AddFileInfoton.html#results_1","text":"{ success :true} Note When using syntax #1 (simple POST command), if you don't supply the Content-Type header, CM-Well will guess the file's MIME type. This is prone to error; therefore it's recommended to supply the Content-Type header. When supplying binary file contents within the command, encode them in base64.","title":"Results"},{"location":"APIReference/Update/API.Update.AddInfotonsAndFields.html","text":"Add Infotons and Fields Description CM-Well allows you to create your own infotons and triples as well as read existing ones. You can create new infotons in CM-Well, and add their field values by adding triples with the new infoton as their subject. To do this, you send a POST command to the _in endpoint.entity When you add a field and its value, you add a triple with this format: infotonURI fieldID fieldValue If the first value does not refer to an existing infoton, the call will create both a new infoton and its field value. The fieldID must be in URI format (see Field Name Formats ). Note To add more than one triple at a time (for instance, to add an infoton while at the same time adding some of its attributes), simply include all triples to add in the call's payload. Syntax URL: cm-well-host /_in REST verb: POST Mandatory parameters: Triples to add. Template: curl -X POST cm-well-host /_in?format= format --data-binary triples to add URL example: N/A Curl example (REST API): curl -X POST cm-well-host /_in?format=ttl -H Content-Type: text/plain --data-binary @curlInput.txt File Contents http :// data . com / 1-12345678 a http :// data . com / Person ; http :// ont . com / bermuda / hasName Fred Fredson . Special Parameters Parameter Description Values Example priority If this flag appears in an update call, that call receives priority relative to non-priority calls. To use this flag, you must also pass the X-CM-WELL-TOKEN request header, with a token that grants access to the priority feature. This feature should be used with discretion so as not to flood the priority queue. None /_in?format=ttl priority... Code Example Call curl -X POST cm-well-host /_in?format=ttl -H Content-Type: text/plain --data-binary @curlInput.txt File Contents http :// example . org / Individuals / FredFredson a http :// data . com / Person ; http :// ont . com / bermuda / hasName Fred Fredson . Results The result of the call above will simply be a success code. We can see the new infoton by running the following command: curl -X GET cm-well-host /example.org/Individuals/FredFredson?format=ttl @ prefix nn : cm-well-host / meta / nn # . @ prefix bermuda : http :// ont . com / bermuda / . @ prefix rdf : http :// www . w3 . org / 1999 / 02 / 22-rdf-syntax-ns # . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix sys : cm-well-host / meta / sys # . @ prefix o : http :// example . org / Individuals / . o : FredFredson a http :// data . com / Person ; sys : dataCenter dc1 ; sys : indexTime 1465231037915 ^^ xsd : long ; sys : lastModified 2016-06-06T16:37:16.863Z ^^ xsd : dateTime ; sys : parent /example.org/Individuals ; sys : path /example.org/Individuals/FredFredson ; sys : type ObjectInfoton ; sys : uuid ab8a75b12b158b4c305c3c2e52cf5758 ; bermuda : hasName Fred Fredson . Note See CM-Well Input and Output Formats to learn about the formats that CM-Well supports. If you are creating new infotons (which represent new entities), you will need to consult with the Information Architecture team about naming conventions. If you add a value for a field that already exists, the first value is not overwritten. Instead, a second triple relationship is created, or in other word, another field with the same name and a different value is created. To learn how to overwrite a field value, see Replace Field Values . When adding a new field value, you must use the full URI field name format, and not the prefix format (see Field Name Formats ). Some RDF formats (such as N3 and Turtle) support the special \"a\" type predicate, which indicates that the subject \"is a\" typed entity (as defined by the third element in the triple). The \"a\" predicate is shorthand for http://www.w3.org/1999/02/22-rdf-syntax-ns#type . See The Protocol System Field to learn how the protocol value ( http or https ) of the infoton subject's URL is stored and handled. Related Topics Replace Field Values CM-Well Input and Output Formats","title":"Add Infotons and Fields"},{"location":"APIReference/Update/API.Update.AddInfotonsAndFields.html#add-infotons-and-fields","text":"","title":"Add Infotons and Fields"},{"location":"APIReference/Update/API.Update.AddInfotonsAndFields.html#description","text":"CM-Well allows you to create your own infotons and triples as well as read existing ones. You can create new infotons in CM-Well, and add their field values by adding triples with the new infoton as their subject. To do this, you send a POST command to the _in endpoint.entity When you add a field and its value, you add a triple with this format: infotonURI fieldID fieldValue If the first value does not refer to an existing infoton, the call will create both a new infoton and its field value. The fieldID must be in URI format (see Field Name Formats ). Note To add more than one triple at a time (for instance, to add an infoton while at the same time adding some of its attributes), simply include all triples to add in the call's payload.","title":"Description"},{"location":"APIReference/Update/API.Update.AddInfotonsAndFields.html#syntax","text":"URL: cm-well-host /_in REST verb: POST Mandatory parameters: Triples to add. Template: curl -X POST cm-well-host /_in?format= format --data-binary triples to add URL example: N/A Curl example (REST API): curl -X POST cm-well-host /_in?format=ttl -H Content-Type: text/plain --data-binary @curlInput.txt","title":"Syntax"},{"location":"APIReference/Update/API.Update.AddInfotonsAndFields.html#file-contents","text":"http :// data . com / 1-12345678 a http :// data . com / Person ; http :// ont . com / bermuda / hasName Fred Fredson .","title":"File Contents"},{"location":"APIReference/Update/API.Update.AddInfotonsAndFields.html#special-parameters","text":"Parameter Description Values Example priority If this flag appears in an update call, that call receives priority relative to non-priority calls. To use this flag, you must also pass the X-CM-WELL-TOKEN request header, with a token that grants access to the priority feature. This feature should be used with discretion so as not to flood the priority queue. None /_in?format=ttl priority...","title":"Special Parameters"},{"location":"APIReference/Update/API.Update.AddInfotonsAndFields.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Update/API.Update.AddInfotonsAndFields.html#call","text":"curl -X POST cm-well-host /_in?format=ttl -H Content-Type: text/plain --data-binary @curlInput.txt","title":"Call"},{"location":"APIReference/Update/API.Update.AddInfotonsAndFields.html#file-contents_1","text":"http :// example . org / Individuals / FredFredson a http :// data . com / Person ; http :// ont . com / bermuda / hasName Fred Fredson .","title":"File Contents"},{"location":"APIReference/Update/API.Update.AddInfotonsAndFields.html#results","text":"The result of the call above will simply be a success code. We can see the new infoton by running the following command: curl -X GET cm-well-host /example.org/Individuals/FredFredson?format=ttl @ prefix nn : cm-well-host / meta / nn # . @ prefix bermuda : http :// ont . com / bermuda / . @ prefix rdf : http :// www . w3 . org / 1999 / 02 / 22-rdf-syntax-ns # . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix sys : cm-well-host / meta / sys # . @ prefix o : http :// example . org / Individuals / . o : FredFredson a http :// data . com / Person ; sys : dataCenter dc1 ; sys : indexTime 1465231037915 ^^ xsd : long ; sys : lastModified 2016-06-06T16:37:16.863Z ^^ xsd : dateTime ; sys : parent /example.org/Individuals ; sys : path /example.org/Individuals/FredFredson ; sys : type ObjectInfoton ; sys : uuid ab8a75b12b158b4c305c3c2e52cf5758 ; bermuda : hasName Fred Fredson . Note See CM-Well Input and Output Formats to learn about the formats that CM-Well supports. If you are creating new infotons (which represent new entities), you will need to consult with the Information Architecture team about naming conventions. If you add a value for a field that already exists, the first value is not overwritten. Instead, a second triple relationship is created, or in other word, another field with the same name and a different value is created. To learn how to overwrite a field value, see Replace Field Values . When adding a new field value, you must use the full URI field name format, and not the prefix format (see Field Name Formats ). Some RDF formats (such as N3 and Turtle) support the special \"a\" type predicate, which indicates that the subject \"is a\" typed entity (as defined by the third element in the triple). The \"a\" predicate is shorthand for http://www.w3.org/1999/02/22-rdf-syntax-ns#type . See The Protocol System Field to learn how the protocol value ( http or https ) of the infoton subject's URL is stored and handled.","title":"Results"},{"location":"APIReference/Update/API.Update.AddInfotonsAndFields.html#related-topics","text":"Replace Field Values CM-Well Input and Output Formats","title":"Related Topics"},{"location":"APIReference/Update/API.Update.AddInfotonsAndFieldsToSubGraph.html","text":"Add Infotons and Fields to a Sub-Graph Description Sometimes you may want to group some infotons and/or field values together under a specific label. The CM-Well feature that supports this is called a \"named sub-graph\", where the label is the name, and the sub-graph are the items in the Linked Data graph that have the specific label. In this case, relationships in the graph are represented not by triples but by quads, which include the subject, predicate, object and label (sub-graph name). The named sub-graph feature allows you to manipulate data within the sub-graph. For example, you can search for or delete infotons and fields by sub-graph name. For example, suppose you are maintaining a database of movies under CM-Well. A movie may receive several review scores from several different sources. You want to save all the scores as \"Score\" field values, but label each value according to the reviewing entity. You can do this using named sub-graphs. To create a field that belongs to a named sub-graph, create the field using a quad instead of a triple, where the fourth value of the quad is the sub-graph name that you choose. Note You can also create a simple string alias for the graph name URI. See Using String Labels as Sub-Graph Aliases to learn more. Syntax URL: cm-well-host /_in REST verb: POST Mandatory parameters: Quads to add. Template: curl -X POST cm-well-host /_in?format=nquads --data-binary quads to add URL example: N/A Curl example (REST API): curl -X POST cm-well-host /_in?format=nquads -H Content-Type: text/plain --data-binary @curlInput.txt File Contents http://example.org/movies/ET http://MyOntology/Score 8.3 http://MyOntology/RottenTomatoes . http://example.org/movies/ET http://MyOntology/Score 8.7 http://MyOntology/NewYorkTimes . http://example.org/movies/GoneWithTheWind http://MyOntology/Score 6.5 http://MyOntology/RottenTomatoes . http://example.org/movies/GoneWithTheWind http://MyOntology/Score 8.9 http://MyOntology/NewYorkTimes . http://example.org/movies/TheAvenger http://MyOntology/Score 7.2 http://MyOntology/RottenTomatoes . http://example.org/movies/TheAvenger http://MyOntology/Score 7.7 http://MyOntology/MovieGoers . Special Parameters Parameter Description Values Example priority If this flag appears in an update call, that call receives priority relative to non-priority calls. To use this flag, you must also pass the X-CM-WELL-TOKEN request header, with a token that grants access to the priority feature. This feature should be used with discretion so as not to flood the priority queue. None /_in?format=ttl priority... Code Example Call curl -X POST cm-well-host /_in?format=nquads -H Content-Type: text/plain --data-binary @curlInput.txt File Contents http://example.org/movies/ET http://MyOntology/Score 8.3 http://MyOntology/RottenTomatoes . http://example.org/movies/ET http://MyOntology/Score 8.7 http://MyOntology/NewYorkTimes . http://example.org/movies/GoneWithTheWind http://MyOntology/Score 6.5 http://MyOntology/RottenTomatoes . http://example.org/movies/GoneWithTheWind http://MyOntology/Score 8.9 http://MyOntology/NewYorkTimes . http://example.org/movies/TheAvenger http://MyOntology/Score 7.2 http://MyOntology/RottenTomatoes . http://example.org/movies/TheAvenger http://MyOntology/Score 7.7 http://MyOntology/MovieGoers . Results { success :true} Note The named sub-graph feature is also referred to as \"quads\", which relates to the fourth quad value which is the sub-graph name or label. The sub-graph name must be a valid URI. Related Topics Working with Named Sub-Graphs Delete and Replace Field Values in Named Sub-Graphs","title":"Add Infotons and Fields to a Sub-Graph"},{"location":"APIReference/Update/API.Update.AddInfotonsAndFieldsToSubGraph.html#add-infotons-and-fields-to-a-sub-graph","text":"","title":"Add Infotons and Fields to a Sub-Graph"},{"location":"APIReference/Update/API.Update.AddInfotonsAndFieldsToSubGraph.html#description","text":"Sometimes you may want to group some infotons and/or field values together under a specific label. The CM-Well feature that supports this is called a \"named sub-graph\", where the label is the name, and the sub-graph are the items in the Linked Data graph that have the specific label. In this case, relationships in the graph are represented not by triples but by quads, which include the subject, predicate, object and label (sub-graph name). The named sub-graph feature allows you to manipulate data within the sub-graph. For example, you can search for or delete infotons and fields by sub-graph name. For example, suppose you are maintaining a database of movies under CM-Well. A movie may receive several review scores from several different sources. You want to save all the scores as \"Score\" field values, but label each value according to the reviewing entity. You can do this using named sub-graphs. To create a field that belongs to a named sub-graph, create the field using a quad instead of a triple, where the fourth value of the quad is the sub-graph name that you choose. Note You can also create a simple string alias for the graph name URI. See Using String Labels as Sub-Graph Aliases to learn more.","title":"Description"},{"location":"APIReference/Update/API.Update.AddInfotonsAndFieldsToSubGraph.html#syntax","text":"URL: cm-well-host /_in REST verb: POST Mandatory parameters: Quads to add. Template: curl -X POST cm-well-host /_in?format=nquads --data-binary quads to add URL example: N/A Curl example (REST API): curl -X POST cm-well-host /_in?format=nquads -H Content-Type: text/plain --data-binary @curlInput.txt","title":"Syntax"},{"location":"APIReference/Update/API.Update.AddInfotonsAndFieldsToSubGraph.html#file-contents","text":"http://example.org/movies/ET http://MyOntology/Score 8.3 http://MyOntology/RottenTomatoes . http://example.org/movies/ET http://MyOntology/Score 8.7 http://MyOntology/NewYorkTimes . http://example.org/movies/GoneWithTheWind http://MyOntology/Score 6.5 http://MyOntology/RottenTomatoes . http://example.org/movies/GoneWithTheWind http://MyOntology/Score 8.9 http://MyOntology/NewYorkTimes . http://example.org/movies/TheAvenger http://MyOntology/Score 7.2 http://MyOntology/RottenTomatoes . http://example.org/movies/TheAvenger http://MyOntology/Score 7.7 http://MyOntology/MovieGoers .","title":"File Contents"},{"location":"APIReference/Update/API.Update.AddInfotonsAndFieldsToSubGraph.html#special-parameters","text":"Parameter Description Values Example priority If this flag appears in an update call, that call receives priority relative to non-priority calls. To use this flag, you must also pass the X-CM-WELL-TOKEN request header, with a token that grants access to the priority feature. This feature should be used with discretion so as not to flood the priority queue. None /_in?format=ttl priority...","title":"Special Parameters"},{"location":"APIReference/Update/API.Update.AddInfotonsAndFieldsToSubGraph.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Update/API.Update.AddInfotonsAndFieldsToSubGraph.html#call","text":"curl -X POST cm-well-host /_in?format=nquads -H Content-Type: text/plain --data-binary @curlInput.txt","title":"Call"},{"location":"APIReference/Update/API.Update.AddInfotonsAndFieldsToSubGraph.html#file-contents_1","text":"http://example.org/movies/ET http://MyOntology/Score 8.3 http://MyOntology/RottenTomatoes . http://example.org/movies/ET http://MyOntology/Score 8.7 http://MyOntology/NewYorkTimes . http://example.org/movies/GoneWithTheWind http://MyOntology/Score 6.5 http://MyOntology/RottenTomatoes . http://example.org/movies/GoneWithTheWind http://MyOntology/Score 8.9 http://MyOntology/NewYorkTimes . http://example.org/movies/TheAvenger http://MyOntology/Score 7.2 http://MyOntology/RottenTomatoes . http://example.org/movies/TheAvenger http://MyOntology/Score 7.7 http://MyOntology/MovieGoers .","title":"File Contents"},{"location":"APIReference/Update/API.Update.AddInfotonsAndFieldsToSubGraph.html#results","text":"{ success :true} Note The named sub-graph feature is also referred to as \"quads\", which relates to the fourth quad value which is the sub-graph name or label. The sub-graph name must be a valid URI.","title":"Results"},{"location":"APIReference/Update/API.Update.AddInfotonsAndFieldsToSubGraph.html#related-topics","text":"Working with Named Sub-Graphs Delete and Replace Field Values in Named Sub-Graphs","title":"Related Topics"},{"location":"APIReference/Update/API.Update.AddLinkInfoton.html","text":"Add a Link Infoton Description A link infoton is a special type of infoton, which behaves similarly to a redirected URL. It points to another infoton (the target infoton). Querying a link infoton returns the same results as querying the target infoton. For example, if company A has acquired company B, you might want to create a temporary or permanent link infoton, with the original URI of company B, but which points (via redirection) to the company A object. There are two ways to add a file to CM-Well: A POST to the _in endpoint, using the LinkInfoton metatag. A POST to the desired link path, using the X-CM-WELL-TYPE:LINK header. Both methods are described in the following sections. Note When adding a link infoton, you can use either the POST or the PUT REST verbs; their behavior is the same. Syntax 1 URL: cm-well-host /_in REST verb: POST Mandatory parameters: The link as a triple subject, and type , linkTo and linkType objects (see template). Template: curl -X POST cm-well-host /_in?format= format --data-binary @curlInput.txt File Contents LinkPath cmwell://meta/sys#type LinkInfoton . LinkPath cmwell://meta/sys#linkTo TargetInfotonPath . LinkPath cmwell://meta/sys#linkType LinkType ^^ http://www.w3.org/2001/XMLSchema#int . URL example: N/A Curl example (REST API): curl -X POST cm-well-host /in?format=ttl --data-binary @curlInput.txt File Contents http://people/BillSmith cmwell://meta/sys#type LinkInfoton . http://people/BillSmith cmwell://meta/sys#linkTo http://people/WilliamSmith . http://people/BillSmith cmwell://meta/sys#linkType 1 ^^ http://www.w3.org/2001/XMLSchema#int . Parameters 1 Parameter Description Values type triple A triple that indicates that this is a link infoton Constant: \"LinkInfoton\" linkTo triple A triple that defines the target infoton The URI of an existing infoton linkType triple A triple that indicates the link type 0 - Permanent link 1 - Temporary link 2 - Forward link Code Example 1 Call curl -X POST cm-well-host /in?format=ttl --data-binary @curlInput.txt File Contents http://people/BillSmith cmwell://meta/sys#type LinkInfoton . http://people/BillSmith cmwell://meta/sys#linkTo http://people/WilliamSmith . http://people/BillSmith cmwell://meta/sys#linkType ^^ http://www.w3.org/2001/XMLSchema#int . Results { success :true} Syntax 2 URL: CMWellHost /_in REST verb: POST Mandatory parameters: link infoton path, target infoton path, X-CM-WELL-TYPE:LN header/value. Template: curl -X POST cm-well-host /linkInfotonPath -H X-CM-WELL-TYPE:LN -d targetInfotonPath -H X-CM-WELL-LINK-TYPE:2 Note The X-CM-WELL-LINK-TYPE header is optional. See Parameters section to learn about its values. URL example: N/A Curl example (REST API): curl -X POST cm-well-host /example.org/JohnnySmith -H X-CM-WELL-TYPE:LN -H X-CM-WELL-LINK-TYPE:2 -d http://example.org/JohnSmith Parameters 2 Parameter Description Values X-CM-WELL-TYPE Indicates that we are adding a link infoton Constant: \"LN\" X-CM-WELL-LINK-TYPE An optional header that specifies the link type. If not specified, the default value is 1. 0 - Permanent link 1 - Temporary link 2 - Forward link Note A GET call to a link infoton produces an HTTP status code of 301 (Moved Permanently) for a permanent link, 307 (Moved Temporarily) for a temporary link, and the status of the target infoton for a forward link. Code Example 2 Call curl -X POST cm-well-host /example.org/JohnnySmith -H X-CM-WELL-TYPE:LN -H X-CM-WELL-LINK-TYPE:2 -d http://example.org/JohnSmith Results { success :true}","title":"Add a Link Infoton"},{"location":"APIReference/Update/API.Update.AddLinkInfoton.html#add-a-link-infoton","text":"","title":"Add a Link Infoton"},{"location":"APIReference/Update/API.Update.AddLinkInfoton.html#description","text":"A link infoton is a special type of infoton, which behaves similarly to a redirected URL. It points to another infoton (the target infoton). Querying a link infoton returns the same results as querying the target infoton. For example, if company A has acquired company B, you might want to create a temporary or permanent link infoton, with the original URI of company B, but which points (via redirection) to the company A object. There are two ways to add a file to CM-Well: A POST to the _in endpoint, using the LinkInfoton metatag. A POST to the desired link path, using the X-CM-WELL-TYPE:LINK header. Both methods are described in the following sections. Note When adding a link infoton, you can use either the POST or the PUT REST verbs; their behavior is the same.","title":"Description"},{"location":"APIReference/Update/API.Update.AddLinkInfoton.html#syntax-1","text":"URL: cm-well-host /_in REST verb: POST Mandatory parameters: The link as a triple subject, and type , linkTo and linkType objects (see template). Template: curl -X POST cm-well-host /_in?format= format --data-binary @curlInput.txt","title":"Syntax 1"},{"location":"APIReference/Update/API.Update.AddLinkInfoton.html#file-contents","text":"LinkPath cmwell://meta/sys#type LinkInfoton . LinkPath cmwell://meta/sys#linkTo TargetInfotonPath . LinkPath cmwell://meta/sys#linkType LinkType ^^ http://www.w3.org/2001/XMLSchema#int . URL example: N/A Curl example (REST API): curl -X POST cm-well-host /in?format=ttl --data-binary @curlInput.txt","title":"File Contents"},{"location":"APIReference/Update/API.Update.AddLinkInfoton.html#file-contents_1","text":"http://people/BillSmith cmwell://meta/sys#type LinkInfoton . http://people/BillSmith cmwell://meta/sys#linkTo http://people/WilliamSmith . http://people/BillSmith cmwell://meta/sys#linkType 1 ^^ http://www.w3.org/2001/XMLSchema#int .","title":"File Contents"},{"location":"APIReference/Update/API.Update.AddLinkInfoton.html#parameters-1","text":"Parameter Description Values type triple A triple that indicates that this is a link infoton Constant: \"LinkInfoton\" linkTo triple A triple that defines the target infoton The URI of an existing infoton linkType triple A triple that indicates the link type 0 - Permanent link 1 - Temporary link 2 - Forward link","title":"Parameters 1"},{"location":"APIReference/Update/API.Update.AddLinkInfoton.html#code-example-1","text":"","title":"Code Example 1"},{"location":"APIReference/Update/API.Update.AddLinkInfoton.html#call","text":"curl -X POST cm-well-host /in?format=ttl --data-binary @curlInput.txt","title":"Call"},{"location":"APIReference/Update/API.Update.AddLinkInfoton.html#file-contents_2","text":"http://people/BillSmith cmwell://meta/sys#type LinkInfoton . http://people/BillSmith cmwell://meta/sys#linkTo http://people/WilliamSmith . http://people/BillSmith cmwell://meta/sys#linkType ^^ http://www.w3.org/2001/XMLSchema#int .","title":"File Contents"},{"location":"APIReference/Update/API.Update.AddLinkInfoton.html#results","text":"{ success :true}","title":"Results"},{"location":"APIReference/Update/API.Update.AddLinkInfoton.html#syntax-2","text":"URL: CMWellHost /_in REST verb: POST Mandatory parameters: link infoton path, target infoton path, X-CM-WELL-TYPE:LN header/value. Template: curl -X POST cm-well-host /linkInfotonPath -H X-CM-WELL-TYPE:LN -d targetInfotonPath -H X-CM-WELL-LINK-TYPE:2 Note The X-CM-WELL-LINK-TYPE header is optional. See Parameters section to learn about its values. URL example: N/A Curl example (REST API): curl -X POST cm-well-host /example.org/JohnnySmith -H X-CM-WELL-TYPE:LN -H X-CM-WELL-LINK-TYPE:2 -d http://example.org/JohnSmith","title":"Syntax 2"},{"location":"APIReference/Update/API.Update.AddLinkInfoton.html#parameters-2","text":"Parameter Description Values X-CM-WELL-TYPE Indicates that we are adding a link infoton Constant: \"LN\" X-CM-WELL-LINK-TYPE An optional header that specifies the link type. If not specified, the default value is 1. 0 - Permanent link 1 - Temporary link 2 - Forward link Note A GET call to a link infoton produces an HTTP status code of 301 (Moved Permanently) for a permanent link, 307 (Moved Temporarily) for a temporary link, and the status of the target infoton for a forward link.","title":"Parameters 2"},{"location":"APIReference/Update/API.Update.AddLinkInfoton.html#code-example-2","text":"","title":"Code Example 2"},{"location":"APIReference/Update/API.Update.AddLinkInfoton.html#call_1","text":"curl -X POST cm-well-host /example.org/JohnnySmith -H X-CM-WELL-TYPE:LN -H X-CM-WELL-LINK-TYPE:2 -d http://example.org/JohnSmith","title":"Call"},{"location":"APIReference/Update/API.Update.AddLinkInfoton.html#results_1","text":"{ success :true}","title":"Results"},{"location":"APIReference/Update/API.Update.DeleteASingleInfoton.html","text":"Delete a Single Infoton Description You can delete a single infoton by applying the REST DELETE command to the infoton's URI. Syntax URL: Infoton's URI. REST verb: DELETE Mandatory parameters: N/A Template: curl -X DELETE cm-well-host / cm-well-path URL example: N/A Curl example (REST API): curl -X DELETE cm-well-host /example.org/Individuals/JohnSmith Special Parameters Parameter Description Values Example Reference recursive If true, queries and delete command are recursive, i.e. will apply to all infotons who are path-wise descendants of the infotons in the request. (An equivalent but deprecated flag name is with-descendants .) false / true (the default) recursive=true N/A Code Example Call curl -X DELETE cm-well-host /example.org/Individuals/JohnSmith Results { success :true} Note CM-Well returns a \"success\" status code even if the infoton you requested to delete doesn't exist. Applying the DELETE command to an infoton actually just marks the infoton as deleted, but leaves it in CM-Well storage. If you need to permanently remove infotons from CM-Well, see the purge operation. When the recursive flag is used, the request may fail if there are too many descendants to delete in a reasonable amount of time. Related Topics Delete Multiple Infotons Purge a Single Infoton","title":"Delete a Single Infoton"},{"location":"APIReference/Update/API.Update.DeleteASingleInfoton.html#delete-a-single-infoton","text":"","title":"Delete a Single Infoton"},{"location":"APIReference/Update/API.Update.DeleteASingleInfoton.html#description","text":"You can delete a single infoton by applying the REST DELETE command to the infoton's URI.","title":"Description"},{"location":"APIReference/Update/API.Update.DeleteASingleInfoton.html#syntax","text":"URL: Infoton's URI. REST verb: DELETE Mandatory parameters: N/A Template: curl -X DELETE cm-well-host / cm-well-path URL example: N/A Curl example (REST API): curl -X DELETE cm-well-host /example.org/Individuals/JohnSmith","title":"Syntax"},{"location":"APIReference/Update/API.Update.DeleteASingleInfoton.html#special-parameters","text":"Parameter Description Values Example Reference recursive If true, queries and delete command are recursive, i.e. will apply to all infotons who are path-wise descendants of the infotons in the request. (An equivalent but deprecated flag name is with-descendants .) false / true (the default) recursive=true N/A","title":"Special Parameters"},{"location":"APIReference/Update/API.Update.DeleteASingleInfoton.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Update/API.Update.DeleteASingleInfoton.html#call","text":"curl -X DELETE cm-well-host /example.org/Individuals/JohnSmith","title":"Call"},{"location":"APIReference/Update/API.Update.DeleteASingleInfoton.html#results","text":"{ success :true} Note CM-Well returns a \"success\" status code even if the infoton you requested to delete doesn't exist. Applying the DELETE command to an infoton actually just marks the infoton as deleted, but leaves it in CM-Well storage. If you need to permanently remove infotons from CM-Well, see the purge operation. When the recursive flag is used, the request may fail if there are too many descendants to delete in a reasonable amount of time.","title":"Results"},{"location":"APIReference/Update/API.Update.DeleteASingleInfoton.html#related-topics","text":"Delete Multiple Infotons Purge a Single Infoton","title":"Related Topics"},{"location":"APIReference/Update/API.Update.DeleteFields.html","text":"Delete Fields Description You can delete one or more infoton fields by applying the special #markReplace indicator to them, using the _in endpoint. You specify the field to delete using this triple format: infotonURI cmwell://meta/sys#markReplace fieldID You can also use the wildcard * instead of a field ID, as follows: infotonURI cmwell://meta/sys#markReplace * This will delete all the infoton's fields that belong to the default graph. Fields added with a specific sub-graph label will not be deleted by this command. You can also delete fields with specific sub-graph labels by supplying the label as the 4th value in a quad, as follows: infotonURI cmwell://meta/sys#markReplace fieldID graphLabel And you can delete all fields by supplying the * wildcard as the 4th value in the quad, as follows: infotonURI cmwell://meta/sys#markReplace fieldID * Syntax URL: CMWellHost /_in REST verb: POST Mandatory parameters: N/A Template: curl -X POST cm-well-host /_in?format= format triples or quads to delete URL example: N/A Curl example (REST API): Triples: curl -X POST cm-well-host /_in?format=ttl -H Content-Type: text/plain --data-binary http://data.com/1-12345678 cmwell://meta/sys#markReplace http://ont.com/bermuda/hasName . Quads: curl -X POST cm-well-host /_in?format=nquads -H Content-Type: text/plain --data-binary http://data.com/1-12345678 cmwell://meta/sys#markReplace http://ont.com/bermuda/hasName http://mySubGraph . All quad values with sub-graph labels: curl -X POST cm-well-host /_in?format=nquads -H Content-Type: text/plain --data-binary http://data.com/1-12345678 cmwell://meta/sys#markReplace http://ont.com/bermuda/hasName * . Special Parameters Parameter Description Values Example priority If this flag appears in an update call, that call receives priority relative to non-priority calls. To use this flag, you must also pass the X-CM-WELL-TOKEN request header, with a token that grants access to the priority feature. This feature should be used with discretion so as not to flood the priority queue. None /_in?format=ttl priority... Code Example Call curl -X POST cm-well-host /_in?format=ttl -H Content-Type: text/plain --data-binary http://data.com/1-12345678 cmwell://meta/sys#markReplace http://ont.com/bermuda/hasName . Results { success :true} Note You can also use the #markReplace operator to replace existing field values rather than delete them. See Replace Field Values . The operation described above deletes all values of a field. If you want to delete only a subset of multiple field values, see Delete Specific Field Values . The replace-mode flag and the #markReplace indicator should not be used in the same command. If they are, replace-mode overrides #markReplace . Related Topics Delete a Single Infoton Delete Specific Field Values Replace Field Values","title":"Delete Fields"},{"location":"APIReference/Update/API.Update.DeleteFields.html#delete-fields","text":"","title":"Delete Fields"},{"location":"APIReference/Update/API.Update.DeleteFields.html#description","text":"You can delete one or more infoton fields by applying the special #markReplace indicator to them, using the _in endpoint. You specify the field to delete using this triple format: infotonURI cmwell://meta/sys#markReplace fieldID You can also use the wildcard * instead of a field ID, as follows: infotonURI cmwell://meta/sys#markReplace * This will delete all the infoton's fields that belong to the default graph. Fields added with a specific sub-graph label will not be deleted by this command. You can also delete fields with specific sub-graph labels by supplying the label as the 4th value in a quad, as follows: infotonURI cmwell://meta/sys#markReplace fieldID graphLabel And you can delete all fields by supplying the * wildcard as the 4th value in the quad, as follows: infotonURI cmwell://meta/sys#markReplace fieldID *","title":"Description"},{"location":"APIReference/Update/API.Update.DeleteFields.html#syntax","text":"URL: CMWellHost /_in REST verb: POST Mandatory parameters: N/A Template: curl -X POST cm-well-host /_in?format= format triples or quads to delete URL example: N/A Curl example (REST API): Triples: curl -X POST cm-well-host /_in?format=ttl -H Content-Type: text/plain --data-binary http://data.com/1-12345678 cmwell://meta/sys#markReplace http://ont.com/bermuda/hasName . Quads: curl -X POST cm-well-host /_in?format=nquads -H Content-Type: text/plain --data-binary http://data.com/1-12345678 cmwell://meta/sys#markReplace http://ont.com/bermuda/hasName http://mySubGraph . All quad values with sub-graph labels: curl -X POST cm-well-host /_in?format=nquads -H Content-Type: text/plain --data-binary http://data.com/1-12345678 cmwell://meta/sys#markReplace http://ont.com/bermuda/hasName * .","title":"Syntax"},{"location":"APIReference/Update/API.Update.DeleteFields.html#special-parameters","text":"Parameter Description Values Example priority If this flag appears in an update call, that call receives priority relative to non-priority calls. To use this flag, you must also pass the X-CM-WELL-TOKEN request header, with a token that grants access to the priority feature. This feature should be used with discretion so as not to flood the priority queue. None /_in?format=ttl priority...","title":"Special Parameters"},{"location":"APIReference/Update/API.Update.DeleteFields.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Update/API.Update.DeleteFields.html#call","text":"curl -X POST cm-well-host /_in?format=ttl -H Content-Type: text/plain --data-binary http://data.com/1-12345678 cmwell://meta/sys#markReplace http://ont.com/bermuda/hasName .","title":"Call"},{"location":"APIReference/Update/API.Update.DeleteFields.html#results","text":"{ success :true} Note You can also use the #markReplace operator to replace existing field values rather than delete them. See Replace Field Values . The operation described above deletes all values of a field. If you want to delete only a subset of multiple field values, see Delete Specific Field Values . The replace-mode flag and the #markReplace indicator should not be used in the same command. If they are, replace-mode overrides #markReplace .","title":"Results"},{"location":"APIReference/Update/API.Update.DeleteFields.html#related-topics","text":"Delete a Single Infoton Delete Specific Field Values Replace Field Values","title":"Related Topics"},{"location":"APIReference/Update/API.Update.DeleteMultipleInfotons.html","text":"Delete Multiple Infotons Description You can delete multiple infotons by applying the special #fullDelete indicator to them, using the _in endpoint. Syntax URL: cm-well-host /_in REST verb: POST Mandatory parameters: N/A Template: curl -X POST cm-well-host /_in?format= format triples to delete URL example: N/A Curl example (REST API): curl -X POST cm-well-host /_in?format=ttl -H Content-Type: text/plain --data-binary @curlInput.txt File Contents http://data.com/1-11111111 cmwell://meta/sys#fullDelete false . http://data.com/1-22222222 cmwell://meta/sys#fullDelete false . http://data.com/1-33333333 cmwell://meta/sys#fullDelete false . Note The \"false\" value in the triples indicates that the deletion should not be recursive. If a value of \"true\" is supplied, in addition to the infotons in the request, if there are infotons under the paths supplied in the request, they will be deleted too. Recursive delete may fail if there are too many infoton descendants. Special Parameters Parameter Description Values Example priority If this flag appears in an update call, that call receives priority relative to non-priority calls. To use this flag, you must also pass the X-CM-WELL-TOKEN request header, with a token that grants access to the priority feature. This feature should be used with discretion so as not to flood the priority queue. None /_in?format=ttl priority... Code Example Call curl -X POST cm-well-host /_in?format=ttl -H Content-Type: text/plain --data-binary @curlInput.txt File Contents http://data.com/1-11111111 cmwell://meta/sys#fullDelete false . http://data.com/1-22222222 cmwell://meta/sys#fullDelete false . http://data.com/1-33333333 cmwell://meta/sys#fullDelete false . Results { success :true} Note CM-Well returns a \"success\" status code even if the infoton you requested to delete doesn't exist. Deleting infotons this way actually just marks them as deleted, but leaves them in CM-Well storage. If you need to permanently remove infotons from CM-Well, see the purge operation. Triples containing the #fullDelete indicator may be mixed with other triples for upload. Related Topics Delete a Single Infoton Purge a Single Infoton","title":"Delete Multiple Infotons"},{"location":"APIReference/Update/API.Update.DeleteMultipleInfotons.html#delete-multiple-infotons","text":"","title":"Delete Multiple Infotons"},{"location":"APIReference/Update/API.Update.DeleteMultipleInfotons.html#description","text":"You can delete multiple infotons by applying the special #fullDelete indicator to them, using the _in endpoint.","title":"Description"},{"location":"APIReference/Update/API.Update.DeleteMultipleInfotons.html#syntax","text":"URL: cm-well-host /_in REST verb: POST Mandatory parameters: N/A Template: curl -X POST cm-well-host /_in?format= format triples to delete URL example: N/A Curl example (REST API): curl -X POST cm-well-host /_in?format=ttl -H Content-Type: text/plain --data-binary @curlInput.txt","title":"Syntax"},{"location":"APIReference/Update/API.Update.DeleteMultipleInfotons.html#file-contents","text":"http://data.com/1-11111111 cmwell://meta/sys#fullDelete false . http://data.com/1-22222222 cmwell://meta/sys#fullDelete false . http://data.com/1-33333333 cmwell://meta/sys#fullDelete false . Note The \"false\" value in the triples indicates that the deletion should not be recursive. If a value of \"true\" is supplied, in addition to the infotons in the request, if there are infotons under the paths supplied in the request, they will be deleted too. Recursive delete may fail if there are too many infoton descendants.","title":"File Contents"},{"location":"APIReference/Update/API.Update.DeleteMultipleInfotons.html#special-parameters","text":"Parameter Description Values Example priority If this flag appears in an update call, that call receives priority relative to non-priority calls. To use this flag, you must also pass the X-CM-WELL-TOKEN request header, with a token that grants access to the priority feature. This feature should be used with discretion so as not to flood the priority queue. None /_in?format=ttl priority...","title":"Special Parameters"},{"location":"APIReference/Update/API.Update.DeleteMultipleInfotons.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Update/API.Update.DeleteMultipleInfotons.html#call","text":"curl -X POST cm-well-host /_in?format=ttl -H Content-Type: text/plain --data-binary @curlInput.txt","title":"Call"},{"location":"APIReference/Update/API.Update.DeleteMultipleInfotons.html#file-contents_1","text":"http://data.com/1-11111111 cmwell://meta/sys#fullDelete false . http://data.com/1-22222222 cmwell://meta/sys#fullDelete false . http://data.com/1-33333333 cmwell://meta/sys#fullDelete false .","title":"File Contents"},{"location":"APIReference/Update/API.Update.DeleteMultipleInfotons.html#results","text":"{ success :true} Note CM-Well returns a \"success\" status code even if the infoton you requested to delete doesn't exist. Deleting infotons this way actually just marks them as deleted, but leaves them in CM-Well storage. If you need to permanently remove infotons from CM-Well, see the purge operation. Triples containing the #fullDelete indicator may be mixed with other triples for upload.","title":"Results"},{"location":"APIReference/Update/API.Update.DeleteMultipleInfotons.html#related-topics","text":"Delete a Single Infoton Purge a Single Infoton","title":"Related Topics"},{"location":"APIReference/Update/API.Update.DeleteOrReplaceValuesInNamedSubGraph.html","text":"Delete or Replace Values in a Named Sub-Graph Description If you have created a named sub-graph, you can replace the entire sub-graph with a single API call, using the special #replaceGraph predicate. You can choose to just delete the sub-graph, or to delete the existing values and add new values in the same call. In the call's payload, you first supply a triple that deletes the sub-graph, and then optionally add quads that contain the new graph values. Note You can also create a simple string alias for the graph name URI. See Using String Labels as Sub-Graph Aliases to learn more. Syntax URL: cm-well-host /_in REST verb: POST Mandatory parameters: cmwell://meta/sys#replaceGraph graph to delete/replace optional: quads to add Template: curl -X POST cm-well-host /_in?format=nquads -H Content-Type: text/plain --data cmwell://meta/sys#replaceGraph graph to replace . quads to add URL example: N/A Curl example (REST API): curl -X POST cm-well-host /_in?format=nquads -H Content-Type: text/plain --data-binary @curlInput.txt File Contents cmwell://meta/sys#replaceGraph http://MyOntology/MovieGoers . http://example.org/movies/ET http://MyOntology/Score 10 http://MyOntology/MovieGoers . http://example.org/movies/GoneWithTheWind http://MyOntology/Score 10 http://MyOntology/MovieGoers . http://example.org/movies/TheAvenger http://MyOntology/Score 10 http://MyOntology/MovieGoers . Special Parameters Parameter Description Values Example priority If this flag appears in an update call, that call receives priority relative to non-priority calls. To use this flag, you must also pass the X-CM-WELL-TOKEN request header, with a token that grants access to the priority feature. This feature should be used with discretion so as not to flood the priority queue. None /_in?format=ttl priority... Code Example Call curl -X POST cm-well-host /_in?format=nquads -H Content-Type: text/plain --data-binary @curlInput.txt File Contents cmwell://meta/sys#replaceGraph http://MyOntology/MovieGoers . http://example.org/movies/ET http://MyOntology/Score 10 http://MyOntology/MovieGoers . http://example.org/movies/GoneWithTheWind http://MyOntology/Score 10 http://MyOntology/MovieGoers . http://example.org/movies/TheAvenger http://MyOntology/Score 10 http://MyOntology/MovieGoers . Results { success :true} Note If you want to replace values in a sub-graph, the best practice is to delete the old values and add the new values, all in the same call. This is because for every change made to an infoton, CM-Well retains a historical infoton version. If you split the operation into two calls, one to delete and one to add, the version after the delete is saved. This version is not interesting when tracing the infoton's history, and just takes up storage needlessly. If the sub-graph you requested to delete did not exist, you will receive a 422 (\"Unprocessable Entity\") return code. Related Topics Working with Named Sub-Graphs Add Infotons and Fields to a Sub-Graph","title":"Delete or Replace Values in a Named Sub-Graph"},{"location":"APIReference/Update/API.Update.DeleteOrReplaceValuesInNamedSubGraph.html#delete-or-replace-values-in-a-named-sub-graph","text":"","title":"Delete or Replace Values in a Named Sub-Graph"},{"location":"APIReference/Update/API.Update.DeleteOrReplaceValuesInNamedSubGraph.html#description","text":"If you have created a named sub-graph, you can replace the entire sub-graph with a single API call, using the special #replaceGraph predicate. You can choose to just delete the sub-graph, or to delete the existing values and add new values in the same call. In the call's payload, you first supply a triple that deletes the sub-graph, and then optionally add quads that contain the new graph values. Note You can also create a simple string alias for the graph name URI. See Using String Labels as Sub-Graph Aliases to learn more.","title":"Description"},{"location":"APIReference/Update/API.Update.DeleteOrReplaceValuesInNamedSubGraph.html#syntax","text":"URL: cm-well-host /_in REST verb: POST Mandatory parameters: cmwell://meta/sys#replaceGraph graph to delete/replace optional: quads to add Template: curl -X POST cm-well-host /_in?format=nquads -H Content-Type: text/plain --data cmwell://meta/sys#replaceGraph graph to replace . quads to add URL example: N/A Curl example (REST API): curl -X POST cm-well-host /_in?format=nquads -H Content-Type: text/plain --data-binary @curlInput.txt","title":"Syntax"},{"location":"APIReference/Update/API.Update.DeleteOrReplaceValuesInNamedSubGraph.html#file-contents","text":"cmwell://meta/sys#replaceGraph http://MyOntology/MovieGoers . http://example.org/movies/ET http://MyOntology/Score 10 http://MyOntology/MovieGoers . http://example.org/movies/GoneWithTheWind http://MyOntology/Score 10 http://MyOntology/MovieGoers . http://example.org/movies/TheAvenger http://MyOntology/Score 10 http://MyOntology/MovieGoers .","title":"File Contents"},{"location":"APIReference/Update/API.Update.DeleteOrReplaceValuesInNamedSubGraph.html#special-parameters","text":"Parameter Description Values Example priority If this flag appears in an update call, that call receives priority relative to non-priority calls. To use this flag, you must also pass the X-CM-WELL-TOKEN request header, with a token that grants access to the priority feature. This feature should be used with discretion so as not to flood the priority queue. None /_in?format=ttl priority...","title":"Special Parameters"},{"location":"APIReference/Update/API.Update.DeleteOrReplaceValuesInNamedSubGraph.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Update/API.Update.DeleteOrReplaceValuesInNamedSubGraph.html#call","text":"curl -X POST cm-well-host /_in?format=nquads -H Content-Type: text/plain --data-binary @curlInput.txt","title":"Call"},{"location":"APIReference/Update/API.Update.DeleteOrReplaceValuesInNamedSubGraph.html#file-contents_1","text":"cmwell://meta/sys#replaceGraph http://MyOntology/MovieGoers . http://example.org/movies/ET http://MyOntology/Score 10 http://MyOntology/MovieGoers . http://example.org/movies/GoneWithTheWind http://MyOntology/Score 10 http://MyOntology/MovieGoers . http://example.org/movies/TheAvenger http://MyOntology/Score 10 http://MyOntology/MovieGoers .","title":"File Contents"},{"location":"APIReference/Update/API.Update.DeleteOrReplaceValuesInNamedSubGraph.html#results","text":"{ success :true} Note If you want to replace values in a sub-graph, the best practice is to delete the old values and add the new values, all in the same call. This is because for every change made to an infoton, CM-Well retains a historical infoton version. If you split the operation into two calls, one to delete and one to add, the version after the delete is saved. This version is not interesting when tracing the infoton's history, and just takes up storage needlessly. If the sub-graph you requested to delete did not exist, you will receive a 422 (\"Unprocessable Entity\") return code.","title":"Results"},{"location":"APIReference/Update/API.Update.DeleteOrReplaceValuesInNamedSubGraph.html#related-topics","text":"Working with Named Sub-Graphs Add Infotons and Fields to a Sub-Graph","title":"Related Topics"},{"location":"APIReference/Update/API.Update.DeleteSpecificFieldValues.html","text":"Delete Specific Field Values Description In some cases, an infoton may have several values for the same field name. For example, a Person infoton might have several Telephone or Email field values. Using the #markReplace operator to delete a field will delete all of its values. If you only want to delete a subset of a field's multiple values, while retaining the other values, there are two ways to do this: Use the JSON format to define values to delete. Use the special #markDelete indicator. Both methods are described in the following sections. Syntax 1 (JSON Format) URL: cm-well-host / cm-well-path REST verb: POST Mandatory parameters: data Template: curl -X POST cm-well-host / cm-well-path ?data= field name and values to delete, in JSON format URL example: N/A Curl example (REST API): curl -X DELETE cm-well-host /example.org/JohnSmith?data={ name :[ John , Johnnie ]} Parameters 1 Parameter Description Example data The field name and values to delete, in JSON format. Values are comma-separated. {\"name\":[\"John\",\"Johnnie\"]} priority If this flag appears in an update call, that call receives priority relative to non-priority calls. To use this flag, you must also pass the X-CM-WELL-TOKEN request header, with a token that grants access to the priority feature. This feature should be used with discretion so as not to flood the priority queue. /_in?format=ttl priority... Code Example 1 Call curl -X DELETE cm-well-host /example.org/JohnSmith?data={ name :[ John , Johnnie ]} Results { success :true} Syntax 2 (#markDelete Indicator) URL: CMWellHost /_in REST verb: POST Mandatory parameters: N/A Template: curl -X POST cm-well-host /_in?format= format infotonURI cmwell://meta/sys#markDelete [ field name and value pairs ] URL example: N/A Curl example (REST API): curl -X POST cm-well-host /_in?format=turtle --data-binary @curlInput.txt File Contents @ prefix vcard : http :// www . w3 . org / 2006 / vcard / ns # . http :// example . org / Individuals / JohnSmith cmwell :// meta / sys # markDelete [ vcard : EMAIL mailto : jane.smith @ example.org ; vcard : EMAIL mailto : jenny.smith @ example.org ] Parameters 2 Parameter Description Values Example Reference format The format in which the triples are provided n3, rdfxml, ntriples, nquads, turtle/ttl, trig, trix format=n3 CM-Well Input and Output Formats priority If this flag appears in an update call, that call receives priority relative to non-priority calls. To use this flag, you must also pass the X-CM-WELL-TOKEN request header, with a token that grants access to the priority feature. This feature should be used with discretion so as not to flood the priority queue. None /_in?format=ttl priority... Query Parameters Code Example 2 Call curl -X POST cm-well-host /_in?format=turtle --data-binary @curlInput.txt File Contents Triples: @ prefix vcard : http :// www . w3 . org / 2006 / vcard / ns # . http :// example . org / Individuals / JohnSmith cmwell :// meta / sys # markDelete [ vcard : EMAIL mailto : jane.smith @ example.org ; vcard : EMAIL mailto : jenny.smith @ example.org ] Quads: @ prefix vcard : http :// www . w3 . org / 2006 / vcard / ns # . http :// example . org / Individuals / JohnSmith cmwell :// meta / sys # markDelete [ vcard : EMAIL mailto : jane.smith @ example.org http : //mySubGraph ; vcard : EMAIL mailto : jenny.smith @ example.org http : //mySubGraph ] Results { success :true} Note You can delete only values with specific sub-graph labels by providing the label value as the 4th value of a field quad (see Quads example above). If you specify a quad format (e.g. format=nquads) but provide triples data, CM-Well infers * as the missing quad value, and therefore will delete all specified fields that have any quad value. The replace-mode flag and the #markDelete indicator should not be used in the same command. If they are, replace-mode overrides #markDelete . Related Topics Delete a Single Infoton Delete Fields Replace Field Values","title":"Delete Specific Field Values"},{"location":"APIReference/Update/API.Update.DeleteSpecificFieldValues.html#delete-specific-field-values","text":"","title":"Delete Specific Field Values"},{"location":"APIReference/Update/API.Update.DeleteSpecificFieldValues.html#description","text":"In some cases, an infoton may have several values for the same field name. For example, a Person infoton might have several Telephone or Email field values. Using the #markReplace operator to delete a field will delete all of its values. If you only want to delete a subset of a field's multiple values, while retaining the other values, there are two ways to do this: Use the JSON format to define values to delete. Use the special #markDelete indicator. Both methods are described in the following sections.","title":"Description"},{"location":"APIReference/Update/API.Update.DeleteSpecificFieldValues.html#syntax-1-json-format","text":"URL: cm-well-host / cm-well-path REST verb: POST Mandatory parameters: data Template: curl -X POST cm-well-host / cm-well-path ?data= field name and values to delete, in JSON format URL example: N/A Curl example (REST API): curl -X DELETE cm-well-host /example.org/JohnSmith?data={ name :[ John , Johnnie ]}","title":"Syntax 1 (JSON Format)"},{"location":"APIReference/Update/API.Update.DeleteSpecificFieldValues.html#parameters-1","text":"Parameter Description Example data The field name and values to delete, in JSON format. Values are comma-separated. {\"name\":[\"John\",\"Johnnie\"]} priority If this flag appears in an update call, that call receives priority relative to non-priority calls. To use this flag, you must also pass the X-CM-WELL-TOKEN request header, with a token that grants access to the priority feature. This feature should be used with discretion so as not to flood the priority queue. /_in?format=ttl priority...","title":"Parameters 1"},{"location":"APIReference/Update/API.Update.DeleteSpecificFieldValues.html#code-example-1","text":"","title":"Code Example 1"},{"location":"APIReference/Update/API.Update.DeleteSpecificFieldValues.html#call","text":"curl -X DELETE cm-well-host /example.org/JohnSmith?data={ name :[ John , Johnnie ]}","title":"Call"},{"location":"APIReference/Update/API.Update.DeleteSpecificFieldValues.html#results","text":"{ success :true}","title":"Results"},{"location":"APIReference/Update/API.Update.DeleteSpecificFieldValues.html#syntax-2-markdelete-indicator","text":"URL: CMWellHost /_in REST verb: POST Mandatory parameters: N/A Template: curl -X POST cm-well-host /_in?format= format infotonURI cmwell://meta/sys#markDelete [ field name and value pairs ] URL example: N/A Curl example (REST API): curl -X POST cm-well-host /_in?format=turtle --data-binary @curlInput.txt","title":"Syntax 2 (#markDelete Indicator)"},{"location":"APIReference/Update/API.Update.DeleteSpecificFieldValues.html#file-contents","text":"@ prefix vcard : http :// www . w3 . org / 2006 / vcard / ns # . http :// example . org / Individuals / JohnSmith cmwell :// meta / sys # markDelete [ vcard : EMAIL mailto : jane.smith @ example.org ; vcard : EMAIL mailto : jenny.smith @ example.org ]","title":"File Contents"},{"location":"APIReference/Update/API.Update.DeleteSpecificFieldValues.html#parameters-2","text":"Parameter Description Values Example Reference format The format in which the triples are provided n3, rdfxml, ntriples, nquads, turtle/ttl, trig, trix format=n3 CM-Well Input and Output Formats priority If this flag appears in an update call, that call receives priority relative to non-priority calls. To use this flag, you must also pass the X-CM-WELL-TOKEN request header, with a token that grants access to the priority feature. This feature should be used with discretion so as not to flood the priority queue. None /_in?format=ttl priority... Query Parameters","title":"Parameters 2"},{"location":"APIReference/Update/API.Update.DeleteSpecificFieldValues.html#code-example-2","text":"","title":"Code Example 2"},{"location":"APIReference/Update/API.Update.DeleteSpecificFieldValues.html#call_1","text":"curl -X POST cm-well-host /_in?format=turtle --data-binary @curlInput.txt","title":"Call"},{"location":"APIReference/Update/API.Update.DeleteSpecificFieldValues.html#file-contents_1","text":"Triples: @ prefix vcard : http :// www . w3 . org / 2006 / vcard / ns # . http :// example . org / Individuals / JohnSmith cmwell :// meta / sys # markDelete [ vcard : EMAIL mailto : jane.smith @ example.org ; vcard : EMAIL mailto : jenny.smith @ example.org ] Quads: @ prefix vcard : http :// www . w3 . org / 2006 / vcard / ns # . http :// example . org / Individuals / JohnSmith cmwell :// meta / sys # markDelete [ vcard : EMAIL mailto : jane.smith @ example.org http : //mySubGraph ; vcard : EMAIL mailto : jenny.smith @ example.org http : //mySubGraph ]","title":"File Contents"},{"location":"APIReference/Update/API.Update.DeleteSpecificFieldValues.html#results_1","text":"{ success :true} Note You can delete only values with specific sub-graph labels by providing the label value as the 4th value of a field quad (see Quads example above). If you specify a quad format (e.g. format=nquads) but provide triples data, CM-Well infers * as the missing quad value, and therefore will delete all specified fields that have any quad value. The replace-mode flag and the #markDelete indicator should not be used in the same command. If they are, replace-mode overrides #markDelete .","title":"Results"},{"location":"APIReference/Update/API.Update.DeleteSpecificFieldValues.html#related-topics","text":"Delete a Single Infoton Delete Fields Replace Field Values","title":"Related Topics"},{"location":"APIReference/Update/API.Update.Purge.html","text":"Purge a Single Infoton's Versions Description When you delete an infoton, the operation in fact leaves the infoton in the CM-Well repository, but marks it as deleted. A query on a deleted infoton returns the DeletedInfoton status. In contrast, a purge operation physically deletes infoton versions from storage, so they are not accessible afterwards. Trying to access a purged infoton will result in an \"Infoton Not Found\" error. Note Since purge is an irreversible operation, it is not recommended for common use. You would need it only for unusual cases of error in an upload process. Purge operations can only be performed on a single infoton, and not recursively on a path. If you purge an infoton that has descendant infotons under it, the descendants will remain after the purge operation. There are three types of purge operations: op=purge-all - purges all historical versions and the current version of an infoton. op=purge-history - purges all historical versions of an infoton, but keeps the current version. op=purge-last (or its alias op=rollback ) purges the current version of an infoton, and makes its last historical version the current one. If the infoton had no historic versions, the current version is purged. Syntax URL: Infoton's URI. REST verb: GET Mandatory parameters: N/A Template: curl -X GET cm-well-host / InfotonPath ?op= purge operation URL example: cm-well-host /example.org/Individuals/JohnSmith?op=purge-all cm-well-host /example.org/Individuals/JohnSmith?op=purge-history cm-well-host /example.org/Individuals/JohnSmith?op=purge-last Curl example (REST API): curl -X GET cm-well-host /example.org/Individuals/JohnSmith?op=purge-all curl -X GET cm-well-host /example.org/Individuals/JohnSmith?op=purge-history curl -X GET cm-well-host /example.org/Individuals/JohnSmith?op=purge-last Special Parameters Parameter Description op=purge-all Requests the purge-all operation op=purge-history Requests the purge-history operation op=purge-last Requests the purge-last operation Code Example Call curl -X GET cm-well-host /example.org/Individuals/JohnSmith?op=purge-all Results { success :true} Related Topics Delete a Single Infoton Delete Multiple Infotons","title":"Purge a Single Infoton's Versions"},{"location":"APIReference/Update/API.Update.Purge.html#purge-a-single-infotons-versions","text":"","title":"Purge a Single Infoton's Versions"},{"location":"APIReference/Update/API.Update.Purge.html#description","text":"When you delete an infoton, the operation in fact leaves the infoton in the CM-Well repository, but marks it as deleted. A query on a deleted infoton returns the DeletedInfoton status. In contrast, a purge operation physically deletes infoton versions from storage, so they are not accessible afterwards. Trying to access a purged infoton will result in an \"Infoton Not Found\" error. Note Since purge is an irreversible operation, it is not recommended for common use. You would need it only for unusual cases of error in an upload process. Purge operations can only be performed on a single infoton, and not recursively on a path. If you purge an infoton that has descendant infotons under it, the descendants will remain after the purge operation. There are three types of purge operations: op=purge-all - purges all historical versions and the current version of an infoton. op=purge-history - purges all historical versions of an infoton, but keeps the current version. op=purge-last (or its alias op=rollback ) purges the current version of an infoton, and makes its last historical version the current one. If the infoton had no historic versions, the current version is purged.","title":"Description"},{"location":"APIReference/Update/API.Update.Purge.html#syntax","text":"URL: Infoton's URI. REST verb: GET Mandatory parameters: N/A Template: curl -X GET cm-well-host / InfotonPath ?op= purge operation URL example: cm-well-host /example.org/Individuals/JohnSmith?op=purge-all cm-well-host /example.org/Individuals/JohnSmith?op=purge-history cm-well-host /example.org/Individuals/JohnSmith?op=purge-last Curl example (REST API): curl -X GET cm-well-host /example.org/Individuals/JohnSmith?op=purge-all curl -X GET cm-well-host /example.org/Individuals/JohnSmith?op=purge-history curl -X GET cm-well-host /example.org/Individuals/JohnSmith?op=purge-last","title":"Syntax"},{"location":"APIReference/Update/API.Update.Purge.html#special-parameters","text":"Parameter Description op=purge-all Requests the purge-all operation op=purge-history Requests the purge-history operation op=purge-last Requests the purge-last operation","title":"Special Parameters"},{"location":"APIReference/Update/API.Update.Purge.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Update/API.Update.Purge.html#call","text":"curl -X GET cm-well-host /example.org/Individuals/JohnSmith?op=purge-all","title":"Call"},{"location":"APIReference/Update/API.Update.Purge.html#results","text":"{ success :true}","title":"Results"},{"location":"APIReference/Update/API.Update.Purge.html#related-topics","text":"Delete a Single Infoton Delete Multiple Infotons","title":"Related Topics"},{"location":"APIReference/Update/API.Update.ReplaceFieldValues.html","text":"Replace Field Values Description You can replace existing field values with new values, using a POST command to the _in endpoint. There are two ways to do this: Use the replace-mode flag. Use the special #markReplace indicator. Note The replace-mode flag and the #markReplace indicator should not be used in the same command. If they are, replace-mode overrides #markReplace . Both methods are described in the following sections. Syntax 1 URL: cm-well-host /_in REST verb: POST Mandatory parameters: replace-mode Template: curl -X POST cm-well-host /_in?format= format replace-mode triples with new field values URL example: N/A Curl example (REST API): curl -X POST cm-well-host /_in?format=ttl replace-mode -H Content-Type: text/plain --data-binary @curlInput.txt File Contents http://data.com/1-12345678 http://ont.com/bermuda/hasName John Smith . Parameters 1 Parameter Description Values Example Reference format The format in which the triples are provided n3, rdfxml, ntriples, nquads, turtle/ttl, trig, trix format=n3/td> CM-Well Input and Output Formats replace-mode Indicates that the new field value should replace the existing value, rather than be written as an additional value. See parameter value options below. No value. replace-mode Replaces the field values that have the same quad value as the fields you're uploading. N/A Default. replace-mode=default Replaces field values in the default graph (fields that have no quad value). N/A Specific graph label. replace-mode=http://some-graph/uri Replaces field values that have the specified quad (graph label) value. N/A All replace-mode=* Replaces all field values regardless of their quad value. N/A Code Example 1 Call curl -X POST cm-well-host /_in?format=ttl replace-mode -H Content-Type: text/plain --data-binary @curlInput.txt File Contents http://data.com/1-12345678 http://ont.com/bermuda/hasName John Smith . Results { success :true} Syntax 2 URL: CMWellHost /_in REST verb: POST Mandatory parameters: None Template: curl -X POST cm-well-host /_in?format= format triples with new field values URL example: N/A Curl example (REST API): curl -X POST cm-well-host /_in?format=ttl -H Content-Type: text/plain --data-binary @curlInput.txt File Contents http://data.com/1-12345678 cmwell://meta/sys#markReplace http://ont.com/bermuda/hasName . http://data.com/1-12345678 http://ont.com/bermuda/hasName John Doe . Note For each field we want to replace, we supply two triples: one that indicates that the previous value should be deleted (using the #markReplace indicator), and one that provides the new value. You can supply several such pairs of triples, to replace several fields in the same call. You can also mix these pairs with other triples that just add values without deleting. Parameters 2 Parameter Description Values Example Reference format The format in which the triples are provided n3, rdfxml, ntriples, nquads, turtle/ttl, trig, trix format=n3 CM-Well Input and Output Formats Code Example 2 Call curl -X POST cm-well-host /_in?format=ttl replace-mode -H Content-Type: text/plain --data-binary @curlInput.txt File Contents http://data.com/1-12345678 http://ont.com/bermuda/hasName John Smith . Results { success :true} Note For best performance, if you're performing several replacements in one call, group the updates by subject, meaning that several triples referring to the same RDF subject should appear in sequence in the request payload. If you add a value for a field that already has a value, the old value is not overwritten. Instead, the infoton will have two triples with the same field name but different values. To overwrite a field value, you must use the replace API calls described above. If you want to replace field values, use the replace options rather than deleting values and adding new values in two separate calls. This is because each call that updates an infoton creates a new historical infoton version. The interim version with deleted fields just takes up storage needlessly. If you attempt to perform an update on an infoton, where all of the \"new\" infotons triples are identical to the existing infoton's triples, no update will occur. This is in order to prevent saving a new infoton version when no actual change was made. Related Topics Add Infotons and Fields Delete Fields Replace a Named Sub-Graph","title":"Replace Field Values"},{"location":"APIReference/Update/API.Update.ReplaceFieldValues.html#replace-field-values","text":"","title":"Replace Field Values"},{"location":"APIReference/Update/API.Update.ReplaceFieldValues.html#description","text":"You can replace existing field values with new values, using a POST command to the _in endpoint. There are two ways to do this: Use the replace-mode flag. Use the special #markReplace indicator. Note The replace-mode flag and the #markReplace indicator should not be used in the same command. If they are, replace-mode overrides #markReplace . Both methods are described in the following sections.","title":"Description"},{"location":"APIReference/Update/API.Update.ReplaceFieldValues.html#syntax-1","text":"URL: cm-well-host /_in REST verb: POST Mandatory parameters: replace-mode Template: curl -X POST cm-well-host /_in?format= format replace-mode triples with new field values URL example: N/A Curl example (REST API): curl -X POST cm-well-host /_in?format=ttl replace-mode -H Content-Type: text/plain --data-binary @curlInput.txt","title":"Syntax 1"},{"location":"APIReference/Update/API.Update.ReplaceFieldValues.html#file-contents","text":"http://data.com/1-12345678 http://ont.com/bermuda/hasName John Smith .","title":"File Contents"},{"location":"APIReference/Update/API.Update.ReplaceFieldValues.html#parameters-1","text":"","title":"Parameters 1"},{"location":"APIReference/Update/API.Update.ReplaceFieldValues.html#code-example-1","text":"","title":"Code Example 1"},{"location":"APIReference/Update/API.Update.ReplaceFieldValues.html#call","text":"curl -X POST cm-well-host /_in?format=ttl replace-mode -H Content-Type: text/plain --data-binary @curlInput.txt","title":"Call"},{"location":"APIReference/Update/API.Update.ReplaceFieldValues.html#file-contents_1","text":"http://data.com/1-12345678 http://ont.com/bermuda/hasName John Smith .","title":"File Contents"},{"location":"APIReference/Update/API.Update.ReplaceFieldValues.html#results","text":"{ success :true}","title":"Results"},{"location":"APIReference/Update/API.Update.ReplaceFieldValues.html#syntax-2","text":"URL: CMWellHost /_in REST verb: POST Mandatory parameters: None Template: curl -X POST cm-well-host /_in?format= format triples with new field values URL example: N/A Curl example (REST API): curl -X POST cm-well-host /_in?format=ttl -H Content-Type: text/plain --data-binary @curlInput.txt","title":"Syntax 2"},{"location":"APIReference/Update/API.Update.ReplaceFieldValues.html#file-contents_2","text":"http://data.com/1-12345678 cmwell://meta/sys#markReplace http://ont.com/bermuda/hasName . http://data.com/1-12345678 http://ont.com/bermuda/hasName John Doe . Note For each field we want to replace, we supply two triples: one that indicates that the previous value should be deleted (using the #markReplace indicator), and one that provides the new value. You can supply several such pairs of triples, to replace several fields in the same call. You can also mix these pairs with other triples that just add values without deleting.","title":"File Contents"},{"location":"APIReference/Update/API.Update.ReplaceFieldValues.html#parameters-2","text":"Parameter Description Values Example Reference format The format in which the triples are provided n3, rdfxml, ntriples, nquads, turtle/ttl, trig, trix format=n3 CM-Well Input and Output Formats","title":"Parameters 2"},{"location":"APIReference/Update/API.Update.ReplaceFieldValues.html#code-example-2","text":"","title":"Code Example 2"},{"location":"APIReference/Update/API.Update.ReplaceFieldValues.html#call_1","text":"curl -X POST cm-well-host /_in?format=ttl replace-mode -H Content-Type: text/plain --data-binary @curlInput.txt","title":"Call"},{"location":"APIReference/Update/API.Update.ReplaceFieldValues.html#file-contents_3","text":"http://data.com/1-12345678 http://ont.com/bermuda/hasName John Smith .","title":"File Contents"},{"location":"APIReference/Update/API.Update.ReplaceFieldValues.html#results_1","text":"{ success :true} Note For best performance, if you're performing several replacements in one call, group the updates by subject, meaning that several triples referring to the same RDF subject should appear in sequence in the request payload. If you add a value for a field that already has a value, the old value is not overwritten. Instead, the infoton will have two triples with the same field name but different values. To overwrite a field value, you must use the replace API calls described above. If you want to replace field values, use the replace options rather than deleting values and adding new values in two separate calls. This is because each call that updates an infoton creates a new historical infoton version. The interim version with deleted fields just takes up storage needlessly. If you attempt to perform an update on an infoton, where all of the \"new\" infotons triples are identical to the existing infoton's triples, no update will occur. This is in order to prevent saving a new infoton version when no actual change was made.","title":"Results"},{"location":"APIReference/Update/API.Update.ReplaceFieldValues.html#related-topics","text":"Add Infotons and Fields Delete Fields Replace a Named Sub-Graph","title":"Related Topics"},{"location":"APIReference/Update/API.Update.TrackUpdates.html","text":"Track Updates Description By default, when you send an update request to CM-Well, it queues the request for processing and returns immediately, providing a response code that indicates the validity of the request. There are two ways to determine the processing status of the request: Use the blocking flag to cause the update request to be synchronous. Use the tracking flag to receive a tracking ID for the request, and poll for the processing status using this ID. Here is an example of a call that uses the tracking flag: cm-well-host /_in?format=ntriples tracking ... If the request is valid, it returns an HTTP response code of 200 and a X-CM-WELL-TRACKING header, whose value is a unique ID for the request. You can use the tracking ID to call the _track API and poll for the status of your update request. The response to a _track call contains status values for each infoton you're attempting to update. The following table describes the status values you can receive for an updated infoton: Value Description InProgress The request is still being processed. Done The request was completed successfully. Failed The request failed. Evicted( \\ previous and current UUIDs> ) You requested a conditional update , which was denied due to a conflict. Syntax URL: CMWellHost /_track/ Tracking ID REST verb: GET Mandatory parameters: Template: curl -X GET cm-well-host /_track/ Tracking ID URL example: cm-well-host /_track/SGVsbG8gV29ybGQ Curl example (REST API): curl -X GET cm-well-host /_track/SGVsbG8gV29ybGQ Code Example Call curl -X GET cm-well-host /_track/SGVsbG8gV29ybGQ Results http://permid.org/1-42965572445 cmwell://meta/nn#trackingStatus Done . http://permid.org/1-42963422545 cmwell://meta/nn#trackingStatus In Progress . http://permid.org/1-22235545445 cmwell://meta/nn#trackingStatus Failed . http://permid.org/1-54296574112 cmwell://meta/nn#trackingStatus Evicted(expected:8029b2df973dd216375a7c5a7761a2be,actual:c94bf0de57f83874a6bb5983bdef4b8d) . http://permid.org/1-54296574112 cmwell://meta/nn#trackingStatus Done . Note If the request produces any kind of error that prevents it from being processed (for example, 40x or 50x errors) the X-CM-WELL-TRACKING header is not returned. Tracking IDs are valid for 15 minutes after the related request was completed. If you call the _track API with an invalid or obsolete ID, you will get the HTTP 410 (Gone) error. Related Topics Using the blocking Flag","title":"Track Updates"},{"location":"APIReference/Update/API.Update.TrackUpdates.html#track-updates","text":"","title":"Track Updates"},{"location":"APIReference/Update/API.Update.TrackUpdates.html#description","text":"By default, when you send an update request to CM-Well, it queues the request for processing and returns immediately, providing a response code that indicates the validity of the request. There are two ways to determine the processing status of the request: Use the blocking flag to cause the update request to be synchronous. Use the tracking flag to receive a tracking ID for the request, and poll for the processing status using this ID. Here is an example of a call that uses the tracking flag: cm-well-host /_in?format=ntriples tracking ... If the request is valid, it returns an HTTP response code of 200 and a X-CM-WELL-TRACKING header, whose value is a unique ID for the request. You can use the tracking ID to call the _track API and poll for the status of your update request. The response to a _track call contains status values for each infoton you're attempting to update. The following table describes the status values you can receive for an updated infoton: Value Description InProgress The request is still being processed. Done The request was completed successfully. Failed The request failed. Evicted( \\ previous and current UUIDs> ) You requested a conditional update , which was denied due to a conflict.","title":"Description"},{"location":"APIReference/Update/API.Update.TrackUpdates.html#syntax","text":"URL: CMWellHost /_track/ Tracking ID REST verb: GET Mandatory parameters: Template: curl -X GET cm-well-host /_track/ Tracking ID URL example: cm-well-host /_track/SGVsbG8gV29ybGQ Curl example (REST API): curl -X GET cm-well-host /_track/SGVsbG8gV29ybGQ","title":"Syntax"},{"location":"APIReference/Update/API.Update.TrackUpdates.html#code-example","text":"","title":"Code Example"},{"location":"APIReference/Update/API.Update.TrackUpdates.html#call","text":"curl -X GET cm-well-host /_track/SGVsbG8gV29ybGQ","title":"Call"},{"location":"APIReference/Update/API.Update.TrackUpdates.html#results","text":"http://permid.org/1-42965572445 cmwell://meta/nn#trackingStatus Done . http://permid.org/1-42963422545 cmwell://meta/nn#trackingStatus In Progress . http://permid.org/1-22235545445 cmwell://meta/nn#trackingStatus Failed . http://permid.org/1-54296574112 cmwell://meta/nn#trackingStatus Evicted(expected:8029b2df973dd216375a7c5a7761a2be,actual:c94bf0de57f83874a6bb5983bdef4b8d) . http://permid.org/1-54296574112 cmwell://meta/nn#trackingStatus Done . Note If the request produces any kind of error that prevents it from being processed (for example, 40x or 50x errors) the X-CM-WELL-TRACKING header is not returned. Tracking IDs are valid for 15 minutes after the related request was completed. If you call the _track API with an invalid or obsolete ID, you will get the HTTP 410 (Gone) error.","title":"Results"},{"location":"APIReference/Update/API.Update.TrackUpdates.html#related-topics","text":"Using the blocking Flag","title":"Related Topics"},{"location":"APIReference/UsageTopics/API.FieldConditionSyntax.html","text":"Field Condition Syntax The following sections describe how to create simple and complex conditions on infoton field values. The conditions appear in the value of the qp parameter, as follows: cmwellhost / path ?op=search qp= field conditions Single Condition Syntax A single condition's syntax is: (FieldOperator) FieldName ComparisonOperator FieldValue These are the components of the condition: FieldOperator - An optional field operator (- to indicate negation or * to indicate an optional condition ). If no field operator is used, the field condition must apply to all query results. FieldName - The name of the field on which you want to apply the condition. ComparisonOperator - The comparison operator . FieldValue - The field value . Here are some examples of field conditions: Example Description -TRCSAssetClass.mdaas:Ordinary TRCSAssetClass must not equal \"Ordinary\" CommonName.mdaas::Intel CommonName must be an exact match of \"Intel\" dsQuotationNumber.mdaas 290670 dsQuotationNumber must be greater than 290670 Comparison Operators The following table describes the different comparison operators you can apply to field values. Operator Apply to: Description Example : Any literal type Partial match. True if the value operand is contained in the field value. This operator is case-insensitive. CommonName.mdaas:new matches both \"New Balance\" and \"New Generation\" CommonName values. :: string Exact match. True if the value operand equals the field value. This operator is case-sensitive. CommonName.mdaas::Intel ~ string Fuzzy match. True if the value operand is an approximate partial match of the field value. Fuzzy match ignores a certain amount of extra, missing or transposed characters. CommonName.mdaas~converse matches \"Tae Gwang Commerce\", \"Rydex Inverse NASDAQ-100 Strategy Fund\", \"Cloverie PLC Series 2009-01\"... > Number and date values Greater than* instrumentExpiryDate.mdaas 2015-01-01 >> Number and date values Equal or greater than* organizationTier.fedapioa 2 \\ Number and date values Less than* modifiedByAnalystId.fedapioa 100 \\ \\ Number and date values Equal or less than* modifiedByAnalystId.fedapioa 100 Note Comparison order depends on the field's type, as defined in RDF: * Numeric for number values * Lexicographic for strings * Chronological for date/datetime values Note Fuzzy matches may return a very large number of results. It is recommended to limit fuzzy match queries with other constraints and/or the length parameter. Field Values Field values are alphanumeric strings. Do not use surrounding quotation marks. Field value examples: Coca%20Cola , 12345 , 23andme Certain characters require special handling. As is standard for URLs, all characters except for A\u2013Z , a\u2013z , 0\u20139 , * , - , . and _ must be encoded as %HH (their hexadecimal representation). For example, spaces are encoded as %20, # characters are encoded as %23, and so on. Characters that have a special meaning in CM-Well query syntax must be escaped in a different way. These include the characters: : , , , $ , , and ] . To include one of these characters in a field value, escape the entire field value by surrounding it with $ characters on each side. For example: width:length should be escaped as $width:length$ . To include the $ character, double the character in the field value, to differentiate it from the escaping characters. For example: parent$child should be escaped as $parent$$child$ . Multiple Conditions (\"AND\") To apply multiple field conditions, add several condition to the query, separated by commas. Infotons that match the query must fulfill all the conditions in the list. The comma is the equivalent of the Boolean AND operator. Example: This query returns organization infotons with a city value of \"Rochester\" and a state value of \"New York\". cm-well-host /permid.org/?op=search qp=organizationCity.mdaas:Rochester,organizationStateProvince.mdaas:New%20York Optional Conditions (\"OR\") CM-Well query syntax does not support an \"OR\" operator, but instead it supports the * operator to indicate that a condition is optional. This allows you to effectively implement an OR operation. For example, to search for organizations that have an address in New York state, and optionally have an address in Nevada, you can use this query: cm-well-host /permid.org?op=search qp=organizationStateProvince.mdaas:New%20York,*organizationStateProvince.mdaas:Nevada If you make both state conditions optional, the query will return organizations that have an address either in New York state or in Nevada: cm-well-host /permid.org?op=search qp=*organizationStateProvince.mdaas:New%20York,*organizationStateProvince.mdaas:Nevada The * operator does not precisely translate to \"optional\", as the query above means that at least one of the conditions must be met. Thus, the effect is the same as putting a Boolean OR operator between the two conditions. Negative Conditions (\"NOT\") To specify that a certain condition should not be met, you can precede the condition with the - operator. This is equivalent to preceding a condition with the Boolean NOT operator. For example, to retrieve all organizations that do not have an address in New York state, you could run the following query: cm-well-host /permid.org?op=search qp=-organizationStateProvince.mdaas:New%20York Grouped Conditions You may want to apply a - or * operator to several conditions. To do this, surround the list of conditions with [ ] brackets, and apply the operator before the brackets. For example, to retrieve all organizations whose address is neither in New York state nor in California, you could run the following query: cm-well-host /permid.org?op=search qp=-[organizationStateProvince.mdaas:New%20York,organizationStateProvince.mdaas:California] Field Identifiers See Field Name Formats . Data Fields and Metadata (System) Fields When infotons are created in CM-Well, they are usually created together with data fields, which are uploaded in the form of triples related to the infoton. The data fields are often derived from another data structure, such as CommonName fields that come from Organization Authority. CM-Well also maintains its own internal administrative details about each infoton, and it stores these details in system metadata fields. These are items such as the datetime the infoton was last modified, or the internal UUID for the infoton. When you query for infotons, both data fields and system metadata fields are returned in the results. You can apply conditions to the metadata fields as well as the data fields (see Field Identifiers ).","title":"Field Condition Syntax"},{"location":"APIReference/UsageTopics/API.FieldConditionSyntax.html#field-condition-syntax","text":"The following sections describe how to create simple and complex conditions on infoton field values. The conditions appear in the value of the qp parameter, as follows: cmwellhost / path ?op=search qp= field conditions","title":"Field Condition Syntax"},{"location":"APIReference/UsageTopics/API.FieldConditionSyntax.html#single-condition-syntax","text":"A single condition's syntax is: (FieldOperator) FieldName ComparisonOperator FieldValue These are the components of the condition: FieldOperator - An optional field operator (- to indicate negation or * to indicate an optional condition ). If no field operator is used, the field condition must apply to all query results. FieldName - The name of the field on which you want to apply the condition. ComparisonOperator - The comparison operator . FieldValue - The field value . Here are some examples of field conditions: Example Description -TRCSAssetClass.mdaas:Ordinary TRCSAssetClass must not equal \"Ordinary\" CommonName.mdaas::Intel CommonName must be an exact match of \"Intel\" dsQuotationNumber.mdaas 290670 dsQuotationNumber must be greater than 290670","title":"Single Condition Syntax"},{"location":"APIReference/UsageTopics/API.FieldConditionSyntax.html#comparison-operators","text":"The following table describes the different comparison operators you can apply to field values. Operator Apply to: Description Example : Any literal type Partial match. True if the value operand is contained in the field value. This operator is case-insensitive. CommonName.mdaas:new matches both \"New Balance\" and \"New Generation\" CommonName values. :: string Exact match. True if the value operand equals the field value. This operator is case-sensitive. CommonName.mdaas::Intel ~ string Fuzzy match. True if the value operand is an approximate partial match of the field value. Fuzzy match ignores a certain amount of extra, missing or transposed characters. CommonName.mdaas~converse matches \"Tae Gwang Commerce\", \"Rydex Inverse NASDAQ-100 Strategy Fund\", \"Cloverie PLC Series 2009-01\"... > Number and date values Greater than* instrumentExpiryDate.mdaas 2015-01-01 >> Number and date values Equal or greater than* organizationTier.fedapioa 2 \\ Number and date values Less than* modifiedByAnalystId.fedapioa 100 \\ \\ Number and date values Equal or less than* modifiedByAnalystId.fedapioa 100 Note Comparison order depends on the field's type, as defined in RDF: * Numeric for number values * Lexicographic for strings * Chronological for date/datetime values Note Fuzzy matches may return a very large number of results. It is recommended to limit fuzzy match queries with other constraints and/or the length parameter.","title":"Comparison Operators"},{"location":"APIReference/UsageTopics/API.FieldConditionSyntax.html#field-values","text":"Field values are alphanumeric strings. Do not use surrounding quotation marks. Field value examples: Coca%20Cola , 12345 , 23andme Certain characters require special handling. As is standard for URLs, all characters except for A\u2013Z , a\u2013z , 0\u20139 , * , - , . and _ must be encoded as %HH (their hexadecimal representation). For example, spaces are encoded as %20, # characters are encoded as %23, and so on. Characters that have a special meaning in CM-Well query syntax must be escaped in a different way. These include the characters: : , , , $ , , and ] . To include one of these characters in a field value, escape the entire field value by surrounding it with $ characters on each side. For example: width:length should be escaped as $width:length$ . To include the $ character, double the character in the field value, to differentiate it from the escaping characters. For example: parent$child should be escaped as $parent$$child$ .","title":"Field Values"},{"location":"APIReference/UsageTopics/API.FieldConditionSyntax.html#multiple-conditions-and","text":"To apply multiple field conditions, add several condition to the query, separated by commas. Infotons that match the query must fulfill all the conditions in the list. The comma is the equivalent of the Boolean AND operator. Example: This query returns organization infotons with a city value of \"Rochester\" and a state value of \"New York\". cm-well-host /permid.org/?op=search qp=organizationCity.mdaas:Rochester,organizationStateProvince.mdaas:New%20York","title":"Multiple Conditions (\"AND\")"},{"location":"APIReference/UsageTopics/API.FieldConditionSyntax.html#optional-conditions-or","text":"CM-Well query syntax does not support an \"OR\" operator, but instead it supports the * operator to indicate that a condition is optional. This allows you to effectively implement an OR operation. For example, to search for organizations that have an address in New York state, and optionally have an address in Nevada, you can use this query: cm-well-host /permid.org?op=search qp=organizationStateProvince.mdaas:New%20York,*organizationStateProvince.mdaas:Nevada If you make both state conditions optional, the query will return organizations that have an address either in New York state or in Nevada: cm-well-host /permid.org?op=search qp=*organizationStateProvince.mdaas:New%20York,*organizationStateProvince.mdaas:Nevada The * operator does not precisely translate to \"optional\", as the query above means that at least one of the conditions must be met. Thus, the effect is the same as putting a Boolean OR operator between the two conditions.","title":"Optional Conditions (\"OR\")"},{"location":"APIReference/UsageTopics/API.FieldConditionSyntax.html#negative-conditions-not","text":"To specify that a certain condition should not be met, you can precede the condition with the - operator. This is equivalent to preceding a condition with the Boolean NOT operator. For example, to retrieve all organizations that do not have an address in New York state, you could run the following query: cm-well-host /permid.org?op=search qp=-organizationStateProvince.mdaas:New%20York","title":"Negative Conditions (\"NOT\")"},{"location":"APIReference/UsageTopics/API.FieldConditionSyntax.html#grouped-conditions","text":"You may want to apply a - or * operator to several conditions. To do this, surround the list of conditions with [ ] brackets, and apply the operator before the brackets. For example, to retrieve all organizations whose address is neither in New York state nor in California, you could run the following query: cm-well-host /permid.org?op=search qp=-[organizationStateProvince.mdaas:New%20York,organizationStateProvince.mdaas:California]","title":"Grouped Conditions"},{"location":"APIReference/UsageTopics/API.FieldConditionSyntax.html#field-identifiers","text":"See Field Name Formats .","title":"Field Identifiers"},{"location":"APIReference/UsageTopics/API.FieldConditionSyntax.html#data-fields-and-metadata-system-fields","text":"When infotons are created in CM-Well, they are usually created together with data fields, which are uploaded in the form of triples related to the infoton. The data fields are often derived from another data structure, such as CommonName fields that come from Organization Authority. CM-Well also maintains its own internal administrative details about each infoton, and it stores these details in system metadata fields. These are items such as the datetime the infoton was last modified, or the internal UUID for the infoton. When you query for infotons, both data fields and system metadata fields are returned in the results. You can apply conditions to the metadata fields as well as the data fields (see Field Identifiers ).","title":"Data Fields and Metadata (System) Fields"},{"location":"APIReference/UsageTopics/API.FieldNameFormats.html","text":"Field Name Formats As we have learned, an RDF repository is a graph structure. RDF field names are also defined in a hierarchical graph structure, called an \"ontology\". This could be an internal Thomson Reuters/Refinitiv ontology or a 3rd-party ontology. Thus, the \"CommonName\" field belonging to organizations is actually identified by its full path within the Thomson Reuters ontology: http://ont.com/mdaas/CommonName The reason that you can't refer to fields only by their \"terminal\" name (e.g. \"CommonName\") is that this name may potentially appear in more than one ontology. Therefore using only the name without its path could result in ambiguity. There are several different formats you can use to identify CM-Well fields, each with pros and cons. The following sections describe these formats. \"Prefix\" Format The \"prefix\" format in CM-Well uses the immediate parent of the field name, from the field's full ontology path. Thus, in the field \"http://ont.com/mdaas/CommonName\", CommonName is the field name, while \"mdaas\" is its prefix. In spite of its name, in CM-Well you add the prefix after the field name itself, as follows: fieldname.prefix . For example \"CommonName.mdaas\". Note For the special metadata fields of type system , content and link , the opposite order (e.g. \"system.indexTime\" or \"length.content\") is currently also supported. This is deprecated and will stop being supported in the future. You may have noted that even adding the prefix to the field name does not guarantee uniqueness. If the same field name (with the same immediate parent name) is added to two different namespaces, the name becomes ambiguous and the query will fail. Although the prefix is more readable than the alternatives, it is less reliable because of the potential for ambiguity (and it may even cease to be supported in the future). Note The recommended best practice is to use the URI or hashed format (see below) for field identifiers, rather than the prefix format. URI Format A field name's URI is its full URI in its hosting ontology. For example, the URI of organizationFoundedYear.mdaas is: http://ont.com/mdaas/organizationFoundedYear To use the full URI for a given field, surround the predicate with $ symbols. So for example, here is a query that uses the full URI for organizationFoundedYear.mdaas: cm-well-host /permid.org?op=search qp=$http://ont.com/mdaas/organizationFoundedYear$ 2014,type.rdf:Organization with-data format=ttl Hashed Format Ontology namespaces are encoded by a hash function and stored in a special path in CM-Well: CMWellHost /meta/ns . You can use the hash value instead of the unhashed (but potentially ambiguous) prefix value. See for example the following entry from /meta/ns: In this example, http://www.w3.org/ns/prov is the original namespace, and bE5hMw is its hashed value. So, for example, we could refer to the Agent entity in this ontology as $http://www.w3.org/ns/prov/Agent$ (the full URI format), but we could also refer to it using the hashed namespace value as a prefix, as follows: Agent.$bE5hMw . The $ character after the period indicates that what follows is a hashed value. Note Using the hashed namespace value is faster than using any other field notation method; therefore if you want to improve query performance, use this format. To find the hashed value for a certain namespace, you must search for it in CM-Well. So, for instance, to look up the namespace in the example above, you could run the following query: cm-well-host /meta/ns?op=search qp=url:http://www.w3.org/ns/prov The query returns the following namespace infoton: cm-well-host /meta/ns/bE5hMw In your code, you can look up all the required hash values during initialization, and use them for querying at run-time.","title":"Field Name Formats"},{"location":"APIReference/UsageTopics/API.FieldNameFormats.html#field-name-formats","text":"As we have learned, an RDF repository is a graph structure. RDF field names are also defined in a hierarchical graph structure, called an \"ontology\". This could be an internal Thomson Reuters/Refinitiv ontology or a 3rd-party ontology. Thus, the \"CommonName\" field belonging to organizations is actually identified by its full path within the Thomson Reuters ontology: http://ont.com/mdaas/CommonName The reason that you can't refer to fields only by their \"terminal\" name (e.g. \"CommonName\") is that this name may potentially appear in more than one ontology. Therefore using only the name without its path could result in ambiguity. There are several different formats you can use to identify CM-Well fields, each with pros and cons. The following sections describe these formats.","title":"Field Name Formats"},{"location":"APIReference/UsageTopics/API.FieldNameFormats.html#prefix-format","text":"The \"prefix\" format in CM-Well uses the immediate parent of the field name, from the field's full ontology path. Thus, in the field \"http://ont.com/mdaas/CommonName\", CommonName is the field name, while \"mdaas\" is its prefix. In spite of its name, in CM-Well you add the prefix after the field name itself, as follows: fieldname.prefix . For example \"CommonName.mdaas\". Note For the special metadata fields of type system , content and link , the opposite order (e.g. \"system.indexTime\" or \"length.content\") is currently also supported. This is deprecated and will stop being supported in the future. You may have noted that even adding the prefix to the field name does not guarantee uniqueness. If the same field name (with the same immediate parent name) is added to two different namespaces, the name becomes ambiguous and the query will fail. Although the prefix is more readable than the alternatives, it is less reliable because of the potential for ambiguity (and it may even cease to be supported in the future). Note The recommended best practice is to use the URI or hashed format (see below) for field identifiers, rather than the prefix format.","title":"\"Prefix\" Format"},{"location":"APIReference/UsageTopics/API.FieldNameFormats.html#uri-format","text":"A field name's URI is its full URI in its hosting ontology. For example, the URI of organizationFoundedYear.mdaas is: http://ont.com/mdaas/organizationFoundedYear To use the full URI for a given field, surround the predicate with $ symbols. So for example, here is a query that uses the full URI for organizationFoundedYear.mdaas: cm-well-host /permid.org?op=search qp=$http://ont.com/mdaas/organizationFoundedYear$ 2014,type.rdf:Organization with-data format=ttl","title":"URI Format"},{"location":"APIReference/UsageTopics/API.FieldNameFormats.html#hashed-format","text":"Ontology namespaces are encoded by a hash function and stored in a special path in CM-Well: CMWellHost /meta/ns . You can use the hash value instead of the unhashed (but potentially ambiguous) prefix value. See for example the following entry from /meta/ns: In this example, http://www.w3.org/ns/prov is the original namespace, and bE5hMw is its hashed value. So, for example, we could refer to the Agent entity in this ontology as $http://www.w3.org/ns/prov/Agent$ (the full URI format), but we could also refer to it using the hashed namespace value as a prefix, as follows: Agent.$bE5hMw . The $ character after the period indicates that what follows is a hashed value. Note Using the hashed namespace value is faster than using any other field notation method; therefore if you want to improve query performance, use this format. To find the hashed value for a certain namespace, you must search for it in CM-Well. So, for instance, to look up the namespace in the example above, you could run the following query: cm-well-host /meta/ns?op=search qp=url:http://www.w3.org/ns/prov The query returns the following namespace infoton: cm-well-host /meta/ns/bE5hMw In your code, you can look up all the required hash values during initialization, and use them for querying at run-time.","title":"Hashed Format"},{"location":"APIReference/UsageTopics/API.FromAndToDatetimeFormatting.html","text":"From/To Datetime Formatting Datetime values of the optional from and to query parameters must be formatted according to the ISO 8601 standard, as follows: YYYY-MM-DDThh:mm:ss.sTZD Where: YYYY = four-digit year MM = two-digit month (01=January, etc.) DD = two-digit day of month (01 through 31) hh = two digits of hour (00 through 23) (am/pm NOT allowed) mm = two digits of minute (00 through 59) ss = two digits of second (00 through 59) s= one or more digits representing a decimal fraction of a second TZD = time zone designator (Z to indicate UTC (Coordinated Universal Time) or +hh:mm or -hh:mm to indicate the offset in hour and minutes from UTC.) Example: 1997-07-16T19:20:30.45Z","title":"From/To Datetime Formatting"},{"location":"APIReference/UsageTopics/API.FromAndToDatetimeFormatting.html#fromto-datetime-formatting","text":"Datetime values of the optional from and to query parameters must be formatted according to the ISO 8601 standard, as follows: YYYY-MM-DDThh:mm:ss.sTZD Where: YYYY = four-digit year MM = two-digit month (01=January, etc.) DD = two-digit day of month (01 through 31) hh = two digits of hour (00 through 23) (am/pm NOT allowed) mm = two digits of minute (00 through 59) ss = two digits of second (00 through 59) s= one or more digits representing a decimal fraction of a second TZD = time zone designator (Z to indicate UTC (Coordinated Universal Time) or +hh:mm or -hh:mm to indicate the offset in hour and minutes from UTC.) Example: 1997-07-16T19:20:30.45Z","title":"From/To Datetime Formatting"},{"location":"APIReference/UsageTopics/API.InputAndOutputFormats.html","text":"Input and Output Formats There are several formats for encoding RDF triples (see CM-Well Data Paradigms to learn more about RDF triples). When querying CM-Well, you can specify the format in which you want to receive query results (the output format). When updating CM-Well, you can specify the encoding type in which you are providing the new information (the input format). The format Parameter Depending on the specific API call, the format parameter indicates either the input or the output format. For an API call directed to the _in endpoint, the format parameter indicates the format of the input you provide. If the format parameter is not provided, CM-Well tries to infer the input format from the HTTP Content-Type header. For API calls directed to any other endpoint ( _out , _sp , _consume , or an infoton URI), the format parameter indicates the format of the output that CM-Well sends in the response. If the format parameter is not provided, CM-Well tries to infer the output format from the HTTP Accept header. In some cases, an API call to the _out endpoint may have both formatted input and formatted output. For instance, you may provide a list of CM-Well paths as input to a query, and receive a list of infotons as output. In this case, the output format is indicated by the format parameter value, and the input format is indicated by the Content-Type header. The input format (the Content-Type header value) can be one of two values: plain text (a list of paths separated by new-line characters) or JSON. Formats by API Call The following table summarizes the format values supported by each type of CM-Well API call. See Format Descriptions to learn more about each format type. Category API calls Format refers to: Supported formats Get single infoton Get single infoton Output csv, html, json, jsonl, jsonld, jsonldq, n3, ntriples, nquads, rdfxml, text/path, trig, trix, tsv, turtle/ttl, yaml Get collections Search, get multiple infotons, get infoton/s with-history, iterate, consume, subscribe (pull/push) Output atom, csv, json, jsonl, jsonld, jsonldq, n3, ntriples, nquads, rdfxml, text/path, trig, trix, tsv, turtle/ttl, yaml SPARQL SPARQL queries Output ascii, json, rdf, tsv, xml Streaming Stream Output json, jsonl, jsonld, jsonldq, tsv/tab, text/path Updates Add, delete and replace infotons and fields Input json, n3, ntriples, nquads, trig, trix, turtle/ttl, rdfxml Format Descriptions The following table describes the input and output formats that CM-Well supports: Format CM-Well Value Description Notes Atom atom HTML-formatted atom. If a call includes format=atom with-data , its output is an xslt with embedded data, so a browser can render it. You can also specify a format value for the atom data in the with-data parameter (e.g. format=atom with-data=n3 ). Atom is the default format for search, iterate, and get-with-history operations. CSV csv Comma-Separated Values, one header line, then one line per infoton. Depending on whether the infotons have the same fields, the table may be sparsely populated with values (it's recommended to use the fields parameter to retrieve fields common to all infotons). For fields with more than one value, the field header is repeated with an index (e.g. Name1, Name2,...). The field order is arbitrary and may not be the same for every call. HTML html HTML format, browser-renderable. Only supported when retrieving a single infoton. For this case, HTML is the default format. JSON json JSON (JavaScript Object Notation) format. Default for consume and push/pull operations, and for all operations directed to the _out endpoint. Field names should be formatted as . (e.g. \"CommonName.mdaas\"). Add the pretty flag for a more readable, tabulated format. When using one of the JSON formats, if you pass a function in the callback parameter, the callback function is called with the response, which is JSONP-formatted. JSONL jsonl An expansion of JSON with quad and complex type information. See JSON. JSONLD jsonld JSON for Linked Data. Allows data to be serialized in a way that is similar to traditional JSON. See JSON. JSONLDQ jsonldq The same as JSONLD, but includes quad values. See JSON. RDF N3 n3 Short for \"Notation3\". Similar format to Turtle, but provides additional support for defining inference rules. RDF NQuads nquads Similar to NTriples, but with a 4th value that is the sub-graph the triple belongs to. RDF Ntriples ntriples A simple, one-statement-per-line format, easy for a computer to consumer, and relatively readable by humans. RDF TriG trig Human-readable, with a compact syntax for expressing named graphs. RDF TriX trix Similar to TriG but XML-based. RDF Turtle turtle or ttl A refinement of NTriples, more compact and readable. RDF XML rdfxml The original format recommended by the RDF specification. Not very human-readable. Text text or path A simple format that only includes infoton paths, each as a single line of text (used mainly for streaming APIs). TSV tsv or tab Tab-Separated Values that include the infoton's path, lastModified, uuid and indexTime values in one line per infoton (used mainly for streaming APIs). YAML yaml A human-readable format that uses indentation to express data hierarchy. Format Examples Here are some examples of RDF in different encoding formats: N3 @ prefix : http : //www.w3.org/2000/10/swap/test/demo1/about-pat# . @ prefix bio : http : //www.w3.org/2000/10/swap/test/demo1/biology# . @ prefix per : http : //www.w3.org/2000/10/swap/test/demo1/friends-vocab# . : pat a bio : Human ; per : name Pat Smith , Patrick Smith ; per : pet [ a bio : Dog ; per : name Rover ] . N-Triples @prefix : http://www.w3.org/2000/10/swap/test/demo1/about-pat# . @prefix bio: http://www.w3.org/2000/10/swap/test/demo1/biology# . @prefix per: http://www.w3.org/2000/10/swap/test/demo1/friends-vocab# . @prefix rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns# . :pat rdf:type bio:Human. :pat per:name Pat Smith . :pat per:name Patrick Smith . :pat per:pat _:genid1. _:genid1 rdf:type bio:Dog. _:genid1 per:name Rover . Turtle @ prefix ns0 : http :// www . w3 . org / 2000 / 10 / swap / test / demo1 / friends-vocab # . http :// www . w3 . org / 2000 / 10 / swap / test / demo1 / about-pat # pat a http :// www . w3 . org / 2000 / 10 / swap / test / demo1 / biology # Human ; ns0 : name Pat Smith , Patrick Smith ; ns0 : pat [ a http : //www.w3.org/2000/10/swap/test/demo1/biology#Dog ; ns0 : name Rover ] . RDF-XML rdf:RDF xmlns= http://www.w3.org/2000/10/swap/test/demo1/about-pat# xmlns:bio= http://www.w3.org/2000/10/swap/test/demo1/biology# xmlns:per= http://www.w3.org/2000/10/swap/test/demo1/friends-vocab# xmlns:rdf= http://www.w3.org/1999/02/22-rdf-syntax-ns# bio:Human rdf:about= #pat per:name Pat Smith /per:name per:name Patrick Smith /per:name per:pet bio:Dog per:name Rover /per:name /bio:Dog /per:pet /bio:Human /rdf:RDF JSON-LD [ { @id : _:b0 , @type : [ http://www.w3.org/2000/10/swap/test/demo1/biology#Dog ], http://www.w3.org/2000/10/swap/test/demo1/friends-vocab#name : [ { @value : Rover } ] }, { @id : http://www.w3.org/2000/10/swap/test/demo1/about-pat#pat , @type : [ http://www.w3.org/2000/10/swap/test/demo1/biology#Human ], http://www.w3.org/2000/10/swap/test/demo1/friends-vocab#name : [ { @value : Pat Smith }, { @value : Patrick Smith } ], http://www.w3.org/2000/10/swap/test/demo1/friends-vocab#pat : [ { @id : _:b0 } ] }, { @id : http://www.w3.org/2000/10/swap/test/demo1/biology#Dog }, { @id : http://www.w3.org/2000/10/swap/test/demo1/biology#Human } ]","title":"Input and Output Formats"},{"location":"APIReference/UsageTopics/API.InputAndOutputFormats.html#input-and-output-formats","text":"There are several formats for encoding RDF triples (see CM-Well Data Paradigms to learn more about RDF triples). When querying CM-Well, you can specify the format in which you want to receive query results (the output format). When updating CM-Well, you can specify the encoding type in which you are providing the new information (the input format).","title":"Input and Output Formats"},{"location":"APIReference/UsageTopics/API.InputAndOutputFormats.html#the-format-parameter","text":"Depending on the specific API call, the format parameter indicates either the input or the output format. For an API call directed to the _in endpoint, the format parameter indicates the format of the input you provide. If the format parameter is not provided, CM-Well tries to infer the input format from the HTTP Content-Type header. For API calls directed to any other endpoint ( _out , _sp , _consume , or an infoton URI), the format parameter indicates the format of the output that CM-Well sends in the response. If the format parameter is not provided, CM-Well tries to infer the output format from the HTTP Accept header. In some cases, an API call to the _out endpoint may have both formatted input and formatted output. For instance, you may provide a list of CM-Well paths as input to a query, and receive a list of infotons as output. In this case, the output format is indicated by the format parameter value, and the input format is indicated by the Content-Type header. The input format (the Content-Type header value) can be one of two values: plain text (a list of paths separated by new-line characters) or JSON.","title":"The format Parameter"},{"location":"APIReference/UsageTopics/API.InputAndOutputFormats.html#formats-by-api-call","text":"The following table summarizes the format values supported by each type of CM-Well API call. See Format Descriptions to learn more about each format type. Category API calls Format refers to: Supported formats Get single infoton Get single infoton Output csv, html, json, jsonl, jsonld, jsonldq, n3, ntriples, nquads, rdfxml, text/path, trig, trix, tsv, turtle/ttl, yaml Get collections Search, get multiple infotons, get infoton/s with-history, iterate, consume, subscribe (pull/push) Output atom, csv, json, jsonl, jsonld, jsonldq, n3, ntriples, nquads, rdfxml, text/path, trig, trix, tsv, turtle/ttl, yaml SPARQL SPARQL queries Output ascii, json, rdf, tsv, xml Streaming Stream Output json, jsonl, jsonld, jsonldq, tsv/tab, text/path Updates Add, delete and replace infotons and fields Input json, n3, ntriples, nquads, trig, trix, turtle/ttl, rdfxml","title":"Formats by API Call"},{"location":"APIReference/UsageTopics/API.InputAndOutputFormats.html#format-descriptions","text":"The following table describes the input and output formats that CM-Well supports: Format CM-Well Value Description Notes Atom atom HTML-formatted atom. If a call includes format=atom with-data , its output is an xslt with embedded data, so a browser can render it. You can also specify a format value for the atom data in the with-data parameter (e.g. format=atom with-data=n3 ). Atom is the default format for search, iterate, and get-with-history operations. CSV csv Comma-Separated Values, one header line, then one line per infoton. Depending on whether the infotons have the same fields, the table may be sparsely populated with values (it's recommended to use the fields parameter to retrieve fields common to all infotons). For fields with more than one value, the field header is repeated with an index (e.g. Name1, Name2,...). The field order is arbitrary and may not be the same for every call. HTML html HTML format, browser-renderable. Only supported when retrieving a single infoton. For this case, HTML is the default format. JSON json JSON (JavaScript Object Notation) format. Default for consume and push/pull operations, and for all operations directed to the _out endpoint. Field names should be formatted as . (e.g. \"CommonName.mdaas\"). Add the pretty flag for a more readable, tabulated format. When using one of the JSON formats, if you pass a function in the callback parameter, the callback function is called with the response, which is JSONP-formatted. JSONL jsonl An expansion of JSON with quad and complex type information. See JSON. JSONLD jsonld JSON for Linked Data. Allows data to be serialized in a way that is similar to traditional JSON. See JSON. JSONLDQ jsonldq The same as JSONLD, but includes quad values. See JSON. RDF N3 n3 Short for \"Notation3\". Similar format to Turtle, but provides additional support for defining inference rules. RDF NQuads nquads Similar to NTriples, but with a 4th value that is the sub-graph the triple belongs to. RDF Ntriples ntriples A simple, one-statement-per-line format, easy for a computer to consumer, and relatively readable by humans. RDF TriG trig Human-readable, with a compact syntax for expressing named graphs. RDF TriX trix Similar to TriG but XML-based. RDF Turtle turtle or ttl A refinement of NTriples, more compact and readable. RDF XML rdfxml The original format recommended by the RDF specification. Not very human-readable. Text text or path A simple format that only includes infoton paths, each as a single line of text (used mainly for streaming APIs). TSV tsv or tab Tab-Separated Values that include the infoton's path, lastModified, uuid and indexTime values in one line per infoton (used mainly for streaming APIs). YAML yaml A human-readable format that uses indentation to express data hierarchy.","title":"Format Descriptions"},{"location":"APIReference/UsageTopics/API.InputAndOutputFormats.html#format-examples","text":"Here are some examples of RDF in different encoding formats:","title":"Format Examples"},{"location":"APIReference/UsageTopics/API.InputAndOutputFormats.html#n3","text":"@ prefix : http : //www.w3.org/2000/10/swap/test/demo1/about-pat# . @ prefix bio : http : //www.w3.org/2000/10/swap/test/demo1/biology# . @ prefix per : http : //www.w3.org/2000/10/swap/test/demo1/friends-vocab# . : pat a bio : Human ; per : name Pat Smith , Patrick Smith ; per : pet [ a bio : Dog ; per : name Rover ] .","title":"N3"},{"location":"APIReference/UsageTopics/API.InputAndOutputFormats.html#n-triples","text":"@prefix : http://www.w3.org/2000/10/swap/test/demo1/about-pat# . @prefix bio: http://www.w3.org/2000/10/swap/test/demo1/biology# . @prefix per: http://www.w3.org/2000/10/swap/test/demo1/friends-vocab# . @prefix rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns# . :pat rdf:type bio:Human. :pat per:name Pat Smith . :pat per:name Patrick Smith . :pat per:pat _:genid1. _:genid1 rdf:type bio:Dog. _:genid1 per:name Rover .","title":"N-Triples"},{"location":"APIReference/UsageTopics/API.InputAndOutputFormats.html#turtle","text":"@ prefix ns0 : http :// www . w3 . org / 2000 / 10 / swap / test / demo1 / friends-vocab # . http :// www . w3 . org / 2000 / 10 / swap / test / demo1 / about-pat # pat a http :// www . w3 . org / 2000 / 10 / swap / test / demo1 / biology # Human ; ns0 : name Pat Smith , Patrick Smith ; ns0 : pat [ a http : //www.w3.org/2000/10/swap/test/demo1/biology#Dog ; ns0 : name Rover ] .","title":"Turtle"},{"location":"APIReference/UsageTopics/API.InputAndOutputFormats.html#rdf-xml","text":"rdf:RDF xmlns= http://www.w3.org/2000/10/swap/test/demo1/about-pat# xmlns:bio= http://www.w3.org/2000/10/swap/test/demo1/biology# xmlns:per= http://www.w3.org/2000/10/swap/test/demo1/friends-vocab# xmlns:rdf= http://www.w3.org/1999/02/22-rdf-syntax-ns# bio:Human rdf:about= #pat per:name Pat Smith /per:name per:name Patrick Smith /per:name per:pet bio:Dog per:name Rover /per:name /bio:Dog /per:pet /bio:Human /rdf:RDF","title":"RDF-XML"},{"location":"APIReference/UsageTopics/API.InputAndOutputFormats.html#json-ld","text":"[ { @id : _:b0 , @type : [ http://www.w3.org/2000/10/swap/test/demo1/biology#Dog ], http://www.w3.org/2000/10/swap/test/demo1/friends-vocab#name : [ { @value : Rover } ] }, { @id : http://www.w3.org/2000/10/swap/test/demo1/about-pat#pat , @type : [ http://www.w3.org/2000/10/swap/test/demo1/biology#Human ], http://www.w3.org/2000/10/swap/test/demo1/friends-vocab#name : [ { @value : Pat Smith }, { @value : Patrick Smith } ], http://www.w3.org/2000/10/swap/test/demo1/friends-vocab#pat : [ { @id : _:b0 } ] }, { @id : http://www.w3.org/2000/10/swap/test/demo1/biology#Dog }, { @id : http://www.w3.org/2000/10/swap/test/demo1/biology#Human } ]","title":"JSON-LD"},{"location":"APIReference/UsageTopics/API.MetadataFields.html","text":"Metadata Fields In addition to user-defined fields, infotons have fields that are created automatically by CM-Well. The following table summarizes these fields and their types: Metadata Type Infoton Type Metadata Fields system All infotons parent - the immediate parent infoton of the given infoton parent.parent_hierarchy - the entire \"ancestor\" hierarchy of the given infoton, in ascending order of hierarchy lastModified - the time the infoton was last modified path - the infoton's path in CM-Well. NOTE: The path value does not contain the protocol value ( http or https ); which is stored in the protocol system field - see below. uuid - the infoton's unique ID quad - all labels of the named graphs with which the infoton has an associated statement dataCenter - the data center where the original version of the infoton was first written indexTime - the time the infoton was indexed current - whether the infoton is the current version or a historic version protocol - the protocol ( http or https ) provided when the infoton was last ingested. If no protocol value is provided, the default is http . See The Protocol System Field to learn more. content File infotons data - the file's textual data length - the data size in bytes mimeType - the file's Mime type link Link infotons to - the target infoton linked to kind - kind of link (0=Permanent, 1=Temporary, 2=Forward) Here is an example of an infoton with its system fields: { type : ObjectInfoton , system : { uuid : 64aba0e57e2670953024d59f3ecf275a , lastModified : 2015-03-08T11:11:06.712Z , path : /permid.org/1-21525576839 , dataCenter : dc1 , indexTime : 1425813066712, parent : /permid.org }, fields : { IsTradingIn.mdaas : [ EUR ], QuoteExchangeCode.mdaas : [ FRA ], CommonName.mdaas : [ UBS NCB PUT 14P ], IsQuoteOf.mdaas : [ http://permid.org/1-21525557620 ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], TRCSAssetClass.mdaas : [ Traditional Warrants ], RCSAssetClass.mdaas : [ TRAD ], ExchangeTicker.mdaas : [ UA44FB ], RIC.mdaas : [ DEUA44FB.F^L14 ] } } Using the qp operator, you can perform search queries in metadata fields as well as in user-defined fields. For example, the following query searches for file infotons whose text body contains the string \"configuration\": cm-well-host /meta?qp=content.data:configuration","title":"Metadata Fields"},{"location":"APIReference/UsageTopics/API.MetadataFields.html#metadata-fields","text":"In addition to user-defined fields, infotons have fields that are created automatically by CM-Well. The following table summarizes these fields and their types: Metadata Type Infoton Type Metadata Fields system All infotons parent - the immediate parent infoton of the given infoton parent.parent_hierarchy - the entire \"ancestor\" hierarchy of the given infoton, in ascending order of hierarchy lastModified - the time the infoton was last modified path - the infoton's path in CM-Well. NOTE: The path value does not contain the protocol value ( http or https ); which is stored in the protocol system field - see below. uuid - the infoton's unique ID quad - all labels of the named graphs with which the infoton has an associated statement dataCenter - the data center where the original version of the infoton was first written indexTime - the time the infoton was indexed current - whether the infoton is the current version or a historic version protocol - the protocol ( http or https ) provided when the infoton was last ingested. If no protocol value is provided, the default is http . See The Protocol System Field to learn more. content File infotons data - the file's textual data length - the data size in bytes mimeType - the file's Mime type link Link infotons to - the target infoton linked to kind - kind of link (0=Permanent, 1=Temporary, 2=Forward) Here is an example of an infoton with its system fields: { type : ObjectInfoton , system : { uuid : 64aba0e57e2670953024d59f3ecf275a , lastModified : 2015-03-08T11:11:06.712Z , path : /permid.org/1-21525576839 , dataCenter : dc1 , indexTime : 1425813066712, parent : /permid.org }, fields : { IsTradingIn.mdaas : [ EUR ], QuoteExchangeCode.mdaas : [ FRA ], CommonName.mdaas : [ UBS NCB PUT 14P ], IsQuoteOf.mdaas : [ http://permid.org/1-21525557620 ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], TRCSAssetClass.mdaas : [ Traditional Warrants ], RCSAssetClass.mdaas : [ TRAD ], ExchangeTicker.mdaas : [ UA44FB ], RIC.mdaas : [ DEUA44FB.F^L14 ] } } Using the qp operator, you can perform search queries in metadata fields as well as in user-defined fields. For example, the following query searches for file infotons whose text body contains the string \"configuration\": cm-well-host /meta?qp=content.data:configuration","title":"Metadata Fields"},{"location":"APIReference/UsageTopics/API.PagingThroughResultsWithOffsetAndLengthParameters.html","text":"Paging through Results Query results may often be long lists of infotons. Rather than receive all the results at once, you may want to \"page through\" the results, that is, iteratively receive subsets of the results. To do this, you use two parameters: the offset parameter and the length parameter. For example, suppose you want to search for the string \u201cMarriott\u201d, and you want to receive the results in 40-infoton increments. You would request the first \"page\" using this query: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott offset=0 length=40 To get the second page, you use use this query: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott offset=40 length=40 And so on. To retrieve the results of page N, you define the offset value as (N-1)*length. Note If length is supplied without an offset value, an offset of 0 is assumed. CM-Well allows a maximum offset of 1000 and a maximum length of 10,000. For queries with very large result sets, rather than use a search query, it is recommended to use the Iterator or Consumer APIs.","title":"Paging through Results"},{"location":"APIReference/UsageTopics/API.PagingThroughResultsWithOffsetAndLengthParameters.html#paging-through-results","text":"Query results may often be long lists of infotons. Rather than receive all the results at once, you may want to \"page through\" the results, that is, iteratively receive subsets of the results. To do this, you use two parameters: the offset parameter and the length parameter. For example, suppose you want to search for the string \u201cMarriott\u201d, and you want to receive the results in 40-infoton increments. You would request the first \"page\" using this query: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott offset=0 length=40 To get the second page, you use use this query: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott offset=40 length=40 And so on. To retrieve the results of page N, you define the offset value as (N-1)*length. Note If length is supplied without an offset value, an offset of 0 is assumed. CM-Well allows a maximum offset of 1000 and a maximum length of 10,000. For queries with very large result sets, rather than use a search query, it is recommended to use the Iterator or Consumer APIs.","title":"Paging through Results"},{"location":"APIReference/UsageTopics/API.ProtocolSystemField.html","text":"The Protocol System Field When you ingest an infoton whose subject URL is protocol / path , the protocol value is stored in the protocol system field, while the path value is stored in the path system field. For example, when an infoton whose URL is https://geo/countries is ingested, it will have the following system field values: protocol= https path= /geo/countries The ingested infoton can have either http or https as its protocol value. If no protocol value is supplied, a default value of http is assumed. Note This feature is not related to the protocol used to access CM-Well, which can be either http or https . Regardless of the protocol used to access CM-Well, ingested infotons can have either protocol in their URL. For a triple added to CM-Well, there is only special handling of the protocol in the Subject URL. A URL in an Object is stored as-is, complete with the protocol prefix, if provided. The protocol system field is retrieved when an infoton is read via API, in any format. However, is it not displayed in the CM-Well Web UI. If an infoton was ingested before the protocol system field was introduced, a default value of http will be retrieved when that infoton is read. Two infotons that are identical except for their protocol are still considered identical. For example, if infoton A is written with the http protocol, and then updated with the same path but with the https protocol, then the original instance of A will be updated. However, if during an ingest, nothing is changed but the protocol value, this is not considered a null update - the protocol value will be updated and the lastModified time will be updated.","title":"The Protocol System Field"},{"location":"APIReference/UsageTopics/API.ProtocolSystemField.html#the-protocol-system-field","text":"When you ingest an infoton whose subject URL is protocol / path , the protocol value is stored in the protocol system field, while the path value is stored in the path system field. For example, when an infoton whose URL is https://geo/countries is ingested, it will have the following system field values: protocol= https path= /geo/countries The ingested infoton can have either http or https as its protocol value. If no protocol value is supplied, a default value of http is assumed. Note This feature is not related to the protocol used to access CM-Well, which can be either http or https . Regardless of the protocol used to access CM-Well, ingested infotons can have either protocol in their URL. For a triple added to CM-Well, there is only special handling of the protocol in the Subject URL. A URL in an Object is stored as-is, complete with the protocol prefix, if provided. The protocol system field is retrieved when an infoton is read via API, in any format. However, is it not displayed in the CM-Well Web UI. If an infoton was ingested before the protocol system field was introduced, a default value of http will be retrieved when that infoton is read. Two infotons that are identical except for their protocol are still considered identical. For example, if infoton A is written with the http protocol, and then updated with the same path but with the https protocol, then the original instance of A will be updated. However, if during an ingest, nothing is changed but the protocol value, this is not considered a null update - the protocol value will be updated and the lastModified time will be updated.","title":"The Protocol System Field"},{"location":"APIReference/UsageTopics/API.QueryParameters.html","text":"CM-Well Query Parameters The following table describes parameters that you can add to most CM-Well calls. Some parameters take values and some serve as Boolean flags (see details in table). If multiple parameters appear in the call, they must be separated by the character. Note When performing a search operation, query parameters can be added either to the request URL (using the GET syntax) or to the request body (using the POST syntax). See Query for Infotons Using Field Conditions to learn more. Parameter Description Values Example Reference blocking This flag causes update requests to be blocking, i.e. to behave synchronously. None /_in?format=ttl replace-mode blocking Using the blocking Flag fields The subset of fields you want to get in results. If fields are not specified and the with-data flag is used, all fields are returned. A single field name or comma-separated list of field names. fields=CommonName.mdaas,organizationFoundedYear.mdaas See Field Condition Syntax for syntax of field names format The format to apply to the results. The default value is ntriples . json, jsonl, jsonld, n3, rdfxml, ntriples, nquads, turtle/ttl, yaml, trig, trix format=n3 CM-Well Input and Output Formats from A lower limit on the date and time the infoton was last updated. ISO 8601 datetime value from=2015-04-15T09:24:09.284Z From/To Datetime Formatting length The number of query results (infotons) you want to receive Any positive integer length=20 Paging through Results with offset and length Parameters gqp Filters results by outbound and/or inbound links of the matched infotons See reference See reference offset The offset of the first result you want to retrieve, relative to the complete list of results. 0 or any positive integer offset=40 Paging through Results with offset and length Parameters pretty If this flag appears, formats of the JSON family are tabulated and arranged in a visually friendly style. None N/A N/A priority If this flag appears in an update call, that call receives priority relative to non-priority calls. You can add this flag to any call to the _in endpoint or POST command. To use this flag, you must also pass the X-CM-WELL-TOKEN request header, with a token that grants access to the priority feature. This feature should be used with discretion so as not to flood the priority queue. None /_in?format=ttl priority... qp Field conditions (a.k.a query parameters). One or more matching conditions on field values. See reference qp=CommonName.mdaas:Coca%20Cola Field Condition Syntax recursive If true, queries and delete command are recursive, i.e. apply to all infotons who are path-wise descendants of the infotons in the request. (An equivalent but deprecated name for this flag is with-descendants.) false / true (the default) recursive=true Using the recursive Flag sort-by If this flag is used, query results are returned after sorting them by the value of the specified field. Any field name, optionally preceded by - to sort in ascending order or * to sort in descending order (the default). sort-by=*organizationStatusCode.mdaas Sorting Results with the sort-by Parameter to An upper limit on the date and time the infoton was last updated. ISO 8601 datetime value to=2015-04-15T14:12:40.540Z From/To Datetime Formatting tracking Using this flag returns a tracking ID that you can use to poll for an update request's status. None /_in?format=ntriples tracking Tracking API with-data If this flag is used, all infoton fields are returned in the query results. Otherwise, only the infotons' URLs and system metadata fields are returned. Either any format value that CM-Well supports, or no value, in which case the default format is N3 Query example: /permid.org?op=search qp=CommonName.mdaas:Coca%20Cola format=n3 with-data=json Using the with-data Flag with-deleted If this flag is used, all deleted versions of infotons are retrieved, instead of only \"live\" versions. None; the flag either appears or doesn't Query example: /permid.org/1-5046625212?with-deleted Using the with-deleted Flag with-history If this flag is used, all historical versions of infotons are retrieved, instead of just the latest. None; the flag either appears or doesn't Query example: /permid.org/1-5046625212?with-history Using the with-history Flag xg Requests outbound links of the matched infotons See reference See reference yg Requests outbound and/or inbound links of the matched infotons See reference See reference","title":"CM-Well Query Parameters"},{"location":"APIReference/UsageTopics/API.QueryParameters.html#cm-well-query-parameters","text":"The following table describes parameters that you can add to most CM-Well calls. Some parameters take values and some serve as Boolean flags (see details in table). If multiple parameters appear in the call, they must be separated by the character. Note When performing a search operation, query parameters can be added either to the request URL (using the GET syntax) or to the request body (using the POST syntax). See Query for Infotons Using Field Conditions to learn more. Parameter Description Values Example Reference blocking This flag causes update requests to be blocking, i.e. to behave synchronously. None /_in?format=ttl replace-mode blocking Using the blocking Flag fields The subset of fields you want to get in results. If fields are not specified and the with-data flag is used, all fields are returned. A single field name or comma-separated list of field names. fields=CommonName.mdaas,organizationFoundedYear.mdaas See Field Condition Syntax for syntax of field names format The format to apply to the results. The default value is ntriples . json, jsonl, jsonld, n3, rdfxml, ntriples, nquads, turtle/ttl, yaml, trig, trix format=n3 CM-Well Input and Output Formats from A lower limit on the date and time the infoton was last updated. ISO 8601 datetime value from=2015-04-15T09:24:09.284Z From/To Datetime Formatting length The number of query results (infotons) you want to receive Any positive integer length=20 Paging through Results with offset and length Parameters gqp Filters results by outbound and/or inbound links of the matched infotons See reference See reference offset The offset of the first result you want to retrieve, relative to the complete list of results. 0 or any positive integer offset=40 Paging through Results with offset and length Parameters pretty If this flag appears, formats of the JSON family are tabulated and arranged in a visually friendly style. None N/A N/A priority If this flag appears in an update call, that call receives priority relative to non-priority calls. You can add this flag to any call to the _in endpoint or POST command. To use this flag, you must also pass the X-CM-WELL-TOKEN request header, with a token that grants access to the priority feature. This feature should be used with discretion so as not to flood the priority queue. None /_in?format=ttl priority... qp Field conditions (a.k.a query parameters). One or more matching conditions on field values. See reference qp=CommonName.mdaas:Coca%20Cola Field Condition Syntax recursive If true, queries and delete command are recursive, i.e. apply to all infotons who are path-wise descendants of the infotons in the request. (An equivalent but deprecated name for this flag is with-descendants.) false / true (the default) recursive=true Using the recursive Flag sort-by If this flag is used, query results are returned after sorting them by the value of the specified field. Any field name, optionally preceded by - to sort in ascending order or * to sort in descending order (the default). sort-by=*organizationStatusCode.mdaas Sorting Results with the sort-by Parameter to An upper limit on the date and time the infoton was last updated. ISO 8601 datetime value to=2015-04-15T14:12:40.540Z From/To Datetime Formatting tracking Using this flag returns a tracking ID that you can use to poll for an update request's status. None /_in?format=ntriples tracking Tracking API with-data If this flag is used, all infoton fields are returned in the query results. Otherwise, only the infotons' URLs and system metadata fields are returned. Either any format value that CM-Well supports, or no value, in which case the default format is N3 Query example: /permid.org?op=search qp=CommonName.mdaas:Coca%20Cola format=n3 with-data=json Using the with-data Flag with-deleted If this flag is used, all deleted versions of infotons are retrieved, instead of only \"live\" versions. None; the flag either appears or doesn't Query example: /permid.org/1-5046625212?with-deleted Using the with-deleted Flag with-history If this flag is used, all historical versions of infotons are retrieved, instead of just the latest. None; the flag either appears or doesn't Query example: /permid.org/1-5046625212?with-history Using the with-history Flag xg Requests outbound links of the matched infotons See reference See reference yg Requests outbound and/or inbound links of the matched infotons See reference See reference","title":"CM-Well Query Parameters"},{"location":"APIReference/UsageTopics/API.ReturnCodes.html","text":"CM-Well API Return Codes The following table describes common HTTP return codes you may receive in response to REST API calls. Return Code Description 200 Operation succeeded 204 No more results 404 Infoton not found 401 Unauthorized user, or password does not match user name 422 The request has no effect on CM-Well data 503 Server is busy 5xx Access problem","title":"CM-Well API Return Codes"},{"location":"APIReference/UsageTopics/API.ReturnCodes.html#cm-well-api-return-codes","text":"The following table describes common HTTP return codes you may receive in response to REST API calls. Return Code Description 200 Operation succeeded 204 No more results 404 Infoton not found 401 Unauthorized user, or password does not match user name 422 The request has no effect on CM-Well data 503 Server is busy 5xx Access problem","title":"CM-Well API Return Codes"},{"location":"APIReference/UsageTopics/API.SortingResultsWithTheSort-byFlag.html","text":"Sorting Results with sort-by By default, query results are not sorted. In your query, you can specify a field by whose values you want the results to be sorted. You can also specify whether you want the results to be sorted in ascending or descending order. To sort results, add the sort-by parameter to the query, with a value of the field name by which you want to sort. For example, to sort by the CommonName field, you can run this query: cm-well-host /permid.org?op=search format=n3 length=30 sort-by=CommonName.mdaas You can also sort by several field values. When you provide several comma-separated field names in the sort-by parameter, the results are sorted first by the first field in the list, then by the second field, and so on. For example, to sort first by exchange code and then by CommonName, you can run this query: cm-well-host /permid.org?op=search format=n3 length=30 sort-by=IsTradingIn.mdaas,CommonName.mdaas Sort Order By default, results are sorted in descending order of their modified time (i.e. newer infotons appear before older infotons). If you add the sort-by parameter with no order operator, then results are sorted in ascending order of the given field's values. You can also add an explicit sort-order operator before the field name: * for ascending order and - for descending order. Ascending: sort-by=*CommonName.mdaas Descending: sort-by=-CommonName.mdaas Note Sort order is only guaranteed when using text/list output formats (as opposed to RDF output formats): tsv, text, json, or yaml. Adding sort-by=system.score to the query causes the results to be sorted in descending order of the matching score. The matching score is produced by Elastic Search, as a TFIDF (Term Frequency Inverse Document Frequency) score on the search terms. This means that the score is higher if the search terms appear more frequently in a specific infoton than in other infotons on average. Note that this feature does not work when the with-data flag is included in the query.","title":"Sorting Results with sort-by"},{"location":"APIReference/UsageTopics/API.SortingResultsWithTheSort-byFlag.html#sorting-results-with-sort-by","text":"By default, query results are not sorted. In your query, you can specify a field by whose values you want the results to be sorted. You can also specify whether you want the results to be sorted in ascending or descending order. To sort results, add the sort-by parameter to the query, with a value of the field name by which you want to sort. For example, to sort by the CommonName field, you can run this query: cm-well-host /permid.org?op=search format=n3 length=30 sort-by=CommonName.mdaas You can also sort by several field values. When you provide several comma-separated field names in the sort-by parameter, the results are sorted first by the first field in the list, then by the second field, and so on. For example, to sort first by exchange code and then by CommonName, you can run this query: cm-well-host /permid.org?op=search format=n3 length=30 sort-by=IsTradingIn.mdaas,CommonName.mdaas","title":"Sorting Results with sort-by"},{"location":"APIReference/UsageTopics/API.SortingResultsWithTheSort-byFlag.html#sort-order","text":"By default, results are sorted in descending order of their modified time (i.e. newer infotons appear before older infotons). If you add the sort-by parameter with no order operator, then results are sorted in ascending order of the given field's values. You can also add an explicit sort-order operator before the field name: * for ascending order and - for descending order. Ascending: sort-by=*CommonName.mdaas Descending: sort-by=-CommonName.mdaas Note Sort order is only guaranteed when using text/list output formats (as opposed to RDF output formats): tsv, text, json, or yaml. Adding sort-by=system.score to the query causes the results to be sorted in descending order of the matching score. The matching score is produced by Elastic Search, as a TFIDF (Term Frequency Inverse Document Frequency) score on the search terms. This means that the score is higher if the search terms appear more frequently in a specific infoton than in other infotons on average. Note that this feature does not work when the with-data flag is included in the query.","title":"Sort Order"},{"location":"APIReference/UsageTopics/API.UsingConditionalUpdates.html","text":"Using Conditional Updates Sometimes several clients can request updates to the same infoton at the same time. This can result in one client's updates overwriting another client's updates. If you want to make sure that an infoton has not changed between the time that you retrieved its UUID and data and the time that your updates are made, you can use the conditional update feature. To use this feature, when requesting an update, you provide the infoton's UUID within the request. CM-Well only performs the update if the infoton's UUID is the same as the one you provided. If it's different, this indicates that another client has updated the infoton since the last time you read it. To provide the infoton's UUID, you add a triple with the following format to your update request: Infoton URI cmwell://meta/sys#prevUUID Infoton UUID For example: Request: cm-well-host /_in?format=ntriples Input triples: http://infoton.int.com/example/1 cmwell://meta/sys#prevUUId afb215df2b6356d8801aq10a6c764d3a . http://infoton.int.com/example/1 http://infoton.int.com/object/name My New Name . Note An update request using the conditional feature receives a \"success\" response as long as the request is valid. To find out whether the update succeeded, you'll have to use the blocking flag or the tracking API . If the update failed because of a parallel update, a blocking update request or tracking request will produce an Evicted Version status.","title":"Using Conditional Updates"},{"location":"APIReference/UsageTopics/API.UsingConditionalUpdates.html#using-conditional-updates","text":"Sometimes several clients can request updates to the same infoton at the same time. This can result in one client's updates overwriting another client's updates. If you want to make sure that an infoton has not changed between the time that you retrieved its UUID and data and the time that your updates are made, you can use the conditional update feature. To use this feature, when requesting an update, you provide the infoton's UUID within the request. CM-Well only performs the update if the infoton's UUID is the same as the one you provided. If it's different, this indicates that another client has updated the infoton since the last time you read it. To provide the infoton's UUID, you add a triple with the following format to your update request: Infoton URI cmwell://meta/sys#prevUUID Infoton UUID For example: Request: cm-well-host /_in?format=ntriples Input triples: http://infoton.int.com/example/1 cmwell://meta/sys#prevUUId afb215df2b6356d8801aq10a6c764d3a . http://infoton.int.com/example/1 http://infoton.int.com/object/name My New Name . Note An update request using the conditional feature receives a \"success\" response as long as the request is valid. To find out whether the update succeeded, you'll have to use the blocking flag or the tracking API . If the update failed because of a parallel update, a blocking update request or tracking request will produce an Evicted Version status.","title":"Using Conditional Updates"},{"location":"APIReference/UsageTopics/API.UsingTheBlockingFlag.html","text":"Using the blocking Flag By default, CM-Well handles update requests asynchronously, that is, the caller gets a response when the request is made and not when its processing is completed. In some cases, you may prefer that your update request be handled synchronously, also known as \"in blocking mode\". To do this, you can add the blocking flag to your update request. In this case, the call only returns when the request has been processed. Here is an example: Request: curl -X POST cm-well-host /_in?format=ttl replace-mode blocking -H Content-Type: text/plain --data-binary @curlInput.txt Response: HTTP 200 code. Response body: http://permid.org/1-42965572445 cmwell://meta/nn#trackingStatus Done . http://permid.org/1-42963422545 cmwell://meta/nn#trackingStatus Done . http://permid.org/1-22235545445 cmwell://meta/nn#trackingStatus Failed . http://permid.org/1-54296574112 cmwell://meta/nn#trackingStatus Evicted(expected:8029b2df973dd216375a7c5a7761a2be,actual:c94bf0de57f83874a6bb5983bdef4b8d) . http://permid.org/1-54296574112 cmwell://meta/nn#trackingStatus Done . The response body contains the status values for every infoton the request tried to update. This is similar to the response that CM-Well returns when you use the tracking API . Note You may configure your HTTP client to time out after a certain period. In this case, a blocking update request may time out before it's completed, and therefore we recommend using the tracking API to test the request's status. In this case, if you want the update to behave synchronously, you'll have to manage tracking and verifying completion in your own code.","title":"Using the blocking Flag"},{"location":"APIReference/UsageTopics/API.UsingTheBlockingFlag.html#using-the-blocking-flag","text":"By default, CM-Well handles update requests asynchronously, that is, the caller gets a response when the request is made and not when its processing is completed. In some cases, you may prefer that your update request be handled synchronously, also known as \"in blocking mode\". To do this, you can add the blocking flag to your update request. In this case, the call only returns when the request has been processed. Here is an example: Request: curl -X POST cm-well-host /_in?format=ttl replace-mode blocking -H Content-Type: text/plain --data-binary @curlInput.txt Response: HTTP 200 code. Response body: http://permid.org/1-42965572445 cmwell://meta/nn#trackingStatus Done . http://permid.org/1-42963422545 cmwell://meta/nn#trackingStatus Done . http://permid.org/1-22235545445 cmwell://meta/nn#trackingStatus Failed . http://permid.org/1-54296574112 cmwell://meta/nn#trackingStatus Evicted(expected:8029b2df973dd216375a7c5a7761a2be,actual:c94bf0de57f83874a6bb5983bdef4b8d) . http://permid.org/1-54296574112 cmwell://meta/nn#trackingStatus Done . The response body contains the status values for every infoton the request tried to update. This is similar to the response that CM-Well returns when you use the tracking API . Note You may configure your HTTP client to time out after a certain period. In this case, a blocking update request may time out before it's completed, and therefore we recommend using the tracking API to test the request's status. In this case, if you want the update to behave synchronously, you'll have to manage tracking and verifying completion in your own code.","title":"Using the blocking Flag"},{"location":"APIReference/UsageTopics/API.UsingTheRecursiveFlag.html","text":"Using the recursive Flag By default, when you query CM-Well under a certain path, CM-Well searches directly under that path and not in its child paths. For example, if the Person infoton cm-well-host /example/Individuals/JohnSmith exists, and you perform the following query: cm-well-host /example?op=search qp=type.rdf:http://data.com/Person - no results are returned. But if you add the recursive flag as follows: cm-well-host /example?op=search qp=type.rdf:http://data.com/Person recursive - the infoton is returned. When you perform a search on a certain path using the recursive flag , all child paths are searched as well, and their child paths, and so on recursively. Note If you're not getting the query results you expect, you may need to add the recursive flag to the query.","title":"Using the recursive Flag"},{"location":"APIReference/UsageTopics/API.UsingTheRecursiveFlag.html#using-the-recursive-flag","text":"By default, when you query CM-Well under a certain path, CM-Well searches directly under that path and not in its child paths. For example, if the Person infoton cm-well-host /example/Individuals/JohnSmith exists, and you perform the following query: cm-well-host /example?op=search qp=type.rdf:http://data.com/Person - no results are returned. But if you add the recursive flag as follows: cm-well-host /example?op=search qp=type.rdf:http://data.com/Person recursive - the infoton is returned. When you perform a search on a certain path using the recursive flag , all child paths are searched as well, and their child paths, and so on recursively. Note If you're not getting the query results you expect, you may need to add the recursive flag to the query.","title":"Using the recursive Flag"},{"location":"APIReference/UsageTopics/API.UsingTheWith-dataFlag.html","text":"Using the with-data Flag CM-Well infotons have two types of fields: System metadata fields that contain internal administrative details filled in by CM-Well. The infoton's own fields, as defined by the data model the infoton is implementing. These field values are populated by triples added to the infoton. CM-Well queries by default return infotons \"without data\", that is, only the infoton's URL and its system metadata fields are returned. If the with-data flag is used, all of the infoton's fields are returned in the query results. The with-data flag can be added with no value, in which case the data is returned in N3 format. You can also add a format value to with-data , that can be any format that CM-Well supports, for instance: with-data=yaml, with-data=json, with-data=trig... Note The with-data flag can only be used with the search API (not with other read functions such as retrieval by URI or calling the _out endpoint). For example, here are some query results (truncated) without data: @ prefix nn : cm-well-host / meta / nn # . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix sys : cm-well-host / meta / sys # . http :// permid . org / 1-21588400951 sys : dataCenter dc1 ; sys : indexTime 1464380785276 ^^ xsd : long ; sys : lastModified 2016-05-27T20:26:23.613Z ^^ xsd : dateTime ; sys : parent /permid.org ; sys : path /permid.org/1-21588400951 ; sys : type ObjectInfoton ; sys : uuid 0fd092a7ec71351301681a67ec851953 . http :// permid . org / 1-4295903091 sys : dataCenter dc1 ; sys : indexTime 1464381251635 ^^ xsd : long ; sys : lastModified 2016-05-27T20:34:10.427Z ^^ xsd : dateTime ; sys : parent /permid.org ; sys : path /permid.org/1-4295903091 ; sys : type ObjectInfoton ; sys : uuid bb657a3f2df24a100ead15920ec565ad . http :// permid . org / 1-21588085388 sys : dataCenter dc1 ; sys : indexTime 1464380869582 ^^ xsd : long ; sys : lastModified 2016-05-27T20:27:48.879Z ^^ xsd : dateTime ; sys : parent /permid.org ; sys : path /permid.org/1-21588085388 ; sys : type ObjectInfoton ; sys : uuid 6cade86aeeac81d6cea957b87e059e05 . http :// permid . org / 1-21588085918 sys : dataCenter dc1 ; sys : indexTime 1464380923253 ^^ xsd : long ; sys : lastModified 2016-05-27T20:28:42.220Z ^^ xsd : dateTime ; sys : parent /permid.org ; sys : path /permid.org/1-21588085918 ; sys : type ObjectInfoton ; sys : uuid d5b36e0296e7c30153266d99a14682a8 . ... And here are the same results (truncated) with data: @ prefix nn : cm-well-host / meta / nn # . @ prefix mdaas : http :// ont . com / mdaas / . @ prefix rdf : http :// www . w3 . org / 1999 / 02 / 22-rdf-syntax-ns # . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix sys : cm-well-host / meta / sys # . http :// permid . org / 1-21588400951 amdaas : Quote ; sys : dataCenter dc1 ; sys : indexTime 1464380785276 ^^ xsd : long ; sys : lastModified 2016-05-27T20:26:23.613Z ^^ xsd : dateTime ; sys : parent /permid.org ; sys : path /permid.org/1-21588400951 ; sys : type ObjectInfoton ; sys : uuid 0fd092a7ec71351301681a67ec851953 ; mdaas : CommonName Coca-Cola 18 NOV ; mdaas : ExchangeTicker 0V8 ; mdaas : QuoteExchangeCode IEU ; mdaas : RCSAssetClass FUT ; mdaas : RIC CCHLFDCX1816 ; mdaas : TRCSAssetClass Equity Futures . http :// permid . org / 1-4295903091 a mdaas : Organization ; sys : dataCenter dc1 ; sys : indexTime 1464381251635 ^^ xsd : long ; sys : lastModified 2016-05-27T20:34:10.427Z ^^ xsd : dateTime ; sys : parent /permid.org ; sys : path /permid.org/1-4295903091 ; sys : type ObjectInfoton ; sys : uuid bb657a3f2df24a100ead15920ec565ad ; mdaas : CIK 0000021344 ; mdaas : CommonName Coca-Cola Co ; mdaas : InvestextID KO ; mdaas : LEI UWJKFUJFZ02DKWI3RY53 ; mdaas : MXID 100085264 ; mdaas : OrganizationProviderTypeCode 1 ; mdaas : PrimaryReportingEntityCode 1996N ; mdaas : RCPID 300012286 ; mdaas : SDCID 1329001 ; mdaas : SDCusip 191216 ; mdaas : TaxID 580628465 ; mdaas : VentureEconomicsID 25836 ; mdaas : WorldscopeCompanyID 191216100 ; mdaas : WorldscopeCompanyPermID C840L6930 ; mdaas : akaName Coke , Coca-Cola Co ; mdaas : entityLastReviewedDate 2016-03-02 05:00:00 ^^ xsd : dateTime ; mdaas : equityInstrumentCount 9 ; mdaas : hasImmediateParent http :// permid . org / 1-4295903091 ; mdaas : hasRegistrationAuthority http :// permid . org / 1-5000008957 ; mdaas : hasUltimateParent http :// permid . org / 1-4295903091 ; mdaas : headquartersAddress 1 Coca Cola Plz NW\\nATLANTA\\nGEORGIA\\n30313-2420\\nUnited States\\n , ATLANTA\\nGEORGIA\\n30313-2420\\nUnited States\\n @ en ; mdaas : headquartersCommonAddress 1 Coca Cola Plz NW\\nATLANTA\\nGEORGIA\\n30313-2420\\nUnited States\\n ; mdaas : headquartersFax 14046766792 ; mdaas : headquartersPhone 14046762121 ; mdaas : instrumentCount 1776 ; mdaas : ipoDate 1950-01-26 05:00:00 ^^ xsd : dateTime ; mdaas : isDomiciledIn United States @ en ; mdaas : isIncorporatedIn United States @ en ; mdaas : isPublicFlag true ; ...","title":"Using the with-data Flag"},{"location":"APIReference/UsageTopics/API.UsingTheWith-dataFlag.html#using-the-with-data-flag","text":"CM-Well infotons have two types of fields: System metadata fields that contain internal administrative details filled in by CM-Well. The infoton's own fields, as defined by the data model the infoton is implementing. These field values are populated by triples added to the infoton. CM-Well queries by default return infotons \"without data\", that is, only the infoton's URL and its system metadata fields are returned. If the with-data flag is used, all of the infoton's fields are returned in the query results. The with-data flag can be added with no value, in which case the data is returned in N3 format. You can also add a format value to with-data , that can be any format that CM-Well supports, for instance: with-data=yaml, with-data=json, with-data=trig... Note The with-data flag can only be used with the search API (not with other read functions such as retrieval by URI or calling the _out endpoint). For example, here are some query results (truncated) without data: @ prefix nn : cm-well-host / meta / nn # . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix sys : cm-well-host / meta / sys # . http :// permid . org / 1-21588400951 sys : dataCenter dc1 ; sys : indexTime 1464380785276 ^^ xsd : long ; sys : lastModified 2016-05-27T20:26:23.613Z ^^ xsd : dateTime ; sys : parent /permid.org ; sys : path /permid.org/1-21588400951 ; sys : type ObjectInfoton ; sys : uuid 0fd092a7ec71351301681a67ec851953 . http :// permid . org / 1-4295903091 sys : dataCenter dc1 ; sys : indexTime 1464381251635 ^^ xsd : long ; sys : lastModified 2016-05-27T20:34:10.427Z ^^ xsd : dateTime ; sys : parent /permid.org ; sys : path /permid.org/1-4295903091 ; sys : type ObjectInfoton ; sys : uuid bb657a3f2df24a100ead15920ec565ad . http :// permid . org / 1-21588085388 sys : dataCenter dc1 ; sys : indexTime 1464380869582 ^^ xsd : long ; sys : lastModified 2016-05-27T20:27:48.879Z ^^ xsd : dateTime ; sys : parent /permid.org ; sys : path /permid.org/1-21588085388 ; sys : type ObjectInfoton ; sys : uuid 6cade86aeeac81d6cea957b87e059e05 . http :// permid . org / 1-21588085918 sys : dataCenter dc1 ; sys : indexTime 1464380923253 ^^ xsd : long ; sys : lastModified 2016-05-27T20:28:42.220Z ^^ xsd : dateTime ; sys : parent /permid.org ; sys : path /permid.org/1-21588085918 ; sys : type ObjectInfoton ; sys : uuid d5b36e0296e7c30153266d99a14682a8 . ... And here are the same results (truncated) with data: @ prefix nn : cm-well-host / meta / nn # . @ prefix mdaas : http :// ont . com / mdaas / . @ prefix rdf : http :// www . w3 . org / 1999 / 02 / 22-rdf-syntax-ns # . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix sys : cm-well-host / meta / sys # . http :// permid . org / 1-21588400951 amdaas : Quote ; sys : dataCenter dc1 ; sys : indexTime 1464380785276 ^^ xsd : long ; sys : lastModified 2016-05-27T20:26:23.613Z ^^ xsd : dateTime ; sys : parent /permid.org ; sys : path /permid.org/1-21588400951 ; sys : type ObjectInfoton ; sys : uuid 0fd092a7ec71351301681a67ec851953 ; mdaas : CommonName Coca-Cola 18 NOV ; mdaas : ExchangeTicker 0V8 ; mdaas : QuoteExchangeCode IEU ; mdaas : RCSAssetClass FUT ; mdaas : RIC CCHLFDCX1816 ; mdaas : TRCSAssetClass Equity Futures . http :// permid . org / 1-4295903091 a mdaas : Organization ; sys : dataCenter dc1 ; sys : indexTime 1464381251635 ^^ xsd : long ; sys : lastModified 2016-05-27T20:34:10.427Z ^^ xsd : dateTime ; sys : parent /permid.org ; sys : path /permid.org/1-4295903091 ; sys : type ObjectInfoton ; sys : uuid bb657a3f2df24a100ead15920ec565ad ; mdaas : CIK 0000021344 ; mdaas : CommonName Coca-Cola Co ; mdaas : InvestextID KO ; mdaas : LEI UWJKFUJFZ02DKWI3RY53 ; mdaas : MXID 100085264 ; mdaas : OrganizationProviderTypeCode 1 ; mdaas : PrimaryReportingEntityCode 1996N ; mdaas : RCPID 300012286 ; mdaas : SDCID 1329001 ; mdaas : SDCusip 191216 ; mdaas : TaxID 580628465 ; mdaas : VentureEconomicsID 25836 ; mdaas : WorldscopeCompanyID 191216100 ; mdaas : WorldscopeCompanyPermID C840L6930 ; mdaas : akaName Coke , Coca-Cola Co ; mdaas : entityLastReviewedDate 2016-03-02 05:00:00 ^^ xsd : dateTime ; mdaas : equityInstrumentCount 9 ; mdaas : hasImmediateParent http :// permid . org / 1-4295903091 ; mdaas : hasRegistrationAuthority http :// permid . org / 1-5000008957 ; mdaas : hasUltimateParent http :// permid . org / 1-4295903091 ; mdaas : headquartersAddress 1 Coca Cola Plz NW\\nATLANTA\\nGEORGIA\\n30313-2420\\nUnited States\\n , ATLANTA\\nGEORGIA\\n30313-2420\\nUnited States\\n @ en ; mdaas : headquartersCommonAddress 1 Coca Cola Plz NW\\nATLANTA\\nGEORGIA\\n30313-2420\\nUnited States\\n ; mdaas : headquartersFax 14046766792 ; mdaas : headquartersPhone 14046762121 ; mdaas : instrumentCount 1776 ; mdaas : ipoDate 1950-01-26 05:00:00 ^^ xsd : dateTime ; mdaas : isDomiciledIn United States @ en ; mdaas : isIncorporatedIn United States @ en ; mdaas : isPublicFlag true ; ...","title":"Using the with-data Flag"},{"location":"APIReference/UsageTopics/API.UsingTheWith-deletedFlag.html","text":"Using the with-deleted Flag By default, queries to CM-Well return only the most recent version of each matching infoton (although all versions are retained in the repository). If you add the with-history flag, the query returns all \"historical\" versions as well as the most recent versions. However, deleted infotons are returned neither for the default query nor for a with-history query. The with-deleted flag was introduced to allow you to indicate that you wish to retrieve deleted infotons that match the query, as well as \"live\" infotons.","title":"Using the with-deleted Flag"},{"location":"APIReference/UsageTopics/API.UsingTheWith-deletedFlag.html#using-the-with-deleted-flag","text":"By default, queries to CM-Well return only the most recent version of each matching infoton (although all versions are retained in the repository). If you add the with-history flag, the query returns all \"historical\" versions as well as the most recent versions. However, deleted infotons are returned neither for the default query nor for a with-history query. The with-deleted flag was introduced to allow you to indicate that you wish to retrieve deleted infotons that match the query, as well as \"live\" infotons.","title":"Using the with-deleted Flag"},{"location":"APIReference/UsageTopics/API.UsingTheWith-historyFlag.html","text":"Using the with-history Flag Each time a CM-Well infoton is updated, a \"historical\" copy of it is saved, and its URL (which serves as a \"virtual link\") is updated to point to the most recent version. Each version of the infoton has a \"point in time URL\", which is a unique URL pointing to that particular version. For example, this is what we see when retrieving the default (latest) version of an infoton: And this is what we see when retrieving the same infoton, using the with-history flag: Note that the infoton has 12 historical versions (the image shows only one page of results).","title":"Using the with-history Flag"},{"location":"APIReference/UsageTopics/API.UsingTheWith-historyFlag.html#using-the-with-history-flag","text":"Each time a CM-Well infoton is updated, a \"historical\" copy of it is saved, and its URL (which serves as a \"virtual link\") is updated to point to the most recent version. Each version of the infoton has a \"point in time URL\", which is a unique URL pointing to that particular version. For example, this is what we see when retrieving the default (latest) version of an infoton: And this is what we see when retrieving the same infoton, using the with-history flag: Note that the infoton has 12 historical versions (the image shows only one page of results).","title":"Using the with-history Flag"},{"location":"AdvancedTopics/Advanced.BuildingCM-Well.html","text":"Building CM-Well This tutorial describes how to build CM-Well from scratch. It assumes you don't have the source, scala or SBT installed but are comfortable with UNIX command line. Note All commands/output shown were tested on a Mac running 10.12.5. Your mileage may vary. Prerequisites CM-Well requires the following prerequisite software to install. Scala Build and run is quite sensitive to the version of Scala. Currently, we build and test using Scala 2.12.4 . Once you've unpackaged the download, move the folder to a convenient directory, noting that we have to make a slight change to the Scala install so best to use a dedicated copy for CM-Well. In this example, we install Scala to the home directory. Next, set your SCALA_HOME variable: $ export SCALA_HOME = ~/scala-2.12.4 Add the Scala binary directory to your path: $ PATH = $PATH : $SCALA_HOME /bin ; export PATH Verify that scala is available and running: $ scala -version Scala code runner version 2 .12.4 -- Copyright 2002 -2017, LAMP/EPFL Install Scala Build Tool (SBT) Next we need SBT . For this tutorial, we downloaded the binaries directly and unzipped alongside the Scala directory. This tutorial was tested with version 1.1.4. Like Scala, add sbt to your path: $ PATH = $PATH :~/sbt/bin ; export PATH Confirm that SBT runs successfully by running the following: $ sbt about WARN: No sbt.version set in project/build.properties, base directory: /Users/TRnonodename/Code [ warn ] Executing in batch mode. [ warn ] For better performance, hit [ ENTER ] to switch to interactive mode, or [ warn ] consider launching sbt without any commands, or explicitly passing shell [ info ] Set current project to code ( in build file:/Users/TRnonodename/Code/ ) [ info ] This is sbt 0 .13.15 [ info ] The current project is { file:/Users/TRnonodename/Code/ } code 0 .1-SNAPSHOT [ info ] The current project is built against Scala 2 .12.4 [ info ] Available Plugins: sbt.plugins.IvyPlugin, sbt.plugins.JvmPlugin, sbt.plugins.CorePlugin, sbt.plugins.JUnitXmlReportPlugin, sbt.plugins.Giter8TemplatePlugin [ info ] sbt, sbt plugins, and build definitions are using Scala 2 .12.4 Installing CM-Well Note On the machine from which you're installing CM-Well, you'll first need to install Python 2.7 . Download or clone the source from Github. Once you have the source, navigate into the server directory: $ cd CM-Well/server/ Next, we need to give SBT more memory to work with. There's a couple of ways to do this, setting an options variable works well: export SBT_OPTS= -Xmx2G -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -Xss2M Or you can configure sbt by issuing a -mem command from the server directory: $ sbt -mem 2048 [ info ] Loading project definition from /Users/TRnonodename/Code/CM-Well/server/project/project [ info ] Loading project definition from /Users/TRnonodename/Code/CM-Well/server/project [ info ] Resolving key references ( 19979 settings ) ... [ info ] Set current project to server ( in build file:/Users/TRnonodename/Code/CM-Well/server/ ) server exit Now, initiate a build by calling sbt with the packageCmwell command. $ sbt packageCmwell Getting org.scala-sbt sbt 0 .13.15 ( this may take some time ) ... downloading file:////Users/TRNonodename/.sbt/preloaded/org.scala-sbt/sbt/0.13.15/jars/sbt.jar ... [ SUCCESSFUL ] org.scala-sbt#sbt ; 0 .13.15!sbt.jar ( 8ms ) ... [ info ] /Users/TRNonodename/Code/CM-Well/server/cmwell-cons/app/components/zookeeper-3.4.6.tar.gz [ success ] Total time: 247 s, completed Jul 21 , 2017 11 :09:07 AM Note The first build will take some time while SBT downloads all dependencies. Running CM-Well Once you have the server compiled, navigate to the cmwell-cons/app directory and run cmwell.sh $ cd cmwell - cons / app / $ . / cmwell . sh - e Welcome to CM - Well Console . -::/++ooooo++//:-. ` . :/oooooo + oo+++o++oooooo+/:. ` . :+oo+++++o + ooooooo++++++++++ooo/- ` . / oo++++oooooooooooo+++++//////:/++oo/- ` ` / o++++oooooooooooo+++++++////::::::-:/+o+: ` :oo+++/:-----::/+o++++++//////::::-----.-:+oo/ ` . + ooo+-.....---::-.--:///////:::::----.......-+o+: ` . / o+:. ```` .. ----://:- `` . -::::-----...... ````` :+o+. ` ---o+ ` . ` ... ----:/::-. ` .. ---..... ```````` . / oo - .. - ` + o - ```` .. ----://:++/:-. `` `` .... `````` .. ``` ` : oo : ` : ` . ` - o + ` . ` .. --::///::--:://///:-. `` ``` ` ... ----:/:. - oo : ` :. - ` / o : . --:://////:--. ` ` . -://+/:-.. ` . `` .. ----://:- ` - oo - ` . - ` - ` + o - . :///////::-. ` `` . -://+/:-..----:/::-- :oo . -. ` . / o . ` -:://:-. ` .. -/:.----://:--- + o / .. - . / o - ` :+/ ` . ` . ---:////::-.- . oo . : ` - . - o : ` / o . . :////////::--- ` + o : `` . . ` o+ ` -++ . / o+://////::-. ` / o + . . .. / o : ` : o : . / o+- `` . --:--. `` - oo . ` - ` . ` - ` + o ` . / o ` . / o+- ` - o + . .. . ` - o+ ` :+/ . / o/- ` :o / - . . :o/ ` ` / o- ```` . / o/- ` + o - . ` . ` . ` . ` :o/ ` ` -+o----:-./o/- ` - o+ ` - . ` - -++. ``` . :+/---//:/- ` ` + o - ` . ` - ` . ` . / o : ` . ``` . -:---://:-- ``` / o / ` -. ` . ` ` . ` `` :++- ` . ` ... ---://::--. ```` . / o / ` . . ` ` .. ``` . / o+-- ` .. ---:///::-.. ` ````` . -+ o : ` . ` .. ``` . :. ``` -/+o/::://////::-.. ``` .. -/o/. .. `` ---. ` . --...-:+o++/////::--. `` .. -:+o+- ` .. ` . -.....-:----:/+oo++/:-. .. -/+o+/. ` -...---.--:::::////++oo+/:-.. ``````` . --/+oo+/- ` ` --.-:::---::////////++++ooooooooooo + o+/:. ` . -:-:////:////++++++++++o++ooo+++/- ` ` . ::////+/+++++++ooooooooo++:. ` . --:/+++++ooooo++/:-. ` Welcome to Scala 2.12.4 ( Java HotSpot ( TM ) 64 - Bit Server VM , Java 1.8.0 _ 45 ). Type in expressions for evaluation . Or try :help . Once the console has loaded, start CM-Well running: scala : load pe Loading pe ... import scala.language.postfixOps locParam : String = null location : String = / Users / TRnonodename / app useAuthorization : Boolean = false dataDirs : DataDirs = DataDirs ( List ( / Users / TRnonodename / app / cm - well - data / cas ), List ( / Users / TRnonodename / app / cm - well - data / ccl ), List ( / Users / TRnonodename / app / cm - well - data / es ), List ( / Users / TRnonodename / app / cm - well - data / tlog ), / Users / TRnonodename / app / cm - well - data / kafka , / Users / TRnonodename / app / cm - well - data / zookeeper , / Users / TRnonodename / app / cm - well - data / log ) pe : LocalHost = LocalHost ( lh , DataDirs ( List ( / Users / TRnonodename / app / cm - well - data / cas ), List ( / Users / TRnonodename / app / cm - well - data / ccl ), List ( / Users / TRnonodename / app / cm - well - data / es ), List ( / Users / TRnonodename / app / cm - well - data / tlog ), / Users / TRnonodename / app / cm - well - data / kafka , / Users / TRnonodename / app / cm - well - data / zookeeper , / Users / TRnonodename / app / cm - well - data / log ), InstDirs ( / Users / TRnonodename / app / cm - well , / Users / TRnonodename / app ), false , false , 0 , DevAllocations (), false , true , true , false , true , false ) pe . mappingFile : String = mapping - pe . json scala pe . install Info : purging cm - well Info : stopping processes Info : clearing application data ... Info : finished initializing cm - well scala Once the scala prompt returns, CM-Well is running, listening to port 9000. Navigate your browser to http://localhost:9000 and you should see the root UI. From here on in, you can use curl to load data per the other tutorials. Note that no data is persisted to this copy beyond a restart of CM-Well. Stopping CM-Well To shut CM-Well down, first shutdown CM-Well with pe.stop scala pe.stop Then issue a :quit command to exit the console: scala :quit","title":"Building CM-Well"},{"location":"AdvancedTopics/Advanced.BuildingCM-Well.html#building-cm-well","text":"This tutorial describes how to build CM-Well from scratch. It assumes you don't have the source, scala or SBT installed but are comfortable with UNIX command line. Note All commands/output shown were tested on a Mac running 10.12.5. Your mileage may vary.","title":"Building CM-Well"},{"location":"AdvancedTopics/Advanced.BuildingCM-Well.html#prerequisites","text":"CM-Well requires the following prerequisite software to install.","title":"Prerequisites"},{"location":"AdvancedTopics/Advanced.BuildingCM-Well.html#scala","text":"Build and run is quite sensitive to the version of Scala. Currently, we build and test using Scala 2.12.4 . Once you've unpackaged the download, move the folder to a convenient directory, noting that we have to make a slight change to the Scala install so best to use a dedicated copy for CM-Well. In this example, we install Scala to the home directory. Next, set your SCALA_HOME variable: $ export SCALA_HOME = ~/scala-2.12.4 Add the Scala binary directory to your path: $ PATH = $PATH : $SCALA_HOME /bin ; export PATH Verify that scala is available and running: $ scala -version Scala code runner version 2 .12.4 -- Copyright 2002 -2017, LAMP/EPFL","title":"Scala"},{"location":"AdvancedTopics/Advanced.BuildingCM-Well.html#install-scala-build-tool-sbt","text":"Next we need SBT . For this tutorial, we downloaded the binaries directly and unzipped alongside the Scala directory. This tutorial was tested with version 1.1.4. Like Scala, add sbt to your path: $ PATH = $PATH :~/sbt/bin ; export PATH Confirm that SBT runs successfully by running the following: $ sbt about WARN: No sbt.version set in project/build.properties, base directory: /Users/TRnonodename/Code [ warn ] Executing in batch mode. [ warn ] For better performance, hit [ ENTER ] to switch to interactive mode, or [ warn ] consider launching sbt without any commands, or explicitly passing shell [ info ] Set current project to code ( in build file:/Users/TRnonodename/Code/ ) [ info ] This is sbt 0 .13.15 [ info ] The current project is { file:/Users/TRnonodename/Code/ } code 0 .1-SNAPSHOT [ info ] The current project is built against Scala 2 .12.4 [ info ] Available Plugins: sbt.plugins.IvyPlugin, sbt.plugins.JvmPlugin, sbt.plugins.CorePlugin, sbt.plugins.JUnitXmlReportPlugin, sbt.plugins.Giter8TemplatePlugin [ info ] sbt, sbt plugins, and build definitions are using Scala 2 .12.4","title":"Install Scala Build Tool (SBT)"},{"location":"AdvancedTopics/Advanced.BuildingCM-Well.html#installing-cm-well","text":"Note On the machine from which you're installing CM-Well, you'll first need to install Python 2.7 . Download or clone the source from Github. Once you have the source, navigate into the server directory: $ cd CM-Well/server/ Next, we need to give SBT more memory to work with. There's a couple of ways to do this, setting an options variable works well: export SBT_OPTS= -Xmx2G -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -Xss2M Or you can configure sbt by issuing a -mem command from the server directory: $ sbt -mem 2048 [ info ] Loading project definition from /Users/TRnonodename/Code/CM-Well/server/project/project [ info ] Loading project definition from /Users/TRnonodename/Code/CM-Well/server/project [ info ] Resolving key references ( 19979 settings ) ... [ info ] Set current project to server ( in build file:/Users/TRnonodename/Code/CM-Well/server/ ) server exit Now, initiate a build by calling sbt with the packageCmwell command. $ sbt packageCmwell Getting org.scala-sbt sbt 0 .13.15 ( this may take some time ) ... downloading file:////Users/TRNonodename/.sbt/preloaded/org.scala-sbt/sbt/0.13.15/jars/sbt.jar ... [ SUCCESSFUL ] org.scala-sbt#sbt ; 0 .13.15!sbt.jar ( 8ms ) ... [ info ] /Users/TRNonodename/Code/CM-Well/server/cmwell-cons/app/components/zookeeper-3.4.6.tar.gz [ success ] Total time: 247 s, completed Jul 21 , 2017 11 :09:07 AM Note The first build will take some time while SBT downloads all dependencies.","title":"Installing CM-Well"},{"location":"AdvancedTopics/Advanced.BuildingCM-Well.html#running-cm-well","text":"Once you have the server compiled, navigate to the cmwell-cons/app directory and run cmwell.sh $ cd cmwell - cons / app / $ . / cmwell . sh - e Welcome to CM - Well Console . -::/++ooooo++//:-. ` . :/oooooo + oo+++o++oooooo+/:. ` . :+oo+++++o + ooooooo++++++++++ooo/- ` . / oo++++oooooooooooo+++++//////:/++oo/- ` ` / o++++oooooooooooo+++++++////::::::-:/+o+: ` :oo+++/:-----::/+o++++++//////::::-----.-:+oo/ ` . + ooo+-.....---::-.--:///////:::::----.......-+o+: ` . / o+:. ```` .. ----://:- `` . -::::-----...... ````` :+o+. ` ---o+ ` . ` ... ----:/::-. ` .. ---..... ```````` . / oo - .. - ` + o - ```` .. ----://:++/:-. `` `` .... `````` .. ``` ` : oo : ` : ` . ` - o + ` . ` .. --::///::--:://///:-. `` ``` ` ... ----:/:. - oo : ` :. - ` / o : . --:://////:--. ` ` . -://+/:-.. ` . `` .. ----://:- ` - oo - ` . - ` - ` + o - . :///////::-. ` `` . -://+/:-..----:/::-- :oo . -. ` . / o . ` -:://:-. ` .. -/:.----://:--- + o / .. - . / o - ` :+/ ` . ` . ---:////::-.- . oo . : ` - . - o : ` / o . . :////////::--- ` + o : `` . . ` o+ ` -++ . / o+://////::-. ` / o + . . .. / o : ` : o : . / o+- `` . --:--. `` - oo . ` - ` . ` - ` + o ` . / o ` . / o+- ` - o + . .. . ` - o+ ` :+/ . / o/- ` :o / - . . :o/ ` ` / o- ```` . / o/- ` + o - . ` . ` . ` . ` :o/ ` ` -+o----:-./o/- ` - o+ ` - . ` - -++. ``` . :+/---//:/- ` ` + o - ` . ` - ` . ` . / o : ` . ``` . -:---://:-- ``` / o / ` -. ` . ` ` . ` `` :++- ` . ` ... ---://::--. ```` . / o / ` . . ` ` .. ``` . / o+-- ` .. ---:///::-.. ` ````` . -+ o : ` . ` .. ``` . :. ``` -/+o/::://////::-.. ``` .. -/o/. .. `` ---. ` . --...-:+o++/////::--. `` .. -:+o+- ` .. ` . -.....-:----:/+oo++/:-. .. -/+o+/. ` -...---.--:::::////++oo+/:-.. ``````` . --/+oo+/- ` ` --.-:::---::////////++++ooooooooooo + o+/:. ` . -:-:////:////++++++++++o++ooo+++/- ` ` . ::////+/+++++++ooooooooo++:. ` . --:/+++++ooooo++/:-. ` Welcome to Scala 2.12.4 ( Java HotSpot ( TM ) 64 - Bit Server VM , Java 1.8.0 _ 45 ). Type in expressions for evaluation . Or try :help . Once the console has loaded, start CM-Well running: scala : load pe Loading pe ... import scala.language.postfixOps locParam : String = null location : String = / Users / TRnonodename / app useAuthorization : Boolean = false dataDirs : DataDirs = DataDirs ( List ( / Users / TRnonodename / app / cm - well - data / cas ), List ( / Users / TRnonodename / app / cm - well - data / ccl ), List ( / Users / TRnonodename / app / cm - well - data / es ), List ( / Users / TRnonodename / app / cm - well - data / tlog ), / Users / TRnonodename / app / cm - well - data / kafka , / Users / TRnonodename / app / cm - well - data / zookeeper , / Users / TRnonodename / app / cm - well - data / log ) pe : LocalHost = LocalHost ( lh , DataDirs ( List ( / Users / TRnonodename / app / cm - well - data / cas ), List ( / Users / TRnonodename / app / cm - well - data / ccl ), List ( / Users / TRnonodename / app / cm - well - data / es ), List ( / Users / TRnonodename / app / cm - well - data / tlog ), / Users / TRnonodename / app / cm - well - data / kafka , / Users / TRnonodename / app / cm - well - data / zookeeper , / Users / TRnonodename / app / cm - well - data / log ), InstDirs ( / Users / TRnonodename / app / cm - well , / Users / TRnonodename / app ), false , false , 0 , DevAllocations (), false , true , true , false , true , false ) pe . mappingFile : String = mapping - pe . json scala pe . install Info : purging cm - well Info : stopping processes Info : clearing application data ... Info : finished initializing cm - well scala Once the scala prompt returns, CM-Well is running, listening to port 9000. Navigate your browser to http://localhost:9000 and you should see the root UI. From here on in, you can use curl to load data per the other tutorials. Note that no data is persisted to this copy beyond a restart of CM-Well.","title":"Running CM-Well"},{"location":"AdvancedTopics/Advanced.BuildingCM-Well.html#stopping-cm-well","text":"To shut CM-Well down, first shutdown CM-Well with pe.stop scala pe.stop Then issue a :quit command to exit the console: scala :quit","title":"Stopping CM-Well"},{"location":"AdvancedTopics/Cookbook.CM-WellWithPermIDData.html","text":"Populating Your CM-Well Instance with PermID.org Data What is PermID.org? You may or may not be familiar with the PermID platform . It provides free, open access to Refinitiv financial entities and their Permanent Identifiers, via an easy-to-use REST API. If you haven't already, now's the time to check it out. These are the entities that PermID supports: Organizations Instruments Quotes People Currencies Asset Classes Industry Codes Consuming PermID.org's data is a free and painless way to populate your CM-Well platform with world-class financial linked data. This article shows you how to do just that. How do I Consume PermID.org Data? The idea is simple. Create your initial repository by downloading a bulk file containing all the PermID entities of a certain type. Then all you have to do is periodically sample the PermID Atom Feed, which provides you with incremental updates and keeps your data up-to-the-minute. It's important to note that each ingest to CM-Well is considered an \"insert-or-update\" operation, so if it's a new entity it's created, and if it's an existing entity it's updated. You don't have to guess which one is it, simply ingest all the data that the feed provides you. The following steps show you how to download a bulk file from PermID.org, ingest it to a freshly installed CM-Well instance, and then create a task that keeps it current with incremental updates. Step 1: Create an Up-and-Running CM-Well Instance See the CM-Well GitHub Readme file to learn how to do this. Once you have, let's assume your CM-Well instance is running at localhost:9000 . Step 2: Register on PermID.org Browse to the PermID registration page and register for free as a PermID.org user, using your email address. You'll have to open your inbox and click a confirmation link. Step 3: Download a Bulk File There's a separate bulk file for each type of entity. Browse to https://permid.org/download and download the entity bulk file of your choice. For the purpose of this example, I downloaded the Organizations file OpenPermID-bulk-organization-20170730_070333.ntriples.gz , which weighed 384MB. Step 4: Ingest the Bulk File into Your CM-Well Instance We'll use one of our data tools for this task: the CM-Well Ingester. To build the CM-Well data tools: Clone the CM-Well source from https://github.com/CM-Well/CM-Well . Navigate to the server directory. Run sbt . At the sbt prompt, type dataToolsApp/pack . This will pack the Data Tools App into the server/cmwell-data-tools-app/target/pack/bin directory. To run the Ingester: Navigate to the bin folder: $ cd cmwell-data-tools-app/target/pack/bin Run this command: ./ingester --gzip --format ntriples --file ~/OpenPermID-bulk-organization-20170730_070333.ntriples.gz --host localhost:9000 During the ingest process, you'll see a live status line, in this format: [ ingested : 1.3 MB ][ ingested infotons : 836 30.853 / sec ] [ failed infotons : 0 ][ rate = 43.07 KB / secaverage rate = 109.48 KB / sec ][ 12 seconds ] Tip You can run any CM-Well data tool with the --help parameter, to learn more about the tool and its input parameters. Tip Step 4.5: Have some coffee! The bulk file is large and the ingest can take a few minutes. Step 5: Create the Incremental Update Task So your CM-Well is up-to-date right now, but what about the new updates that PermID.org provides (approximately every 15 minutes)? Once you've downloaded a bulk file, there's no need to do it ever again! Let's see what a feed looks like. This is how you would access the Organization feed: https://permid.org/atom/organization?access-token= YourAccessToken format=ntriples This returns an atom feed. It has many headers to make it human-readable in a browser, but ultimately you'll want what's in between the summary elements. You can extract this programmatically using your favorite XML Parser, or in bash using xml_grep (a tool in a package available via apt). We can even pipe the atom stream directly through xml_grep and into the Ingester. The CM-Well data tools support the --file parameter, and when it is not supplied, they read input from STDIN. So our incremental update task can be this one-liner: $ curl https://permid.org/atom/organization?access-token= YourAccessToken format=ntriples | xml_grep summary --text_only | ./ingester --format ntriples --host localhost:9000 That's all it takes! Run this command as a scheduled task (e.g. once an hour) on your machine, and you will always be up-to-date with PermID.org data. Note PermIDs are never deleted, so you don't have to worry about incremental updates deleting data. As we mentioned above, every update in PermID.org can be considered as an insert-or-update.","title":"Cookbook"},{"location":"AdvancedTopics/Cookbook.CM-WellWithPermIDData.html#populating-your-cm-well-instance-with-permidorg-data","text":"","title":"Populating Your CM-Well Instance with PermID.org Data"},{"location":"AdvancedTopics/Cookbook.CM-WellWithPermIDData.html#what-is-permidorg","text":"You may or may not be familiar with the PermID platform . It provides free, open access to Refinitiv financial entities and their Permanent Identifiers, via an easy-to-use REST API. If you haven't already, now's the time to check it out. These are the entities that PermID supports: Organizations Instruments Quotes People Currencies Asset Classes Industry Codes Consuming PermID.org's data is a free and painless way to populate your CM-Well platform with world-class financial linked data. This article shows you how to do just that.","title":"What is PermID.org?"},{"location":"AdvancedTopics/Cookbook.CM-WellWithPermIDData.html#how-do-i-consume-permidorg-data","text":"The idea is simple. Create your initial repository by downloading a bulk file containing all the PermID entities of a certain type. Then all you have to do is periodically sample the PermID Atom Feed, which provides you with incremental updates and keeps your data up-to-the-minute. It's important to note that each ingest to CM-Well is considered an \"insert-or-update\" operation, so if it's a new entity it's created, and if it's an existing entity it's updated. You don't have to guess which one is it, simply ingest all the data that the feed provides you. The following steps show you how to download a bulk file from PermID.org, ingest it to a freshly installed CM-Well instance, and then create a task that keeps it current with incremental updates.","title":"How do I Consume PermID.org Data?"},{"location":"AdvancedTopics/Cookbook.CM-WellWithPermIDData.html#step-1-create-an-up-and-running-cm-well-instance","text":"See the CM-Well GitHub Readme file to learn how to do this. Once you have, let's assume your CM-Well instance is running at localhost:9000 .","title":"Step 1: Create an Up-and-Running CM-Well Instance"},{"location":"AdvancedTopics/Cookbook.CM-WellWithPermIDData.html#step-2-register-on-permidorg","text":"Browse to the PermID registration page and register for free as a PermID.org user, using your email address. You'll have to open your inbox and click a confirmation link.","title":"Step 2: Register on PermID.org"},{"location":"AdvancedTopics/Cookbook.CM-WellWithPermIDData.html#step-3-download-a-bulk-file","text":"There's a separate bulk file for each type of entity. Browse to https://permid.org/download and download the entity bulk file of your choice. For the purpose of this example, I downloaded the Organizations file OpenPermID-bulk-organization-20170730_070333.ntriples.gz , which weighed 384MB.","title":"Step 3: Download a Bulk File"},{"location":"AdvancedTopics/Cookbook.CM-WellWithPermIDData.html#step-4-ingest-the-bulk-file-into-your-cm-well-instance","text":"We'll use one of our data tools for this task: the CM-Well Ingester. To build the CM-Well data tools: Clone the CM-Well source from https://github.com/CM-Well/CM-Well . Navigate to the server directory. Run sbt . At the sbt prompt, type dataToolsApp/pack . This will pack the Data Tools App into the server/cmwell-data-tools-app/target/pack/bin directory. To run the Ingester: Navigate to the bin folder: $ cd cmwell-data-tools-app/target/pack/bin Run this command: ./ingester --gzip --format ntriples --file ~/OpenPermID-bulk-organization-20170730_070333.ntriples.gz --host localhost:9000 During the ingest process, you'll see a live status line, in this format: [ ingested : 1.3 MB ][ ingested infotons : 836 30.853 / sec ] [ failed infotons : 0 ][ rate = 43.07 KB / secaverage rate = 109.48 KB / sec ][ 12 seconds ] Tip You can run any CM-Well data tool with the --help parameter, to learn more about the tool and its input parameters. Tip Step 4.5: Have some coffee! The bulk file is large and the ingest can take a few minutes.","title":"Step 4: Ingest the Bulk File into Your CM-Well Instance"},{"location":"AdvancedTopics/Cookbook.CM-WellWithPermIDData.html#step-5-create-the-incremental-update-task","text":"So your CM-Well is up-to-date right now, but what about the new updates that PermID.org provides (approximately every 15 minutes)? Once you've downloaded a bulk file, there's no need to do it ever again! Let's see what a feed looks like. This is how you would access the Organization feed: https://permid.org/atom/organization?access-token= YourAccessToken format=ntriples This returns an atom feed. It has many headers to make it human-readable in a browser, but ultimately you'll want what's in between the summary elements. You can extract this programmatically using your favorite XML Parser, or in bash using xml_grep (a tool in a package available via apt). We can even pipe the atom stream directly through xml_grep and into the Ingester. The CM-Well data tools support the --file parameter, and when it is not supplied, they read input from STDIN. So our incremental update task can be this one-liner: $ curl https://permid.org/atom/organization?access-token= YourAccessToken format=ntriples | xml_grep summary --text_only | ./ingester --format ntriples --host localhost:9000 That's all it takes! Run this command as a scheduled task (e.g. once an hour) on your machine, and you will always be up-to-date with PermID.org data. Note PermIDs are never deleted, so you don't have to worry about incremental updates deleting data. As we mentioned above, every update in PermID.org can be considered as an insert-or-update.","title":"Step 5: Create the Incremental Update Task"},{"location":"AdvancedTopics/Admin/Admin.Backpressure.html","text":"_backpressure API Description The _backpressure API allows admin users to control the backpressure of CM-Well's WS (Web Service) module. You may want to do this when very heavy ingest operations are filling the processing queue to capacity. The backpressure feature controls when users will get \"Server is busy\" (503) responses when they attempt to add an update request. Syntax URL: cm-well-host /_backpressure REST verb: POST Mandatory parameters: pbp Template: curl -X POST cm-well-host /_backpressure?pbp= backpressure mode URL example: N/A Curl example (REST API): curl -X POST cm-well-host /_backpressure?pbp=enable Parameters Parameter Description Values pbp Backpressure mode enable - backpressure is enabled. Requests are rejected when the Kafka queue size reaches a configurable threshold (currently 500,000 messages); the caller gets an HTTP 503 error. disable - backpressure is disabled. CM-Well won't intentionally reject user requests. block - all ingest requests are automatically rejected with a 503 error. This can be helpful during a maintenance period, when you want to temporarily block all requests. Code Example Call curl -X POST cm-well-host /_backpressure?pbp=enable Results { success :true}","title":"_backpressure API"},{"location":"AdvancedTopics/Admin/Admin.Backpressure.html#_backpressure-api","text":"","title":"_backpressure API"},{"location":"AdvancedTopics/Admin/Admin.Backpressure.html#description","text":"The _backpressure API allows admin users to control the backpressure of CM-Well's WS (Web Service) module. You may want to do this when very heavy ingest operations are filling the processing queue to capacity. The backpressure feature controls when users will get \"Server is busy\" (503) responses when they attempt to add an update request.","title":"Description"},{"location":"AdvancedTopics/Admin/Admin.Backpressure.html#syntax","text":"URL: cm-well-host /_backpressure REST verb: POST Mandatory parameters: pbp Template: curl -X POST cm-well-host /_backpressure?pbp= backpressure mode URL example: N/A Curl example (REST API): curl -X POST cm-well-host /_backpressure?pbp=enable","title":"Syntax"},{"location":"AdvancedTopics/Admin/Admin.Backpressure.html#parameters","text":"Parameter Description Values pbp Backpressure mode enable - backpressure is enabled. Requests are rejected when the Kafka queue size reaches a configurable threshold (currently 500,000 messages); the caller gets an HTTP 503 error. disable - backpressure is disabled. CM-Well won't intentionally reject user requests. block - all ingest requests are automatically rejected with a 503 error. This can be helpful during a maintenance period, when you want to temporarily block all requests.","title":"Parameters"},{"location":"AdvancedTopics/Admin/Admin.Backpressure.html#code-example","text":"","title":"Code Example"},{"location":"AdvancedTopics/Admin/Admin.Backpressure.html#call","text":"curl -X POST cm-well-host /_backpressure?pbp=enable","title":"Call"},{"location":"AdvancedTopics/Admin/Admin.Backpressure.html#results","text":"{ success :true}","title":"Results"},{"location":"AdvancedTopics/Admin/Admin.DCC.html","text":"Data Consistency Crawler Description The Data Consistency Crawler (DCC) is an internal CM-Well module. The goal of the DCC is to proactively test for inconsistent data in the infotons written to CM-Well, and fix inconsistencies. Note The current version of the DCC only tests for and logs data inconsistencies. Future versions will fix them as well. Design The DCC is a module that runs within the CM-Well Background (BG) process, and is transparent to CM-Well users. It uses the _kafka API to consume a copy of the Kafka persist_topic queue (the queue filled with ingest messages by the Web Service process). Infotons are reviewed shortly after being processed (ingested) by BG. DCC tests each infoton in the queue for data inconsistencies. Note DCC's effect on performance is negligible. A CM-Well cluster with N nodes has N Kafka Partitions, and N BgActors. Each BgActor, besides running Infoton Merge Process (IMP) and Indexer streams, also runs a DCC stream. If DCC operation is interrupted for any reason, the DCC resumes from its last known offset, which is persisted in zStore . The assumption is that DCC can verify the same Kafka messages more than once with no harm done (its operation is idempotent). Consistency Tests This is the DCC's logic when testing for data inconsistencies: Consume a message from Kafka's persist_topic topic. According to the infoton's last modified time and path, fetch from Cassandra the relevant version and the one before that. Make sure the PATH table has no inconsistencies, and if we suspect it does, consult zStore for Null Updates. Fetch the system fields of those two infoton versions (or one version, if this is the first write to that path) and validate their correctness (no missing or duplicated system fields). Query Elastic Search according to UUID and indexName (one or two versions) and make sure: The fields exist. The last version written is current. The previous version written isn't current. More Information For more information, see DCC Design .","title":"Data Consistency Crawler"},{"location":"AdvancedTopics/Admin/Admin.DCC.html#data-consistency-crawler","text":"","title":"Data Consistency Crawler"},{"location":"AdvancedTopics/Admin/Admin.DCC.html#description","text":"The Data Consistency Crawler (DCC) is an internal CM-Well module. The goal of the DCC is to proactively test for inconsistent data in the infotons written to CM-Well, and fix inconsistencies. Note The current version of the DCC only tests for and logs data inconsistencies. Future versions will fix them as well.","title":"Description"},{"location":"AdvancedTopics/Admin/Admin.DCC.html#design","text":"The DCC is a module that runs within the CM-Well Background (BG) process, and is transparent to CM-Well users. It uses the _kafka API to consume a copy of the Kafka persist_topic queue (the queue filled with ingest messages by the Web Service process). Infotons are reviewed shortly after being processed (ingested) by BG. DCC tests each infoton in the queue for data inconsistencies. Note DCC's effect on performance is negligible. A CM-Well cluster with N nodes has N Kafka Partitions, and N BgActors. Each BgActor, besides running Infoton Merge Process (IMP) and Indexer streams, also runs a DCC stream. If DCC operation is interrupted for any reason, the DCC resumes from its last known offset, which is persisted in zStore . The assumption is that DCC can verify the same Kafka messages more than once with no harm done (its operation is idempotent).","title":"Design"},{"location":"AdvancedTopics/Admin/Admin.DCC.html#consistency-tests","text":"This is the DCC's logic when testing for data inconsistencies: Consume a message from Kafka's persist_topic topic. According to the infoton's last modified time and path, fetch from Cassandra the relevant version and the one before that. Make sure the PATH table has no inconsistencies, and if we suspect it does, consult zStore for Null Updates. Fetch the system fields of those two infoton versions (or one version, if this is the first write to that path) and validate their correctness (no missing or duplicated system fields). Query Elastic Search according to UUID and indexName (one or two versions) and make sure: The fields exist. The last version written is current. The previous version written isn't current.","title":"Consistency Tests"},{"location":"AdvancedTopics/Admin/Admin.DCC.html#more-information","text":"For more information, see DCC Design .","title":"More Information"},{"location":"AdvancedTopics/Admin/Admin.Kafka.html","text":"_kafka API Description The _kafka API allows you to consume a copy of a CM-Well Kafka queue, which contains messages produced by ingest requests. You may want to use this API for some task that involves monitoring, replicating or testing CM-Well's operations on ingestion requests. (For example, the _kafka API is used internally to support the Data Consistency Crawler feature, which allows CM-Well to test each ingested infoton for data consistency.) CM-Well maintains and consumes 4 Kafka topics (named queues): persist_topic - each message represents an infoton to be written to Cassandra storage. persist_topic.priority - same as above, for a request sent with high priority. index_topic - each message represents an infoton to be indexed in Elastic Search. index_topic.priority - same as above, for a request sent with high priority. Each request to ingest an infoton produces two messages, one that enters one of the persist queues, and one that enters one of the index queues. Each queue can be distributed among several partitions . A partition is a portion of the queue maintained on a specific CM-Well node. When you use the _kafka API, in the URL you refer to the specific topic name and partition number you want to consume. Kafka Message Formats Each message returned via the _kafka API is in a separate line. When you consume the messages from the 4 Kafka topics described, CM-Well automatically deserializes them into JSON-formatted strings. Note Currently only the 4 topics mentioned above are available for consumption. In the future, you'll be able to consume a queue populated with issues detected by the Data Consistency Crawler .) If you are consuming a different topic, and you know that its messages are also strings, you can specify the format=text parameter value to cause its messages to be deserialized as strings. Otherwise, each message is returned as comma-separated byte values (e.g. 72,101,108,108,111,32,87,111,114,108,100... ). Syntax URL: cm-well-host /_kafka/ topicName / partitionNumber REST verb: GET Mandatory parameters: None. Template: curl -X GET cm-well-host /_kafka/ topicName / partitionNumber -H X-CM-Well-Token: admin-token URL example: cm-well-host /_kafka/persist_topic/0?format=text Curl example (REST API): curl -X GET cm-well-host /_kafka/persist_topic/0?format=text -H X-CM-Well-Token: admin-token Parameters Parameter Description Values offset Optional. Message offset to start from. If not provided, messages will be consumed starting from the beginning of the queue. 0 to (queue size - 1) max-length Optional. The maximal number of messages to return. If not provided, consumption will continue until the end of the queue. 1 to queue size format Optional. The only valid value is text ; i.e. the parameter must appear as format=text . In this case, each message will be converted into a JSON-formatted string. Otherwise, the message's bytes will be returned as is. text Code Example Call curl http:// cm-well-host /_kafka/persist_topic/0?offset=604 max-length=3 -H X-CM-Well-Token: admin-token Results WriteCommand(ObjectInfoton(/meta/auth/users,lh,None,2018-06-25T13:32:48.935Z,None,),None,None) WriteCommand(ObjectInfoton(/meta/logs/version-history,lh,None,2018-06-25T13:32:49.040Z,None,),None,None) WriteCommand(ObjectInfoton(/meta/auth,lh,None,2018-06-25T13:32:48.935Z,None,),None,None) Note Using the _kafka API to access Cm-Well system queues requires an Admin token. When you use the _kafka API, you don't affect the original CM-Well system queue, rather you consume a copy of that queue.","title":"_kafka API"},{"location":"AdvancedTopics/Admin/Admin.Kafka.html#_kafka-api","text":"","title":"_kafka API"},{"location":"AdvancedTopics/Admin/Admin.Kafka.html#description","text":"The _kafka API allows you to consume a copy of a CM-Well Kafka queue, which contains messages produced by ingest requests. You may want to use this API for some task that involves monitoring, replicating or testing CM-Well's operations on ingestion requests. (For example, the _kafka API is used internally to support the Data Consistency Crawler feature, which allows CM-Well to test each ingested infoton for data consistency.) CM-Well maintains and consumes 4 Kafka topics (named queues): persist_topic - each message represents an infoton to be written to Cassandra storage. persist_topic.priority - same as above, for a request sent with high priority. index_topic - each message represents an infoton to be indexed in Elastic Search. index_topic.priority - same as above, for a request sent with high priority. Each request to ingest an infoton produces two messages, one that enters one of the persist queues, and one that enters one of the index queues. Each queue can be distributed among several partitions . A partition is a portion of the queue maintained on a specific CM-Well node. When you use the _kafka API, in the URL you refer to the specific topic name and partition number you want to consume.","title":"Description"},{"location":"AdvancedTopics/Admin/Admin.Kafka.html#kafka-message-formats","text":"Each message returned via the _kafka API is in a separate line. When you consume the messages from the 4 Kafka topics described, CM-Well automatically deserializes them into JSON-formatted strings. Note Currently only the 4 topics mentioned above are available for consumption. In the future, you'll be able to consume a queue populated with issues detected by the Data Consistency Crawler .) If you are consuming a different topic, and you know that its messages are also strings, you can specify the format=text parameter value to cause its messages to be deserialized as strings. Otherwise, each message is returned as comma-separated byte values (e.g. 72,101,108,108,111,32,87,111,114,108,100... ).","title":"Kafka Message Formats"},{"location":"AdvancedTopics/Admin/Admin.Kafka.html#syntax","text":"URL: cm-well-host /_kafka/ topicName / partitionNumber REST verb: GET Mandatory parameters: None. Template: curl -X GET cm-well-host /_kafka/ topicName / partitionNumber -H X-CM-Well-Token: admin-token URL example: cm-well-host /_kafka/persist_topic/0?format=text Curl example (REST API): curl -X GET cm-well-host /_kafka/persist_topic/0?format=text -H X-CM-Well-Token: admin-token","title":"Syntax"},{"location":"AdvancedTopics/Admin/Admin.Kafka.html#parameters","text":"Parameter Description Values offset Optional. Message offset to start from. If not provided, messages will be consumed starting from the beginning of the queue. 0 to (queue size - 1) max-length Optional. The maximal number of messages to return. If not provided, consumption will continue until the end of the queue. 1 to queue size format Optional. The only valid value is text ; i.e. the parameter must appear as format=text . In this case, each message will be converted into a JSON-formatted string. Otherwise, the message's bytes will be returned as is. text","title":"Parameters"},{"location":"AdvancedTopics/Admin/Admin.Kafka.html#code-example","text":"","title":"Code Example"},{"location":"AdvancedTopics/Admin/Admin.Kafka.html#call","text":"curl http:// cm-well-host /_kafka/persist_topic/0?offset=604 max-length=3 -H X-CM-Well-Token: admin-token","title":"Call"},{"location":"AdvancedTopics/Admin/Admin.Kafka.html#results","text":"WriteCommand(ObjectInfoton(/meta/auth/users,lh,None,2018-06-25T13:32:48.935Z,None,),None,None) WriteCommand(ObjectInfoton(/meta/logs/version-history,lh,None,2018-06-25T13:32:49.040Z,None,),None,None) WriteCommand(ObjectInfoton(/meta/auth,lh,None,2018-06-25T13:32:48.935Z,None,),None,None) Note Using the _kafka API to access Cm-Well system queues requires an Admin token. When you use the _kafka API, you don't affect the original CM-Well system queue, rather you consume a copy of that queue.","title":"Results"},{"location":"AdvancedTopics/Admin/Admin.TestAndFixCorruptedData.html","text":"Testing Fixing Corrupt Data Occasionally we have found errors in how infotons are stored and indexed. These used to arise from race conditions that happened when several requests to update the same infoton were submitted nearly simultaneously. In these cases, there could be discrepancies between infotons stored in Cassandra (CM-Well's 3rd-party storage module) and how they're indexed in Elastic Search (CM-Well's 3rd-party indexing and search module). For instance, the same infoton could have more than one index entry, or the current (latest) infoton could point to more than one UUID. These errors can cause different types of problems, such as duplicate, missing or inconsistent search results. CM-Well supports a set of utility functions for testing and fixing such cases of index corruption on a single infoton. The functions are described in the following sections. Note CM-Well has since been improved to prevent these race conditions, and this should not happen going forward. However, in the older CM-Well data schema, you may still encounter infotons whose indexes have already been corrupted. The data test and fix functions should be used with caution, and can be disruptive in terms of the system resources they use. Use with care! They are likely to be deprecated in the future, when they are no longer needed. The x-verify Function You can run x-verify on a single infoton, to determine whether its indexing is valid or not. A return value of true means the index is valid, while false means it is not. If you receive a false result, you can fix the data corruption by running the x-fix function. The x-verify function takes the following optional parameters: Parameter Description versions-limit You can provide a numeric value to this parameter, in order to limit the number of versions that are verified. For example, adding versions-limit=200 to the x-verify request causes only the first 200 versions to be verified. Example: Request: cm-well-host /example.com/2-9B50FC1DEBB771CABB59ADEA33CBA034F82435BA3D1FD6A6CFA97F2273172E54?op=x-verify Response: { type : SimpleResponse , success :true} The x-info Function When you run the x-info function on a single infoton, the results contain all Elastic Search index entries and all Cassandra storage entries for all versions of the given infoton. One line is returned for each entry. The Cassandra entries are preceded by the string \"cas\" , and contain the version's data fields and metadata (system) fields. The Elastic Search entries are preceded by the string \"es\" , and contain the version's UUID and the index (or indices, in case of error) that contain this UUID. You can examine this information to detect indexing and storage problems. Example: Request: cm-well-host /11-123RT12?op=x-info Response: es 445ec58994f5be1b61b0bfb65395d751 [cmwell_current_1(1)] { type : ObjectInfoton , system : { path : \\/data.thomsonreuters.com\\/11-123RT12 , lastModified : 2015-08-13T14:31:43.411Z , uuid : 445ec58994f5be1b61b0bfb65395d751 , parent : \\/data.thomsonreuters.com , dc : dc1 , indexTime : 1439476304965, quad : [ ] }, fields : { type.lzN1FA : [ http:\\/\\/ontology.thomsonreuters.com\\/fedapioa\\/Organization ], organizationNameLocalLng.1ZNHcw : [ xxx ], ... (truncated) } } cas 445ec58994f5be1b61b0bfb65395d751 { type : ObjectInfoton , system : { uuid : 445ec58994f5be1b61b0bfb65395d751 , lastModified : 2015-08-13T14:31:43.411Z , path : \\/data.thomsonreuters.com\\/11-123RT12 , dataCenter : dc1 , indexTime : 1460409303057, parent : \\/data.thomsonreuters.com }, fields : { type.rdf : [ http:\\/\\/ontology.thomsonreuters.com\\/fedapioa\\/Organization ], organizationNameLocalLng.fedapioa : [ xxx ], ... (truncated) } } The x-fix Function If you have detected a corrupted index for a certain infoton by running x-verify and/or x-info , you can fix the corruption by running x-fix . x-fix fixes data and indexing problems, and deletes any invalid infotons or index data. The x-fix function takes the following optional parameters: Parameter Description reactive In some cases where a single infoton has a very large number of historical versions (due to improper usage), the x-fix operation may time out. In this case, it is recommended to add the reactive flag to the request (see the example below). Using this Boolean flag causes CM-Well to process the infoton versions in small batches rather than all at once, preventing the memory problems. parallelism Setting this parameter's value to more than 1 causes infoton versions to be processed in parallel, making the fix operation faster. For example, adding parallelism=4 to the x-fix request causes the infoton versions to be divided into 4 \"buckets\", which are processed in parallel. versions-limit You can provide a numeric value to this parameter, in order to limit the number of versions that are processed during the fix operation. For example, adding versions-limit=200 to the x-fix request causes only the first 200 versions to be processed. Note: The versions-limit parameter is ignored if the reactive flag is used. Example: Request (using the reactive flag): cm-well-host /example.com/2-9B50FC1DEBB771CABB59ADEA33CBA034F82435BA3D1FD6A6CFA97F2273172E54?op=x-fix reactive Response: { type : SimpleResponse , success :true, message : 2015-11-06T01:35:18.700Z [1446773718700] } { type : SimpleResponse , success :true, message : 2015-11-06T01:35:20.411Z [1446773720411] } { type : SimpleResponse , success :true, message : 2017-01-17T08:01:35.182Z [1484640095182] } { type : SimpleResponse , success :true, message : 2017-01-17T08:03:44.584Z [1484640224584] } { type : SimpleResponse , success :true, message : 2017-01-17T08:03:45.583Z [1484640225583] } { type : SimpleResponse , success :true, message : 2017-01-17T08:03:46.541Z [1484640226541] } { type : SimpleResponse , success :true, message : 2017-01-17T08:03:46.663Z [1484640226663] } { type : SimpleResponse , success :true, message : 2017-01-17T08:03:47.641Z [1484640227641] } { type : SimpleResponse , success :true, message : 2017-01-17T08:03:48.638Z [1484640228638] } Note Each line in the response represents a chunk of data (several infotons). The date/time is the last-modified time of the infotons in the relevant chunk. If there is an error in a chunk, its success value is false , and the message field contains an informative message describing the error.","title":"Testing & Fixing Corrupt Data"},{"location":"AdvancedTopics/Admin/Admin.TestAndFixCorruptedData.html#testing-fixing-corrupt-data","text":"Occasionally we have found errors in how infotons are stored and indexed. These used to arise from race conditions that happened when several requests to update the same infoton were submitted nearly simultaneously. In these cases, there could be discrepancies between infotons stored in Cassandra (CM-Well's 3rd-party storage module) and how they're indexed in Elastic Search (CM-Well's 3rd-party indexing and search module). For instance, the same infoton could have more than one index entry, or the current (latest) infoton could point to more than one UUID. These errors can cause different types of problems, such as duplicate, missing or inconsistent search results. CM-Well supports a set of utility functions for testing and fixing such cases of index corruption on a single infoton. The functions are described in the following sections. Note CM-Well has since been improved to prevent these race conditions, and this should not happen going forward. However, in the older CM-Well data schema, you may still encounter infotons whose indexes have already been corrupted. The data test and fix functions should be used with caution, and can be disruptive in terms of the system resources they use. Use with care! They are likely to be deprecated in the future, when they are no longer needed.","title":"Testing &amp; Fixing Corrupt Data"},{"location":"AdvancedTopics/Admin/Admin.TestAndFixCorruptedData.html#the-x-verify-function","text":"You can run x-verify on a single infoton, to determine whether its indexing is valid or not. A return value of true means the index is valid, while false means it is not. If you receive a false result, you can fix the data corruption by running the x-fix function. The x-verify function takes the following optional parameters: Parameter Description versions-limit You can provide a numeric value to this parameter, in order to limit the number of versions that are verified. For example, adding versions-limit=200 to the x-verify request causes only the first 200 versions to be verified. Example: Request: cm-well-host /example.com/2-9B50FC1DEBB771CABB59ADEA33CBA034F82435BA3D1FD6A6CFA97F2273172E54?op=x-verify Response: { type : SimpleResponse , success :true}","title":"The x-verify Function"},{"location":"AdvancedTopics/Admin/Admin.TestAndFixCorruptedData.html#the-x-info-function","text":"When you run the x-info function on a single infoton, the results contain all Elastic Search index entries and all Cassandra storage entries for all versions of the given infoton. One line is returned for each entry. The Cassandra entries are preceded by the string \"cas\" , and contain the version's data fields and metadata (system) fields. The Elastic Search entries are preceded by the string \"es\" , and contain the version's UUID and the index (or indices, in case of error) that contain this UUID. You can examine this information to detect indexing and storage problems. Example: Request: cm-well-host /11-123RT12?op=x-info Response: es 445ec58994f5be1b61b0bfb65395d751 [cmwell_current_1(1)] { type : ObjectInfoton , system : { path : \\/data.thomsonreuters.com\\/11-123RT12 , lastModified : 2015-08-13T14:31:43.411Z , uuid : 445ec58994f5be1b61b0bfb65395d751 , parent : \\/data.thomsonreuters.com , dc : dc1 , indexTime : 1439476304965, quad : [ ] }, fields : { type.lzN1FA : [ http:\\/\\/ontology.thomsonreuters.com\\/fedapioa\\/Organization ], organizationNameLocalLng.1ZNHcw : [ xxx ], ... (truncated) } } cas 445ec58994f5be1b61b0bfb65395d751 { type : ObjectInfoton , system : { uuid : 445ec58994f5be1b61b0bfb65395d751 , lastModified : 2015-08-13T14:31:43.411Z , path : \\/data.thomsonreuters.com\\/11-123RT12 , dataCenter : dc1 , indexTime : 1460409303057, parent : \\/data.thomsonreuters.com }, fields : { type.rdf : [ http:\\/\\/ontology.thomsonreuters.com\\/fedapioa\\/Organization ], organizationNameLocalLng.fedapioa : [ xxx ], ... (truncated) } }","title":"The x-info Function"},{"location":"AdvancedTopics/Admin/Admin.TestAndFixCorruptedData.html#the-x-fix-function","text":"If you have detected a corrupted index for a certain infoton by running x-verify and/or x-info , you can fix the corruption by running x-fix . x-fix fixes data and indexing problems, and deletes any invalid infotons or index data. The x-fix function takes the following optional parameters: Parameter Description reactive In some cases where a single infoton has a very large number of historical versions (due to improper usage), the x-fix operation may time out. In this case, it is recommended to add the reactive flag to the request (see the example below). Using this Boolean flag causes CM-Well to process the infoton versions in small batches rather than all at once, preventing the memory problems. parallelism Setting this parameter's value to more than 1 causes infoton versions to be processed in parallel, making the fix operation faster. For example, adding parallelism=4 to the x-fix request causes the infoton versions to be divided into 4 \"buckets\", which are processed in parallel. versions-limit You can provide a numeric value to this parameter, in order to limit the number of versions that are processed during the fix operation. For example, adding versions-limit=200 to the x-fix request causes only the first 200 versions to be processed. Note: The versions-limit parameter is ignored if the reactive flag is used. Example: Request (using the reactive flag): cm-well-host /example.com/2-9B50FC1DEBB771CABB59ADEA33CBA034F82435BA3D1FD6A6CFA97F2273172E54?op=x-fix reactive Response: { type : SimpleResponse , success :true, message : 2015-11-06T01:35:18.700Z [1446773718700] } { type : SimpleResponse , success :true, message : 2015-11-06T01:35:20.411Z [1446773720411] } { type : SimpleResponse , success :true, message : 2017-01-17T08:01:35.182Z [1484640095182] } { type : SimpleResponse , success :true, message : 2017-01-17T08:03:44.584Z [1484640224584] } { type : SimpleResponse , success :true, message : 2017-01-17T08:03:45.583Z [1484640225583] } { type : SimpleResponse , success :true, message : 2017-01-17T08:03:46.541Z [1484640226541] } { type : SimpleResponse , success :true, message : 2017-01-17T08:03:46.663Z [1484640226663] } { type : SimpleResponse , success :true, message : 2017-01-17T08:03:47.641Z [1484640227641] } { type : SimpleResponse , success :true, message : 2017-01-17T08:03:48.638Z [1484640228638] } Note Each line in the response represents a chunk of data (several infotons). The date/time is the last-modified time of the infotons in the relevant chunk. If there is an error in a chunk, its success value is false , and the message field contains an informative message describing the error.","title":"The x-fix Function"},{"location":"AdvancedTopics/Architecture/Arch.Collaboration.html","text":"CM-Well Collaboration Use Case: Information Ecosystem The following diagram illustrates one possible use case for CM-Well as the hub of an information ecosystem. CM-Well is populated with infotons that are the result of automated metadata tagging applied to news articles, and also from additional data repositories. Various external agents read and write information from/to CM-Well.","title":"CM-Well Collaboration Use Case: Information Ecosystem"},{"location":"AdvancedTopics/Architecture/Arch.Collaboration.html#cm-well-collaboration-use-case-information-ecosystem","text":"The following diagram illustrates one possible use case for CM-Well as the hub of an information ecosystem. CM-Well is populated with infotons that are the result of automated metadata tagging applied to news articles, and also from additional data repositories. Various external agents read and write information from/to CM-Well.","title":"CM-Well Collaboration Use Case: Information Ecosystem"},{"location":"AdvancedTopics/Architecture/Arch.InfoArch.InfoInMotion.html","text":"Information in Motion Unlike standard triple-stores that focus on reading relatively static data, CM-Well is specifically designed to handle data that is constantly updated. We use the term \"information in motion\" to describe the features of dynamic information flow that CM-Well is designed to support. This includes features such as: Convenient batch uploading, including processing commands expressed within the triples input, such as replacement or deletion of triples. This allows the user to perform relatively complex operations without the use of complex tools such as SPARQL commands. Virtual queues (user defined subsets ordered by time, that can be consumed by traversing the timeline with a token that encodes the position in the queue) Convenient batch processing of information pulled from CM-Well, either a full or partial copy of CM-Well's data. This includes various streaming and subscription features. SPARQL Trigger Processor (STP) \u2013 an automatic agent that identifies changes in pre-defined groups of infotons and applies SPARQL processing to those groups. Used for creating materialized views or deriving inferred data. Managing historical versions using immutable data principles. Updates are implemented by adding new layers of information. Subscribing to real-time updates Transparent scaling mechanisms Support of \"edge devices\" \u2013 small CM-Well clusters that contain a subset of CM-Well data. The following image illustrates CM-Well's \"Not Only Copy\" workflows:","title":"Information in Motion"},{"location":"AdvancedTopics/Architecture/Arch.InfoArch.InfoInMotion.html#information-in-motion","text":"Unlike standard triple-stores that focus on reading relatively static data, CM-Well is specifically designed to handle data that is constantly updated. We use the term \"information in motion\" to describe the features of dynamic information flow that CM-Well is designed to support. This includes features such as: Convenient batch uploading, including processing commands expressed within the triples input, such as replacement or deletion of triples. This allows the user to perform relatively complex operations without the use of complex tools such as SPARQL commands. Virtual queues (user defined subsets ordered by time, that can be consumed by traversing the timeline with a token that encodes the position in the queue) Convenient batch processing of information pulled from CM-Well, either a full or partial copy of CM-Well's data. This includes various streaming and subscription features. SPARQL Trigger Processor (STP) \u2013 an automatic agent that identifies changes in pre-defined groups of infotons and applies SPARQL processing to those groups. Used for creating materialized views or deriving inferred data. Managing historical versions using immutable data principles. Updates are implemented by adding new layers of information. Subscribing to real-time updates Transparent scaling mechanisms Support of \"edge devices\" \u2013 small CM-Well clusters that contain a subset of CM-Well data. The following image illustrates CM-Well's \"Not Only Copy\" workflows:","title":"Information in Motion"},{"location":"AdvancedTopics/Architecture/Arch.InfoArch.Infotons.html","text":"Information Objects (\u201cInfotons\u201d) CM-Well uses an information unit called an \"infoton\". An infoton is the set of all the triples associated with a single subject entity. Each infoton: Represents a single entity or object. Has a URI, which serves as an ID of the object (which is the subject of the collection of triples the infoton contains), and which also serves as the infoton's reference address. Can have several attributes (the \"objects\" in the infoton's triples). Attributes can be either literal values or links to other infotons. Attribute types have namespaces, and can refer to external ontologies. Has one current version, pointed to by the URI, and optionally several \"historical\" versions, each with its own Universally Unique Identifier (UUID). The data is still logically structured as a set of separate triples, but the infoton is physically stored together with the set of its predicate-subject relationships, as illustrated below: By \"flattening\" the physical model in this way, CM-Well is able to more easily scale to very large numbers of triples, as it becomes easier to store the data horizontally across many more servers. This model is a combination of a traditional key-value database approach and a document-based approach (where the infoton is the \"document\"). Here is an example of a Turtle formatted infoton (truncated for brevity). Note the following: Prefixes are defined at the top, and then used in the infoton body for readability. The first triple :1-5035948006 a mdaas:Organization ; indicates that this infoton is of type Organization , and its ID is 1-5035948006. The following triples describe additional attributes of the infoton. Some attributes have the \"sys\" namespace. This means that they are system attributes written internally by CM-Well, and not by the user who created or updated the infoton. @ prefix mdaas : http :// ont . thomsonreuters . com / mdaas / . @ prefix sys : http :// cm-well-host . com / meta / sys # . @ prefix nn : http :// cm-well-host . com / meta / nn # . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix rdf : http :// www . w3 . org / 1999 / 02 / 22-rdf-syntax-ns # . @ prefix o : http :// permid . org / . o : 1-5035948006 a mdaas : Organization ; sys : dataCenter na ; sys : lastModified 2015-06-08T21:09:45.855Z ^^ xsd : dateTime ; sys : parent /permid.org ; sys : path /permid.org/1-5035948006 ; sys : type ObjectInfoton ; sys : uuid 3205fef15f8bfda48bd1d44da2b6cb7a ; mdaas : CIK 0001524358 ; mdaas : CommonName Marriott Vacations Worldwide Corp @ en ; mdaas : InvestextID VAC ; mdaas : LEI 549300WA6BT5H4F7IO94 ; mdaas : MXID 111800547 ; ... mdaas : subsidiariesCount 109 . Infoton Types Infotons can have the following types: Object \u2013 the most common type of infoton, described above; contains a collection of triples. File \u2013 an all-purpose text or binary file. Link \u2013 points to another infoton (similar to a redirected URL). Directory \u2013 an infoton can be just a container for other infotons. Directory infotons may (but don't have to) have user-defined field values. Entity infotons and Directory infotons \"look the same\". The only difference is that Directory infotons can be created implicitly by creating another infoton with a path composed of '/'-separated parent directories. Info The CM-Well web application is stored as a collection of file infotons. Infoton Formats An infoton's data is a collection of triples associated with the infoton's subject. Infotons can be retrieved in several common data formats, including JSON, RDF N3, RDF NQuads, RDF Ntriples, Atom, HTML, CSV, TSV, YAML and others. See Input and Output Formats to learn more. Readable URI Infotons have readable URIs, that consist of their hierarchical path within CM-Well and their UUID. Below you can see an example of a Company infoton within the Thomson Reuters PermID site (whose underlying data is provided by CM-Well). Note that the entity's PermID (permanent identifier) is an explicit part of the infoton's URL. Flexible Schema Infotons have some \"system fields\" that are added automatically, such as their UUID, timestamp and path values. Other than system fields, there is no mandatory schema for an infoton. All well-formed fields are valid, no fields are mandatory, and the same field name may have several values. Directory Structure CM-Well implements a directory paradigm, which is not a standard of Linked Data repositories. This is a convenient way to define a data hierarchy that provides informative grouping and facilitates search. Each infoton has a path under its CM-Well platform, which is determined at the time of its creation. The path is composed of '/'-separated parent directories. If during the creation of an infoton a parent directory is referenced, which doesn't represent an existing infoton, then the parent directory infoton is created implicitly. Immutable Data and Infoton \"History Trail\" CM-Well implements an \"immutable data\" principle. This means that infotons are never overwritten, but rather when an update occurs, the current version is saved as a historical version, and the new version becomes the current version. When an infoton's URI is dereferenced, the current version is retrieved. API users can add the special with-history flag to retrieve historical versions of infotons, enabling users to audit an infoton's entire change history. Similarly, a delete operation on an infoton doesn't physically delete the version, but just marks it with a special Deleted status. API users can add the special with-deleted flag to retrieve deleted infoton versions. (There is also a purge operation which physically deletes the infoton.) Thus, as infotons are updated over time, each infoton accumulates an array of historical versions in addition to the current version (which always points to the most recent version written). Info To receive all changes to a certain object (for example, a company), use the consume API together with the with-deleted flag. The image below illustrates how an infoton is stored with all of its previous versions. Named Sub-Graphs (Quads) CM-Well supports \"named sub-graphs\" within the entire CM-Well Linked Data graph. This allows users to assign a label to infoton fields. The label is the name of the sub-graph, and the nodes in the sub-graph are the items in that have the specific label. In this case, relationships in the graph are represented not by triples but by quads, which include the subject, predicate, object and label (sub-graph name). The named sub-graph feature allows you to manipulate data using the sub-graph name. For example, you can search for or delete fields by sub-graph name. Here is a scenario where you might want to use named sub-graphs. Suppose you're maintaining a database of movies under CM-Well. A movie may receive several review scores from several different sources. You want to save all the scores as \"Score\" field values, but label each value according to the reviewing entity. You can do this using named sub-graphs, where the quad value is the name of the reviewer.","title":"Information Objects (\u201cInfotons\u201d)"},{"location":"AdvancedTopics/Architecture/Arch.InfoArch.Infotons.html#information-objects-infotons","text":"CM-Well uses an information unit called an \"infoton\". An infoton is the set of all the triples associated with a single subject entity. Each infoton: Represents a single entity or object. Has a URI, which serves as an ID of the object (which is the subject of the collection of triples the infoton contains), and which also serves as the infoton's reference address. Can have several attributes (the \"objects\" in the infoton's triples). Attributes can be either literal values or links to other infotons. Attribute types have namespaces, and can refer to external ontologies. Has one current version, pointed to by the URI, and optionally several \"historical\" versions, each with its own Universally Unique Identifier (UUID). The data is still logically structured as a set of separate triples, but the infoton is physically stored together with the set of its predicate-subject relationships, as illustrated below: By \"flattening\" the physical model in this way, CM-Well is able to more easily scale to very large numbers of triples, as it becomes easier to store the data horizontally across many more servers. This model is a combination of a traditional key-value database approach and a document-based approach (where the infoton is the \"document\"). Here is an example of a Turtle formatted infoton (truncated for brevity). Note the following: Prefixes are defined at the top, and then used in the infoton body for readability. The first triple :1-5035948006 a mdaas:Organization ; indicates that this infoton is of type Organization , and its ID is 1-5035948006. The following triples describe additional attributes of the infoton. Some attributes have the \"sys\" namespace. This means that they are system attributes written internally by CM-Well, and not by the user who created or updated the infoton. @ prefix mdaas : http :// ont . thomsonreuters . com / mdaas / . @ prefix sys : http :// cm-well-host . com / meta / sys # . @ prefix nn : http :// cm-well-host . com / meta / nn # . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix rdf : http :// www . w3 . org / 1999 / 02 / 22-rdf-syntax-ns # . @ prefix o : http :// permid . org / . o : 1-5035948006 a mdaas : Organization ; sys : dataCenter na ; sys : lastModified 2015-06-08T21:09:45.855Z ^^ xsd : dateTime ; sys : parent /permid.org ; sys : path /permid.org/1-5035948006 ; sys : type ObjectInfoton ; sys : uuid 3205fef15f8bfda48bd1d44da2b6cb7a ; mdaas : CIK 0001524358 ; mdaas : CommonName Marriott Vacations Worldwide Corp @ en ; mdaas : InvestextID VAC ; mdaas : LEI 549300WA6BT5H4F7IO94 ; mdaas : MXID 111800547 ; ... mdaas : subsidiariesCount 109 .","title":"Information Objects (\u201cInfotons\u201d)"},{"location":"AdvancedTopics/Architecture/Arch.InfoArch.Infotons.html#infoton-types","text":"Infotons can have the following types: Object \u2013 the most common type of infoton, described above; contains a collection of triples. File \u2013 an all-purpose text or binary file. Link \u2013 points to another infoton (similar to a redirected URL). Directory \u2013 an infoton can be just a container for other infotons. Directory infotons may (but don't have to) have user-defined field values. Entity infotons and Directory infotons \"look the same\". The only difference is that Directory infotons can be created implicitly by creating another infoton with a path composed of '/'-separated parent directories. Info The CM-Well web application is stored as a collection of file infotons.","title":"Infoton Types"},{"location":"AdvancedTopics/Architecture/Arch.InfoArch.Infotons.html#infoton-formats","text":"An infoton's data is a collection of triples associated with the infoton's subject. Infotons can be retrieved in several common data formats, including JSON, RDF N3, RDF NQuads, RDF Ntriples, Atom, HTML, CSV, TSV, YAML and others. See Input and Output Formats to learn more.","title":"Infoton Formats"},{"location":"AdvancedTopics/Architecture/Arch.InfoArch.Infotons.html#readable-uri","text":"Infotons have readable URIs, that consist of their hierarchical path within CM-Well and their UUID. Below you can see an example of a Company infoton within the Thomson Reuters PermID site (whose underlying data is provided by CM-Well). Note that the entity's PermID (permanent identifier) is an explicit part of the infoton's URL.","title":"Readable URI"},{"location":"AdvancedTopics/Architecture/Arch.InfoArch.Infotons.html#flexible-schema","text":"Infotons have some \"system fields\" that are added automatically, such as their UUID, timestamp and path values. Other than system fields, there is no mandatory schema for an infoton. All well-formed fields are valid, no fields are mandatory, and the same field name may have several values.","title":"Flexible Schema"},{"location":"AdvancedTopics/Architecture/Arch.InfoArch.Infotons.html#directory-structure","text":"CM-Well implements a directory paradigm, which is not a standard of Linked Data repositories. This is a convenient way to define a data hierarchy that provides informative grouping and facilitates search. Each infoton has a path under its CM-Well platform, which is determined at the time of its creation. The path is composed of '/'-separated parent directories. If during the creation of an infoton a parent directory is referenced, which doesn't represent an existing infoton, then the parent directory infoton is created implicitly.","title":"Directory Structure"},{"location":"AdvancedTopics/Architecture/Arch.InfoArch.Infotons.html#immutable-data-and-infoton-history-trail","text":"CM-Well implements an \"immutable data\" principle. This means that infotons are never overwritten, but rather when an update occurs, the current version is saved as a historical version, and the new version becomes the current version. When an infoton's URI is dereferenced, the current version is retrieved. API users can add the special with-history flag to retrieve historical versions of infotons, enabling users to audit an infoton's entire change history. Similarly, a delete operation on an infoton doesn't physically delete the version, but just marks it with a special Deleted status. API users can add the special with-deleted flag to retrieve deleted infoton versions. (There is also a purge operation which physically deletes the infoton.) Thus, as infotons are updated over time, each infoton accumulates an array of historical versions in addition to the current version (which always points to the most recent version written). Info To receive all changes to a certain object (for example, a company), use the consume API together with the with-deleted flag. The image below illustrates how an infoton is stored with all of its previous versions.","title":"Immutable Data and Infoton \"History Trail\""},{"location":"AdvancedTopics/Architecture/Arch.InfoArch.Infotons.html#named-sub-graphs-quads","text":"CM-Well supports \"named sub-graphs\" within the entire CM-Well Linked Data graph. This allows users to assign a label to infoton fields. The label is the name of the sub-graph, and the nodes in the sub-graph are the items in that have the specific label. In this case, relationships in the graph are represented not by triples but by quads, which include the subject, predicate, object and label (sub-graph name). The named sub-graph feature allows you to manipulate data using the sub-graph name. For example, you can search for or delete fields by sub-graph name. Here is a scenario where you might want to use named sub-graphs. Suppose you're maintaining a database of movies under CM-Well. A movie may receive several review scores from several different sources. You want to save all the scores as \"Score\" field values, but label each value according to the reviewing entity. You can do this using named sub-graphs, where the quad value is the name of the reviewer.","title":"Named Sub-Graphs (Quads)"},{"location":"AdvancedTopics/Architecture/Arch.InfoArch.Part1.html","text":"Overview and Principles Information Architecture Overview The CM-Well architecture takes a synergistic approach to several data models and standards such as Linked Data, triple stores, Software as a Service, Web Oriented Architecture (WOA), big data analysis and more, merging them and adding to them to create a powerful, flexible and dynamic data platform. Among the central characteristics of CM-Well's information architecture are: Data modeled both as triples and as information entities (\"infotons\"). Infotons represent real-world objects and their attributes. Data modeled as a graph, and APIs that enable graph traversal for relationship discovery. \"Schema on read\" \u2013 there is no mandatory schema per infoton subject type. No nested objects \u2013 an infoton field may contain a pointer to another infoton, but not the object itself. Information as a Service model; REST API allows both reading and writing data. \"Information in motion\" \u2013 goes beyond the mostly read-focused, mostly static-data approach of traditional Linked Data repositories, to handle frequent, dynamic updates from multiple sources. Ability to subscribe to and stream CM-Well information and its updates. URI as the web address of the current infoton version. Immutable data and deep history (infoton versions saved for each update; historical versions are accessible by API). Linked Data and CM-Well's Advanced Read/Write Features These are the standard rules that a Linked Data repository should comply with: Use Uniform Resource Identifiers (URIs) to identify things. URIs should be accessible via HTTP, so that the objects they refer to can be looked up by people and software agents. Provide useful information about the dereferenced entity, using standard formats such as RDF, XML and N3. In the dereferenced entity's information, include links to other related URIs to enable discovery of other relevant information on the Web. CM-Well complies with all these rules, but is also built for global interoperability (as opposed to using a proprietary database schema). CM-Well entities can point to other Linked Data entities, hosted either on CM-Well or on any other global repository. In addition to allowing you to read entities, CM-Well's API also allows you to: Update existing entities Create new entities Search for entities by attribute values or relationships with other entities Subscribe to and stream updates Perform complex queries using the SPARQL language Create materialized views of your data, using an automated SPARQL agent. The following figure illustrates how CM-Well's architecture differs from traditional triple store architecture. Big Data Traditional Linked Data repositories are often read-oriented, as they typically contain relatively static data. In contrast, CM-Well is intended to maintain a large, constantly growing and changing dataset \u2013 in other words, a Big Data repository. Big Data sets are so large or complex that traditional data processing applications have a hard time handling them. They pose challenges related to many aspects of data processing, including capture, storage, transfer, sharing, curation, search, query, analysis, visualization and scaling. CM-Well is designed to handle Big Data challenges. CM-Well's features include: Platform architecture that allows seamless addition of nodes as needed Big Data algorithms applied to storage and search features Big Data Analytics layer (Spark, Hadoop) Web Oriented Architecture (WOA) Web Oriented Architecture (WOA) is a fundamental principle of CM-Well design. WOA is specific type of Service Oriented Architecture (SOA) that integrates systems and users via globally linked hypermedia, based on web architecture. WOA uses a core set of web protocols including HTTP, XML, RDF and the REST API. However, in contrast with standard WOA that only consists of REST services with proprietary JSON-formatted messages, CM-Well principles dictate that the content \"flowing\" in and out of its services is Linked Data, in standard formats such as RDF, N3 and Turtle. In addition, CM-Well services use a shared information model consisting of ontologies that define different knowledge domains. In addition, CM-Well supports: PuSH (PubSubHubbub) subscription Namespaces from external ontologies Linear scalability Representing Linked Data concepts and information objects using a RESTful API, with Web semantics","title":"Overview and Principles"},{"location":"AdvancedTopics/Architecture/Arch.InfoArch.Part1.html#overview-and-principles","text":"","title":"Overview and Principles"},{"location":"AdvancedTopics/Architecture/Arch.InfoArch.Part1.html#information-architecture-overview","text":"The CM-Well architecture takes a synergistic approach to several data models and standards such as Linked Data, triple stores, Software as a Service, Web Oriented Architecture (WOA), big data analysis and more, merging them and adding to them to create a powerful, flexible and dynamic data platform. Among the central characteristics of CM-Well's information architecture are: Data modeled both as triples and as information entities (\"infotons\"). Infotons represent real-world objects and their attributes. Data modeled as a graph, and APIs that enable graph traversal for relationship discovery. \"Schema on read\" \u2013 there is no mandatory schema per infoton subject type. No nested objects \u2013 an infoton field may contain a pointer to another infoton, but not the object itself. Information as a Service model; REST API allows both reading and writing data. \"Information in motion\" \u2013 goes beyond the mostly read-focused, mostly static-data approach of traditional Linked Data repositories, to handle frequent, dynamic updates from multiple sources. Ability to subscribe to and stream CM-Well information and its updates. URI as the web address of the current infoton version. Immutable data and deep history (infoton versions saved for each update; historical versions are accessible by API).","title":"Information Architecture Overview"},{"location":"AdvancedTopics/Architecture/Arch.InfoArch.Part1.html#linked-data-and-cm-wells-advanced-readwrite-features","text":"These are the standard rules that a Linked Data repository should comply with: Use Uniform Resource Identifiers (URIs) to identify things. URIs should be accessible via HTTP, so that the objects they refer to can be looked up by people and software agents. Provide useful information about the dereferenced entity, using standard formats such as RDF, XML and N3. In the dereferenced entity's information, include links to other related URIs to enable discovery of other relevant information on the Web. CM-Well complies with all these rules, but is also built for global interoperability (as opposed to using a proprietary database schema). CM-Well entities can point to other Linked Data entities, hosted either on CM-Well or on any other global repository. In addition to allowing you to read entities, CM-Well's API also allows you to: Update existing entities Create new entities Search for entities by attribute values or relationships with other entities Subscribe to and stream updates Perform complex queries using the SPARQL language Create materialized views of your data, using an automated SPARQL agent. The following figure illustrates how CM-Well's architecture differs from traditional triple store architecture.","title":"Linked Data and CM-Well's Advanced Read/Write Features"},{"location":"AdvancedTopics/Architecture/Arch.InfoArch.Part1.html#big-data","text":"Traditional Linked Data repositories are often read-oriented, as they typically contain relatively static data. In contrast, CM-Well is intended to maintain a large, constantly growing and changing dataset \u2013 in other words, a Big Data repository. Big Data sets are so large or complex that traditional data processing applications have a hard time handling them. They pose challenges related to many aspects of data processing, including capture, storage, transfer, sharing, curation, search, query, analysis, visualization and scaling. CM-Well is designed to handle Big Data challenges. CM-Well's features include: Platform architecture that allows seamless addition of nodes as needed Big Data algorithms applied to storage and search features Big Data Analytics layer (Spark, Hadoop)","title":"Big Data"},{"location":"AdvancedTopics/Architecture/Arch.InfoArch.Part1.html#web-oriented-architecture-woa","text":"Web Oriented Architecture (WOA) is a fundamental principle of CM-Well design. WOA is specific type of Service Oriented Architecture (SOA) that integrates systems and users via globally linked hypermedia, based on web architecture. WOA uses a core set of web protocols including HTTP, XML, RDF and the REST API. However, in contrast with standard WOA that only consists of REST services with proprietary JSON-formatted messages, CM-Well principles dictate that the content \"flowing\" in and out of its services is Linked Data, in standard formats such as RDF, N3 and Turtle. In addition, CM-Well services use a shared information model consisting of ontologies that define different knowledge domains. In addition, CM-Well supports: PuSH (PubSubHubbub) subscription Namespaces from external ontologies Linear scalability Representing Linked Data concepts and information objects using a RESTful API, with Web semantics","title":"Web Oriented Architecture (WOA)"},{"location":"AdvancedTopics/Architecture/Arch.PlatformArch.DCSync.html","text":"Data Center Synchronization DC-Sync Overview CM-Well scalability and resilience goes beyond a single Data Center (DC). It is based on a federation of CM-Wells in several interlinked DCs. Each DC pulls changes from the other DCs in its federation. Upon initial connection, the complete data set is replicated among the DCs, and from that point on, all new changes to data are replicated. This behavior complies with the \"eventual consistency\" nature of web content; it is neither transactional nor performed at real-time speed. The goal is that all information will eventually (in a reasonably short time period) be available in all DCs. Each CM-Well grid in each DC is autonomous and self-contained. Machines in the grid are interlinked for updates (similar to the PuSH capabilities available to all clients); other than that they're loosely grouped. This design is intentional and was chosen instead of relying on e.g. Cassandra's cross-DC \"big circle\", that would lock the design into a specific storage engine, and would also create a stronger dependency among the CM-Wells. The Cassandra model would also force a level of asymmetry on the storage layer and its management of various storage engines. The advantage of the chosen design paradigm is that it's implemented at the node level and uses an abstract storage layer that hides (and therefore enables replacing) the underlying storage engines. The synchronization is also made simpler due to the fact that infotons are never overwritten but rather a new instance is created with its own internal UUID, leaving the previous version unchanged. The synchronization process effectively walks the timeline of the remote DC compared to the local DC replication, and imports objects in the order they're encountered on the timeline. This enables a possible future feature, which is the ability to cope with a partial disconnect. E.g. Suppose there are 3 data centers: DC-1 , DC-2, and DC-3. Normally each DC pulls data from its peers directly (they are all interconnected). However if DC-3 for instance cannot reach DC-1 (due to a network issue), but DC-3 can reach DC-2 and DC-2 can reach DC-1, a contingency plan for DC-3 is to fetch DC-1's updates indirectly via DC-2 (despite not having direct connectivity). Rules and Assumptions The following list describes some rules enforced and assumptions taken when planning the DC-Sync design: The most likely problem is a disconnection of DCs, not a CM-Well grid failing as a whole. Each grid is assumed to have enough machines to cope with its load (with spares). In addition, the replication factor, self-healing features and No-Single-Point-of-Failure design should cope with any local HW issue. There could be a DC catastrophe, which affects all (or a large portion) of DC machines. DC locality is assumed, i.e. we assume that each user writes to a single DC and does not implement cross-DC data replication independently from the automatic DC-Sync mechanism. Users should follow this best practice so as to avoid creating artificial race conditions between DCs. If a DC loses connection with other DCs, ingestion can continue locally as usual. Once the DC connects back, any changes will be propagated (in both directions). DC-Sync Models Currently there are two types of synchronization models implemented among CM-Well grids: Federation \u2013 all grids within a defined group synchronize all data among themselves, such that eventually they are all copies of each other. One-Directional \u2013 synchronization is one-directional, such that the \"slave\" grid contains all data of the \"master\", but the opposite is not necessarily true. In this case, it's also possible to sync only a subset of the data rather than all the data. The DC-Sync Process The DC-Sync process is based on a few simple principles that rely on the infoton's immutability. Each infoton has system fields indicating the originator DC and a timestamp of when it was ingested. These are fields searchable. Each CM-Well grid contains a DC-Sync agent that is responsible for the synchronization process. This agent is hosted in its own JVM. Note The DC-Sync JVM is spawned and initialized in each node, but only one DC-Sync agent is activated per grid. The DC-Sync agent roams among machines in case of node failure (similarly to the Health Control agent). A grid-level service determines which machine the DC-Sync will initially be run on. The linkage of a CM-Well grid to remote DC grids is done via a special configuration infoton (stored under the meta/sys/dc path), containing the DC code name and URL (i.e. the DC's HTTP load balancer). The DC-Sync agent creates a snapshot of the data that exists in each connected DC (based on the configuration infotons), then checks the last update from each DC. For each remote DC, it walks the timeline from the last update time and up to the present, and replicates the updated infotons. Infotons for update are pulled in small chunks and split into processing batches, in a way that avoids merge conflicts of updates to the same infoton. A precise reconstruction of the infoton updates is performed as per the ordered timeline. Monitoring DC-Sync CM-Well provides a DC-Health dashboard for each DC, which reflects the state of synchronization vs. other DCs. The health view shows a table with a line per DC containing the local time cursor, the remote time cursor and the current state. Above the table, the specific node responsible for the replication is also displayed. Below is an example of a sync process with the \"Not syncing\" status (in this case, due to no disk space). In addition, the health view shows the distribution of objects per source DC (capturing where infotons were originated), as in the image below: Health logs have a \"yellow\" status for a temporary inability to sync, and a \"red\" status for long-term failure to sync.","title":"Data Center Synchronization"},{"location":"AdvancedTopics/Architecture/Arch.PlatformArch.DCSync.html#data-center-synchronization","text":"","title":"Data Center Synchronization"},{"location":"AdvancedTopics/Architecture/Arch.PlatformArch.DCSync.html#dc-sync-overview","text":"CM-Well scalability and resilience goes beyond a single Data Center (DC). It is based on a federation of CM-Wells in several interlinked DCs. Each DC pulls changes from the other DCs in its federation. Upon initial connection, the complete data set is replicated among the DCs, and from that point on, all new changes to data are replicated. This behavior complies with the \"eventual consistency\" nature of web content; it is neither transactional nor performed at real-time speed. The goal is that all information will eventually (in a reasonably short time period) be available in all DCs. Each CM-Well grid in each DC is autonomous and self-contained. Machines in the grid are interlinked for updates (similar to the PuSH capabilities available to all clients); other than that they're loosely grouped. This design is intentional and was chosen instead of relying on e.g. Cassandra's cross-DC \"big circle\", that would lock the design into a specific storage engine, and would also create a stronger dependency among the CM-Wells. The Cassandra model would also force a level of asymmetry on the storage layer and its management of various storage engines. The advantage of the chosen design paradigm is that it's implemented at the node level and uses an abstract storage layer that hides (and therefore enables replacing) the underlying storage engines. The synchronization is also made simpler due to the fact that infotons are never overwritten but rather a new instance is created with its own internal UUID, leaving the previous version unchanged. The synchronization process effectively walks the timeline of the remote DC compared to the local DC replication, and imports objects in the order they're encountered on the timeline. This enables a possible future feature, which is the ability to cope with a partial disconnect. E.g. Suppose there are 3 data centers: DC-1 , DC-2, and DC-3. Normally each DC pulls data from its peers directly (they are all interconnected). However if DC-3 for instance cannot reach DC-1 (due to a network issue), but DC-3 can reach DC-2 and DC-2 can reach DC-1, a contingency plan for DC-3 is to fetch DC-1's updates indirectly via DC-2 (despite not having direct connectivity).","title":"DC-Sync Overview"},{"location":"AdvancedTopics/Architecture/Arch.PlatformArch.DCSync.html#rules-and-assumptions","text":"The following list describes some rules enforced and assumptions taken when planning the DC-Sync design: The most likely problem is a disconnection of DCs, not a CM-Well grid failing as a whole. Each grid is assumed to have enough machines to cope with its load (with spares). In addition, the replication factor, self-healing features and No-Single-Point-of-Failure design should cope with any local HW issue. There could be a DC catastrophe, which affects all (or a large portion) of DC machines. DC locality is assumed, i.e. we assume that each user writes to a single DC and does not implement cross-DC data replication independently from the automatic DC-Sync mechanism. Users should follow this best practice so as to avoid creating artificial race conditions between DCs. If a DC loses connection with other DCs, ingestion can continue locally as usual. Once the DC connects back, any changes will be propagated (in both directions).","title":"Rules and Assumptions"},{"location":"AdvancedTopics/Architecture/Arch.PlatformArch.DCSync.html#dc-sync-models","text":"Currently there are two types of synchronization models implemented among CM-Well grids: Federation \u2013 all grids within a defined group synchronize all data among themselves, such that eventually they are all copies of each other. One-Directional \u2013 synchronization is one-directional, such that the \"slave\" grid contains all data of the \"master\", but the opposite is not necessarily true. In this case, it's also possible to sync only a subset of the data rather than all the data.","title":"DC-Sync Models"},{"location":"AdvancedTopics/Architecture/Arch.PlatformArch.DCSync.html#the-dc-sync-process","text":"The DC-Sync process is based on a few simple principles that rely on the infoton's immutability. Each infoton has system fields indicating the originator DC and a timestamp of when it was ingested. These are fields searchable. Each CM-Well grid contains a DC-Sync agent that is responsible for the synchronization process. This agent is hosted in its own JVM. Note The DC-Sync JVM is spawned and initialized in each node, but only one DC-Sync agent is activated per grid. The DC-Sync agent roams among machines in case of node failure (similarly to the Health Control agent). A grid-level service determines which machine the DC-Sync will initially be run on. The linkage of a CM-Well grid to remote DC grids is done via a special configuration infoton (stored under the meta/sys/dc path), containing the DC code name and URL (i.e. the DC's HTTP load balancer). The DC-Sync agent creates a snapshot of the data that exists in each connected DC (based on the configuration infotons), then checks the last update from each DC. For each remote DC, it walks the timeline from the last update time and up to the present, and replicates the updated infotons. Infotons for update are pulled in small chunks and split into processing batches, in a way that avoids merge conflicts of updates to the same infoton. A precise reconstruction of the infoton updates is performed as per the ordered timeline.","title":"The DC-Sync Process"},{"location":"AdvancedTopics/Architecture/Arch.PlatformArch.DCSync.html#monitoring-dc-sync","text":"CM-Well provides a DC-Health dashboard for each DC, which reflects the state of synchronization vs. other DCs. The health view shows a table with a line per DC containing the local time cursor, the remote time cursor and the current state. Above the table, the specific node responsible for the replication is also displayed. Below is an example of a sync process with the \"Not syncing\" status (in this case, due to no disk space). In addition, the health view shows the distribution of objects per source DC (capturing where infotons were originated), as in the image below: Health logs have a \"yellow\" status for a temporary inability to sync, and a \"red\" status for long-term failure to sync.","title":"Monitoring DC-Sync"},{"location":"AdvancedTopics/Architecture/Arch.PlatformArch.Part1.html","text":"Platform Overview Design Principles Platform Architecture Overview The CM-Well platform design is based on the concept of a grid providing a service, where all machines are equal. All machines are installed with an identical stack of components. There is no single point of failure. The system can tolerate a machine's failure and will realign to cope with the loss. The system is designed to require zero manual maintenance. Any need for manual intervention (beyond physical repair) is considered a bug. This requires advanced health control and self-healing mechanisms. Data Redundancy Inherent in the design of a fault-tolerant system is replication of data. The current replication factor is 3. This setup tolerates one machine outage at a time (so there is a quorum of 2 data replicas even if one copy is inaccessible). When a machine fails, the system recovers by replicating the data again to maintain the 3 copies for all data items. Write requests are only considered complete after the new data has been written to a quorum of machines. Read requests also require a quorum, as data integrity is verified by reading one copy and checking it against the CRC value of a second copy. Grid Architecture COMING SOON (diagram of grid services and how they spawn and interact with each other; Akka cluster singleton, master actor, etc.) Ingest Queues and Storage Architecture CM-Well's management of infoton updates and storage is complex and involves several 3rd-party packages and distributed storage paradigms. The following diagram and table describe the architecture of these mechanisms. Element Contents Logical Representation Physical Representation Kafka Persist Topic New or updated infotons, to be merged with existing if necessary and written to storage One instance per CM-Well cluster Each topic is divided into several partitions. Infotons are mapped to partitions according to a hash on their path value. Each partition resides on a single node and is processed by a single BG service. Kafka Index Topic New or updated (merged) infotons to be indexed by ES One instance per CM-Well cluster Each topic is divided into several partitions. Infotons are mapped to partitions according to a hash on their path value. Each partition resides on a single node and is processed by a single BG service. CAS Path Table Key is hash value of an infoton's path; maps to the list of point-in-time value UUIDs. One instance per CM-Well cluster Managed by Cassandra's \"virtual circle\" paradigm. Physically distributed among several machines. CAS Infoton Table Key is hash value of an infotons UUID; maps to the infoton's body (field name-value pairs) One instance per CM-Well cluster Managed by Cassandra's \"virtual circle\" paradigm. Physically distributed among several machines. ES Index Index of strings, mapping to infotons whose fields contains those strings One instance per CM-Well cluster The global instance is an alias encapsulating several \"swim lanes\", one per Kafka partition. This mechanism is a custom construct over ES, as ES does not efficiently manage big data sizes. ES \"swim lane\" A portion of the global ES index that maps to a single Kafka partition. Contains several \"sub-indexes\". One instance per Kafka partition CM-Well manages an ES \"swim lane\" (federation of smaller indexes) per Kafka partition. Each swim lane contains several \"sub-indexes\". ES \"sub-index\" Each \"sub-index\" contains a configurable number of Lucene \"shards\" (currently 5). Several instances per ES \"swim lane\" Each \"sub-index\" contains a configurable number of Lucene \"shards\" (currently 5). When the current sub-index reaches a certain size, a new one is created. ES manages physical shard distribution over several nodes. Each shard has a configurable number of replicas (currently 2). Hardware Architecture and the Subdivision Concept The initial CM-Well hardware design was based on commodity hardware, i.e. using many pizza-box machines, each with 2-3 drives, one 4-core CPU and 16GB to 32GB RAM. The current setup uses bigger machines (Hadoop stereotype: 12 JBOD disks, 2 8-core CPUs - 32-hyperthreaded core, 256GB RAM). Most JVMs do not effectively use big heaps (with the exception of the expensive Azul Zing JVM), and are prone to critical error situations when they fail to do so. Therefore, for CM-Well we prefer to deploy multiple JVMs of moderate memory size (e.g. 8-16GB), while properly tuning the JVM memory parameters so as to minimize expensive garbage collection operations in \"old generation\" memory. Given the conditions above, there is a gap between the hardware capabilities of the powerful machines and the limitations of the JVMs we run on them. To address this gap, we use \"subdivisions\" of the machines to maximally utilize their performance. Several JVM instances (\"logical nodes\") are spawned on each physical machine. Each JVM is attached to its own set of 2 disks, thus minimizing resource contention and maximizing utilization. The subdivision (i.e. multiple instances) approach is used for the ES, CAS and will be used for future analytics JVMs. It is not used for the WS and BG modules. These two processes use reactive patterns to drive best performance without requiring multiple JVMs (effective thread-pools, reactive delegation to other components). Since faults may happen at the machine level, the storage layers (ES and CAS) are configured such that they treat the physical machine as a rack, so as not to have all data replicas stored onto the same machine, but rather to spread them across \"virtual racks\", i.e. physical machines. Resilience and Self-Healing The HC module monitors JVM issues and can elect to kill a faulty JVM without damage due to the inherent redundancy. HC activities are logged, so there is full report of error situations for the admin personnel. HC repair activities are coordinated across the grid, and elective restarts of JVMs are managed such that they aren't done in parallel on several nodes. If the WS and BG JVMs crash or if they're killed, the Health Control agent restarts them. The ES and CAS JVMs use a different mechanism to assess faults and leverage the replication of data elements they store. Current replication factors allow tolerating a single machine's failure with no down-time or significant impact on performance. The assumption is that a 3-fold replication factor is enough to provide time to replace a machine when required (the replication factor can be configured to a larger number if this proves necessary). If a machine fails and is non-responsive for 15 minutes, CM-Well starts replicating the failed machine's Cassandra segments on other machines. Before this can happen, the faulty node must be removed from the list of active nodes. This process is managed by the Health Control module. ElasticSearch employs its own internal disaster recovery mechanisms. ES automatically compensates for failed nodes by replicating shards (and if necessary, by promoting secondary replicas to primary). Both ElasticSearch and Kafka have a concept of primary and secondary partitions. If the machine with the primary partition fails, a new primary is elected from among the secondary partitions. Scalability To scale up a CM-Well grid, simply add more CM-Well machines to the relevant data center. This enlarges both the grid's computing power and its storage capacity. (Currently there is a configuration file that must be manually updated for new machines, but this is soon to be eliminated.)","title":"Platform Overview & Design Principles"},{"location":"AdvancedTopics/Architecture/Arch.PlatformArch.Part1.html#platform-overview-design-principles","text":"","title":"Platform Overview &amp; Design Principles"},{"location":"AdvancedTopics/Architecture/Arch.PlatformArch.Part1.html#platform-architecture-overview","text":"The CM-Well platform design is based on the concept of a grid providing a service, where all machines are equal. All machines are installed with an identical stack of components. There is no single point of failure. The system can tolerate a machine's failure and will realign to cope with the loss. The system is designed to require zero manual maintenance. Any need for manual intervention (beyond physical repair) is considered a bug. This requires advanced health control and self-healing mechanisms.","title":"Platform Architecture Overview"},{"location":"AdvancedTopics/Architecture/Arch.PlatformArch.Part1.html#data-redundancy","text":"Inherent in the design of a fault-tolerant system is replication of data. The current replication factor is 3. This setup tolerates one machine outage at a time (so there is a quorum of 2 data replicas even if one copy is inaccessible). When a machine fails, the system recovers by replicating the data again to maintain the 3 copies for all data items. Write requests are only considered complete after the new data has been written to a quorum of machines. Read requests also require a quorum, as data integrity is verified by reading one copy and checking it against the CRC value of a second copy.","title":"Data Redundancy"},{"location":"AdvancedTopics/Architecture/Arch.PlatformArch.Part1.html#grid-architecture","text":"COMING SOON (diagram of grid services and how they spawn and interact with each other; Akka cluster singleton, master actor, etc.)","title":"Grid Architecture"},{"location":"AdvancedTopics/Architecture/Arch.PlatformArch.Part1.html#ingest-queues-and-storage-architecture","text":"CM-Well's management of infoton updates and storage is complex and involves several 3rd-party packages and distributed storage paradigms. The following diagram and table describe the architecture of these mechanisms. Element Contents Logical Representation Physical Representation Kafka Persist Topic New or updated infotons, to be merged with existing if necessary and written to storage One instance per CM-Well cluster Each topic is divided into several partitions. Infotons are mapped to partitions according to a hash on their path value. Each partition resides on a single node and is processed by a single BG service. Kafka Index Topic New or updated (merged) infotons to be indexed by ES One instance per CM-Well cluster Each topic is divided into several partitions. Infotons are mapped to partitions according to a hash on their path value. Each partition resides on a single node and is processed by a single BG service. CAS Path Table Key is hash value of an infoton's path; maps to the list of point-in-time value UUIDs. One instance per CM-Well cluster Managed by Cassandra's \"virtual circle\" paradigm. Physically distributed among several machines. CAS Infoton Table Key is hash value of an infotons UUID; maps to the infoton's body (field name-value pairs) One instance per CM-Well cluster Managed by Cassandra's \"virtual circle\" paradigm. Physically distributed among several machines. ES Index Index of strings, mapping to infotons whose fields contains those strings One instance per CM-Well cluster The global instance is an alias encapsulating several \"swim lanes\", one per Kafka partition. This mechanism is a custom construct over ES, as ES does not efficiently manage big data sizes. ES \"swim lane\" A portion of the global ES index that maps to a single Kafka partition. Contains several \"sub-indexes\". One instance per Kafka partition CM-Well manages an ES \"swim lane\" (federation of smaller indexes) per Kafka partition. Each swim lane contains several \"sub-indexes\". ES \"sub-index\" Each \"sub-index\" contains a configurable number of Lucene \"shards\" (currently 5). Several instances per ES \"swim lane\" Each \"sub-index\" contains a configurable number of Lucene \"shards\" (currently 5). When the current sub-index reaches a certain size, a new one is created. ES manages physical shard distribution over several nodes. Each shard has a configurable number of replicas (currently 2).","title":"Ingest Queues and Storage Architecture"},{"location":"AdvancedTopics/Architecture/Arch.PlatformArch.Part1.html#hardware-architecture-and-the-subdivision-concept","text":"The initial CM-Well hardware design was based on commodity hardware, i.e. using many pizza-box machines, each with 2-3 drives, one 4-core CPU and 16GB to 32GB RAM. The current setup uses bigger machines (Hadoop stereotype: 12 JBOD disks, 2 8-core CPUs - 32-hyperthreaded core, 256GB RAM). Most JVMs do not effectively use big heaps (with the exception of the expensive Azul Zing JVM), and are prone to critical error situations when they fail to do so. Therefore, for CM-Well we prefer to deploy multiple JVMs of moderate memory size (e.g. 8-16GB), while properly tuning the JVM memory parameters so as to minimize expensive garbage collection operations in \"old generation\" memory. Given the conditions above, there is a gap between the hardware capabilities of the powerful machines and the limitations of the JVMs we run on them. To address this gap, we use \"subdivisions\" of the machines to maximally utilize their performance. Several JVM instances (\"logical nodes\") are spawned on each physical machine. Each JVM is attached to its own set of 2 disks, thus minimizing resource contention and maximizing utilization. The subdivision (i.e. multiple instances) approach is used for the ES, CAS and will be used for future analytics JVMs. It is not used for the WS and BG modules. These two processes use reactive patterns to drive best performance without requiring multiple JVMs (effective thread-pools, reactive delegation to other components). Since faults may happen at the machine level, the storage layers (ES and CAS) are configured such that they treat the physical machine as a rack, so as not to have all data replicas stored onto the same machine, but rather to spread them across \"virtual racks\", i.e. physical machines.","title":"Hardware Architecture and the Subdivision Concept"},{"location":"AdvancedTopics/Architecture/Arch.PlatformArch.Part1.html#resilience-and-self-healing","text":"The HC module monitors JVM issues and can elect to kill a faulty JVM without damage due to the inherent redundancy. HC activities are logged, so there is full report of error situations for the admin personnel. HC repair activities are coordinated across the grid, and elective restarts of JVMs are managed such that they aren't done in parallel on several nodes. If the WS and BG JVMs crash or if they're killed, the Health Control agent restarts them. The ES and CAS JVMs use a different mechanism to assess faults and leverage the replication of data elements they store. Current replication factors allow tolerating a single machine's failure with no down-time or significant impact on performance. The assumption is that a 3-fold replication factor is enough to provide time to replace a machine when required (the replication factor can be configured to a larger number if this proves necessary). If a machine fails and is non-responsive for 15 minutes, CM-Well starts replicating the failed machine's Cassandra segments on other machines. Before this can happen, the faulty node must be removed from the list of active nodes. This process is managed by the Health Control module. ElasticSearch employs its own internal disaster recovery mechanisms. ES automatically compensates for failed nodes by replicating shards (and if necessary, by promoting secondary replicas to primary). Both ElasticSearch and Kafka have a concept of primary and secondary partitions. If the machine with the primary partition fails, a new primary is elected from among the secondary partitions.","title":"Resilience and Self-Healing"},{"location":"AdvancedTopics/Architecture/Arch.PlatformArch.Part1.html#scalability","text":"To scale up a CM-Well grid, simply add more CM-Well machines to the relevant data center. This enlarges both the grid's computing power and its storage capacity. (Currently there is a configuration file that must be manually updated for new machines, but this is soon to be eliminated.)","title":"Scalability"},{"location":"AdvancedTopics/Architecture/Arch.Preface.html","text":"Preface Scope This page is your entry point for learning about the CM-Well internal architecture. Typically it will be of interest to developers who want to understand and contribute to the CM-Well code base. What is CM-Well? CM-Well is a writable Linked Data repository, which you can use to model data. CM-Well adheres to Open Data principles, meaning that its data is in a standard, machine-readable format. The CM-Well code is open source and is available at GitHub . CM-Well's data is represented as a graph database, which means that it contains entities and relationships between pairs of entities. For instance, it might contain facts such as CompanyA is a subsidiary of CompanyB or PersonX works at CompanyA . Conceptually, a graph database is a structure composed of nodes representing entities, and directed arrows representing relationships among them. See the image below for an example. Terms and Abbreviations Term Description BG Background module CAS Cassandra storage package DC Data Center DCC Data Consistency Crawler agent DC-Sync Data Center Synchronization ES ElasticSearch indexing and search package GS-Logic Grid Storage Logic module FTS Full Text Search IMP Infoton Merge Process JVM Java Virtual Machine process KF Kafka module SPoF Single Point of Failure STP SPARQL Trigger Processor URI Uniform Resource Identifier UUID Universally Unique Identifier WS Web Service module ZK Zookeeper module","title":"Preface"},{"location":"AdvancedTopics/Architecture/Arch.Preface.html#preface","text":"","title":"Preface"},{"location":"AdvancedTopics/Architecture/Arch.Preface.html#scope","text":"This page is your entry point for learning about the CM-Well internal architecture. Typically it will be of interest to developers who want to understand and contribute to the CM-Well code base.","title":"Scope"},{"location":"AdvancedTopics/Architecture/Arch.Preface.html#what-is-cm-well","text":"CM-Well is a writable Linked Data repository, which you can use to model data. CM-Well adheres to Open Data principles, meaning that its data is in a standard, machine-readable format. The CM-Well code is open source and is available at GitHub . CM-Well's data is represented as a graph database, which means that it contains entities and relationships between pairs of entities. For instance, it might contain facts such as CompanyA is a subsidiary of CompanyB or PersonX works at CompanyA . Conceptually, a graph database is a structure composed of nodes representing entities, and directed arrows representing relationships among them. See the image below for an example.","title":"What is CM-Well?"},{"location":"AdvancedTopics/Architecture/Arch.Preface.html#terms-and-abbreviations","text":"Term Description BG Background module CAS Cassandra storage package DC Data Center DCC Data Consistency Crawler agent DC-Sync Data Center Synchronization ES ElasticSearch indexing and search package GS-Logic Grid Storage Logic module FTS Full Text Search IMP Infoton Merge Process JVM Java Virtual Machine process KF Kafka module SPoF Single Point of Failure STP SPARQL Trigger Processor URI Uniform Resource Identifier UUID Universally Unique Identifier WS Web Service module ZK Zookeeper module","title":"Terms and Abbreviations"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.BG.html","text":"Background (BG) Processing Module The BG module (run in a separate JVM) performs batched processing of the ingest pipeline. BG takes requests from the update queue, processes them, and returns an asynchronous response to the requester (if tracking/blocking was activated on the ingest request). BG's internal modules (e.g. IMP, RTS, Indexer) are organized in a Disruptor-like pattern. BG maintains a pointer to its place in the queue, which is persisted periodically. Almost all writes and calculations performed in this pipeline are idempotent, meaning that if for any reason BG processes a request more than once (e.g. due to a fault and restart) this will not change the state of the data. Stored information objects are immutable, and recalculating new instances results in the same exact outcome. (Note that if an attempt is made to write an infoton whose data is identical to that of an existing infoton, no write action occurs.) Infoton Merge Process (IMP) The IMP module is responsible for writing new infotons and updating existing infotons. In the case of updating existing infotons, this includes retrieving the previous version of the infotons, merging them with the required changes, and writing the new current version. The resulting updated infotons are then queued for the RTS and Indexer modules to process. The IMP has a \"null elider\" module. This means that if the IMP identifies that fulfilling a write request would result in a new infoton version whose user fields are identical to those of the existing current version, then it discards the write request (it skips over \"null changes\"). Note that only user fields are compared, while system fields are not. So, for example, if a null change is skipped, the relevant infoton's update time remains the existing update time, and is not changed. Real-Time Search (RTS) The RTS is responsible for pushing changes to API clients who have subscribed for streamed updates. The clients have pre-defined CM-Well queries, and when new infotons are ingested, RTS checks to see whether they match the queries, and if so streams the new infotons to the subscribed clients. Indexer After the IMP has written a new or updated infoton to CM-Well, the Indexer sends the infoton to be indexed by ES, while maintaining the abstraction of the directory structure. New versions are indexed and if necessary, the previous version is made \"not current\". Analytics Processing Module The Analytics Processing Module is responsible for running heavy (and relatively long-running) queries in a controlled manner. For example, running a SPARQL or Gremlin query on a subgraph (or the full graph). This module is run in a separate JVM (also known by the nickname \"Crashable Worker\" or CW, because if it crashes or is killed, it doesn't harm mainstream CM-Well operation, and can be safely killed for using excess resources or becoming unresponsive). The processing pipeline of creating an in-memory subgraph, followed by execution of the SPARQL query itself is handled within this JVM. Creating a separate JVM process provides a quarantined environment where memory, CPU cycles and priority are controlled and isolated from other CM-Well components. Processes that are hung or are taking too many resources can be killed and restarted with no loss of data. Data Consistency Crawler Module The Data Consistency Crawler (DCC) module tests proactively for inconsistent data in the infotons written to CM-Well, and fixes inconsistencies. The DCC's effect on performance is negligible. The DCC runs within BG process, and is transparent to CM-Well users. It uses the _kafka API to consume a copy of the Kafka persist_topic queue (the queue filled with ingest messages by the Web Service process). Infotons are reviewed shortly after being processed (ingested) by BG. DCC tests each infoton in the queue for data inconsistencies. A CM-Well cluster with N nodes has N Kafka Partitions, and N BgActors. Each BgActor, besides running Infoton Merge Process (IMP) and Indexer streams, also runs a DCC stream. If DCC operation is interrupted for any reason, the DCC resumes from its last known offset, which is persisted in zStore . The assumption is that DCC can verify the same Kafka messages more than once with no harm done (its operation is idempotent). Process Diagrams Read and Write Processes \u2013 High Level The following diagram illustrates the interactions that occur for read and write requests, among WS, BG and GS-Logic and their sub-modules (as described in the sections above). BG Process Internals The following diagrams zooms in to examine the interactions that occur among internal BG processes when writing new or updated infotons. Note that: Each BG instance processes ingest commands of a single partition of the Kafka queue (or \"topic\", as the queue is called in Kafka terminology). See Storage Architecture to learn more about storage architecture in detail. On each CM-Well node, normally there is only one active BG service, with two more BG service instances in standby mode, for redundancy purposes. The two standby instances are allocated for processing the previous and next Kafka partitions, relative to the node's default partition. They only become active in case a BG service on another machine fails.","title":"Background (BG) Processing Module"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.BG.html#background-bg-processing-module","text":"The BG module (run in a separate JVM) performs batched processing of the ingest pipeline. BG takes requests from the update queue, processes them, and returns an asynchronous response to the requester (if tracking/blocking was activated on the ingest request). BG's internal modules (e.g. IMP, RTS, Indexer) are organized in a Disruptor-like pattern. BG maintains a pointer to its place in the queue, which is persisted periodically. Almost all writes and calculations performed in this pipeline are idempotent, meaning that if for any reason BG processes a request more than once (e.g. due to a fault and restart) this will not change the state of the data. Stored information objects are immutable, and recalculating new instances results in the same exact outcome. (Note that if an attempt is made to write an infoton whose data is identical to that of an existing infoton, no write action occurs.)","title":"Background (BG) Processing Module"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.BG.html#infoton-merge-process-imp","text":"The IMP module is responsible for writing new infotons and updating existing infotons. In the case of updating existing infotons, this includes retrieving the previous version of the infotons, merging them with the required changes, and writing the new current version. The resulting updated infotons are then queued for the RTS and Indexer modules to process. The IMP has a \"null elider\" module. This means that if the IMP identifies that fulfilling a write request would result in a new infoton version whose user fields are identical to those of the existing current version, then it discards the write request (it skips over \"null changes\"). Note that only user fields are compared, while system fields are not. So, for example, if a null change is skipped, the relevant infoton's update time remains the existing update time, and is not changed.","title":"Infoton Merge Process (IMP)"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.BG.html#real-time-search-rts","text":"The RTS is responsible for pushing changes to API clients who have subscribed for streamed updates. The clients have pre-defined CM-Well queries, and when new infotons are ingested, RTS checks to see whether they match the queries, and if so streams the new infotons to the subscribed clients.","title":"Real-Time Search (RTS)"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.BG.html#indexer","text":"After the IMP has written a new or updated infoton to CM-Well, the Indexer sends the infoton to be indexed by ES, while maintaining the abstraction of the directory structure. New versions are indexed and if necessary, the previous version is made \"not current\".","title":"Indexer"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.BG.html#analytics-processing-module","text":"The Analytics Processing Module is responsible for running heavy (and relatively long-running) queries in a controlled manner. For example, running a SPARQL or Gremlin query on a subgraph (or the full graph). This module is run in a separate JVM (also known by the nickname \"Crashable Worker\" or CW, because if it crashes or is killed, it doesn't harm mainstream CM-Well operation, and can be safely killed for using excess resources or becoming unresponsive). The processing pipeline of creating an in-memory subgraph, followed by execution of the SPARQL query itself is handled within this JVM. Creating a separate JVM process provides a quarantined environment where memory, CPU cycles and priority are controlled and isolated from other CM-Well components. Processes that are hung or are taking too many resources can be killed and restarted with no loss of data.","title":"Analytics Processing Module"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.BG.html#data-consistency-crawler-module","text":"The Data Consistency Crawler (DCC) module tests proactively for inconsistent data in the infotons written to CM-Well, and fixes inconsistencies. The DCC's effect on performance is negligible. The DCC runs within BG process, and is transparent to CM-Well users. It uses the _kafka API to consume a copy of the Kafka persist_topic queue (the queue filled with ingest messages by the Web Service process). Infotons are reviewed shortly after being processed (ingested) by BG. DCC tests each infoton in the queue for data inconsistencies. A CM-Well cluster with N nodes has N Kafka Partitions, and N BgActors. Each BgActor, besides running Infoton Merge Process (IMP) and Indexer streams, also runs a DCC stream. If DCC operation is interrupted for any reason, the DCC resumes from its last known offset, which is persisted in zStore . The assumption is that DCC can verify the same Kafka messages more than once with no harm done (its operation is idempotent).","title":"Data Consistency Crawler Module"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.BG.html#process-diagrams","text":"","title":"Process Diagrams"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.BG.html#read-and-write-processes-high-level","text":"The following diagram illustrates the interactions that occur for read and write requests, among WS, BG and GS-Logic and their sub-modules (as described in the sections above).","title":"Read and Write Processes \u2013 High Level"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.BG.html#bg-process-internals","text":"The following diagrams zooms in to examine the interactions that occur among internal BG processes when writing new or updated infotons. Note that: Each BG instance processes ingest commands of a single partition of the Kafka queue (or \"topic\", as the queue is called in Kafka terminology). See Storage Architecture to learn more about storage architecture in detail. On each CM-Well node, normally there is only one active BG service, with two more BG service instances in standby mode, for redundancy purposes. The two standby instances are allocated for processing the previous and next Kafka partitions, relative to the node's default partition. They only become active in case a BG service on another machine fails.","title":"BG Process Internals"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.ControlModules.html","text":"Control Modules Health Control (HC) Agent The Health Control (HC) agent is a service (run in the DC JVM) that runs on each CM-Well machine. The HC is responsible for sensing and reacting to the state of other CM-Well processes on its machine. If the HC agent identifies that a CM-Well process has become unresponsive or crashed, it kills it/restarts it. In addition, each HC collect report data about the health of the components running on its machine. A single HC is elected as the central reporter for the platform. It aggregates health data from the other HCs. You can view the aggregated health data of the entire CM-Well grid via CM-Well's web interface (see Health Monitoring Pages to learn more). DC JVM Several services have Dedicated Container JVMs (DC JVMs), for example, Health Control, DC-Sync, and STP. These are monitored by the grid-level Controller JVM, and can safely be killed and restarted in case of hangs, crashes or other errors situations. Controller JVM The Controller JVM is a grid-level service which is used to manage Akka clusters and other core grid services as Dedicated Container JVMs (see above). There is a single instance of the Controller JVM per data center.","title":"Control Modules"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.ControlModules.html#control-modules","text":"","title":"Control Modules"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.ControlModules.html#health-control-hc-agent","text":"The Health Control (HC) agent is a service (run in the DC JVM) that runs on each CM-Well machine. The HC is responsible for sensing and reacting to the state of other CM-Well processes on its machine. If the HC agent identifies that a CM-Well process has become unresponsive or crashed, it kills it/restarts it. In addition, each HC collect report data about the health of the components running on its machine. A single HC is elected as the central reporter for the platform. It aggregates health data from the other HCs. You can view the aggregated health data of the entire CM-Well grid via CM-Well's web interface (see Health Monitoring Pages to learn more).","title":"Health Control (HC) Agent"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.ControlModules.html#dc-jvm","text":"Several services have Dedicated Container JVMs (DC JVMs), for example, Health Control, DC-Sync, and STP. These are monitored by the grid-level Controller JVM, and can safely be killed and restarted in case of hangs, crashes or other errors situations.","title":"DC JVM"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.ControlModules.html#controller-jvm","text":"The Controller JVM is a grid-level service which is used to manage Akka clusters and other core grid services as Dedicated Container JVMs (see above). There is a single instance of the Controller JVM per data center.","title":"Controller JVM"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.DesignPrinciples.html","text":"Design Principles Dynamic Throughput Management CM-Well is designed to manage its throughput dynamically, while performing to capacity on the one hand but not creating bottlenecks on the other. This is true of both read and write processing. Processing is pipelined in such a way that each component can work at its own pace, while minimizing bottlenecks. Throughout the system, a \"backpressure\" mechanism is used to slow down insertion of new requests into processing queues, thus preventing congestion. This can result in users getting \"Server Busy\" errors and having to retry requests. Under normal load, different processing activities are with a small distance on the time axis. Internal caching increases efficiency (flattening away the pipeline segregation). As an additional efficiency measure, the data of small infotons are put in the same queue as the ingest command message, so that the data is read by a sequential (efficient) process rather than a random-access fetch. (In practice, most infotons are small enough for this type of handling.) Additional features of dynamic throughput management are: Each node runs multiple ES and CAS processes to handle ingestion. Write requests are performed asynchronously. A \"backpressure\" mechanism is used, whereby CM-Well may return \"Server is Busy\" errors if its queues are too full. It then becomes the caller's responsibility to manage retries. Several streaming requests can be handled in parallel, as they refer to chunks (lists of infotons) with no overlap in timestamp. Virtual Queues Many CM-Well operations are applied to large groups of infotons, such as: Streaming Data center synchronization (replication) Any batch processing of data from CM-Well CM-Well does not manage in-memory queues for infotons waiting to be processed. Instead, it can be said to manage such groups with a \"virtual queue\" paradigm. All infotons have a timestamp, indicating the time the infoton was written or updated. CM-Well retrieves groups of infotons to be processed by querying for them according to their timestamp (among other filters). Infotons are then processed roughly in order of their timestamp. CM-Well maintains a \"time cursor\" that indicates that timestamp of the last infoton processed. This allows an operation to be interrupted and resumed as the same place by querying according to the time cursor. Streaming operations are also managed with a time cursor (the token that the user receives for each chunk and supplies to retrieve the next chunk). (However, chunks obtained by a streaming request are not sorted internally.) The image below illustrates how virtual queues work. Each circle represents an infoton, while its number represents its timestamp (simplified to an integer for the illustration). Infotons are stored and indexed by timestamp. Queries by timestamp (and optionally other filters) return \"chunks\" of infotons, whose timestamp is smaller than or equal to the requested timestamp. (Note that each chunk is not necessarily sorted internally by timestamp.) If a batch process (such as streaming) is interrupted, all the client has to do is to resume the request, starting from the last timestamp that was successfully processed. Efficient Directory Structure Rather than each Directory infoton knowing which child infotons it contains, each child contains its path information (\"knows who its parent is\"). This prevents the need to maintain and update large and constantly-growing blocks of data containing directory contents.","title":"Design Principles"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.DesignPrinciples.html#design-principles","text":"","title":"Design Principles"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.DesignPrinciples.html#dynamic-throughput-management","text":"CM-Well is designed to manage its throughput dynamically, while performing to capacity on the one hand but not creating bottlenecks on the other. This is true of both read and write processing. Processing is pipelined in such a way that each component can work at its own pace, while minimizing bottlenecks. Throughout the system, a \"backpressure\" mechanism is used to slow down insertion of new requests into processing queues, thus preventing congestion. This can result in users getting \"Server Busy\" errors and having to retry requests. Under normal load, different processing activities are with a small distance on the time axis. Internal caching increases efficiency (flattening away the pipeline segregation). As an additional efficiency measure, the data of small infotons are put in the same queue as the ingest command message, so that the data is read by a sequential (efficient) process rather than a random-access fetch. (In practice, most infotons are small enough for this type of handling.) Additional features of dynamic throughput management are: Each node runs multiple ES and CAS processes to handle ingestion. Write requests are performed asynchronously. A \"backpressure\" mechanism is used, whereby CM-Well may return \"Server is Busy\" errors if its queues are too full. It then becomes the caller's responsibility to manage retries. Several streaming requests can be handled in parallel, as they refer to chunks (lists of infotons) with no overlap in timestamp.","title":"Dynamic Throughput Management"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.DesignPrinciples.html#virtual-queues","text":"Many CM-Well operations are applied to large groups of infotons, such as: Streaming Data center synchronization (replication) Any batch processing of data from CM-Well CM-Well does not manage in-memory queues for infotons waiting to be processed. Instead, it can be said to manage such groups with a \"virtual queue\" paradigm. All infotons have a timestamp, indicating the time the infoton was written or updated. CM-Well retrieves groups of infotons to be processed by querying for them according to their timestamp (among other filters). Infotons are then processed roughly in order of their timestamp. CM-Well maintains a \"time cursor\" that indicates that timestamp of the last infoton processed. This allows an operation to be interrupted and resumed as the same place by querying according to the time cursor. Streaming operations are also managed with a time cursor (the token that the user receives for each chunk and supplies to retrieve the next chunk). (However, chunks obtained by a streaming request are not sorted internally.) The image below illustrates how virtual queues work. Each circle represents an infoton, while its number represents its timestamp (simplified to an integer for the illustration). Infotons are stored and indexed by timestamp. Queries by timestamp (and optionally other filters) return \"chunks\" of infotons, whose timestamp is smaller than or equal to the requested timestamp. (Note that each chunk is not necessarily sorted internally by timestamp.) If a batch process (such as streaming) is interrupted, all the client has to do is to resume the request, starting from the last timestamp that was successfully processed.","title":"Virtual Queues"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.DesignPrinciples.html#efficient-directory-structure","text":"Rather than each Directory infoton knowing which child infotons it contains, each child contains its path information (\"knows who its parent is\"). This prevents the need to maintain and update large and constantly-growing blocks of data containing directory contents.","title":"Efficient Directory Structure"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.Part1.html","text":"SW Architecture Overview Diagrams Software Architecture Overview Here are some of the main tasks that the CM-Well platform performs: Manage API read(fetch)/write/query(search) requests from users Store infotons, including managing historical versions Perform asynchronous ingest processing (merging with previous data, storing indexing infoton attribute values to enable search) Run a web interface application for searching and displaying infotons Monitor and report on the health of CM-Well modules; self-heal when possible Manage data synchronization among data centers (and followed CM-Well) CM-Well as a platform is deployed over a set of machines (nodes). All CM-Well nodes are installed with an identical set of software components. The components work and interact with each other to perform the tasks described above and more. Info There is also a \"compact\" version of CM-Well that contains all CM-Well components and can be installed on a single machine. This version is deployed within a Docker container, and can be used for development and testing. Software Modules at a Glance The following table summarizes CM-Well's software components. Module Description Analytics JVMs Separate processes for long computations e.g. SPARQL queries. Background (BG) Processing Processes ingest pipeline in the background, according to a work queue. Cassandra A 3rd-party storage package, used for table-based search and direct access to infotons. Controller JVM A grid-level service; used to manage Akka cluster and other core grid services. Data Consistency Crawler (DCC) A BG module that proactively tests for inconsistent data in the infoton stores, and fixes inconsistencies when found. DC JVM Distributed Container (runs various services with dedicated JVMs, e.g. HC, DC Sync, STP). ElasticSearch A 3rd-party search package, used for indexing full-text search capabilities. Grid Storage Logic (GS-Logic) An abstraction layer above the storage modules, that encapsulates the storage layer (allowing lower storage and indexing layers to be switched). HA-Proxy A 3rd-party load balancing module that distributes API requests among CM-Well nodes Health Control (HC) Monitors the health of CM-Well nodes. Inter-DC Sync Agent Synchronizes data by pulling from other CM-Well grids. Kafka (KF) A 3rd-party package that manages internal queues for ingest processing in CM-Well. SPARQL Trigger Processor (STP) Agent An agent that monitors changes in CM-Well and runs SPARQL queries to construct new inferred triples, for the purpose of creating materialized views of infotons. Web Service (WS) The web service layer that handles read/write requests for users and external agents. Zookeeper (ZK) A 3rd-party package that manages leader-election, distributed consensus and configuration of Kafka. Architecture Diagrams Logical View The following diagram shows a logical view of the CM-Well modules. (See the table above for a legend of module names and abbreviations.) Note There may be several Health Control (HC) modules. The underlying packages in the Grid Storage subsystem can be modified and added to in the future, without changing the subsystem's interface. Physical View The following diagram shows a physical view of the CM-Well modules running on a single CM-Well node. (See the table above for a legend of module names and abbreviations.) The architecture adheres to the following principles: There is no master node. All nodes are installed with identical components. The actual activation of components may vary among nodes in a data center. The architecture has linear scalability through addition of more identical nodes. JVMs of different modules are isolated to enhance robustness. The nodes and the system as a whole are self-managed and self-healing, continually checking the health of all components and performing the required terminations, restarts and failovers in case of failures.","title":"SW Architecture Overview & Diagrams"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.Part1.html#sw-architecture-overview-diagrams","text":"","title":"SW Architecture Overview &amp; Diagrams"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.Part1.html#software-architecture-overview","text":"Here are some of the main tasks that the CM-Well platform performs: Manage API read(fetch)/write/query(search) requests from users Store infotons, including managing historical versions Perform asynchronous ingest processing (merging with previous data, storing indexing infoton attribute values to enable search) Run a web interface application for searching and displaying infotons Monitor and report on the health of CM-Well modules; self-heal when possible Manage data synchronization among data centers (and followed CM-Well) CM-Well as a platform is deployed over a set of machines (nodes). All CM-Well nodes are installed with an identical set of software components. The components work and interact with each other to perform the tasks described above and more. Info There is also a \"compact\" version of CM-Well that contains all CM-Well components and can be installed on a single machine. This version is deployed within a Docker container, and can be used for development and testing.","title":"Software Architecture Overview"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.Part1.html#software-modules-at-a-glance","text":"The following table summarizes CM-Well's software components. Module Description Analytics JVMs Separate processes for long computations e.g. SPARQL queries. Background (BG) Processing Processes ingest pipeline in the background, according to a work queue. Cassandra A 3rd-party storage package, used for table-based search and direct access to infotons. Controller JVM A grid-level service; used to manage Akka cluster and other core grid services. Data Consistency Crawler (DCC) A BG module that proactively tests for inconsistent data in the infoton stores, and fixes inconsistencies when found. DC JVM Distributed Container (runs various services with dedicated JVMs, e.g. HC, DC Sync, STP). ElasticSearch A 3rd-party search package, used for indexing full-text search capabilities. Grid Storage Logic (GS-Logic) An abstraction layer above the storage modules, that encapsulates the storage layer (allowing lower storage and indexing layers to be switched). HA-Proxy A 3rd-party load balancing module that distributes API requests among CM-Well nodes Health Control (HC) Monitors the health of CM-Well nodes. Inter-DC Sync Agent Synchronizes data by pulling from other CM-Well grids. Kafka (KF) A 3rd-party package that manages internal queues for ingest processing in CM-Well. SPARQL Trigger Processor (STP) Agent An agent that monitors changes in CM-Well and runs SPARQL queries to construct new inferred triples, for the purpose of creating materialized views of infotons. Web Service (WS) The web service layer that handles read/write requests for users and external agents. Zookeeper (ZK) A 3rd-party package that manages leader-election, distributed consensus and configuration of Kafka.","title":"Software Modules at a Glance"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.Part1.html#architecture-diagrams","text":"","title":"Architecture Diagrams"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.Part1.html#logical-view","text":"The following diagram shows a logical view of the CM-Well modules. (See the table above for a legend of module names and abbreviations.) Note There may be several Health Control (HC) modules. The underlying packages in the Grid Storage subsystem can be modified and added to in the future, without changing the subsystem's interface.","title":"Logical View"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.Part1.html#physical-view","text":"The following diagram shows a physical view of the CM-Well modules running on a single CM-Well node. (See the table above for a legend of module names and abbreviations.) The architecture adheres to the following principles: There is no master node. All nodes are installed with identical components. The actual activation of components may vary among nodes in a data center. The architecture has linear scalability through addition of more identical nodes. JVMs of different modules are isolated to enhance robustness. The nodes and the system as a whole are self-managed and self-healing, continually checking the health of all components and performing the required terminations, restarts and failovers in case of failures.","title":"Physical View"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.STP.html","text":"SPARQL Trigger Processor (STP) Agent The SPARQL Trigger Processor (STP) is a CM-Well agent that listens for changes to CM-Well's data, and when changes are detected, runs SPARQL commands in order to derive inferred data from the updated infotons. A common usage of this feature is to create materialized views of CM-Well infotons. A materialized view is a \"flattened\" version of data whose original source included high levels of pointer redirection before arriving at data. (The materialized view may also be enriched with data from other infotons.) See STP Use Case: Creating Materialized Views below. The SPARQL Trigger Processor creates one or more sensors . Each sensor periodically runs a query on a specified path in CM-Well, to detect changes to infotons under that path that have changed since the previous query. When changes are detected, the sensor reads the changed infotons and creates the resulting materialized views. Users can configure both the change path and query and the SPARQL query that creates the materialized view. Users define the SPARQL Trigger Processor's input and output by editing a YAML-formatted configuration file. Note The STP's YAML configuration file is stored as a file infoton in a special admin path on CM-Well. See SPARQL Trigger Processor to learn more about how to configure the YAML file. STP Use Case: Creating Materialized Views The image below illustrates how a materialized view of a Company infoton \"flattens\" out levels of indirection to create a more compact representation of the data. The diagram below illustrates how the STP identifies updated infotons and creates their materialized views, using 2 sensors that \"listen\" to changes of specific object types. STP Implementation Description COMING SOON.","title":"SPARQL Trigger Processor (STP) Agent"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.STP.html#sparql-trigger-processor-stp-agent","text":"The SPARQL Trigger Processor (STP) is a CM-Well agent that listens for changes to CM-Well's data, and when changes are detected, runs SPARQL commands in order to derive inferred data from the updated infotons. A common usage of this feature is to create materialized views of CM-Well infotons. A materialized view is a \"flattened\" version of data whose original source included high levels of pointer redirection before arriving at data. (The materialized view may also be enriched with data from other infotons.) See STP Use Case: Creating Materialized Views below. The SPARQL Trigger Processor creates one or more sensors . Each sensor periodically runs a query on a specified path in CM-Well, to detect changes to infotons under that path that have changed since the previous query. When changes are detected, the sensor reads the changed infotons and creates the resulting materialized views. Users can configure both the change path and query and the SPARQL query that creates the materialized view. Users define the SPARQL Trigger Processor's input and output by editing a YAML-formatted configuration file. Note The STP's YAML configuration file is stored as a file infoton in a special admin path on CM-Well. See SPARQL Trigger Processor to learn more about how to configure the YAML file.","title":"SPARQL Trigger Processor (STP) Agent"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.STP.html#stp-use-case-creating-materialized-views","text":"The image below illustrates how a materialized view of a Company infoton \"flattens\" out levels of indirection to create a more compact representation of the data. The diagram below illustrates how the STP identifies updated infotons and creates their materialized views, using 2 sensors that \"listen\" to changes of specific object types.","title":"STP Use Case: Creating Materialized Views"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.STP.html#stp-implementation-description","text":"COMING SOON.","title":"STP Implementation Description"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.ThirdPartyPackages.html","text":"Third-Party Packages Cassandra The Cassandra package is used to store infotons with all the required linked data characteristics, including deep history and the \"immutable data\" concept. It is mainly used for the \"direct path\", i.e. for fetching infotons by URI in a fast and scalable way. Cassandra also supports a convenient, higher level query language (CQL) compared to other column-family storage packages (e.g. HBase Accumulo). The design of the Cassandra storage management has no Single Point of Failure (SPoF). All nodes are equal and there is no \"manager node\". Cassandra's distribution model is built around the concept of a \"virtual circle\" that represents the entire range of storage locations. Each CM-Well node hosts 256 virtual nodes, each of which is mapped to a location on the circle according to a hash value of the machine name. Each virtual node is responsible for a single segment on the circle. Infotons are mapped (via a hash value on the infoton's URI) to a location on the circle, and each virtual node must store the infotons that are mapped to its segment. If a CM-Well node is added, the data must be redistributed to include the new machine's virtual node locations, but this is only required for a fraction of the data rather than for all the data. This method is known as \"consistent hashing\". For each segment on the virtual circle there is a primary machine responsible for storing the infotons mapped to that segment. However, since CM-Well maintains a replication factor of 3, each segment's storage is replicated on 2 additional machines. If the primary machine becomes inoperative, a new primary machine is elected. (See Datastax article to learn more). Theoretically, Cassandra's virtual circle could encompass nodes in more than one data center. This design capability is not used by CM-Well, so as not to rely this feature, thereby ruling out using alternative packages that don't support it. Cross-data-center coordination is done in the CM-Well logic layer, which manages the abstraction of uniform storage over identical nodes. ElasticSearch The ElasticSearch (ES) package is used to index infotons by field values, to create higher level abstractions such as infoton directory paths and graph labels, and for statistical features. This also known as \"inverted\" search features, in Full Text Search terminology. Infotons are stored in a JSON format which is convenient for search, but which lacks all the Linked Data details stored in Cassandra. Each such JSON object (also called a \"document\") is a bag of pairs which are indexed. Logically, two such indexes are maintained, one for the current infoton versions and one for the historical infoton versions. ES requires more complex scalability considerations. The indexes are composed of \"shards\". Shards are Lucene indexes, whose size must be limited so as not to harm search performance. Upon creation of an index, the number of shards must be specified, and then cannot be changed (currently ES indexes are configured to have 5 shards each). Data is distributed amongst primary shards (based on a hash distribution function). Primary shards have replica shards based on a configured replication factor (currently set to 3, i.e. each primary shard has 2 replicas). Since the number of primary shards can't be changed, a different approach is required in order to enable limitless linear scalability (both on the node number axis and infoton number axis). CM-Well uses multiple indexes and ES aliases to group the indexes logically. As information is added, new indexes are created. Two aliases are used: one is used by the front-end read/search and a second back-end alias is used for writing new data. When a size threshold is reached, a new index is created and the writing \"cursor\" is moved to point to the new index. (See Ingest Queues and Storage Architecture to learn more about storage architecture in detail.) CM-Well's ES setup has a set of \"master nodes\" (a dedicated JVM with no data) and \"data nodes\". The master nodes manage the cluster, including distribution of data, replication and repair. The \"data nodes\" are responsible for storage and query processing. ElasticSearch has the concept of a \"leader\", which is one of the \"master\" nodes. The setup uses either 3 or 5 such nodes spread into different machines. It is also set up to require a majority (2,3 respectively) of followers to become a leader (to disallow \"split brain\" partitioning situation). Data nodes are distributed amongst all the machines. This isolation setup (segregation of ES control JVMs) copes with split brains and fluctuations related to stress and JVM instability on data-nodes. Kafka The 3rd-party Kafka package is used to manage queues for infoton write requests. CM-Well manages 4 such queues (known as \"topics\" in Kafka): persist_topic - each message represents an infoton to be written to Cassandra storage. persist_topic.priority - same as above, for a request sent with high priority. index_topic - each message represents an infoton to be indexed in Elastic Search. index_topic.priority - same as above, for a request sent with high priority. Zookeeper The 3rd-party Zookeeper package is a dependency of the Kafka package. ZooKeeper is a centralized service for maintaining configuration information, leader election and providing distributed consensus resolution.","title":"Third-Party Packages"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.ThirdPartyPackages.html#third-party-packages","text":"","title":"Third-Party Packages"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.ThirdPartyPackages.html#cassandra","text":"The Cassandra package is used to store infotons with all the required linked data characteristics, including deep history and the \"immutable data\" concept. It is mainly used for the \"direct path\", i.e. for fetching infotons by URI in a fast and scalable way. Cassandra also supports a convenient, higher level query language (CQL) compared to other column-family storage packages (e.g. HBase Accumulo). The design of the Cassandra storage management has no Single Point of Failure (SPoF). All nodes are equal and there is no \"manager node\". Cassandra's distribution model is built around the concept of a \"virtual circle\" that represents the entire range of storage locations. Each CM-Well node hosts 256 virtual nodes, each of which is mapped to a location on the circle according to a hash value of the machine name. Each virtual node is responsible for a single segment on the circle. Infotons are mapped (via a hash value on the infoton's URI) to a location on the circle, and each virtual node must store the infotons that are mapped to its segment. If a CM-Well node is added, the data must be redistributed to include the new machine's virtual node locations, but this is only required for a fraction of the data rather than for all the data. This method is known as \"consistent hashing\". For each segment on the virtual circle there is a primary machine responsible for storing the infotons mapped to that segment. However, since CM-Well maintains a replication factor of 3, each segment's storage is replicated on 2 additional machines. If the primary machine becomes inoperative, a new primary machine is elected. (See Datastax article to learn more). Theoretically, Cassandra's virtual circle could encompass nodes in more than one data center. This design capability is not used by CM-Well, so as not to rely this feature, thereby ruling out using alternative packages that don't support it. Cross-data-center coordination is done in the CM-Well logic layer, which manages the abstraction of uniform storage over identical nodes.","title":"Cassandra"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.ThirdPartyPackages.html#elasticsearch","text":"The ElasticSearch (ES) package is used to index infotons by field values, to create higher level abstractions such as infoton directory paths and graph labels, and for statistical features. This also known as \"inverted\" search features, in Full Text Search terminology. Infotons are stored in a JSON format which is convenient for search, but which lacks all the Linked Data details stored in Cassandra. Each such JSON object (also called a \"document\") is a bag of pairs which are indexed. Logically, two such indexes are maintained, one for the current infoton versions and one for the historical infoton versions. ES requires more complex scalability considerations. The indexes are composed of \"shards\". Shards are Lucene indexes, whose size must be limited so as not to harm search performance. Upon creation of an index, the number of shards must be specified, and then cannot be changed (currently ES indexes are configured to have 5 shards each). Data is distributed amongst primary shards (based on a hash distribution function). Primary shards have replica shards based on a configured replication factor (currently set to 3, i.e. each primary shard has 2 replicas). Since the number of primary shards can't be changed, a different approach is required in order to enable limitless linear scalability (both on the node number axis and infoton number axis). CM-Well uses multiple indexes and ES aliases to group the indexes logically. As information is added, new indexes are created. Two aliases are used: one is used by the front-end read/search and a second back-end alias is used for writing new data. When a size threshold is reached, a new index is created and the writing \"cursor\" is moved to point to the new index. (See Ingest Queues and Storage Architecture to learn more about storage architecture in detail.) CM-Well's ES setup has a set of \"master nodes\" (a dedicated JVM with no data) and \"data nodes\". The master nodes manage the cluster, including distribution of data, replication and repair. The \"data nodes\" are responsible for storage and query processing. ElasticSearch has the concept of a \"leader\", which is one of the \"master\" nodes. The setup uses either 3 or 5 such nodes spread into different machines. It is also set up to require a majority (2,3 respectively) of followers to become a leader (to disallow \"split brain\" partitioning situation). Data nodes are distributed amongst all the machines. This isolation setup (segregation of ES control JVMs) copes with split brains and fluctuations related to stress and JVM instability on data-nodes.","title":"ElasticSearch"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.ThirdPartyPackages.html#kafka","text":"The 3rd-party Kafka package is used to manage queues for infoton write requests. CM-Well manages 4 such queues (known as \"topics\" in Kafka): persist_topic - each message represents an infoton to be written to Cassandra storage. persist_topic.priority - same as above, for a request sent with high priority. index_topic - each message represents an infoton to be indexed in Elastic Search. index_topic.priority - same as above, for a request sent with high priority.","title":"Kafka"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.ThirdPartyPackages.html#zookeeper","text":"The 3rd-party Zookeeper package is a dependency of the Kafka package. ZooKeeper is a centralized service for maintaining configuration information, leader election and providing distributed consensus resolution.","title":"Zookeeper"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.WebApplication.html","text":"Web Application CM-Well supports a browser UI (via a web application), which it activates if it identifies a browser client. The UI displays infotons, their attributes and their paths in a user-friendly format, and supports searching for infotons by their types and values. The web application is implemented as a Single Page Application (SPA), meaning that it's loaded (mostly as a single-page) with all of the logic written in Javascript, it then issues calls to CM-Well to serve data as needed to repopulate areas in the UI without reload of the application. The application is stored as several file infotons containing Javascript code, CSS and images. It's stored in a protected directory (which can be changed using an admin token). Additional web applications can be added in other directories in CM-Well's store. The above describes the default one (that is tied to web access from a browser). Health Monitoring Pages Within the browser UI there are several \"pages\" that allow you to view the health and other reports of CM-Well nodes and software modules. These are implemented as \"virtual infotons\", whose corresponding page is built on-the-fly according to the infoton path. See Health Dashboards to learn more.","title":"Web Application"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.WebApplication.html#web-application","text":"CM-Well supports a browser UI (via a web application), which it activates if it identifies a browser client. The UI displays infotons, their attributes and their paths in a user-friendly format, and supports searching for infotons by their types and values. The web application is implemented as a Single Page Application (SPA), meaning that it's loaded (mostly as a single-page) with all of the logic written in Javascript, it then issues calls to CM-Well to serve data as needed to repopulate areas in the UI without reload of the application. The application is stored as several file infotons containing Javascript code, CSS and images. It's stored in a protected directory (which can be changed using an admin token). Additional web applications can be added in other directories in CM-Well's store. The above describes the default one (that is tied to web access from a browser).","title":"Web Application"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.WebApplication.html#health-monitoring-pages","text":"Within the browser UI there are several \"pages\" that allow you to view the health and other reports of CM-Well nodes and software modules. These are implemented as \"virtual infotons\", whose corresponding page is built on-the-fly according to the infoton path. See Health Dashboards to learn more.","title":"Health Monitoring Pages"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.WebServiceAndGridStorage.html","text":"Web Service and Grid Storage Web Service (WS) Module CM-Well supports a REST API for reading, writing, streaming and querying infotons, and more. The WS component is responsible for managing API requests and responses. The WS uses the 3rd-part Netty package and asynchronous I/O to manage requests and responses. Requests are served by a small thread pool, whose size is adjusted according to the machine's parallelism capability. Read and write operations are handled separately asynchronously, due to their different costs in processing time. Read requests are served directly by the WS JVM. Write requests undergo minimal analysis and verification, and are then transferred to the BG JVM for background processing. Some lengthier/more-complex processes, e.g. SPARQL queries, are handled by the Analytics JVM. Grid Storage (GS) Logic Layer The GS-Logic module provides a unification layer for the different storage engines (each is also abstracted, and can be potentially be replaced transparently), and provides a unified API to the higher-level modules. Each of the storage engines has its own driver for interfacing with the 3rd-party storage package. These drivers hide the implementation details and dependencies of the specific underlying 3rd-party storage packages, which are Apache Cassandra for data storage (\"direct\") and ElasticSearch (\"inverted\") for field indexing and search queries. Storage requests are sometimes handled by one engine and sometimes by both, depending on the specific request and implementation interplay. Since the entire software stack is installed on each machine, both engines are quickly accessible. The design of the GS-Logic layer also enables expansion and addition of additional databases in the future (if there should prove to be a gap in functionality or insufficient performance in the existing ones).","title":"Web Service and Grid Storage"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.WebServiceAndGridStorage.html#web-service-and-grid-storage","text":"","title":"Web Service and Grid Storage"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.WebServiceAndGridStorage.html#web-service-ws-module","text":"CM-Well supports a REST API for reading, writing, streaming and querying infotons, and more. The WS component is responsible for managing API requests and responses. The WS uses the 3rd-part Netty package and asynchronous I/O to manage requests and responses. Requests are served by a small thread pool, whose size is adjusted according to the machine's parallelism capability. Read and write operations are handled separately asynchronously, due to their different costs in processing time. Read requests are served directly by the WS JVM. Write requests undergo minimal analysis and verification, and are then transferred to the BG JVM for background processing. Some lengthier/more-complex processes, e.g. SPARQL queries, are handled by the Analytics JVM.","title":"Web Service (WS) Module"},{"location":"AdvancedTopics/Architecture/Arch.SoftwareArch.WebServiceAndGridStorage.html#grid-storage-gs-logic-layer","text":"The GS-Logic module provides a unification layer for the different storage engines (each is also abstracted, and can be potentially be replaced transparently), and provides a unified API to the higher-level modules. Each of the storage engines has its own driver for interfacing with the 3rd-party storage package. These drivers hide the implementation details and dependencies of the specific underlying 3rd-party storage packages, which are Apache Cassandra for data storage (\"direct\") and ElasticSearch (\"inverted\") for field indexing and search queries. Storage requests are sometimes handled by one engine and sometimes by both, depending on the specific request and implementation interplay. Since the entire software stack is installed on each machine, both engines are quickly accessible. The design of the GS-Logic layer also enables expansion and addition of additional databases in the future (if there should prove to be a gap in functionality or insufficient performance in the existing ones).","title":"Grid Storage (GS) Logic Layer"},{"location":"AdvancedTopics/Tools/Tools.UsingCM-WellDocker.html","text":"CM-Well Docker What is CM-Well Docker? Docker is a 3rd-party utility that provides an isolated \"container\" for a software application, containing the application itself, any other software required for its installation, and any files it uses or creates. When running on Linux, Docker runs in the native environment; when running on Windows or Mac OS X, Docker runs over a Linux virtual machine. An application running under Docker is guaranteed to be isolated from the effects of any other applications running on the same machine (and vice versa). CM-Well Docker is a small instance of CM-Well that runs under Docker. Why Should I Use CM-Well Docker? If you work with the CM-Well Docker, you have your own private instance of CM-Well which is not affected by changes made to a public instance of CM-Well. For example, the lab environments are subject to periodic data wipes. In Lab or PPE environments, other users can make changes to data you have created, and vice versa. In addition, you can easily stop, start and reset the CM-Well Docker, which is especially useful if you want to test a scenario while starting from an empty repository. System Requirements for Running CM-Well Docker Docker is intended to run on Linux, and this is the recommended OS for Docker installation. However, you can run it on Windows or Mac OS X. In Windows environments, Docker runs over the HyperV virtualization component. To run CM-Well Docker, you must have: A Linux (recommended), Windows or Mac OS X machine About 2.5GB of free disk space 6GB of free RAM Note See Docker's additional OS-specific requirements under Docker's installation page . Installing Docker To run CM-Well Docker, you must install the Docker utility itself and the related CM-Well files. CM-Well requires over 5GB of RAM to run, and therefore after installing Docker, you must change its settings such that 6GB of RAM are allocated to the Docker virtual machine. To install Docker: Download and run the Docker installation appropriate for your OS, from the Docker installation page . In the toolbar, right-click the Docker icon and click Settings. The Docker Settings dialog opens. In the left-hand menu, click Advanced . Drag the Memory slider to the right to enlarge the memory size to be as close as possible to 6GB. Docker restarts to implement the new memory setting. Note Optimally, CM-Well Docker should have 6GB of RAM configured. If there is not enough available memory on your machine, CM-Well Docker will still run with 4.8GB of RAM, though not at production-level performance. Installing the CM-Well Image Coming soon. Operating CM-Well Docker To run CM-Well Docker: Run the following command: docker run --name cm-well -d -p 8080:9000 cmwell-dev http://localhost:8080 is now the root URL of your local CM-Well instance. The syntax for calling the CM-Well API on a Docker instance is identical to the syntax for calling any other CM-Well host. To add data to CM-Well Docker: Use the CM-Well API for adding data, while referring to the http://localhost:8080/_in endpoint. For example: curl -X POST http://localhost:8080/_in?format=ttl -H Content-Type: text/plain --data-binary http://example.org/Individuals/JohnSmith a http://data.com/Person ; http://ont.thomsonreuters.com/bermuda/hasName \\ John Smith\\ . To pause CM-Well Docker: Run the following command: docker stop cm-well To restart CM-Well Docker after a pause: Run the following command: docker start cm-well Note After a restart, it may take a few seconds for CM-Well Docker to initialize and respond to requests. CM-Well's state and any data added to it are retained through stop and start operations. To kill the CM-Well Docker process: Run the following command: docker kill cm-well To remove the CM-Well Docker container: Run the following command: docker rm cm-well To delete the CM-Well Docker repository and start from scratch: Kill the CM-Well Docker process. Remove the CM-Well Docker Container. Run the CM-Well Docker (using the \"run\" command). Note You can also run multiple CM-Well Docker containers on different ports.","title":"CM-Well Docker"},{"location":"AdvancedTopics/Tools/Tools.UsingCM-WellDocker.html#cm-well-docker","text":"","title":"CM-Well Docker"},{"location":"AdvancedTopics/Tools/Tools.UsingCM-WellDocker.html#what-is-cm-well-docker","text":"Docker is a 3rd-party utility that provides an isolated \"container\" for a software application, containing the application itself, any other software required for its installation, and any files it uses or creates. When running on Linux, Docker runs in the native environment; when running on Windows or Mac OS X, Docker runs over a Linux virtual machine. An application running under Docker is guaranteed to be isolated from the effects of any other applications running on the same machine (and vice versa). CM-Well Docker is a small instance of CM-Well that runs under Docker.","title":"What is CM-Well Docker?"},{"location":"AdvancedTopics/Tools/Tools.UsingCM-WellDocker.html#why-should-i-use-cm-well-docker","text":"If you work with the CM-Well Docker, you have your own private instance of CM-Well which is not affected by changes made to a public instance of CM-Well. For example, the lab environments are subject to periodic data wipes. In Lab or PPE environments, other users can make changes to data you have created, and vice versa. In addition, you can easily stop, start and reset the CM-Well Docker, which is especially useful if you want to test a scenario while starting from an empty repository.","title":"Why Should I Use CM-Well Docker?"},{"location":"AdvancedTopics/Tools/Tools.UsingCM-WellDocker.html#system-requirements-for-running-cm-well-docker","text":"Docker is intended to run on Linux, and this is the recommended OS for Docker installation. However, you can run it on Windows or Mac OS X. In Windows environments, Docker runs over the HyperV virtualization component. To run CM-Well Docker, you must have: A Linux (recommended), Windows or Mac OS X machine About 2.5GB of free disk space 6GB of free RAM Note See Docker's additional OS-specific requirements under Docker's installation page .","title":"System Requirements for Running CM-Well Docker"},{"location":"AdvancedTopics/Tools/Tools.UsingCM-WellDocker.html#installing-docker","text":"To run CM-Well Docker, you must install the Docker utility itself and the related CM-Well files. CM-Well requires over 5GB of RAM to run, and therefore after installing Docker, you must change its settings such that 6GB of RAM are allocated to the Docker virtual machine. To install Docker: Download and run the Docker installation appropriate for your OS, from the Docker installation page . In the toolbar, right-click the Docker icon and click Settings. The Docker Settings dialog opens. In the left-hand menu, click Advanced . Drag the Memory slider to the right to enlarge the memory size to be as close as possible to 6GB. Docker restarts to implement the new memory setting. Note Optimally, CM-Well Docker should have 6GB of RAM configured. If there is not enough available memory on your machine, CM-Well Docker will still run with 4.8GB of RAM, though not at production-level performance.","title":"Installing Docker"},{"location":"AdvancedTopics/Tools/Tools.UsingCM-WellDocker.html#installing-the-cm-well-image","text":"Coming soon.","title":"Installing the CM-Well Image"},{"location":"AdvancedTopics/Tools/Tools.UsingCM-WellDocker.html#operating-cm-well-docker","text":"To run CM-Well Docker: Run the following command: docker run --name cm-well -d -p 8080:9000 cmwell-dev http://localhost:8080 is now the root URL of your local CM-Well instance. The syntax for calling the CM-Well API on a Docker instance is identical to the syntax for calling any other CM-Well host. To add data to CM-Well Docker: Use the CM-Well API for adding data, while referring to the http://localhost:8080/_in endpoint. For example: curl -X POST http://localhost:8080/_in?format=ttl -H Content-Type: text/plain --data-binary http://example.org/Individuals/JohnSmith a http://data.com/Person ; http://ont.thomsonreuters.com/bermuda/hasName \\ John Smith\\ . To pause CM-Well Docker: Run the following command: docker stop cm-well To restart CM-Well Docker after a pause: Run the following command: docker start cm-well Note After a restart, it may take a few seconds for CM-Well Docker to initialize and respond to requests. CM-Well's state and any data added to it are retained through stop and start operations. To kill the CM-Well Docker process: Run the following command: docker kill cm-well To remove the CM-Well Docker container: Run the following command: docker rm cm-well To delete the CM-Well Docker repository and start from scratch: Kill the CM-Well Docker process. Remove the CM-Well Docker Container. Run the CM-Well Docker (using the \"run\" command). Note You can also run multiple CM-Well Docker containers on different ports.","title":"Operating CM-Well Docker"},{"location":"AdvancedTopics/Tools/Tools.UsingTheCM-WellDownloader.html","text":"CM-Well Downloader What is CM-Well Downloader? CM-Well Downloader is a CM-Well utility for downloading infotons from CM-Well in bulk. You can run CM-Well Downloader as an alternative to calling the CM-Well streaming API from your own application. Using CM-Well Downloader is faster because its design optimizes performance for bulk downloads. CM-Well Downloader is written in Scala and is packaged as a jar file. You can call the Downloader library from Scala or Java applications, or run the Downloader executable in a command line environment. Note To access the CM-Well Git site, you will need a GitHub user. See CM-Well GitHub to access a CM-Well Git repository. To compile and run CM-Well data tools, you will need Java version 8. Graph traversal is not supported in streaming operations. If a streaming query contains xg , yg or gqp operators, they will be ignored. Stream-Based and Consumer-Based Downloaders There are two versions of CM-Well Downloader: Stream-based - downloads a continuous stream of data. Faster than the consumer-based mode, but if it fails in the middle of downloading, you will have to download the entire stream from the start. Consumer-based - built with a Consumer design pattern. Significantly slower than the stream-based mode, but in case of failure, it can restart from the same position in the stream where it left off. For best performance, we recommend using the bulk mode of the consumer API . Both flavors of Downloader can be found in the same library or executable file. Downloading and Compiling CM-Well Source Code You can download and compile the Downloader source code, to build either the stand-alone Downloader executable or the Downloader library jar. To install the Scala Build Tool and download the CM-Well Downloader source code: Go to http://www.scala-sbt.org/download.html and install the Scala Build Tool (SBT) version appropriate for your OS. Add the Scala sbt command to your PATH variable. Download the CM-Well Downloader source code from https://github.com/CM-Well/CM-Well . To build all CM-Well utility executables: Navigate to the root directory of the CM-Well data tools source code. It contains a file called build.sbt . Run the following command: sbt app/pack . The resulting shell script executables are created in the cmwell-data-tools-app/target/pack/bin folder. To build the CM-Well Downloader library: Navigate to the the cmwell-downloader directory under the data tools root directory. It contains a file called build.sbt . Run the following command: sbt downloader/package . The resulting cmwell-downloader_2.12-1.0.LOCAL.jar file is created in cmwell-data-tools/cmwell-downloader/target/scala-2.12/ . Running the CM-Well Downloader Executable Activate the CM-Well Downloader stream-based executable by running: cmwell-data-tools-app/target/pack/bin/downloader . OR: Activate the CM-Well Downloader consumer-based executable by running: cmwell-data-tools-app/target/pack/bin/consumer . Both applications write their output to the standard output. Both Downloader shell scripts take parameters that mostly correspond to the CM-Well API's parameters. The following commands display the available parameters for the Downloaders: cmwell-data-tools-app/target/pack/bin/downloader --help cmwell-data-tools-app/target/pack/bin/consumer --help The following table describes these parameters: Parameter (and \\ arg>) Description Default Value Relevant to -f, --format \\ arg> Output format (json, jsonld, jsonldq, n3, ntriples, nquads, trig, rdfxml) trig Both -h, --host \\ arg> CM-Well server host name N/A Both -l, --length \\ arg> Maximal number of records to download (numeric value or \"all\" to download all records) 50 Both --params \\ arg> Parameter string to pass to CM-Well N/A Both -p, --path \\ arg> Root path to query in CM-Well / Both -q, --qp \\ arg> Query parameters to pass to CM-Well N/A Both -r, --recursive Get data recursively under sub-paths N/A Both --help Show help message N/A Both --version Show version of this program N/A Both --from-uuids download data from uuids input stream provided by stdin N/A Stream -n, --num-connections \\ arg> The number of HTTP connections to open 4 Stream -o, --op \\ arg> Streaming type (stream, nstream, mstream, sstream). See Streaming Data from CM-Well stream Stream -s, --state \\ arg> Position state file. Provide an empty file the first time you run the command. In case of failure, the state is saved to this file, and you can then rerun the command, providing the same file, so that the operation is resumed from the previous position. N/A Consumer Here is an example of how to run the stream-based CM-Well Downloader to retrieve up to 10 infotons from the PPE environment, of type Organization, containing \"Thomson\" in their name, under the permid.org path, with their data: cmwell-data-tools-app/target/pack/bin/downloader --host cm-well-ppe.int.thomsonreuters.com --path /permid.org --op stream --length 10 --qp CommonName.mdaas:Thomson,type.rdf:Organization Running CM-Well Downloader in Scala REPL Mode You can run CM-Well Downloader in the Scala Interpreter (REPL), so you can examine program internals while running. To do this, run the following command: sbt downloader/console After the console is successfully loaded, execute the Downloader by running the following commands: scala import cmwell.tools.data.util.akka.Implicits._ import cmwell.tools.data.downloader.streams._ Downloader.downloadFromQuery( baseUrl = \"cm-well-ph\", path = \"/permid.org\", format = \"trig\", length = Some(100), outputHandler = print) !!! note The outputHandler argument type is a String = () function, which is called when new data is received. You can pass a value of print() to display on the command line, or provide a customized function (for instance, one that writes the received data to a file). Using the CM-Well Downloader Jar For the stream-based Downloader, call the static methods of the cmwell.tools.data.downloader.streams.Downloader class (see the method definitions in cmwell-downloader/src/main/scala/cmwell/tools/data/downloader/streams/Downloader.scala ). For the consumer-based Downloader, call the static methods of the cmwell.tools.data.downloader.consumer.Downloader class (see the method definitions in cmwell-downloader/src/main/scala/cmwell/tools/data/downloader/consumer/Downloader.scala ).","title":"CM-Well Downloader"},{"location":"AdvancedTopics/Tools/Tools.UsingTheCM-WellDownloader.html#cm-well-downloader","text":"","title":"CM-Well Downloader"},{"location":"AdvancedTopics/Tools/Tools.UsingTheCM-WellDownloader.html#what-is-cm-well-downloader","text":"CM-Well Downloader is a CM-Well utility for downloading infotons from CM-Well in bulk. You can run CM-Well Downloader as an alternative to calling the CM-Well streaming API from your own application. Using CM-Well Downloader is faster because its design optimizes performance for bulk downloads. CM-Well Downloader is written in Scala and is packaged as a jar file. You can call the Downloader library from Scala or Java applications, or run the Downloader executable in a command line environment. Note To access the CM-Well Git site, you will need a GitHub user. See CM-Well GitHub to access a CM-Well Git repository. To compile and run CM-Well data tools, you will need Java version 8. Graph traversal is not supported in streaming operations. If a streaming query contains xg , yg or gqp operators, they will be ignored.","title":"What is CM-Well Downloader?"},{"location":"AdvancedTopics/Tools/Tools.UsingTheCM-WellDownloader.html#stream-based-and-consumer-based-downloaders","text":"There are two versions of CM-Well Downloader: Stream-based - downloads a continuous stream of data. Faster than the consumer-based mode, but if it fails in the middle of downloading, you will have to download the entire stream from the start. Consumer-based - built with a Consumer design pattern. Significantly slower than the stream-based mode, but in case of failure, it can restart from the same position in the stream where it left off. For best performance, we recommend using the bulk mode of the consumer API . Both flavors of Downloader can be found in the same library or executable file.","title":"Stream-Based and Consumer-Based Downloaders"},{"location":"AdvancedTopics/Tools/Tools.UsingTheCM-WellDownloader.html#downloading-and-compiling-cm-well-source-code","text":"You can download and compile the Downloader source code, to build either the stand-alone Downloader executable or the Downloader library jar. To install the Scala Build Tool and download the CM-Well Downloader source code: Go to http://www.scala-sbt.org/download.html and install the Scala Build Tool (SBT) version appropriate for your OS. Add the Scala sbt command to your PATH variable. Download the CM-Well Downloader source code from https://github.com/CM-Well/CM-Well . To build all CM-Well utility executables: Navigate to the root directory of the CM-Well data tools source code. It contains a file called build.sbt . Run the following command: sbt app/pack . The resulting shell script executables are created in the cmwell-data-tools-app/target/pack/bin folder. To build the CM-Well Downloader library: Navigate to the the cmwell-downloader directory under the data tools root directory. It contains a file called build.sbt . Run the following command: sbt downloader/package . The resulting cmwell-downloader_2.12-1.0.LOCAL.jar file is created in cmwell-data-tools/cmwell-downloader/target/scala-2.12/ .","title":"Downloading and Compiling CM-Well Source Code"},{"location":"AdvancedTopics/Tools/Tools.UsingTheCM-WellDownloader.html#running-the-cm-well-downloader-executable","text":"Activate the CM-Well Downloader stream-based executable by running: cmwell-data-tools-app/target/pack/bin/downloader . OR: Activate the CM-Well Downloader consumer-based executable by running: cmwell-data-tools-app/target/pack/bin/consumer . Both applications write their output to the standard output. Both Downloader shell scripts take parameters that mostly correspond to the CM-Well API's parameters. The following commands display the available parameters for the Downloaders: cmwell-data-tools-app/target/pack/bin/downloader --help cmwell-data-tools-app/target/pack/bin/consumer --help The following table describes these parameters: Parameter (and \\ arg>) Description Default Value Relevant to -f, --format \\ arg> Output format (json, jsonld, jsonldq, n3, ntriples, nquads, trig, rdfxml) trig Both -h, --host \\ arg> CM-Well server host name N/A Both -l, --length \\ arg> Maximal number of records to download (numeric value or \"all\" to download all records) 50 Both --params \\ arg> Parameter string to pass to CM-Well N/A Both -p, --path \\ arg> Root path to query in CM-Well / Both -q, --qp \\ arg> Query parameters to pass to CM-Well N/A Both -r, --recursive Get data recursively under sub-paths N/A Both --help Show help message N/A Both --version Show version of this program N/A Both --from-uuids download data from uuids input stream provided by stdin N/A Stream -n, --num-connections \\ arg> The number of HTTP connections to open 4 Stream -o, --op \\ arg> Streaming type (stream, nstream, mstream, sstream). See Streaming Data from CM-Well stream Stream -s, --state \\ arg> Position state file. Provide an empty file the first time you run the command. In case of failure, the state is saved to this file, and you can then rerun the command, providing the same file, so that the operation is resumed from the previous position. N/A Consumer Here is an example of how to run the stream-based CM-Well Downloader to retrieve up to 10 infotons from the PPE environment, of type Organization, containing \"Thomson\" in their name, under the permid.org path, with their data: cmwell-data-tools-app/target/pack/bin/downloader --host cm-well-ppe.int.thomsonreuters.com --path /permid.org --op stream --length 10 --qp CommonName.mdaas:Thomson,type.rdf:Organization","title":"Running the CM-Well Downloader Executable"},{"location":"AdvancedTopics/Tools/Tools.UsingTheCM-WellDownloader.html#running-cm-well-downloader-in-scala-repl-mode","text":"You can run CM-Well Downloader in the Scala Interpreter (REPL), so you can examine program internals while running. To do this, run the following command: sbt downloader/console After the console is successfully loaded, execute the Downloader by running the following commands: scala import cmwell.tools.data.util.akka.Implicits._ import cmwell.tools.data.downloader.streams._ Downloader.downloadFromQuery( baseUrl = \"cm-well-ph\", path = \"/permid.org\", format = \"trig\", length = Some(100), outputHandler = print) !!! note The outputHandler argument type is a String = () function, which is called when new data is received. You can pass a value of print() to display on the command line, or provide a customized function (for instance, one that writes the received data to a file).","title":"Running CM-Well Downloader in Scala REPL Mode"},{"location":"AdvancedTopics/Tools/Tools.UsingTheCM-WellDownloader.html#using-the-cm-well-downloader-jar","text":"For the stream-based Downloader, call the static methods of the cmwell.tools.data.downloader.streams.Downloader class (see the method definitions in cmwell-downloader/src/main/scala/cmwell/tools/data/downloader/streams/Downloader.scala ). For the consumer-based Downloader, call the static methods of the cmwell.tools.data.downloader.consumer.Downloader class (see the method definitions in cmwell-downloader/src/main/scala/cmwell/tools/data/downloader/consumer/Downloader.scala ).","title":"Using the CM-Well Downloader Jar"},{"location":"AdvancedTopics/Tools/Tools.UsingTheCM-WellIngester.html","text":"CM-Well Ingester What is the CM-Well Ingester? The CM-Well Ingester is a CM-Well utility for uploading infotons to CM-Well in bulk. Using the Ingester, you can upload data from a file, the standard input, or a customized input source. The Ingester processes several upload requests in parallel, up to a configurable limit. The CM-Well Ingester is written in Scala and is packaged as a jar file (Java library). You can call it from a Java or Scala application, or in a command-line environment. Downloading and Compiling CM-Well Source Code Note To access the CM-Well Git site, you will need a GitHub user. See the CM-Well GitHub Repository . To compile and run CM-Well data tools, you will need Java version 8. To install the Scala Build Tool and download the CM-Well Ingester source code: Go to http://www.scala-sbt.org/download.html and install the Scala Build Tool (SBT) version appropriate for your OS. Add the Scala sbt command to your PATH variable. Download the CM-Well Downloader source code from https://github.com/CM-Well/CM-Well . To build all CM-Well utility executables: Navigate to the root directory of the CM-Well tools source code. It contains a file called build.sbt . Run the following command: sbt app/pack . The resulting shell script executables are created in cmwell-data-tools-app/target/pack/bin folder. To build only the CM-Well Ingester library: Navigate to the the cmwell-ingester directory under the tools root directory. It contains a file called build.sbt . Run the following command: sbt ingester/package . The resulting cmwell-ingester_2.12-1.0.LOCAL.jar file is created in cmwell-data-tools/cmwell-ingester/target/scala-2.12/ . Running the CM-Well Ingester as an Executable To run the CM-Well Ingester as a stand-alone executable, run the following command: cm-well-ingester/target/pack/bin/ingester --host HOST --format FORMAT The following table describes the input parameters: Parameter Description -b, --backpressure Maximal number of parallel upload requests (default = 100) -f, --format Format of uploaded data (e.g. ntriples, nquads, jsonld...) -h, --host CM-Well host name -p, --port CM-Well HTTP host port (default = 80) --help Show the usage description --version Show the version number of this program Note To display a description of the ingester parameters, run ingester --help . Usually you will not have to change the backpressure value. But this may become advisable if, for example, you're receiving \"busy\" messages from CM-Well. See Ingesting Each Infoton as an Atomic Operation . Here is an example of how to run the CM-Well Ingester as a stand-alone executable, while taking the input data from a file: cmwell-data-tools-app/target/pack/bin/ingester --host cm-well-ph --format ntriples --file input_file.nt Using the CM-Well Ingester Jar To use the Ingester class, you will need to add the following import statements to your code: import cmwell - tools . data . ingester . Ingester . { IngestFailEvent , IngestSuccessEvent } import cmwell - tools . data . utils . ArgsManipulations . _ import cmwell - tools . data . utils . akka . _ import Implicits._ To ingest data, call the static methods of the cmwell.tools.data.ingester.Ingester class. You can call Ingester.ingest(...) , Ingester.fromInputStream(...) or Ingester.fromPipe(...) , depending on the input object you prefer. See the method definitions in cmwell-downloader/src/main/scala/cmwell/tools/data/ingester/Ingester.scala . Note See Ingesting Each Infoton as an Atomic Operation . Ingesting Each Infoton as an Atomic Operation Each infoton that you add to CM-Well must be ingested in one atomic operation. To ensure this, you must provide all of the infoton's data, including all field values, in a single line of input, terminated by the \\n character. When calling the Ingester jar, you can use the utility class GroupChunker to group infoton data in a single line, using an infoton separator string that you define. Running CM-Well Ingester in Scala REPL Mode You can run CM-Well Ingester in the Scala Interpreter (REPL), so you can examine program internals while running. To do this, run the following command: sbt ingester/console After the console is successfully loaded, the following commands read input from a file and upload it to CM-Well: import cmwell.tools.data.util.akka.Implicits._ import cmwell.tools.data.ingester.streams._ import java.io._ Ingester . fromInputStream ( host = cm-well-ph , format = ntriples , in = new FileInputStream ( input.nt )) The following commands do the same with an InputStream source: val is = new ByteArrayInputStream ( ntriples data... . getBytes ( utf8 )) Ingester . fromInputStream ( host = cm-well-ph , format = ntriples , in = is ) Remember that each infoton's data must be contained within a single line. For example, if an infoton has multiple lines of ntriples data, the string would look like this: val data = | http://example.org/subject-1 http://example.org/predicate#p1 1 ^^ http://www.w3.org/2001/XMLSchema#int . | http://example.org/subject-1 http://example.org/predicate#p2 2 ^^ http://www.w3.org/2001/XMLSchema#int . | http://example.org/subject-1 http://example.org/predicate#p3 3 ^^ http://www.w3.org/2001/XMLSchema#int . | Here is an example of JSON-LD formatted data in a single string: val data = { @id : o:PeterParker , dataCenter : ph , indexTime : 1447839602260 , lastModified : 2015-11-18 T 09 : 40 : 0 1.126 Z , parent : /example.org/Individuals , path : /example.org/Individuals/PeterParker , type : ObjectInfoton , uuid : fae 99 c 4442 f 0 dced 28 a 3e6 d 50159 c 7 c 2 , neighborOf : o:ClarkKent } Implementing Custom Input Sources Instead of providing input from a file or from stdin , you can implement custom input sources (e.g. JDBC, socket...). To do so, you can either use one of the akka.stream.scaladsl.Source methods to create a new custom source, or use one of the methods already provided by Akka within akka.stream.scaladsl.StreamConverters . For example: the method Source.fromPublisher(Props(classOf[CustomActor[T]]) creates a custom source from an actor publisher. Another option is to use source = StreamConverters.fromInputStream(() = in) in order to create an input source from an InputStream, referenced by the in variable. When implementing a custom input source, it's up to the developer to group together data lines which belong to the same infoton (e.g., group together triples that belong to the same infoton). The following lines show how you can create an input source from a given file: import cmwell.tools.data.util.akka._ val source = StreamConverters . fromInputStream ( new FileInputStream ( file )) . via ( Framing . delimiter ( endl , maximumFrameLength = Int . MaxValue , allowTruncation = true )) . via ( GroupChunker ( GroupChunker . formatToGroupExtractor ( ntriples ))) . map ( concatByteStrings ( _ , endl )) // merge lines to a single element . map ( _ . utf8String ) Data chunks are split according to the \\n character. Each frame is converted to a UTF-8 encoded string. Lines related to the same infoton must be grouped together in a single string. You can use the cmwell.tools.data.util.chunkers.GroupChunker class for this purpose. This class's constructor receives a function for grouping the lines. In this case, lines are grouped by having the same subject.","title":"CM-Well Ingester"},{"location":"AdvancedTopics/Tools/Tools.UsingTheCM-WellIngester.html#cm-well-ingester","text":"","title":"CM-Well Ingester"},{"location":"AdvancedTopics/Tools/Tools.UsingTheCM-WellIngester.html#what-is-the-cm-well-ingester","text":"The CM-Well Ingester is a CM-Well utility for uploading infotons to CM-Well in bulk. Using the Ingester, you can upload data from a file, the standard input, or a customized input source. The Ingester processes several upload requests in parallel, up to a configurable limit. The CM-Well Ingester is written in Scala and is packaged as a jar file (Java library). You can call it from a Java or Scala application, or in a command-line environment.","title":"What is the CM-Well Ingester?"},{"location":"AdvancedTopics/Tools/Tools.UsingTheCM-WellIngester.html#downloading-and-compiling-cm-well-source-code","text":"Note To access the CM-Well Git site, you will need a GitHub user. See the CM-Well GitHub Repository . To compile and run CM-Well data tools, you will need Java version 8. To install the Scala Build Tool and download the CM-Well Ingester source code: Go to http://www.scala-sbt.org/download.html and install the Scala Build Tool (SBT) version appropriate for your OS. Add the Scala sbt command to your PATH variable. Download the CM-Well Downloader source code from https://github.com/CM-Well/CM-Well . To build all CM-Well utility executables: Navigate to the root directory of the CM-Well tools source code. It contains a file called build.sbt . Run the following command: sbt app/pack . The resulting shell script executables are created in cmwell-data-tools-app/target/pack/bin folder. To build only the CM-Well Ingester library: Navigate to the the cmwell-ingester directory under the tools root directory. It contains a file called build.sbt . Run the following command: sbt ingester/package . The resulting cmwell-ingester_2.12-1.0.LOCAL.jar file is created in cmwell-data-tools/cmwell-ingester/target/scala-2.12/ .","title":"Downloading and Compiling CM-Well Source Code"},{"location":"AdvancedTopics/Tools/Tools.UsingTheCM-WellIngester.html#running-the-cm-well-ingester-as-an-executable","text":"To run the CM-Well Ingester as a stand-alone executable, run the following command: cm-well-ingester/target/pack/bin/ingester --host HOST --format FORMAT The following table describes the input parameters: Parameter Description -b, --backpressure Maximal number of parallel upload requests (default = 100) -f, --format Format of uploaded data (e.g. ntriples, nquads, jsonld...) -h, --host CM-Well host name -p, --port CM-Well HTTP host port (default = 80) --help Show the usage description --version Show the version number of this program Note To display a description of the ingester parameters, run ingester --help . Usually you will not have to change the backpressure value. But this may become advisable if, for example, you're receiving \"busy\" messages from CM-Well. See Ingesting Each Infoton as an Atomic Operation . Here is an example of how to run the CM-Well Ingester as a stand-alone executable, while taking the input data from a file: cmwell-data-tools-app/target/pack/bin/ingester --host cm-well-ph --format ntriples --file input_file.nt","title":"Running the CM-Well Ingester as an Executable"},{"location":"AdvancedTopics/Tools/Tools.UsingTheCM-WellIngester.html#using-the-cm-well-ingester-jar","text":"To use the Ingester class, you will need to add the following import statements to your code: import cmwell - tools . data . ingester . Ingester . { IngestFailEvent , IngestSuccessEvent } import cmwell - tools . data . utils . ArgsManipulations . _ import cmwell - tools . data . utils . akka . _ import Implicits._ To ingest data, call the static methods of the cmwell.tools.data.ingester.Ingester class. You can call Ingester.ingest(...) , Ingester.fromInputStream(...) or Ingester.fromPipe(...) , depending on the input object you prefer. See the method definitions in cmwell-downloader/src/main/scala/cmwell/tools/data/ingester/Ingester.scala . Note See Ingesting Each Infoton as an Atomic Operation .","title":"Using the CM-Well Ingester Jar"},{"location":"AdvancedTopics/Tools/Tools.UsingTheCM-WellIngester.html#ingesting-each-infoton-as-an-atomic-operation","text":"Each infoton that you add to CM-Well must be ingested in one atomic operation. To ensure this, you must provide all of the infoton's data, including all field values, in a single line of input, terminated by the \\n character. When calling the Ingester jar, you can use the utility class GroupChunker to group infoton data in a single line, using an infoton separator string that you define.","title":"Ingesting Each Infoton as an Atomic Operation"},{"location":"AdvancedTopics/Tools/Tools.UsingTheCM-WellIngester.html#running-cm-well-ingester-in-scala-repl-mode","text":"You can run CM-Well Ingester in the Scala Interpreter (REPL), so you can examine program internals while running. To do this, run the following command: sbt ingester/console After the console is successfully loaded, the following commands read input from a file and upload it to CM-Well: import cmwell.tools.data.util.akka.Implicits._ import cmwell.tools.data.ingester.streams._ import java.io._ Ingester . fromInputStream ( host = cm-well-ph , format = ntriples , in = new FileInputStream ( input.nt )) The following commands do the same with an InputStream source: val is = new ByteArrayInputStream ( ntriples data... . getBytes ( utf8 )) Ingester . fromInputStream ( host = cm-well-ph , format = ntriples , in = is ) Remember that each infoton's data must be contained within a single line. For example, if an infoton has multiple lines of ntriples data, the string would look like this: val data = | http://example.org/subject-1 http://example.org/predicate#p1 1 ^^ http://www.w3.org/2001/XMLSchema#int . | http://example.org/subject-1 http://example.org/predicate#p2 2 ^^ http://www.w3.org/2001/XMLSchema#int . | http://example.org/subject-1 http://example.org/predicate#p3 3 ^^ http://www.w3.org/2001/XMLSchema#int . | Here is an example of JSON-LD formatted data in a single string: val data = { @id : o:PeterParker , dataCenter : ph , indexTime : 1447839602260 , lastModified : 2015-11-18 T 09 : 40 : 0 1.126 Z , parent : /example.org/Individuals , path : /example.org/Individuals/PeterParker , type : ObjectInfoton , uuid : fae 99 c 4442 f 0 dced 28 a 3e6 d 50159 c 7 c 2 , neighborOf : o:ClarkKent }","title":"Running CM-Well Ingester in Scala REPL Mode"},{"location":"AdvancedTopics/Tools/Tools.UsingTheCM-WellIngester.html#implementing-custom-input-sources","text":"Instead of providing input from a file or from stdin , you can implement custom input sources (e.g. JDBC, socket...). To do so, you can either use one of the akka.stream.scaladsl.Source methods to create a new custom source, or use one of the methods already provided by Akka within akka.stream.scaladsl.StreamConverters . For example: the method Source.fromPublisher(Props(classOf[CustomActor[T]]) creates a custom source from an actor publisher. Another option is to use source = StreamConverters.fromInputStream(() = in) in order to create an input source from an InputStream, referenced by the in variable. When implementing a custom input source, it's up to the developer to group together data lines which belong to the same infoton (e.g., group together triples that belong to the same infoton). The following lines show how you can create an input source from a given file: import cmwell.tools.data.util.akka._ val source = StreamConverters . fromInputStream ( new FileInputStream ( file )) . via ( Framing . delimiter ( endl , maximumFrameLength = Int . MaxValue , allowTruncation = true )) . via ( GroupChunker ( GroupChunker . formatToGroupExtractor ( ntriples ))) . map ( concatByteStrings ( _ , endl )) // merge lines to a single element . map ( _ . utf8String ) Data chunks are split according to the \\n character. Each frame is converted to a UTF-8 encoded string. Lines related to the same infoton must be grouped together in a single string. You can use the cmwell.tools.data.util.chunkers.GroupChunker class for this purpose. This class's constructor receives a function for grouping the lines. In this case, lines are grouped by having the same subject.","title":"Implementing Custom Input Sources"},{"location":"AdvancedTopics/Tools/Tools.UsingTheCM-WellSparkConnector.html","text":"CM-Well Spark Connector Introduction Apache Spark is a tool for processing and analyzing big data quickly, efficiently and easily. The two main Spark data structures that the Spark Connector uses are: RDD - Resilient Distributed Dataset. This is a data structure that can be distributed over several machines, using data in memory or in disk storage. An RDD must be tolerant to errors that may occur when accessing one of its partitions. Data Frame - Data stored in a table (two-dimensional matrix) format. The RDD class supports many functions for manipulating data and performing statistical operations such as counting, aggregating, mapping and reducing, grouping, filtering and so on. The CM-Well Spark Connector is an add-on to the Spark engine, which allows you to retrieve infotons by CM-Well query, insert them into an RDD or Data Frame object, and run those objects' processing and analysis functions on the data. To learn more about Spark classes and functions, please visit the Apache Spark web site . Comparison to Other Advanced Query Tools You may be familiar with other special tools for querying and performing statistical analysis on CM-Well data. Here is a brief explanation about when to use each tool. Tool Description stats API The stats API provides access to statistical values from CM-Well's underlying indexing module. The statistics refer to infoton field values, and include metrics such as cardinality, minimum, maximum, average, top frequent terms, and so on (see Query with Data Statistics to learn more). CM-Well maintains inverted-indexes and updates these values in an ongoing manner, so that retrieving them is very fast and doesn't require iterating over infotons. In the interest of performance, use the stats API if you only need one of the basic metrics it supports. SPARQL queries ( _sp endpoint) SPARQL is effective for queries that require graph traversal, i.e. exploring infotons' inbound and outbound links, on a limited portion of the data graph. Use this API to apply SPARQL queries to a particular path in CM-Well. See Apply SPARQL to Query Results to learn more. SPARQL queries on whole graph ( _sparql endpoint) Same as above, except that this endpoint can handle queries on the entire CM-Well graph as opposed to a particular path. See Apply SPARQL to the Entire Graph to learn more. Spark Connector Use the Spark Connector to run statistical queries on all of CM-Well, or on large parts of it. There is no limit (apart from the underlying hardware) on the data size or query complexity that Spark can handle. (As mentioned above, use the stats API if you only need one of the metrics it provides.) System Requirements To run the Spark Connector, you will need a Linux environment and JVM 1.8 . Note An easy way to run the Spark Connector on a non-Linux machine is to install the Docker utility, which provides a virtual Linux environment. Depending on the Spark query you're running and the amount of data, the query may require large amounts of memory. Make sure to configure the JVM correctly to accommodate for the required memory size. The Spark Connector package contains Scala 2.12.4 and Spark 2.1. Downloading and Installing the Spark Connector Coming soon. Running the CM-Well Connector in the Spark Client To run the Spark server and initialize the CM-Well Spark Connector, run the start script in the root directory of the Spark Connector installation (the root directory is named spark-2.1.0-bin-cm-well ). The script runs the Scala interactive shell and initializes the built-in Spark Connector module. You can now run Spark commands in the Scala REPL mode. This is what the Spark Connector Scala shell looks like when you first run it: Here is an example of calling a CMWell object function to create an RDD from an infoton space: The CM-Well Object Interface The CM-Well Spark Connector interface is encapsulated in the CMWell object. All of the object's functions receive a CM-Well URI and optionally a query, and return a Spark RDD or Data Frame object that represent the \"infoton space\" (set of infotons) that matches the path and query. You can then run all the functions that Spark supports for its RDD and DataFrame classes. (See the Spark Programming Guide to learn more.) All CMWell functions take the following parameters: Parameter Description cmWellUrl Mandatory. The CM-Well path from which to take the infotons. qp Optional. A query with which to filter the infotons under cmWellUrl . See CM-Well Query Parameters to learn more about query parameter syntax. infotonLimit Optional. The maximal number of infotons to retrieve (the default is 3000). We recommend using the default during development, then setting the limit to 0 (indicating no limit) for production. Note Currently the Spark Connector assumes correct usage of the CM-Well API (valid URIs, valid query syntax and so on). There are no validity checks or detailed error messages. We recommend using the \"named parameter\" syntax when calling CMWell functions, as follows: infotonUri(cmWellUrl=\" cm-well-host /example.org\", qp=null, infotonLimit=100); . This allows you to provide the parameters in any order, and to omit optional parameters. The following table describes the CMWell object's functions. Function Return Type Description infotonUri(cmWellUrl:String, qp:String=null, infotonLimit:Int=INFOTON_SAFETY_LIMIT_WHEN_PLAYING) RDD[(String, String)] Returns an RDD of string pairs. The first string is the RDF URI of each infoton in the space; the second string is the CM-Well-based URL. infotonNtripleLines(cmWellUrl:String, qp:String=null, infotonLimit:Int=INFOTON_SAFETY_LIMIT_WHEN_PLAYING) RDD[String] Returns an RDD of strings. Each string is a triple in N-Triples format, belonging to an infoton in the infoton space. All triples belonging to the same infoton appear in sequence. infotonNquadsLines(cmWellUrl:String, qp:String=null, infotonLimit:Int=INFOTON_SAFETY_LIMIT_WHEN_PLAYING) RDD[String] As above, but each string is a quad, where the 4th value is the entity's sub-graph label. infotonN3(cmWellUrl:String, qp:String=null, infotonLimit:Int=INFOTON_SAFETY_LIMIT_WHEN_PLAYING) RDD[(String, String)] Returns an RDD of string pairs. The first string is the RDF URI of each infoton in the space; the second string is the N3 representation the infoton. infotonJsonLD(cmWellUrl:String, qp:String=null, infotonLimit:Int=INFOTON_SAFETY_LIMIT_WHEN_PLAYING) RDD[(String, String)] As above but with JSONLD infoton representation. infotonDF(cmWellUrl:String, qp:String=null, infotonLimit:Int=INFOTON_SAFETY_LIMIT_WHEN_PLAYING) DataFrame Returns a DataFrame containing a tabular representation of all infotons in the infoton space. Each row is an infoton and each column is an infoton field. For best results, apply this function to infotons of the same type (with the same fields). If the infotons have different sets of fields, the Connector creates a union of all fields. Calling the Spark Connector from Your Code You can also call the Spark Connector from your own code, then create a jar that you submit and run as a Spark job. To do this: Import the Spark package in your code. ( Note: this must be Spark 2.1 or higher.) Add the cm-well-spark-conn_2.12-2.1.jar (contained in the Spark Connector zip download) to your project. Import the CMWell class. Initialize the Spark session. Call CMWell.wireInSpark(spark:SparkSession). Add Spark analysis code to your project as needed. Submit your job to Spark by using the spark-submit command. Learn more at http://spark.apache.org/docs/latest/submitting-applications.html . Note You will need to include the Spark Connector jar in your project, either by including to it in jar dependencies when submitting the Spark job, or by packaging it in an assembly that you submit to Spark.","title":"CM-Well Spark Connector"},{"location":"AdvancedTopics/Tools/Tools.UsingTheCM-WellSparkConnector.html#cm-well-spark-connector","text":"","title":"CM-Well Spark Connector"},{"location":"AdvancedTopics/Tools/Tools.UsingTheCM-WellSparkConnector.html#introduction","text":"Apache Spark is a tool for processing and analyzing big data quickly, efficiently and easily. The two main Spark data structures that the Spark Connector uses are: RDD - Resilient Distributed Dataset. This is a data structure that can be distributed over several machines, using data in memory or in disk storage. An RDD must be tolerant to errors that may occur when accessing one of its partitions. Data Frame - Data stored in a table (two-dimensional matrix) format. The RDD class supports many functions for manipulating data and performing statistical operations such as counting, aggregating, mapping and reducing, grouping, filtering and so on. The CM-Well Spark Connector is an add-on to the Spark engine, which allows you to retrieve infotons by CM-Well query, insert them into an RDD or Data Frame object, and run those objects' processing and analysis functions on the data. To learn more about Spark classes and functions, please visit the Apache Spark web site .","title":"Introduction"},{"location":"AdvancedTopics/Tools/Tools.UsingTheCM-WellSparkConnector.html#comparison-to-other-advanced-query-tools","text":"You may be familiar with other special tools for querying and performing statistical analysis on CM-Well data. Here is a brief explanation about when to use each tool. Tool Description stats API The stats API provides access to statistical values from CM-Well's underlying indexing module. The statistics refer to infoton field values, and include metrics such as cardinality, minimum, maximum, average, top frequent terms, and so on (see Query with Data Statistics to learn more). CM-Well maintains inverted-indexes and updates these values in an ongoing manner, so that retrieving them is very fast and doesn't require iterating over infotons. In the interest of performance, use the stats API if you only need one of the basic metrics it supports. SPARQL queries ( _sp endpoint) SPARQL is effective for queries that require graph traversal, i.e. exploring infotons' inbound and outbound links, on a limited portion of the data graph. Use this API to apply SPARQL queries to a particular path in CM-Well. See Apply SPARQL to Query Results to learn more. SPARQL queries on whole graph ( _sparql endpoint) Same as above, except that this endpoint can handle queries on the entire CM-Well graph as opposed to a particular path. See Apply SPARQL to the Entire Graph to learn more. Spark Connector Use the Spark Connector to run statistical queries on all of CM-Well, or on large parts of it. There is no limit (apart from the underlying hardware) on the data size or query complexity that Spark can handle. (As mentioned above, use the stats API if you only need one of the metrics it provides.)","title":"Comparison to Other Advanced Query Tools"},{"location":"AdvancedTopics/Tools/Tools.UsingTheCM-WellSparkConnector.html#system-requirements","text":"To run the Spark Connector, you will need a Linux environment and JVM 1.8 . Note An easy way to run the Spark Connector on a non-Linux machine is to install the Docker utility, which provides a virtual Linux environment. Depending on the Spark query you're running and the amount of data, the query may require large amounts of memory. Make sure to configure the JVM correctly to accommodate for the required memory size. The Spark Connector package contains Scala 2.12.4 and Spark 2.1.","title":"System Requirements"},{"location":"AdvancedTopics/Tools/Tools.UsingTheCM-WellSparkConnector.html#downloading-and-installing-the-spark-connector","text":"Coming soon.","title":"Downloading and Installing the Spark Connector"},{"location":"AdvancedTopics/Tools/Tools.UsingTheCM-WellSparkConnector.html#running-the-cm-well-connector-in-the-spark-client","text":"To run the Spark server and initialize the CM-Well Spark Connector, run the start script in the root directory of the Spark Connector installation (the root directory is named spark-2.1.0-bin-cm-well ). The script runs the Scala interactive shell and initializes the built-in Spark Connector module. You can now run Spark commands in the Scala REPL mode. This is what the Spark Connector Scala shell looks like when you first run it: Here is an example of calling a CMWell object function to create an RDD from an infoton space:","title":"Running the CM-Well Connector in the Spark Client"},{"location":"AdvancedTopics/Tools/Tools.UsingTheCM-WellSparkConnector.html#the-cm-well-object-interface","text":"The CM-Well Spark Connector interface is encapsulated in the CMWell object. All of the object's functions receive a CM-Well URI and optionally a query, and return a Spark RDD or Data Frame object that represent the \"infoton space\" (set of infotons) that matches the path and query. You can then run all the functions that Spark supports for its RDD and DataFrame classes. (See the Spark Programming Guide to learn more.) All CMWell functions take the following parameters: Parameter Description cmWellUrl Mandatory. The CM-Well path from which to take the infotons. qp Optional. A query with which to filter the infotons under cmWellUrl . See CM-Well Query Parameters to learn more about query parameter syntax. infotonLimit Optional. The maximal number of infotons to retrieve (the default is 3000). We recommend using the default during development, then setting the limit to 0 (indicating no limit) for production. Note Currently the Spark Connector assumes correct usage of the CM-Well API (valid URIs, valid query syntax and so on). There are no validity checks or detailed error messages. We recommend using the \"named parameter\" syntax when calling CMWell functions, as follows: infotonUri(cmWellUrl=\" cm-well-host /example.org\", qp=null, infotonLimit=100); . This allows you to provide the parameters in any order, and to omit optional parameters. The following table describes the CMWell object's functions. Function Return Type Description infotonUri(cmWellUrl:String, qp:String=null, infotonLimit:Int=INFOTON_SAFETY_LIMIT_WHEN_PLAYING) RDD[(String, String)] Returns an RDD of string pairs. The first string is the RDF URI of each infoton in the space; the second string is the CM-Well-based URL. infotonNtripleLines(cmWellUrl:String, qp:String=null, infotonLimit:Int=INFOTON_SAFETY_LIMIT_WHEN_PLAYING) RDD[String] Returns an RDD of strings. Each string is a triple in N-Triples format, belonging to an infoton in the infoton space. All triples belonging to the same infoton appear in sequence. infotonNquadsLines(cmWellUrl:String, qp:String=null, infotonLimit:Int=INFOTON_SAFETY_LIMIT_WHEN_PLAYING) RDD[String] As above, but each string is a quad, where the 4th value is the entity's sub-graph label. infotonN3(cmWellUrl:String, qp:String=null, infotonLimit:Int=INFOTON_SAFETY_LIMIT_WHEN_PLAYING) RDD[(String, String)] Returns an RDD of string pairs. The first string is the RDF URI of each infoton in the space; the second string is the N3 representation the infoton. infotonJsonLD(cmWellUrl:String, qp:String=null, infotonLimit:Int=INFOTON_SAFETY_LIMIT_WHEN_PLAYING) RDD[(String, String)] As above but with JSONLD infoton representation. infotonDF(cmWellUrl:String, qp:String=null, infotonLimit:Int=INFOTON_SAFETY_LIMIT_WHEN_PLAYING) DataFrame Returns a DataFrame containing a tabular representation of all infotons in the infoton space. Each row is an infoton and each column is an infoton field. For best results, apply this function to infotons of the same type (with the same fields). If the infotons have different sets of fields, the Connector creates a union of all fields.","title":"The CM-Well Object Interface"},{"location":"AdvancedTopics/Tools/Tools.UsingTheCM-WellSparkConnector.html#calling-the-spark-connector-from-your-code","text":"You can also call the Spark Connector from your own code, then create a jar that you submit and run as a Spark job. To do this: Import the Spark package in your code. ( Note: this must be Spark 2.1 or higher.) Add the cm-well-spark-conn_2.12-2.1.jar (contained in the Spark Connector zip download) to your project. Import the CMWell class. Initialize the Spark session. Call CMWell.wireInSpark(spark:SparkSession). Add Spark analysis code to your project as needed. Submit your job to Spark by using the spark-submit command. Learn more at http://spark.apache.org/docs/latest/submitting-applications.html . Note You will need to include the Spark Connector jar in your project, either by including to it in jar dependencies when submitting the Spark job, or by packaging it in an assembly that you submit to Spark.","title":"Calling the Spark Connector from Your Code"},{"location":"AdvancedTopics/Tools/Tools.UsingTheSPARQLTriggerProcessor.html","text":"SPARQL Trigger Processor What is the SPARQL Trigger Processor? The SPARQL Trigger Processor is a CM-Well agent for running SPARQL queries and constructs periodically, for the purposes of creating materialized views of CM-Well infotons. A materialized view is a \"flattened\" version of data whose original source included high levels of pointer redirection before arriving at data. (The materialized view may also be enriched with data from other infotons.) The SPARQL Trigger Processor creates one or more sensors . Each sensor periodically runs a query on a specified path in CM-Well, to detect changes to infotons under that path that have changed since the previous query. When changes are detected, the sensor reads the changed infotons and creates the resulting materialized views. You configure both the change path and query and the SPARQL query that creates the materialized view. You define the SPARQL Trigger Processor's input and output by editing a YAML-formatted configuration file . Note The SPARQL Trigger Processor also exists an external utility that you can run as a stand-alone executable. This page describes the SPARQL Trigger Processor integrated agent that runs within CM-Well. All you need to do in order to activate the agent for your materialized view is to define and upload the appropriate YAML configuration file. See Using SPARQL on CM-Well Infotons to learn more about SPARQL queries. Creating the YAML Configuration File The SPARQL Trigger Processor's configuration file is in YAML format. It contains: A query for detecting changes in specified infotons and collecting data to process. A SPARQL query for processing the collected data and creating the materialized view. The following table describes the parameters that you can configure in the YAML file: Parameter Description name An informative name for this configuration. This should describe the materialized view you're creating. sensors In the sensors parameter, you can define one or more \"sensors\", that detect changes in fields that you define. For example, you may want to test for changes to organizations' names, then process those organizations whose names have changed. Multiple sensors are defined in the YAML list syntax (prefixed with a '-' character). sensors/name An informative name for the sensor, used in SPARQL Trigger Processor logs. sensors/path The path in CM-Well under which the sensor checks for changes. sensors/qp The query that the sensor runs to detect changes. sensors/fromIndexTime Optional . The Triggered Processor only looks at updates that were made after fromIndexTime . sensors/token Optional . A state token that indicates the time from which the sensor should start searching. You can use token as an alternative to fromIndexTime . sensors/sparqlToRoot Optional . A SPARQL query that operates on the output of the qp query. You can use this query to travel upward from a changed node to the affected entity, for which you want to create a materialized view. sparqlMaterializer A SPARQL query that processes the input data and constructs the materialized view. updateFreq The SPARQL processor runs on data that's been updated since the time defined in fromIndexTime , and until the present time. Then it pauses for the amount of time defined in updateFreq , then it runs again until it processes all new updates, and so on. The updateFreq value is formatted like a Scala Duration object (\\ timeUnit> + '.' + \\ unitNumber>). hostUpdatesSource Optional. The CM-Well host from which to read the infotons whose materialized view we're creating. If this parameter isn't defined, by default infotons are read from the host on which the STP is running. Note Make sure to indent the file correctly, according to YAML syntax rules. Here is a (truncated) example of the YAML configuration file: updateFreq : 1.minute name : MyMaterializedView hostUpdatesSource : cm-well.myhost.com active : true sensors : - name : organization path : /data.com qp : type.rdf:http://oa.schemas.tfn.thomson.com/Organization/2010-05-01/OrganizationName fromIndexTime : 0 token : pAB6eJxVyzsOwjAQANHL0GY_hhApHQ1lOMP sparqlToRoot : | PATHS /data.com/2-%PID%?yg= organizationName.oa with-data length=1000 SPARQL PREFIX oa: http://oa.schemas.tfn.thomson.com/Organization/2010-05-01/ SELECT DISTINCT ?orgId WHERE { ?orgId oa:organizationName ?orgName . } sparqlMaterializer : | PATHS /data.com/1-%PID%?xg yg= identifierEntityId.metadata length=1000 /data.com/1-%PID%?yg= relatedFromEntityId.metadata| relatedToEntityId.metadata /data.com/?op=search qp=relatedFromEntityId.metadata:1-%PID%,relatedToEntityType.metadata:Geography length=1000 with-data=true yg= relatedToEntityId.metadata identifierEntityId.metadata /data.com/?op=search qp=relationObjectId.metadata-new:1-%PID%,relationshipTypeId.metadata-new:310017 yg= relatedObjectId.metadata-new relationObjectId.metadata-new with-data /data.com/1-%PID%?yg= relatedObjectId.metadata-new[relationshipTypeId.metadata-new:310077] relationObjectId.metadata-new relatedFromEntityId.metadata[relationshipTypeCode.metadata:TRBCChildOf] relatedToEntityId.metadata relatedFromEntityId.metadata[relationshipTypeCode.metadata:TRBCChildOf] SPARQL prefix tr-org: http://permid.org/ontology/organization/ prefix owl: http://www.w3.org/2002/07/owl# prefix rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns# prefix oa: http://oa.schemas.tfn.thomson.com/Organization/2010-05-01/ prefix data: http://data.com/ prefix vcard: http://www.w3.org/2006/vcard/ns# prefix xsd: http://www.w3.org/2001/XMLSchema# prefix ont: http://ont.thomsonreuters.com/ prefix tr-common: http://permid.org/ontology/common/ prefix md: http://data.schemas.financial.thomsonreuters.com/metadata/2009-09-01/ CONSTRUCT { ?permId rdf:type tr-org:Organization . ?permId owl:sameAs ?cmpUri . ?permId vcard:hasURL ?url . ?permId tr-org:hasIPODate ?ipoDate . ?permId tr-org:hasOrganizationType ?optype . ?permId tr-org:hasActivityStatus ?statusOntologyTerm . ?permId ?foundedPredicate ?foundedDate . ?permId tr-org:hasHoldingClassification ?holding . ?permId tr-org:hasInactiveDate ?inactiveDate . ?permId tr-common:hasPermId ?permIdNumeric . ?permId tr-org:hasSubTypeCode ?subTypeCode . ?permId tr-org:isVerified ?verified . ?permId tr-org:isManaged ?isManaged . } WHERE { BIND(data:1-%PID% as ?cmpUri ) . ?cmpUri rdf:type oa:Organization . BIND(URI(REPLACE(STR(?cmpUri), data.com , permid.org )) as ?permId) . ?cmpUri ont:permId ?permIdNumeric . ?cmpUri oa:isOrganizationManaged ?isManaged . ... Querying for Multiple Parameters in the sparqlToRoot Query In the sparqlToRoot SPARQL query defined in the STP sensor configuration, you can query for multiple parameters in the SELECT command. STP forwards the [key, value] pairs yielded by the sparqlToRoot query to the _sp materialization invocation as parameters. For example, the sparqlToRoot query could include the following SELECT command: SELECT ? languge , ? orgId , ? country WHERE { \u2026 } Let\u2019s say that for a certain path, the results were language=Japanese, orgId=613, country=Japan . Then the _sp invocation for materialization will be with the following query parameters: /_sp?sp.language=Japanese sp.orgId=613 sp.country=Japan The sparqlMaterializer query might also include those variables in the body of the SPARQL CONSTRUCT request, like so: \u2026 WHERE { ? cmpUri ont : locatedIn % country % ; ont : speaksLanguage % language % . } ... Controlling the SPARQL Trigger Processor Job Activating and Deactivating the Job When you have created the YAML configuration file and are ready to apply it, you upload it to CM-Well at meta/sys/agents/sparql/ configName , where the containing folder name \\ configName\\ is a unique name that describes your configuration. Note You will need special permissions to upload a file to the meta/sys folder. Here is an example of a command that uploads a SPARQL configuration file: curl -X POST cm-well-host /meta/sys/agents/sparql/MyCompanyMaterializedView -H X-CM-WELL-TYPE: FILE -H Content-Type: text/yaml --data-binary @my-config.yaml -H X-CM-WELL-TOKEN: accessToken Uploading the configuration file causes CM-Well to read the file and run the SPARQL Trigger Processor agent on it. CM-Well polls periodically for changes to this file and applies the changes when they're detected. If you want to stop the job and delete its configuration permanently, delete the configuration location, for example: curl -X DELETE cm-well-host /meta/sys/agents/sparql/MyCompanyMaterializedView Note The job will end gracefully even without pausing it before deleting the configuration location. Pausing and Restarting the Job You can pause and restart the SPARQL job by changing a Boolean value under your configuration folder. If this flag doesn't exist, its default value is true . To temporarily pause and restart the SPARQL job, you can toggle the value of this flag as follows. Pause the job: curl cm-well-host /_in?format=ntriples replace-mode -H X-CM-WELL-TOKEN: accessToken --data-binary cmwell://meta/sys/agents/sparql/MyCompanyMaterializedView cmwell://meta/nn#active \\ false\\ ^^ http://www.w3.org/2001/XMLSchema#boolean . Note When you pause the SPARQL job, the last processed position is saved, and when you restart the job it resumes from the same position. Restart the job: curl cm-well-host /_in?format=ntriples replace-mode -H X-CM-WELL-TOKEN: accessToken --data-binary cmwell://meta/sys/agents/sparql/MyCompanyMaterializedView cmwell://meta/nn#active \\ true\\ ^^ http://www.w3.org/2001/XMLSchema#boolean . The SPARQL Trigger Processor Monitoring Page In the SPARQL Trigger Processor monitoring page, you can view the status and processing metrics of all SPARQL agent jobs. To see the monitoring page, browse to proc/stp.md on the CM-Well host machine. These are the details displayed in the table for each sensor: Detail | Description |:------|:----------- Sensor | The sensor's name Token Time | The point in time that the sensor is currently processing Received Infotons | The number of changed infotons that the sensor detected Infoton Rate | The number of infotons that the sensor is processing per second. Statistics Updated | The time that the sensor made its latest update. DEPRECATED: Downloading and Compiling CM-Well Data Tools Note To access the CM-Well Git site, you will need a GitHub user. See the CM-Well GitHub Repository . To compile and run CM-Well data tools, you will need Java version 8. To download and compile the CM-Well Data Tools source code: Go to http://www.scala-sbt.org/download.html and install the Scala Build Tool (SBT) version appropriate for your OS. Add the Scala sbt command to your PATH variable. Perform a Git clone of the CM-Well Data Tools source code from https://github.com/CM-Well/CM-Well . Navigate to the cm-well/cmwell-data-tools/tree/master folder. It contains a file called build.sbt . Run the following command: sbt app/pack . The resulting script executables are created in the cmwell-data-tools-app/target/pack/bin folder. Note To compile and run the CM-Well data tools, you will need Java version 8. DEPRECATED: Running the SPARQL Trigger Processor Utility You can still run the SPARQL Trigger Processor as a stand-alone executable. To run the SPARQL Trigger Processor, run cmwell-data-tools\\cmwell-data-tools-app\\target\\pack\\bin\\sparql-processor-agent on a Unix machine or cmwell-data-tools\\cmwell-data-tools-app\\target\\pack\\bin\\sparql-processor-agent.bat on a Windows machine. Example: cmwell-data-tools-app/target/pack/bin/sparql-processor-agent --source-host cm-well-prod.int.thomsonreuters.com --config sensors.yaml --state state.dat --bulk The following table describes the SPARQL Trigger Processor's input parameters: Parameter Description -b, --bulk Use the bulk-consumer mode for download -c, --config The path to the sensor configuration file -s, --source-host The source CM-Well host server, from which data is read -i, --ingest A flag that indicates whether to ingest the processed data to a CM-Well instance -d, --dest-host If ingest is indicated, the -d parameter defines the destination CM-Well instance, to which the processed data is written. --state A path to the token file that encodes the consume state for all sensors. To save the token file the first time you run the Triggered Processor, provide a path to the file. The Triggered Processor writes new state tokens to this file as chunks are consumed. To start the processing where you left off, you can use the state file saved from a previous run of the agent as input the next time you run it. -w, --write-token The CM-Well write permission token --help Show the help message --version Show the version of this application Note To display a description of the SPARQL Trigger Processor parameters, run sparql-processor-agent --help . There are 3 ways you can provide a start time for the sensor queries. In descending order of precendence, these are: The token file provided as the tool's state parameter. The sensors/token parameter in the YAML configuration file. The sensors/fromIndexTime parameter in the YAML configuration file.","title":"SPARQL Trigger Processor"},{"location":"AdvancedTopics/Tools/Tools.UsingTheSPARQLTriggerProcessor.html#sparql-trigger-processor","text":"","title":"SPARQL Trigger Processor"},{"location":"AdvancedTopics/Tools/Tools.UsingTheSPARQLTriggerProcessor.html#what-is-the-sparql-trigger-processor","text":"The SPARQL Trigger Processor is a CM-Well agent for running SPARQL queries and constructs periodically, for the purposes of creating materialized views of CM-Well infotons. A materialized view is a \"flattened\" version of data whose original source included high levels of pointer redirection before arriving at data. (The materialized view may also be enriched with data from other infotons.) The SPARQL Trigger Processor creates one or more sensors . Each sensor periodically runs a query on a specified path in CM-Well, to detect changes to infotons under that path that have changed since the previous query. When changes are detected, the sensor reads the changed infotons and creates the resulting materialized views. You configure both the change path and query and the SPARQL query that creates the materialized view. You define the SPARQL Trigger Processor's input and output by editing a YAML-formatted configuration file . Note The SPARQL Trigger Processor also exists an external utility that you can run as a stand-alone executable. This page describes the SPARQL Trigger Processor integrated agent that runs within CM-Well. All you need to do in order to activate the agent for your materialized view is to define and upload the appropriate YAML configuration file. See Using SPARQL on CM-Well Infotons to learn more about SPARQL queries.","title":"What is the SPARQL Trigger Processor?"},{"location":"AdvancedTopics/Tools/Tools.UsingTheSPARQLTriggerProcessor.html#creating-the-yaml-configuration-file","text":"The SPARQL Trigger Processor's configuration file is in YAML format. It contains: A query for detecting changes in specified infotons and collecting data to process. A SPARQL query for processing the collected data and creating the materialized view. The following table describes the parameters that you can configure in the YAML file: Parameter Description name An informative name for this configuration. This should describe the materialized view you're creating. sensors In the sensors parameter, you can define one or more \"sensors\", that detect changes in fields that you define. For example, you may want to test for changes to organizations' names, then process those organizations whose names have changed. Multiple sensors are defined in the YAML list syntax (prefixed with a '-' character). sensors/name An informative name for the sensor, used in SPARQL Trigger Processor logs. sensors/path The path in CM-Well under which the sensor checks for changes. sensors/qp The query that the sensor runs to detect changes. sensors/fromIndexTime Optional . The Triggered Processor only looks at updates that were made after fromIndexTime . sensors/token Optional . A state token that indicates the time from which the sensor should start searching. You can use token as an alternative to fromIndexTime . sensors/sparqlToRoot Optional . A SPARQL query that operates on the output of the qp query. You can use this query to travel upward from a changed node to the affected entity, for which you want to create a materialized view. sparqlMaterializer A SPARQL query that processes the input data and constructs the materialized view. updateFreq The SPARQL processor runs on data that's been updated since the time defined in fromIndexTime , and until the present time. Then it pauses for the amount of time defined in updateFreq , then it runs again until it processes all new updates, and so on. The updateFreq value is formatted like a Scala Duration object (\\ timeUnit> + '.' + \\ unitNumber>). hostUpdatesSource Optional. The CM-Well host from which to read the infotons whose materialized view we're creating. If this parameter isn't defined, by default infotons are read from the host on which the STP is running. Note Make sure to indent the file correctly, according to YAML syntax rules. Here is a (truncated) example of the YAML configuration file: updateFreq : 1.minute name : MyMaterializedView hostUpdatesSource : cm-well.myhost.com active : true sensors : - name : organization path : /data.com qp : type.rdf:http://oa.schemas.tfn.thomson.com/Organization/2010-05-01/OrganizationName fromIndexTime : 0 token : pAB6eJxVyzsOwjAQANHL0GY_hhApHQ1lOMP sparqlToRoot : | PATHS /data.com/2-%PID%?yg= organizationName.oa with-data length=1000 SPARQL PREFIX oa: http://oa.schemas.tfn.thomson.com/Organization/2010-05-01/ SELECT DISTINCT ?orgId WHERE { ?orgId oa:organizationName ?orgName . } sparqlMaterializer : | PATHS /data.com/1-%PID%?xg yg= identifierEntityId.metadata length=1000 /data.com/1-%PID%?yg= relatedFromEntityId.metadata| relatedToEntityId.metadata /data.com/?op=search qp=relatedFromEntityId.metadata:1-%PID%,relatedToEntityType.metadata:Geography length=1000 with-data=true yg= relatedToEntityId.metadata identifierEntityId.metadata /data.com/?op=search qp=relationObjectId.metadata-new:1-%PID%,relationshipTypeId.metadata-new:310017 yg= relatedObjectId.metadata-new relationObjectId.metadata-new with-data /data.com/1-%PID%?yg= relatedObjectId.metadata-new[relationshipTypeId.metadata-new:310077] relationObjectId.metadata-new relatedFromEntityId.metadata[relationshipTypeCode.metadata:TRBCChildOf] relatedToEntityId.metadata relatedFromEntityId.metadata[relationshipTypeCode.metadata:TRBCChildOf] SPARQL prefix tr-org: http://permid.org/ontology/organization/ prefix owl: http://www.w3.org/2002/07/owl# prefix rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns# prefix oa: http://oa.schemas.tfn.thomson.com/Organization/2010-05-01/ prefix data: http://data.com/ prefix vcard: http://www.w3.org/2006/vcard/ns# prefix xsd: http://www.w3.org/2001/XMLSchema# prefix ont: http://ont.thomsonreuters.com/ prefix tr-common: http://permid.org/ontology/common/ prefix md: http://data.schemas.financial.thomsonreuters.com/metadata/2009-09-01/ CONSTRUCT { ?permId rdf:type tr-org:Organization . ?permId owl:sameAs ?cmpUri . ?permId vcard:hasURL ?url . ?permId tr-org:hasIPODate ?ipoDate . ?permId tr-org:hasOrganizationType ?optype . ?permId tr-org:hasActivityStatus ?statusOntologyTerm . ?permId ?foundedPredicate ?foundedDate . ?permId tr-org:hasHoldingClassification ?holding . ?permId tr-org:hasInactiveDate ?inactiveDate . ?permId tr-common:hasPermId ?permIdNumeric . ?permId tr-org:hasSubTypeCode ?subTypeCode . ?permId tr-org:isVerified ?verified . ?permId tr-org:isManaged ?isManaged . } WHERE { BIND(data:1-%PID% as ?cmpUri ) . ?cmpUri rdf:type oa:Organization . BIND(URI(REPLACE(STR(?cmpUri), data.com , permid.org )) as ?permId) . ?cmpUri ont:permId ?permIdNumeric . ?cmpUri oa:isOrganizationManaged ?isManaged . ...","title":"Creating the YAML Configuration File"},{"location":"AdvancedTopics/Tools/Tools.UsingTheSPARQLTriggerProcessor.html#querying-for-multiple-parameters-in-the-sparqltoroot-query","text":"In the sparqlToRoot SPARQL query defined in the STP sensor configuration, you can query for multiple parameters in the SELECT command. STP forwards the [key, value] pairs yielded by the sparqlToRoot query to the _sp materialization invocation as parameters. For example, the sparqlToRoot query could include the following SELECT command: SELECT ? languge , ? orgId , ? country WHERE { \u2026 } Let\u2019s say that for a certain path, the results were language=Japanese, orgId=613, country=Japan . Then the _sp invocation for materialization will be with the following query parameters: /_sp?sp.language=Japanese sp.orgId=613 sp.country=Japan The sparqlMaterializer query might also include those variables in the body of the SPARQL CONSTRUCT request, like so: \u2026 WHERE { ? cmpUri ont : locatedIn % country % ; ont : speaksLanguage % language % . } ...","title":"Querying for Multiple Parameters in the sparqlToRoot Query"},{"location":"AdvancedTopics/Tools/Tools.UsingTheSPARQLTriggerProcessor.html#controlling-the-sparql-trigger-processor-job","text":"","title":"Controlling the SPARQL Trigger Processor Job"},{"location":"AdvancedTopics/Tools/Tools.UsingTheSPARQLTriggerProcessor.html#activating-and-deactivating-the-job","text":"When you have created the YAML configuration file and are ready to apply it, you upload it to CM-Well at meta/sys/agents/sparql/ configName , where the containing folder name \\ configName\\ is a unique name that describes your configuration. Note You will need special permissions to upload a file to the meta/sys folder. Here is an example of a command that uploads a SPARQL configuration file: curl -X POST cm-well-host /meta/sys/agents/sparql/MyCompanyMaterializedView -H X-CM-WELL-TYPE: FILE -H Content-Type: text/yaml --data-binary @my-config.yaml -H X-CM-WELL-TOKEN: accessToken Uploading the configuration file causes CM-Well to read the file and run the SPARQL Trigger Processor agent on it. CM-Well polls periodically for changes to this file and applies the changes when they're detected. If you want to stop the job and delete its configuration permanently, delete the configuration location, for example: curl -X DELETE cm-well-host /meta/sys/agents/sparql/MyCompanyMaterializedView Note The job will end gracefully even without pausing it before deleting the configuration location.","title":"Activating and Deactivating the Job"},{"location":"AdvancedTopics/Tools/Tools.UsingTheSPARQLTriggerProcessor.html#pausing-and-restarting-the-job","text":"You can pause and restart the SPARQL job by changing a Boolean value under your configuration folder. If this flag doesn't exist, its default value is true . To temporarily pause and restart the SPARQL job, you can toggle the value of this flag as follows. Pause the job: curl cm-well-host /_in?format=ntriples replace-mode -H X-CM-WELL-TOKEN: accessToken --data-binary cmwell://meta/sys/agents/sparql/MyCompanyMaterializedView cmwell://meta/nn#active \\ false\\ ^^ http://www.w3.org/2001/XMLSchema#boolean . Note When you pause the SPARQL job, the last processed position is saved, and when you restart the job it resumes from the same position. Restart the job: curl cm-well-host /_in?format=ntriples replace-mode -H X-CM-WELL-TOKEN: accessToken --data-binary cmwell://meta/sys/agents/sparql/MyCompanyMaterializedView cmwell://meta/nn#active \\ true\\ ^^ http://www.w3.org/2001/XMLSchema#boolean .","title":"Pausing and Restarting the Job"},{"location":"AdvancedTopics/Tools/Tools.UsingTheSPARQLTriggerProcessor.html#the-sparql-trigger-processor-monitoring-page","text":"In the SPARQL Trigger Processor monitoring page, you can view the status and processing metrics of all SPARQL agent jobs. To see the monitoring page, browse to proc/stp.md on the CM-Well host machine. These are the details displayed in the table for each sensor: Detail | Description |:------|:----------- Sensor | The sensor's name Token Time | The point in time that the sensor is currently processing Received Infotons | The number of changed infotons that the sensor detected Infoton Rate | The number of infotons that the sensor is processing per second. Statistics Updated | The time that the sensor made its latest update.","title":"The SPARQL Trigger Processor Monitoring Page"},{"location":"AdvancedTopics/Tools/Tools.UsingTheSPARQLTriggerProcessor.html#deprecated-downloading-and-compiling-cm-well-data-tools","text":"Note To access the CM-Well Git site, you will need a GitHub user. See the CM-Well GitHub Repository . To compile and run CM-Well data tools, you will need Java version 8. To download and compile the CM-Well Data Tools source code: Go to http://www.scala-sbt.org/download.html and install the Scala Build Tool (SBT) version appropriate for your OS. Add the Scala sbt command to your PATH variable. Perform a Git clone of the CM-Well Data Tools source code from https://github.com/CM-Well/CM-Well . Navigate to the cm-well/cmwell-data-tools/tree/master folder. It contains a file called build.sbt . Run the following command: sbt app/pack . The resulting script executables are created in the cmwell-data-tools-app/target/pack/bin folder. Note To compile and run the CM-Well data tools, you will need Java version 8.","title":"DEPRECATED: Downloading and Compiling CM-Well Data Tools"},{"location":"AdvancedTopics/Tools/Tools.UsingTheSPARQLTriggerProcessor.html#deprecated-running-the-sparql-trigger-processor-utility","text":"You can still run the SPARQL Trigger Processor as a stand-alone executable. To run the SPARQL Trigger Processor, run cmwell-data-tools\\cmwell-data-tools-app\\target\\pack\\bin\\sparql-processor-agent on a Unix machine or cmwell-data-tools\\cmwell-data-tools-app\\target\\pack\\bin\\sparql-processor-agent.bat on a Windows machine. Example: cmwell-data-tools-app/target/pack/bin/sparql-processor-agent --source-host cm-well-prod.int.thomsonreuters.com --config sensors.yaml --state state.dat --bulk The following table describes the SPARQL Trigger Processor's input parameters: Parameter Description -b, --bulk Use the bulk-consumer mode for download -c, --config The path to the sensor configuration file -s, --source-host The source CM-Well host server, from which data is read -i, --ingest A flag that indicates whether to ingest the processed data to a CM-Well instance -d, --dest-host If ingest is indicated, the -d parameter defines the destination CM-Well instance, to which the processed data is written. --state A path to the token file that encodes the consume state for all sensors. To save the token file the first time you run the Triggered Processor, provide a path to the file. The Triggered Processor writes new state tokens to this file as chunks are consumed. To start the processing where you left off, you can use the state file saved from a previous run of the agent as input the next time you run it. -w, --write-token The CM-Well write permission token --help Show the help message --version Show the version of this application Note To display a description of the SPARQL Trigger Processor parameters, run sparql-processor-agent --help . There are 3 ways you can provide a start time for the sensor queries. In descending order of precendence, these are: The token file provided as the tool's state parameter. The sensors/token parameter in the YAML configuration file. The sensors/fromIndexTime parameter in the YAML configuration file.","title":"DEPRECATED: Running the SPARQL Trigger Processor Utility"},{"location":"DeveloperGuide/DevGuide.AdvancedQueries.html","text":"Advanced Queries AND, OR and NOT Clauses When querying for field values, you are not limited to one field. You can query for infotons that match constraints on several field values. Although CM-Well queries do not support operators named AND, OR and NOT, they do support different syntax for implementing the same functionality as these logical operators, as describes below. Note You can group clauses in [ ] brackets, and apply * and - operators to the entire group. Brackets may also be nested. Field Lists as AND Clauses To specify several field values as search filters, add all the name-value pairs to the query parameters, separating them with commas. For example, to find companies in Open PermID with addresses in Rochester, NY, you could use the following query: cm-well-host /permid.org/?op=search qp=organizationCity.mdaas:Rochester,organizationStateProvince.mdaas:New%20York This will return organizations that are located both in a city named Rochester, and in the state of New York. Providing a comma-separated list of field value conditions has the same effect as putting an AND operator between conditions in Boolean logical syntax. Optional Fields for OR Clauses CM-Well query syntax does not support an \"OR\" operator, but instead it supports the * operator to indicate that a condition is optional. This allows you to effectively implement an OR operation. Let's see how. For example, to search for companies that have an address in Rochester, NY, and optionally have an address in Las Vegas, NV, you can use this query: cm-well-host /permid.org/?op=search qp=[organizationCity.mdaas:Rochester,organizationStateProvince.mdaas:New%20York],*[organizationCity.mdaas:Las%20Vegas,organizationStateProvince.mdaas:Nevada] Tip You can surround a list of conditions with square brackets [ ... ] , so they can be defined as mandatory or optional as a group. The query above has two groups of parameters, one for Rochester, the other for Las Vegas. The group for Las Vegas is preceded by the * symbol, to mark it as optional. The group for Rochester is mandatory. This query returns all organizations that have an address in Rochester NY, and also those that have an address both in Rochester NY and in Las Vegas NV. This yields 2279 results. If we make the Rochester address optional, and Las Vegas mandatory, the query looks like this: cm-well-host /permid.org/?op=search qp=*[organizationCity.mdaas:Rochester,organizationStateProvince.mdaas:New%20York], [organizationCity.mdaas:Las%20Vegas,organizationStateProvince.mdaas:Nevada] Now the query returns all organizations that have an address in Las Vegas NV, and also those that have an address both in Rochester NY and in Las Vegas NV. This yields 8019 results. If we make both conditions optional, the query looks like this: cm-well-host /permid.org/?op=search qp=*[organizationCity.mdaas:Rochester,organizationStateProvince.mdaas:New%20York],*[organizationCity.mdaas:Las%20Vegas,organizationStateProvince.mdaas:Nevada] This query returns all organizations that have an address either in Las Vegas NV or in Rochester NY. This yields 10297 results. You may have noticed that the sum of the previous queries' results count is 2279 + 8019 = 10298, one more than 10297. This is because there is one organization that has an address both in Las Vegas NV and in Rochester NY, creating an overlap of 1 item in the previous queries' results. Note Although we have described the * operator as an \"optional\" operator, this is not strictly accurate. The query above will return any infoton that meets one of the criteria, but it must meet at least one criterion. Infotons that don't meet any of the criteria are not returned. Therefore when all clauses at the same nesting level are marked as optional, they perform just like an OR clause. \"-\" Operator for NOT Clauses Preceding a field condition with the - character creates a NOT condition; that is, results that meet the condition are filtered out. For example, the following query returns all organizations that have an address in New York state, but not in the city of Rochester: cm-well-host /permid.org?op=search qp=organizationStateProvince.mdaas:New%20York,-[organizationCity.mdaas:Rochester] The - operator can be also used to test for the non existence of a field. For example, the following query returns all organizations that have a province of New York but no city defined: cm-well-host /permid.org?op=search qp=organizationStateProvince.mdaas:New%20York,-organizationCity.mdaas: String-Matching Logic Partial Matches All of the queries we\u2019ve defined up to this point return results whose field values contain the query value as a sub-string. These are know as partial matches . For example, let's try searching for the name string \"Thomson Corp\" as follows: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Thomson%20Corp,type.rdf:Organization This returns several results whose CommonName field contains \"Thomson Corp\" as a sub-string. This includes \"Thomson Corp\", \"Thomson Corp Delaware, Inc.\", \"Thomson Corp Medical Education\", \"Standard Thomson Corp\" and so on. Exact Matches Suppose you're only interested in retrieving the Thomson Corp parent company, or in other words, you want to perform an exact match on the \"Thomson Corp\" value. To do this, change the single colon ' : ' in the query parameter to a double colon ' :: ' as follows: cm-well-host /permid.org?op=search qp=CommonName.mdaas::Thomson%20Corp,type.rdf:Organization with-data The query returns only one result, with the CommonName value of \u201cThomson Corp\u201d. Note Be careful when using exact matches. if the company\u2019s common name was listed as \u201cThe Thomson Corp\u201d, then your exact-match query would not have worked! Fuzzy Matches Suppose you\u2019re not entire sure how \"Thomson\" is spelled. For instance, it could be spelled \"Thompson\". You can choose to cast a wider net over the data by performing a fuzzy match search. To perform a fuzzy match search, replace the colon ':' with a tilde '~', as follows: cm-well-host /permid.org?op=search qp=CommonName.mdaas~Thomson%20Corp,type.rdf:Organization with-data This returns results that are somewhat similar to your search string. For instance, the fuzzy-matched values could have additional characters to the query value, or less characters, or a few changed characters. Warning Be advised that the number of responses returned for a fuzzy match is much larger than for an exact or partial match, since it the results can contain anything remotely matching your search string. Also, note that the order of the results is not necessarily guaranteed to be \u201cstrongest match first\u201d. When using a fuzzy match, it's recommended to either include other criteria in your search in order to narrow down the results set, or be prepared to download a large set of answers and handle the ranking in your application. Returning a Subset of Fields By default, when you run CM-Well queries using the with-data flag, you get the entire infoton in the results. For larger result sets, this can mean that your application will have a large amount of data to process. This is a potential waste of bandwidth, particularly if all you really wanted was one or two fields from each infoton. To narrow down the result set, you can specify a filter that lists the fields you want to receive in the query results. You do this by using the fields parameter. For example, let\u2019s query for Thomson Reuters in Open Permid data, but specifiy that we only want to receive the name of the company, and the year it was founded. The query would look like this: cm-well-host /permid.org?op=search qp=CommonName.mdaas::Thomson%20Corp,type.rdf:Organization fields=CommonName.mdaas,organizationFoundedYear.mdaas with-data The results would then be: @ prefix mdaas : http :// ont . thomsonreuters . com / mdaas / . @ prefix sys : http :// cm-well-ppe . int . thomsonreuters . com / meta / sys # . @ prefix nn : http :// cm-well-ppe . int . thomsonreuters . com / meta / nn # . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix o : http :// permid . org / . { o : 1-5044334019 sys : dataCenter na ; sys : indexTime 1444833797895 ^^ xsd : long ; sys : lastModified 2015-09-21T21:01:48.541Z ^^ xsd : dateTime ; sys : parent /permid.org ; sys : path /permid.org/1-5044334019 ; sys : type $anon$1 ; sys : uuid 078e1d7f7caf6c376eec5437c539ce2c ; mdaas : CommonName Thomson Corp ; mdaas : organizationFoundedYear 1972 . } Note System fields are always returned regardless of the fields filter, but the only object fields returned are those we requested. Searching by Value Ranges So far our query examples have used field values of the string type. But CM-Well also supports number and date values. Suppose we want to search for all the organizations that were founded after the year 2014. We could use this query: cm-well-host /permid.org?op=search qp=organizationFoundedYear.mdaas 2014,type.rdf:Organization with-data format=ttl Note Note the use of the operator, which relates to the year as a numeric value. You can use 4 comparators on numeric field values: , , , . (See table below.) The various comparators that you can use in queries are: Comparator Type : Partial match :: Exact match ~ Fuzzy match \\ Less than > Greater than \\ Less than or equal to > Greater than or equal to Retrieving Historic Versions When an infoton is updated in CM-Well, the older version is saved as is, and a new, updated version is created. The entity's CM-Well URI (for instance, the URI containing the permID, for an organization or person) always points to the most recent version. You can choose to retrieve all historical versions of an infoton. To do this, include the with-history flag in the query. For example: cm-well-host /data.com/2-a6165f1cadc6b7d592e27384ca5d58733b7a4a249b1d4bd935800ebfa59fae63?with-history format=ttl This query returns at least two versions of the entity's infoton. Note The order in which historical versions are returned is unpredictable, so you\u2019ll likely want to rank the results yourself in your application, using the sys:lastModified attribute.","title":"Advanced Queries"},{"location":"DeveloperGuide/DevGuide.AdvancedQueries.html#advanced-queries","text":"","title":"Advanced Queries"},{"location":"DeveloperGuide/DevGuide.AdvancedQueries.html#and-or-and-not-clauses","text":"When querying for field values, you are not limited to one field. You can query for infotons that match constraints on several field values. Although CM-Well queries do not support operators named AND, OR and NOT, they do support different syntax for implementing the same functionality as these logical operators, as describes below. Note You can group clauses in [ ] brackets, and apply * and - operators to the entire group. Brackets may also be nested.","title":"AND, OR and NOT Clauses"},{"location":"DeveloperGuide/DevGuide.AdvancedQueries.html#field-lists-as-and-clauses","text":"To specify several field values as search filters, add all the name-value pairs to the query parameters, separating them with commas. For example, to find companies in Open PermID with addresses in Rochester, NY, you could use the following query: cm-well-host /permid.org/?op=search qp=organizationCity.mdaas:Rochester,organizationStateProvince.mdaas:New%20York This will return organizations that are located both in a city named Rochester, and in the state of New York. Providing a comma-separated list of field value conditions has the same effect as putting an AND operator between conditions in Boolean logical syntax.","title":"Field Lists as AND Clauses"},{"location":"DeveloperGuide/DevGuide.AdvancedQueries.html#optional-fields-for-or-clauses","text":"CM-Well query syntax does not support an \"OR\" operator, but instead it supports the * operator to indicate that a condition is optional. This allows you to effectively implement an OR operation. Let's see how. For example, to search for companies that have an address in Rochester, NY, and optionally have an address in Las Vegas, NV, you can use this query: cm-well-host /permid.org/?op=search qp=[organizationCity.mdaas:Rochester,organizationStateProvince.mdaas:New%20York],*[organizationCity.mdaas:Las%20Vegas,organizationStateProvince.mdaas:Nevada] Tip You can surround a list of conditions with square brackets [ ... ] , so they can be defined as mandatory or optional as a group. The query above has two groups of parameters, one for Rochester, the other for Las Vegas. The group for Las Vegas is preceded by the * symbol, to mark it as optional. The group for Rochester is mandatory. This query returns all organizations that have an address in Rochester NY, and also those that have an address both in Rochester NY and in Las Vegas NV. This yields 2279 results. If we make the Rochester address optional, and Las Vegas mandatory, the query looks like this: cm-well-host /permid.org/?op=search qp=*[organizationCity.mdaas:Rochester,organizationStateProvince.mdaas:New%20York], [organizationCity.mdaas:Las%20Vegas,organizationStateProvince.mdaas:Nevada] Now the query returns all organizations that have an address in Las Vegas NV, and also those that have an address both in Rochester NY and in Las Vegas NV. This yields 8019 results. If we make both conditions optional, the query looks like this: cm-well-host /permid.org/?op=search qp=*[organizationCity.mdaas:Rochester,organizationStateProvince.mdaas:New%20York],*[organizationCity.mdaas:Las%20Vegas,organizationStateProvince.mdaas:Nevada] This query returns all organizations that have an address either in Las Vegas NV or in Rochester NY. This yields 10297 results. You may have noticed that the sum of the previous queries' results count is 2279 + 8019 = 10298, one more than 10297. This is because there is one organization that has an address both in Las Vegas NV and in Rochester NY, creating an overlap of 1 item in the previous queries' results. Note Although we have described the * operator as an \"optional\" operator, this is not strictly accurate. The query above will return any infoton that meets one of the criteria, but it must meet at least one criterion. Infotons that don't meet any of the criteria are not returned. Therefore when all clauses at the same nesting level are marked as optional, they perform just like an OR clause.","title":"Optional Fields for OR Clauses"},{"location":"DeveloperGuide/DevGuide.AdvancedQueries.html#-operator-for-not-clauses","text":"Preceding a field condition with the - character creates a NOT condition; that is, results that meet the condition are filtered out. For example, the following query returns all organizations that have an address in New York state, but not in the city of Rochester: cm-well-host /permid.org?op=search qp=organizationStateProvince.mdaas:New%20York,-[organizationCity.mdaas:Rochester] The - operator can be also used to test for the non existence of a field. For example, the following query returns all organizations that have a province of New York but no city defined: cm-well-host /permid.org?op=search qp=organizationStateProvince.mdaas:New%20York,-organizationCity.mdaas:","title":"\"-\" Operator for NOT Clauses"},{"location":"DeveloperGuide/DevGuide.AdvancedQueries.html#string-matching-logic","text":"","title":"String-Matching Logic"},{"location":"DeveloperGuide/DevGuide.AdvancedQueries.html#partial-matches","text":"All of the queries we\u2019ve defined up to this point return results whose field values contain the query value as a sub-string. These are know as partial matches . For example, let's try searching for the name string \"Thomson Corp\" as follows: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Thomson%20Corp,type.rdf:Organization This returns several results whose CommonName field contains \"Thomson Corp\" as a sub-string. This includes \"Thomson Corp\", \"Thomson Corp Delaware, Inc.\", \"Thomson Corp Medical Education\", \"Standard Thomson Corp\" and so on.","title":"Partial Matches"},{"location":"DeveloperGuide/DevGuide.AdvancedQueries.html#exact-matches","text":"Suppose you're only interested in retrieving the Thomson Corp parent company, or in other words, you want to perform an exact match on the \"Thomson Corp\" value. To do this, change the single colon ' : ' in the query parameter to a double colon ' :: ' as follows: cm-well-host /permid.org?op=search qp=CommonName.mdaas::Thomson%20Corp,type.rdf:Organization with-data The query returns only one result, with the CommonName value of \u201cThomson Corp\u201d. Note Be careful when using exact matches. if the company\u2019s common name was listed as \u201cThe Thomson Corp\u201d, then your exact-match query would not have worked!","title":"Exact Matches"},{"location":"DeveloperGuide/DevGuide.AdvancedQueries.html#fuzzy-matches","text":"Suppose you\u2019re not entire sure how \"Thomson\" is spelled. For instance, it could be spelled \"Thompson\". You can choose to cast a wider net over the data by performing a fuzzy match search. To perform a fuzzy match search, replace the colon ':' with a tilde '~', as follows: cm-well-host /permid.org?op=search qp=CommonName.mdaas~Thomson%20Corp,type.rdf:Organization with-data This returns results that are somewhat similar to your search string. For instance, the fuzzy-matched values could have additional characters to the query value, or less characters, or a few changed characters. Warning Be advised that the number of responses returned for a fuzzy match is much larger than for an exact or partial match, since it the results can contain anything remotely matching your search string. Also, note that the order of the results is not necessarily guaranteed to be \u201cstrongest match first\u201d. When using a fuzzy match, it's recommended to either include other criteria in your search in order to narrow down the results set, or be prepared to download a large set of answers and handle the ranking in your application.","title":"Fuzzy Matches"},{"location":"DeveloperGuide/DevGuide.AdvancedQueries.html#returning-a-subset-of-fields","text":"By default, when you run CM-Well queries using the with-data flag, you get the entire infoton in the results. For larger result sets, this can mean that your application will have a large amount of data to process. This is a potential waste of bandwidth, particularly if all you really wanted was one or two fields from each infoton. To narrow down the result set, you can specify a filter that lists the fields you want to receive in the query results. You do this by using the fields parameter. For example, let\u2019s query for Thomson Reuters in Open Permid data, but specifiy that we only want to receive the name of the company, and the year it was founded. The query would look like this: cm-well-host /permid.org?op=search qp=CommonName.mdaas::Thomson%20Corp,type.rdf:Organization fields=CommonName.mdaas,organizationFoundedYear.mdaas with-data The results would then be: @ prefix mdaas : http :// ont . thomsonreuters . com / mdaas / . @ prefix sys : http :// cm-well-ppe . int . thomsonreuters . com / meta / sys # . @ prefix nn : http :// cm-well-ppe . int . thomsonreuters . com / meta / nn # . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix o : http :// permid . org / . { o : 1-5044334019 sys : dataCenter na ; sys : indexTime 1444833797895 ^^ xsd : long ; sys : lastModified 2015-09-21T21:01:48.541Z ^^ xsd : dateTime ; sys : parent /permid.org ; sys : path /permid.org/1-5044334019 ; sys : type $anon$1 ; sys : uuid 078e1d7f7caf6c376eec5437c539ce2c ; mdaas : CommonName Thomson Corp ; mdaas : organizationFoundedYear 1972 . } Note System fields are always returned regardless of the fields filter, but the only object fields returned are those we requested.","title":"Returning a Subset of Fields"},{"location":"DeveloperGuide/DevGuide.AdvancedQueries.html#searching-by-value-ranges","text":"So far our query examples have used field values of the string type. But CM-Well also supports number and date values. Suppose we want to search for all the organizations that were founded after the year 2014. We could use this query: cm-well-host /permid.org?op=search qp=organizationFoundedYear.mdaas 2014,type.rdf:Organization with-data format=ttl Note Note the use of the operator, which relates to the year as a numeric value. You can use 4 comparators on numeric field values: , , , . (See table below.) The various comparators that you can use in queries are: Comparator Type : Partial match :: Exact match ~ Fuzzy match \\ Less than > Greater than \\ Less than or equal to > Greater than or equal to","title":"Searching by Value Ranges"},{"location":"DeveloperGuide/DevGuide.AdvancedQueries.html#retrieving-historic-versions","text":"When an infoton is updated in CM-Well, the older version is saved as is, and a new, updated version is created. The entity's CM-Well URI (for instance, the URI containing the permID, for an organization or person) always points to the most recent version. You can choose to retrieve all historical versions of an infoton. To do this, include the with-history flag in the query. For example: cm-well-host /data.com/2-a6165f1cadc6b7d592e27384ca5d58733b7a4a249b1d4bd935800ebfa59fae63?with-history format=ttl This query returns at least two versions of the entity's infoton. Note The order in which historical versions are returned is unpredictable, so you\u2019ll likely want to rank the results yourself in your application, using the sys:lastModified attribute.","title":"Retrieving Historic Versions"},{"location":"DeveloperGuide/DevGuide.BasicQueries.html","text":"Basic Queries Getting an Infoton by Subject ID The simplest query you can make to CM-Well is to get all the basic predicates and objects that go with a single subject (entity). This is easy to retrieve, as all this information is stored as a single infoton. Each CM-Well infoton has a unique URI that serves as an address for retrieving the infoton. For example, in the case of Organization entities, the entity's TR Permanent Identifier (PermID) serves as the \"key\" for retrieving the corresponding infoton. So for example, to get the infoton for PermID 21525576844, the URI is: http://cm-well-host/permid.org/1-21525576844 Let\u2019s take a look at the URI's components: cm-well-host \u2013 the CM-Well hostname. permid.org \u2013 The namespace for all the triples that belong to the Open PermID product. Namespaces are used to logically group types of infotons together. Infotons from different namespaces can still link to each other. 1- By convention, all PermIDs within CM-Well start with a 1- prefix to indicate that this identifier is a PermID. There are other prefixes, such as 2- to indicate a generated ID native to CM-Well, used to link dependent infotons to a main infoton. 21525576844 \u2013 The PermID of the entity we're retrieving. Viewing the CM-Well URI shown above in a web browser displays this page: Specifying the Output Format If you're accessing the URI programatically, you will usually want to specify the output format in which you want to receive the results. You do this by adding the format parameter to the URI. See CM-Well Input and Output Formats to learn more about the formats that CM-Well supports. Note You can also specify the output format by adding an HTTP Accept header to the request. If both an Accept header and a format parameter appear in the request, the format parameter takes precedence. Browse to http://cm-well-host/permid.org/1-5035948006?format=turtle to see the same results as above, but now rendered as a text file in RDF\u2019s Turtle format. The results will look like this (truncated for brevity): @ prefix mdaas : http :// ont . thomsonreuters . com / mdaas / . @ prefix sys : http :// cm-well-host . com / meta / sys # . @ prefix nn : http :// cm-well-host . com / meta / nn # . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix rdf : http :// www . w3 . org / 1999 / 02 / 22-rdf-syntax-ns # . @ prefix o : http :// permid . org / . o : 1-5035948006 a mdaas : Organization ; sys : dataCenter na ; sys : lastModified 2015-06-08T21:09:45.855Z ^^ xsd : dateTime ; sys : parent /permid.org ; sys : path /permid.org/1-5035948006 ; sys : type ObjectInfoton ; sys : uuid 3205fef15f8bfda48bd1d44da2b6cb7a ; mdaas : CIK 0001524358 ; mdaas : CommonName Marriott Vacations Worldwide Corp @ en ; mdaas : InvestextID VAC ; mdaas : LEI 549300WA6BT5H4F7IO94 ; mdaas : MXID 111800547 ; ... mdaas : subsidiariesCount 109 . Note In this format you receive the infoton's system metadata, shown with the sys prefix in the example above. Searching by a Single Field Value If you don\u2019t already know the infoton's PermID, you can perform a simple search for it, using a search operation as follows: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership%20Resorts These are the components of the search request: op=search - indicates that this is a search operation. qp= - the string following qp= contains field names and values that you want to match. In this example, we\u2019re looking for infotons that have the field CommonName.mdaas, where the value is \u201cMarriott Ownership Resorts\u201d. Note Special characters must be escaped in the usual way for URIs. For example, spaces are escaped via %20, # characters are encoded using %23, and so on. It is possible to search in all fields rather than in a specific field, as follows: qp=_all:Marriott%20Ownership%20Resorts . However, this is discouraged, as it can result in prohibitively long processing time for the query. You can also search for values in infotons' metadata fields . See Field Name Formats to learn about field name notation. Query Results: Links vs. Data Multiple query results are displayed as a list of links to the infotons that match the query, that looks like this: Sometimes a list of links may be useful, but sometimes you want to see the actual contents of the results. You can get them by adding the parameter with-data to your request, as follows: http://cm-well-host.com/permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership%20Resorts with-data Note The with-data flag can be added with no value, in which case the data is returned in N3 format. You can also add a format value to with-data , that can be any format that CM-Well supports, for instance: with-data=yaml, with-data=json, with-data=trig... When you add the with-data flag to your query, in the results you receive the entire object for each infoton, rather than its link, as follows:","title":"Basic Queries"},{"location":"DeveloperGuide/DevGuide.BasicQueries.html#basic-queries","text":"","title":"Basic Queries"},{"location":"DeveloperGuide/DevGuide.BasicQueries.html#getting-an-infoton-by-subject-id","text":"The simplest query you can make to CM-Well is to get all the basic predicates and objects that go with a single subject (entity). This is easy to retrieve, as all this information is stored as a single infoton. Each CM-Well infoton has a unique URI that serves as an address for retrieving the infoton. For example, in the case of Organization entities, the entity's TR Permanent Identifier (PermID) serves as the \"key\" for retrieving the corresponding infoton. So for example, to get the infoton for PermID 21525576844, the URI is: http://cm-well-host/permid.org/1-21525576844 Let\u2019s take a look at the URI's components: cm-well-host \u2013 the CM-Well hostname. permid.org \u2013 The namespace for all the triples that belong to the Open PermID product. Namespaces are used to logically group types of infotons together. Infotons from different namespaces can still link to each other. 1- By convention, all PermIDs within CM-Well start with a 1- prefix to indicate that this identifier is a PermID. There are other prefixes, such as 2- to indicate a generated ID native to CM-Well, used to link dependent infotons to a main infoton. 21525576844 \u2013 The PermID of the entity we're retrieving. Viewing the CM-Well URI shown above in a web browser displays this page:","title":"Getting an Infoton by Subject ID"},{"location":"DeveloperGuide/DevGuide.BasicQueries.html#specifying-the-output-format","text":"If you're accessing the URI programatically, you will usually want to specify the output format in which you want to receive the results. You do this by adding the format parameter to the URI. See CM-Well Input and Output Formats to learn more about the formats that CM-Well supports. Note You can also specify the output format by adding an HTTP Accept header to the request. If both an Accept header and a format parameter appear in the request, the format parameter takes precedence. Browse to http://cm-well-host/permid.org/1-5035948006?format=turtle to see the same results as above, but now rendered as a text file in RDF\u2019s Turtle format. The results will look like this (truncated for brevity): @ prefix mdaas : http :// ont . thomsonreuters . com / mdaas / . @ prefix sys : http :// cm-well-host . com / meta / sys # . @ prefix nn : http :// cm-well-host . com / meta / nn # . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix rdf : http :// www . w3 . org / 1999 / 02 / 22-rdf-syntax-ns # . @ prefix o : http :// permid . org / . o : 1-5035948006 a mdaas : Organization ; sys : dataCenter na ; sys : lastModified 2015-06-08T21:09:45.855Z ^^ xsd : dateTime ; sys : parent /permid.org ; sys : path /permid.org/1-5035948006 ; sys : type ObjectInfoton ; sys : uuid 3205fef15f8bfda48bd1d44da2b6cb7a ; mdaas : CIK 0001524358 ; mdaas : CommonName Marriott Vacations Worldwide Corp @ en ; mdaas : InvestextID VAC ; mdaas : LEI 549300WA6BT5H4F7IO94 ; mdaas : MXID 111800547 ; ... mdaas : subsidiariesCount 109 . Note In this format you receive the infoton's system metadata, shown with the sys prefix in the example above.","title":"Specifying the Output Format"},{"location":"DeveloperGuide/DevGuide.BasicQueries.html#searching-by-a-single-field-value","text":"If you don\u2019t already know the infoton's PermID, you can perform a simple search for it, using a search operation as follows: cm-well-host /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership%20Resorts These are the components of the search request: op=search - indicates that this is a search operation. qp= - the string following qp= contains field names and values that you want to match. In this example, we\u2019re looking for infotons that have the field CommonName.mdaas, where the value is \u201cMarriott Ownership Resorts\u201d. Note Special characters must be escaped in the usual way for URIs. For example, spaces are escaped via %20, # characters are encoded using %23, and so on. It is possible to search in all fields rather than in a specific field, as follows: qp=_all:Marriott%20Ownership%20Resorts . However, this is discouraged, as it can result in prohibitively long processing time for the query. You can also search for values in infotons' metadata fields . See Field Name Formats to learn about field name notation.","title":"Searching by a Single Field Value"},{"location":"DeveloperGuide/DevGuide.BasicQueries.html#query-results-links-vs-data","text":"Multiple query results are displayed as a list of links to the infotons that match the query, that looks like this: Sometimes a list of links may be useful, but sometimes you want to see the actual contents of the results. You can get them by adding the parameter with-data to your request, as follows: http://cm-well-host.com/permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership%20Resorts with-data Note The with-data flag can be added with no value, in which case the data is returned in N3 format. You can also add a format value to with-data , that can be any format that CM-Well supports, for instance: with-data=yaml, with-data=json, with-data=trig... When you add the with-data flag to your query, in the results you receive the entire object for each infoton, rather than its link, as follows:","title":"Query Results: Links vs. Data"},{"location":"DeveloperGuide/DevGuide.CM-WellSecurityFeatures.html","text":"CM-Well Security Features CM-Well protects write-access to production environments by requiring an authentication token for write operations. (Write operations to non-production environments and read operations from any environment currently do not require a token, but this is subject to change.) Note CM-Well currently does not support internal encryption of its data. If necessary, you can encrypt field values in your application before uploading them to CM-Well. The following sections describe how to obtain and use the CM-Well authentication token. Users, Passwords and Permissions A CM-Well user does not represent a person, but rather an application that calls CM-Well. You provide a username and password when logging into CM-Well, and you receive a corresponding authentication token to pass to subsequent API calls. Each user has specific read and write permissions. A user may have access to certain paths in CM-Well and not to others. You may want to define more than one user for your application, if end users with different profiles may be using it who require different access permissions. Note If you are running a privately compiled version of CM-Well, the default root user name and password are \"root\" and \"root\". Tokens When you log into CM-Well, in the response you receive an authentication token that looks like this: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJteVVzZXJuYW1lIiwiZXhwIjoxNDY2NTg5NzYzMDMzLCJyZXYiOjB9.17s3USkZaZYbifXsgmm8eaEmr66SP6udbuUQCLwcWKY (The token in is JWT format .) You pass this token to each subsequent call to CM-Well, as the value of the X-CM-WELL-TOKEN HTTP header. This enables the access permissions assigned to your user. By default, tokens are valid for 24 hours after they are created. You can call _login again to receive a new token when the previous one expires. You can also request a custom expiration period when logging in (see below). The _login API CM-Well provides a login API call, which allows you to log into CM-Well with the username/password and receive a corresponding authentication token to pass to subsequent API calls. See Login API to learn more.","title":"CM-Well Security Features"},{"location":"DeveloperGuide/DevGuide.CM-WellSecurityFeatures.html#cm-well-security-features","text":"CM-Well protects write-access to production environments by requiring an authentication token for write operations. (Write operations to non-production environments and read operations from any environment currently do not require a token, but this is subject to change.) Note CM-Well currently does not support internal encryption of its data. If necessary, you can encrypt field values in your application before uploading them to CM-Well. The following sections describe how to obtain and use the CM-Well authentication token.","title":"CM-Well Security Features"},{"location":"DeveloperGuide/DevGuide.CM-WellSecurityFeatures.html#users-passwords-and-permissions","text":"A CM-Well user does not represent a person, but rather an application that calls CM-Well. You provide a username and password when logging into CM-Well, and you receive a corresponding authentication token to pass to subsequent API calls. Each user has specific read and write permissions. A user may have access to certain paths in CM-Well and not to others. You may want to define more than one user for your application, if end users with different profiles may be using it who require different access permissions. Note If you are running a privately compiled version of CM-Well, the default root user name and password are \"root\" and \"root\".","title":"Users, Passwords and Permissions"},{"location":"DeveloperGuide/DevGuide.CM-WellSecurityFeatures.html#tokens","text":"When you log into CM-Well, in the response you receive an authentication token that looks like this: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJteVVzZXJuYW1lIiwiZXhwIjoxNDY2NTg5NzYzMDMzLCJyZXYiOjB9.17s3USkZaZYbifXsgmm8eaEmr66SP6udbuUQCLwcWKY (The token in is JWT format .) You pass this token to each subsequent call to CM-Well, as the value of the X-CM-WELL-TOKEN HTTP header. This enables the access permissions assigned to your user. By default, tokens are valid for 24 hours after they are created. You can call _login again to receive a new token when the previous one expires. You can also request a custom expiration period when logging in (see below).","title":"Tokens"},{"location":"DeveloperGuide/DevGuide.CM-WellSecurityFeatures.html#the-_login-api","text":"CM-Well provides a login API call, which allows you to log into CM-Well with the username/password and receive a corresponding authentication token to pass to subsequent API calls. See Login API to learn more.","title":"The _login API"},{"location":"DeveloperGuide/DevGuide.CallingJavaScalaFunctionsFromSPARQLQueries.html","text":"Calling Custom Java/Scala Functions from SPARQL Queries You can write a custom function in Java or Scala, upload a Scala source file or Java/Scala jar file, and call the function from within your SPARQL query code. This allows you unlimited flexibility to manipulate the data resulting from a SPARQL query. Here is a comparison between the two packaging options: Feature JAR File Source File Number of classes in same file Multiple One Languages supported Java/Scala Only Scala Dependencies supported Yes No Pre-Compilation required Yes No File name Any Must match class name Can use package directive Yes No Step 1: Write Your Function Implement a new class that extends org.apache.jena.sparql.function.Function , using Apache Jena 3.1.0. Package it in a JAR File with any name -OR- just save it as .scala file. If you have dependencies other than Jena libraries (e.g. apache commons ), include them in your JAR. Step 2: Upload Your Code Upload your JAR File to the /meta/lib CM-Well folder. -OR- Upload your Scala source file to the /meta/lib/sources/scala CM-Well folder. Note Uploading a file to the /meta/lib folder requires a security token. Step 3: Call Function from SPARQL Under the IMPORT section in your SPARQL query, add your JAR name and path, relative to its mandatory location ( meta/lib or meta/lib/sources/scala ). Make sure it ends with the correct suffix ( \".jar\" or \".scala\" ). CM-Well registers your function as the URI jar: YourCanonicalFunctionName . You can call it either directly as a URI, or by defining a PREFIX myJar: jar:my.package.name. . Example The following example shows how to implement a function that adds a \"42_\" string prefix to any value, and call this function from within a SPARQL query. Scala Code: package cmwell . example import org.apache.jena.sparql.engine.binding.Binding import org.apache.jena.sparql.expr. { ExprList , NodeValue } import org.apache.jena.sparql.expr.nodevalue.NodeValueString import org.apache.jena.sparql.function.FunctionEnv import scala.collection.JavaConversions._ class Add42 extends org . apache . jena . sparql . function . Function { override def build ( uri : String , args : ExprList ): Unit = { } override def exec ( binding : Binding , args : ExprList , uri : String , env : FunctionEnv ): NodeValue = { val `var` = args . getList . headOption . getOrElse ( new NodeValueString ( arg0 )) . asVar () val res : String = `var` . asNode () match { case n if n . isURI = n . getURI case n if n . isLiteral = n . getLiteral . toString () case n if n . isVariable = Option ( binding . get ( `var` )) . fold ( Could not bind )( _ . getLiteral . toString ()) case _ = ??? } new NodeValueString ( 42_ + res ) } } Let's assume we have compiled this code using the following build configuration, and packaged it as Add42.jar . scalaVersion := 2.12.4 libraryDependencies ++= Seq( org.apache.jena % jena-arq % 3.0.1 ) The following command uploads the jar file to the correct CM-Well folder, using a valid security token: curl cm-well-host /meta/lib/Add42.jar -H X-CM-WELL-Type:File \\ -H Content-Type:application/java-archive --data-binary @Add42.jar \\ -H X-CM-WELL-TOKEN:[a valid token] ``` To call the function within a SPARQL query: curl cmwell/_sp --data-binary PATHS /example.org/Individuals2?op=search length=1000 with-data IMPORT Add42.jar SPARQL SELECT DISTINCT ?name ?active ?res WHERE { ?name http://www.tr-lbd.com/bold#active ?active . BIND( jar:cmwell.example.Add42 (?active) as ?res). } ORDER BY DESC(?name) Alternatively, you could save the same Scala code as Add42.scala , and upload it using this command: curl cm-well-host /meta/lib/sources/scala/Add42.scala -H X-CM-WELL-Type:File \\ -H Content-Type:text/plain --data-binary @Add42.scala \\ -H X-CM-WELL-TOKEN:[a valid token] You can then call the function as follows: curl cm-well-host /_sp --data-binary PATHS /example.org/Individuals2?op=search length=1000 with-data IMPORT scala/Add42.scala SPARQL SELECT DISTINCT ?name ?active ?res WHERE { ?name http://www.tr-lbd.com/bold#active ?active . BIND( jar:Add42 (?active) as ?res). } ORDER BY DESC(?name)","title":"Calling Custom Java/Scala Functions from SPARQL Queries"},{"location":"DeveloperGuide/DevGuide.CallingJavaScalaFunctionsFromSPARQLQueries.html#calling-custom-javascala-functions-from-sparql-queries","text":"You can write a custom function in Java or Scala, upload a Scala source file or Java/Scala jar file, and call the function from within your SPARQL query code. This allows you unlimited flexibility to manipulate the data resulting from a SPARQL query. Here is a comparison between the two packaging options: Feature JAR File Source File Number of classes in same file Multiple One Languages supported Java/Scala Only Scala Dependencies supported Yes No Pre-Compilation required Yes No File name Any Must match class name Can use package directive Yes No","title":"Calling Custom Java/Scala Functions from SPARQL Queries"},{"location":"DeveloperGuide/DevGuide.CallingJavaScalaFunctionsFromSPARQLQueries.html#step-1-write-your-function","text":"Implement a new class that extends org.apache.jena.sparql.function.Function , using Apache Jena 3.1.0. Package it in a JAR File with any name -OR- just save it as .scala file. If you have dependencies other than Jena libraries (e.g. apache commons ), include them in your JAR.","title":"Step 1: Write Your Function"},{"location":"DeveloperGuide/DevGuide.CallingJavaScalaFunctionsFromSPARQLQueries.html#step-2-upload-your-code","text":"Upload your JAR File to the /meta/lib CM-Well folder. -OR- Upload your Scala source file to the /meta/lib/sources/scala CM-Well folder. Note Uploading a file to the /meta/lib folder requires a security token.","title":"Step 2: Upload Your Code"},{"location":"DeveloperGuide/DevGuide.CallingJavaScalaFunctionsFromSPARQLQueries.html#step-3-call-function-from-sparql","text":"Under the IMPORT section in your SPARQL query, add your JAR name and path, relative to its mandatory location ( meta/lib or meta/lib/sources/scala ). Make sure it ends with the correct suffix ( \".jar\" or \".scala\" ). CM-Well registers your function as the URI jar: YourCanonicalFunctionName . You can call it either directly as a URI, or by defining a PREFIX myJar: jar:my.package.name. .","title":"Step 3: Call Function from SPARQL"},{"location":"DeveloperGuide/DevGuide.CallingJavaScalaFunctionsFromSPARQLQueries.html#example","text":"The following example shows how to implement a function that adds a \"42_\" string prefix to any value, and call this function from within a SPARQL query. Scala Code: package cmwell . example import org.apache.jena.sparql.engine.binding.Binding import org.apache.jena.sparql.expr. { ExprList , NodeValue } import org.apache.jena.sparql.expr.nodevalue.NodeValueString import org.apache.jena.sparql.function.FunctionEnv import scala.collection.JavaConversions._ class Add42 extends org . apache . jena . sparql . function . Function { override def build ( uri : String , args : ExprList ): Unit = { } override def exec ( binding : Binding , args : ExprList , uri : String , env : FunctionEnv ): NodeValue = { val `var` = args . getList . headOption . getOrElse ( new NodeValueString ( arg0 )) . asVar () val res : String = `var` . asNode () match { case n if n . isURI = n . getURI case n if n . isLiteral = n . getLiteral . toString () case n if n . isVariable = Option ( binding . get ( `var` )) . fold ( Could not bind )( _ . getLiteral . toString ()) case _ = ??? } new NodeValueString ( 42_ + res ) } } Let's assume we have compiled this code using the following build configuration, and packaged it as Add42.jar . scalaVersion := 2.12.4 libraryDependencies ++= Seq( org.apache.jena % jena-arq % 3.0.1 ) The following command uploads the jar file to the correct CM-Well folder, using a valid security token: curl cm-well-host /meta/lib/Add42.jar -H X-CM-WELL-Type:File \\ -H Content-Type:application/java-archive --data-binary @Add42.jar \\ -H X-CM-WELL-TOKEN:[a valid token] ``` To call the function within a SPARQL query: curl cmwell/_sp --data-binary PATHS /example.org/Individuals2?op=search length=1000 with-data IMPORT Add42.jar SPARQL SELECT DISTINCT ?name ?active ?res WHERE { ?name http://www.tr-lbd.com/bold#active ?active . BIND( jar:cmwell.example.Add42 (?active) as ?res). } ORDER BY DESC(?name) Alternatively, you could save the same Scala code as Add42.scala , and upload it using this command: curl cm-well-host /meta/lib/sources/scala/Add42.scala -H X-CM-WELL-Type:File \\ -H Content-Type:text/plain --data-binary @Add42.scala \\ -H X-CM-WELL-TOKEN:[a valid token] You can then call the function as follows: curl cm-well-host /_sp --data-binary PATHS /example.org/Individuals2?op=search length=1000 with-data IMPORT scala/Add42.scala SPARQL SELECT DISTINCT ?name ?active ?res WHERE { ?name http://www.tr-lbd.com/bold#active ?active . BIND( jar:Add42 (?active) as ?res). } ORDER BY DESC(?name)","title":"Example"},{"location":"DeveloperGuide/DevGuide.CurlUtility.html","text":"Calling CM-Well with Curl The CM-Well API uses the REST protocol, which runs over HTTP. When running a REST GET command (one that retrieves or searches for infotons), you can simply paste the query into a browser address bar, press enter and see the query results in the browser window. However, PUT, POST and DELETE commands (which update CM-Well's data) cannot be submitted in a browser. There are several ways that you can submit such calls: From your own application, using a 3rd-party library that supports REST calls. Using an online utility such as REST Test . Using a client application such as Postman . Using a command-line utility such as Curl. Curl is a commonly-used utility for submitting REST requests. All the code examples that appear in CM-Well documentation use the Curl utility. Here is an example of a call to CM-Well, which uploads a file infoton, using Curl: curl -X POST cm-well-host /example/files/f1.png -H X-CM-WELL-TYPE: FILE -H Content-Type: image/png --data-binary @image.file.png You can learn more about Curl from online resources such as Using curl to automate HTTP jobs . Downloading Curl You can download Curl from several sites, for example: Curl Releases and Downloads . Choose the package for your operating system (note that curl is already installed on Macs) Curl on Windows vs. Unix If you're running Curl in a command-line window, you should be aware of some syntactical differences between the Windows and Unix command-lines: The line-continuation character in Unix is '\\', while in Windows it's '^'. When entering multi-line commands, remember to use the correct character for your OS. Unix supports single quotes as string delimiters ('string'), while Windows requires double-quotes (\"string\"). This can cause problems when using the JSON format, as cURL statements use single quotes to specify JSON data. Note You can avoid many syntax errors arising from these differences by providing the data for the Curl command in a file rather than on the command line. Many code examples in this documentation use files as input. You can learn more at Using cURL in Windows .","title":"Calling CM-Well with Curl"},{"location":"DeveloperGuide/DevGuide.CurlUtility.html#calling-cm-well-with-curl","text":"The CM-Well API uses the REST protocol, which runs over HTTP. When running a REST GET command (one that retrieves or searches for infotons), you can simply paste the query into a browser address bar, press enter and see the query results in the browser window. However, PUT, POST and DELETE commands (which update CM-Well's data) cannot be submitted in a browser. There are several ways that you can submit such calls: From your own application, using a 3rd-party library that supports REST calls. Using an online utility such as REST Test . Using a client application such as Postman . Using a command-line utility such as Curl. Curl is a commonly-used utility for submitting REST requests. All the code examples that appear in CM-Well documentation use the Curl utility. Here is an example of a call to CM-Well, which uploads a file infoton, using Curl: curl -X POST cm-well-host /example/files/f1.png -H X-CM-WELL-TYPE: FILE -H Content-Type: image/png --data-binary @image.file.png You can learn more about Curl from online resources such as Using curl to automate HTTP jobs .","title":"Calling CM-Well with Curl"},{"location":"DeveloperGuide/DevGuide.CurlUtility.html#downloading-curl","text":"You can download Curl from several sites, for example: Curl Releases and Downloads . Choose the package for your operating system (note that curl is already installed on Macs)","title":"Downloading Curl"},{"location":"DeveloperGuide/DevGuide.CurlUtility.html#curl-on-windows-vs-unix","text":"If you're running Curl in a command-line window, you should be aware of some syntactical differences between the Windows and Unix command-lines: The line-continuation character in Unix is '\\', while in Windows it's '^'. When entering multi-line commands, remember to use the correct character for your OS. Unix supports single quotes as string delimiters ('string'), while Windows requires double-quotes (\"string\"). This can cause problems when using the JSON format, as cURL statements use single quotes to specify JSON data. Note You can avoid many syntax errors arising from these differences by providing the data for the Curl command in a file rather than on the command line. Many code examples in this documentation use files as input. You can learn more at Using cURL in Windows .","title":"Curl on Windows vs. Unix"},{"location":"DeveloperGuide/DevGuide.DosAndDonts.html","text":"CM-Well Dos and Don'ts Don'ts Don't Use Queues to Store Requests to CM-Well We have encountered CM-Well clients that manage an internal queue for write requests to CM-Well. The internal queue often ends up being a performance bottleneck, especially for queue packages with persistent storage like Apache Kafka. Using a queue that's internal to the client is unnecessary, as CM-Well manages its own request queues. In the rare case where a write request receives a 504 HTTP error (\"gateway timeout\"), the best practice is to perform a brief sleep and retry the request. Similarly, there is no need to use a client queue to store read requests, and again, doing so may create a performance bottleneck. For bulk read operations, the best practice is to use CM-Well's consume or bulk-consume APIs. In case of an error during the read process, to ensure that no data was lost, simply resume reading while supplying the position token you received from the last successful read. Don't Use the CM-Well Prefix in Triples/Quads Data When you direct a query to CM-Well, you provide the HTTP address of the CM-Well environment you're targeting as the host name. For example, the following query is directed to the CM-Well pre-production environment: cm-well-host ?op=search qp=type.rdf:http://data.com/Person recursive However, when you provide triple/quad data to upload to CM-Well, neither the explicit host name (perhaps \"cm-well-ppe.int.thomsonreuters.com\", \"cm-well-prod.int.thomsonreuters.com\", etc.) nor the \"virtual\" host name (\"cmwell://\") should appear in the data (although it still appears as the host name parameter). CM-Well infoton URIs shold be provided in their \"relative path\" form, which is \"http://\" followed by the path under the CM-Well root. For example: http://example.org/Individuals/FredFredson a http://data.com/Person . The path http://example.org/Individuals/FredFredson is then mapped to the full path, as appropriate for the specific CM-Well host, e.g. cm-well-host /example.org/Individuals/FredFredson for the production environment, cm-well-host /example.org/Individuals/FredFredson for the PPE environment, and so on. Using an explicit or virtual CM-Well path in uploaded data may result in the creation of unexpected path names. Don't provide triples/quad data such as: cmwell://example.org/Individuals/FredFredson a http://data.com/Person . cmwell/example.org/Individuals/FredFredson a http://data.com/Person . Don't Mix URL-Encoded and Non-Encoded Characters in the Same SPARQL Query If you need to include non-English characters in a SPARQL query (including the PATHS sections), add the Content Type: text/plain;charset=utf-8 header to the HTTP request. If you choose to URL-encode the non-English characters, make sure to encode all of them (don't mix URL-encoded and non-encoded characters in the same query). This is because once CM-Well detects URL-encoding, it will assume that all characters are URL-encoded. Examples: Encode all non-English characters: curl -X POST cm-well-host / _sp ? format = json -H Content-Type:text/plain;charset=utf-8 --data-binary PATHS /data.com?op=search qp=* [ organizationNameLocalAka.fedapioa : % D0 % 9 E % D0 % A2 % D0 % 9 A % D0 % A0 % D0 % AB % D0 % A2 % D0 % 9 E % D0 % 95 % 20 % D0 % 90 % D0 % 9 A % D0 % A6 % D0 % 98 % D0 % 9 E % D0 % 9 D % D0 % 95 % D0 % A0 % D0 % 9 D % D0 % 9 E % D0 % 95 % 20 % D0 % 9 E % D0 % 91 % D0 % A9 % D0 % 95 % D0 % A1 % D0 % A2 % D0 % 92 % D0 % 9 E ] xg=1 with-data length=100 SPARQL SELECT * WHERE { ?s ?p ?o } Encode no non-English characters: curl -X POST cm-well-host / _sp ? format = json -H Content-Type:text/plain;charset=utf-8 --data-binary PATHS /data.com?op=search qp=* [ organizationNameLocalAka.fedapioa : \u041e\u0422\u041a\u0420\u042b\u0422\u041e\u0415 \u0410\u041a\u0426\u0418\u041e\u041d\u0415\u0420\u041d\u041e\u0415 \u041e\u0411\u0429\u0415\u0421\u0422\u0412\u041e ] xg=1 with-data length=100 SPARQL SELECT * WHERE { ?s ?p ?o } Don't Use Blank Nodes Several types of RDF notation support blank nodes (also known as bnodes ; resources represented by blank nodes are also called anonymous resources ). These are RDF nodes that have no defined URI. (see the Wikipedia Blank Node entry to learn more.) It's possible to define a temporary ID for the node such as x . However, such temporary identifiers are limited in scope only to a serialization of a particular RDF graph. While supported in certain notations (RDF/XML, RDFa, Turtle, N3 and N-Triples) and providing short term convenience for defining complex structures and for protecting sensitive information from browser access, as a rule using blank nodes is considered bad practice when working with large linked data stores like CM-Well, and is therefore discouraged . Best practice for linked data is to produce reusable, permanent URIs for objects. Disadvantages of using blank nodes include: They're limited to the document in which they appear. They reduce the potential for interlinking between different linked data sources. They make it much more difficult to merge data from different sources. CM-Well does not support blank nodes in its own data, and therefore when it encounters one, it creates an arbitrary URI for it. Since this is the case, we recommend not using blank nodes in data you intend to upload to CM-Well, and instead creating an informative URI for the relevant node, such as one containing a hash of its field values. Dos Use Correct Syntax in Windows/Unix Command-Line If you're using the Curl command-line utility to submit calls to CM-Well, you may encounter syntax errors that arise from differences between the command-line syntax for Windows and for Unix operating systems. See Using the Curl Utility to Call CM-Well to learn more. Minimize the Number of Infoton Fields Sometimes infoton fields contain links to other infotons, in order to express a relationship between two entities. For example, an infoton representing a company might refer to another company infoton as its parent company, or its supplier. However, if you find you're creating many such infoton link fields in one infoton, you should consider creating intermediate objects that encapsulate several fields. For example, instead of a company infoton that contains 5 SuppliesTo fields and 4 SuppliedBy fields, you can create a SupplierRelationship object that contains all 9 relationships, and refer to it in a single field of the company infoton. This is better for CM-Well performance because: Multiple inbound/outbound links in one infoton can result in long processing times for queries that traverse these links. Such calls may even time out. Because of CM-Well's \"immutable data\" principle, every update of an infoton creates a new copy of the infoton. The more fields it has, the more storage these copies use. In the case of relationships that are relatively static over time, this is unnecessary and avoidable. Leave %50-%60 of Disk Space Free on a CM-Well Node When using a CM-Well node in an operational or near-operational scenario, make sure that about %50-%60 of free disk space is maintained. This is because storage maintenance operations that CM-Well performs may temporarily use large amounts of disk space. This recommendation is also relevant for installations of CM-Well Docker that are run in near-operational conditions.","title":"CM-Well Dos and Don'ts"},{"location":"DeveloperGuide/DevGuide.DosAndDonts.html#cm-well-dos-and-donts","text":"","title":"CM-Well Dos and Don'ts"},{"location":"DeveloperGuide/DevGuide.DosAndDonts.html#donts","text":"","title":"Don'ts"},{"location":"DeveloperGuide/DevGuide.DosAndDonts.html#dont-use-queues-to-store-requests-to-cm-well","text":"We have encountered CM-Well clients that manage an internal queue for write requests to CM-Well. The internal queue often ends up being a performance bottleneck, especially for queue packages with persistent storage like Apache Kafka. Using a queue that's internal to the client is unnecessary, as CM-Well manages its own request queues. In the rare case where a write request receives a 504 HTTP error (\"gateway timeout\"), the best practice is to perform a brief sleep and retry the request. Similarly, there is no need to use a client queue to store read requests, and again, doing so may create a performance bottleneck. For bulk read operations, the best practice is to use CM-Well's consume or bulk-consume APIs. In case of an error during the read process, to ensure that no data was lost, simply resume reading while supplying the position token you received from the last successful read.","title":"Don't Use Queues to Store Requests to CM-Well"},{"location":"DeveloperGuide/DevGuide.DosAndDonts.html#dont-use-the-cm-well-prefix-in-triplesquads-data","text":"When you direct a query to CM-Well, you provide the HTTP address of the CM-Well environment you're targeting as the host name. For example, the following query is directed to the CM-Well pre-production environment: cm-well-host ?op=search qp=type.rdf:http://data.com/Person recursive However, when you provide triple/quad data to upload to CM-Well, neither the explicit host name (perhaps \"cm-well-ppe.int.thomsonreuters.com\", \"cm-well-prod.int.thomsonreuters.com\", etc.) nor the \"virtual\" host name (\"cmwell://\") should appear in the data (although it still appears as the host name parameter). CM-Well infoton URIs shold be provided in their \"relative path\" form, which is \"http://\" followed by the path under the CM-Well root. For example: http://example.org/Individuals/FredFredson a http://data.com/Person . The path http://example.org/Individuals/FredFredson is then mapped to the full path, as appropriate for the specific CM-Well host, e.g. cm-well-host /example.org/Individuals/FredFredson for the production environment, cm-well-host /example.org/Individuals/FredFredson for the PPE environment, and so on. Using an explicit or virtual CM-Well path in uploaded data may result in the creation of unexpected path names. Don't provide triples/quad data such as: cmwell://example.org/Individuals/FredFredson a http://data.com/Person . cmwell/example.org/Individuals/FredFredson a http://data.com/Person .","title":"Don't Use the CM-Well Prefix in Triples/Quads Data"},{"location":"DeveloperGuide/DevGuide.DosAndDonts.html#dont-mix-url-encoded-and-non-encoded-characters-in-the-same-sparql-query","text":"If you need to include non-English characters in a SPARQL query (including the PATHS sections), add the Content Type: text/plain;charset=utf-8 header to the HTTP request. If you choose to URL-encode the non-English characters, make sure to encode all of them (don't mix URL-encoded and non-encoded characters in the same query). This is because once CM-Well detects URL-encoding, it will assume that all characters are URL-encoded. Examples: Encode all non-English characters: curl -X POST cm-well-host / _sp ? format = json -H Content-Type:text/plain;charset=utf-8 --data-binary PATHS /data.com?op=search qp=* [ organizationNameLocalAka.fedapioa : % D0 % 9 E % D0 % A2 % D0 % 9 A % D0 % A0 % D0 % AB % D0 % A2 % D0 % 9 E % D0 % 95 % 20 % D0 % 90 % D0 % 9 A % D0 % A6 % D0 % 98 % D0 % 9 E % D0 % 9 D % D0 % 95 % D0 % A0 % D0 % 9 D % D0 % 9 E % D0 % 95 % 20 % D0 % 9 E % D0 % 91 % D0 % A9 % D0 % 95 % D0 % A1 % D0 % A2 % D0 % 92 % D0 % 9 E ] xg=1 with-data length=100 SPARQL SELECT * WHERE { ?s ?p ?o } Encode no non-English characters: curl -X POST cm-well-host / _sp ? format = json -H Content-Type:text/plain;charset=utf-8 --data-binary PATHS /data.com?op=search qp=* [ organizationNameLocalAka.fedapioa : \u041e\u0422\u041a\u0420\u042b\u0422\u041e\u0415 \u0410\u041a\u0426\u0418\u041e\u041d\u0415\u0420\u041d\u041e\u0415 \u041e\u0411\u0429\u0415\u0421\u0422\u0412\u041e ] xg=1 with-data length=100 SPARQL SELECT * WHERE { ?s ?p ?o }","title":"Don't Mix URL-Encoded and Non-Encoded Characters in the Same SPARQL Query"},{"location":"DeveloperGuide/DevGuide.DosAndDonts.html#dont-use-blank-nodes","text":"Several types of RDF notation support blank nodes (also known as bnodes ; resources represented by blank nodes are also called anonymous resources ). These are RDF nodes that have no defined URI. (see the Wikipedia Blank Node entry to learn more.) It's possible to define a temporary ID for the node such as x . However, such temporary identifiers are limited in scope only to a serialization of a particular RDF graph. While supported in certain notations (RDF/XML, RDFa, Turtle, N3 and N-Triples) and providing short term convenience for defining complex structures and for protecting sensitive information from browser access, as a rule using blank nodes is considered bad practice when working with large linked data stores like CM-Well, and is therefore discouraged . Best practice for linked data is to produce reusable, permanent URIs for objects. Disadvantages of using blank nodes include: They're limited to the document in which they appear. They reduce the potential for interlinking between different linked data sources. They make it much more difficult to merge data from different sources. CM-Well does not support blank nodes in its own data, and therefore when it encounters one, it creates an arbitrary URI for it. Since this is the case, we recommend not using blank nodes in data you intend to upload to CM-Well, and instead creating an informative URI for the relevant node, such as one containing a hash of its field values.","title":"Don't Use Blank Nodes"},{"location":"DeveloperGuide/DevGuide.DosAndDonts.html#dos","text":"","title":"Dos"},{"location":"DeveloperGuide/DevGuide.DosAndDonts.html#use-correct-syntax-in-windowsunix-command-line","text":"If you're using the Curl command-line utility to submit calls to CM-Well, you may encounter syntax errors that arise from differences between the command-line syntax for Windows and for Unix operating systems. See Using the Curl Utility to Call CM-Well to learn more.","title":"Use Correct Syntax in Windows/Unix Command-Line"},{"location":"DeveloperGuide/DevGuide.DosAndDonts.html#minimize-the-number-of-infoton-fields","text":"Sometimes infoton fields contain links to other infotons, in order to express a relationship between two entities. For example, an infoton representing a company might refer to another company infoton as its parent company, or its supplier. However, if you find you're creating many such infoton link fields in one infoton, you should consider creating intermediate objects that encapsulate several fields. For example, instead of a company infoton that contains 5 SuppliesTo fields and 4 SuppliedBy fields, you can create a SupplierRelationship object that contains all 9 relationships, and refer to it in a single field of the company infoton. This is better for CM-Well performance because: Multiple inbound/outbound links in one infoton can result in long processing times for queries that traverse these links. Such calls may even time out. Because of CM-Well's \"immutable data\" principle, every update of an infoton creates a new copy of the infoton. The more fields it has, the more storage these copies use. In the case of relationships that are relatively static over time, this is unnecessary and avoidable.","title":"Minimize the Number of Infoton Fields"},{"location":"DeveloperGuide/DevGuide.DosAndDonts.html#leave-50-60-of-disk-space-free-on-a-cm-well-node","text":"When using a CM-Well node in an operational or near-operational scenario, make sure that about %50-%60 of free disk space is maintained. This is because storage maintenance operations that CM-Well performs may temporarily use large amounts of disk space. This recommendation is also relevant for installations of CM-Well Docker that are run in near-operational conditions.","title":"Leave %50-%60 of Disk Space Free on a CM-Well Node"},{"location":"DeveloperGuide/DevGuide.ManagingUsers.html","text":"Managing CM-Well Users In order to perform write operations on CM-Well, API clients need a user entity to be defined in CM-Well. Users have a unique username, a password, read and write permissions for accessing CM-Well folders, and optionally one or more roles that confer additional read and write permissions. When a user logs into CM-Well successfully with valid username and password values, the user receives an access token that's valid for 24 hours after its creation. This token must be passed in the X-CM-WELL-TOKEN HTTP header for any API call that requires permissions (e.g. any call that updates CM-Well). You can create users for your compiled instance of CM-Well with different permissions for accessing different subsets of folders. The following sections describe how to manage users and passwords, and how to optionally define user role profiles. Note : After any change to user details, such as adding a new user or changing a password, remember to refresh the authentication cache . Creating New Users User details are encapsulated in a file infoton under the /meta/auth/users folder on CM-Well. To create a user, you will need to create this file infoton with the format described below. To do so you will need admin permissions. In your compiled version of CM-Well, there is a pre-defined admin user whose username and password are \"root\" and \"root\". To create a CM-Well user: Login to CM-Well with an admin user. A token with admin permissions is returned in the response. Create the JSON body with the new user's details (see table and example below). Upload the JSON body you created to a FileInfoton named \\ username>, under the folder /meta/auth/users . (For example, if the new user's username is jsmith, you create the FileInfoton at /meta/auth/users/jsmith .) Here is an example of a Curl call for creating the user FileInfoton, assuming the JSON body is in the text file userDetails.json : curl cmwell/meta/auth/users/jsmith -H \"X-CM-Well-Type:File\" -H \"Content-Type:application/json\" -H \"X-CM-Well-Token: AdminToken \" --data-binary @userDetails.json In order for the new user information to take effect, refresh the CM-Well authentication cache using the following command: cm-well-host /_auth?op=invalidate-cache -H \"X-CM-Well-Token: AdminToken \" You should receive the response {\"success\":true} ; if you don't, retry the call. The following table describes the fields in the JSON body that you write to the FileInfoton: Field Type Description paths Array of path objects. Mandatory. The CM-Well paths whose access permissions you want to specify for this user. paths.id String Mandatory. The path name (not including the CM-Well hostname). paths.sign String Mandatory. \"+\" to allow access; \"-\" to deny access. paths.recursive Boolean Mandatory. Whether to extend permissions to all sub-folders. paths.permissions String Mandatory. \"r\" (read permission), \"w\" (write permission) or \"rw\" (both). rev Integer Optional. A revision number for the user details. This value is encoded in any token provided to this user. If you need to revoke user access, you can update the revision value. This invalidates any active tokens for this user, preventing user access. digest String Optional. The user's password, encrypted using bcrypt and CM-Well's private key. This value is checked when a user logs in with HTTP Basic Authentication. digest2 String Optional. The MD5 encryption of \"\\ username>:cmwell:\\ password>\". This value is checked when a user logs in with HTTP Digest Authentication. See Generating User Passwords . roles Array of strings Optional. An array of roles belonging to the user. See Managing User Roles for more details. operations Array of strings Optional. Possible values are: PriorityWrite - allows the user to use the priority flag to boost priority for _in actions. Admin - allows the user to perform administrator actions such as changing the log level and invalidating caches. Overwrite - allows the user to use the _ow endpoint to create infoton versions as specified (with no merge to existing versions). Notes : * The JSON body does not include the username, as the username is \"stored\" as the FileInfoton's name. * To call the _login API, the user will need either a digest or a digest2 value defined. Here is an example of a user FileInfoton's JSON body: { paths : [ { id : / , sign : + , recursive : true, permissions : r }, { id : /test.example.org , sign : + , recursive : true, permissions : rw } ], operations :[ PriorityWrite ], rev :101, digest : $2a$10$7AnXsjks.IZXTbpRiAGN4OQItwiz4sgxM49lvTiCjWgOhbbOQkg2m , digest2 : 156a19430260e6b09497478441aea344 } Using the Old CM-Well UI to Create Users You can use the old CM-Well UI to create a user with a convenient GUI. To create a user in the old CM-Well UI: Browse to /_login. Enter your admin user and password. Click on the Use old UI link at the top-right corner. Enter Edit Mode by clicking on the pencil icon (under the well image to the right). Navigate to /meta/auth/users . Click on the + sign at the end if the users list. The Add User dialog is displayed and a password is generated for the user. From the Password field, copy and save the password value for your own information. In the Username field, type the new username. In the Permissions field, edit the paths field as required. Click the Create button. The new user's FileInfoton is created. Note : The digest and digest2 values are not visible in the dialog, but are added to the FileInfoton automatically. Editing User Details To edit user details, follow the same procedure as for creating a new user. This overrides the existing FileInfoton with your new user details content. Generating User Passwords You can use the generate-password API to generate a random password and its encoded digest value. Changing User Passwords You can use the change-password API to change an existing password. Deleting Users To delete a user, simply delete the FileInfoton with the user's details, then call the invalidate-cache API to make the deletion effective immediately. Managing User Roles You may want to define user roles that confer a particular set of access permissions on users with those roles, to be applied to several users. You can do this by creating FileInfotons with the same paths field as described in Creating New Users (no other fields are required). If a user's FileInfoton has the roles field, then the user takes on the permissions of those roles. For example, if user jsmith has \"roles\":[\"Editor\"] in his FileInfoton, and there is a /meta/auth/roles/Editor FileInfoton which allows write permission on certain paths, then jsmith can write to those paths, even though they're not mentioned in his personal paths field. Note : If there's a contradiction between personal permissions and role-based permissions, the personal permissions take precedence. To create a role FileInfoton: Login to CM-Well with an admin user. A token with admin permissions is returned in the response. Create the JSON body with role paths and permissions as required. See paths field . Upload the JSON body you created to a FileInfoton named , under the folder /meta/auth/roles . For example: curl cmwell/meta/auth/roles/Editor -H \"X-CM-Well-Type:File\" -H \"Content-Type:application/json\" -H \"X-CM-Well-Token: AdminToken \" --data-binary @roleDetails.json In order for the new role information to take effect, refresh the CM-Well authentication cache using the following command: cm-well-host /_auth?op=invalidate-cache -H \"X-CM-Well-Token: AdminToken \" Related Topics CM-Well Security Features Login API Change Password API Generate Password API Invalidate Cache API","title":"Managing CM-Well Users"},{"location":"DeveloperGuide/DevGuide.ManagingUsers.html#managing-cm-well-users","text":"In order to perform write operations on CM-Well, API clients need a user entity to be defined in CM-Well. Users have a unique username, a password, read and write permissions for accessing CM-Well folders, and optionally one or more roles that confer additional read and write permissions. When a user logs into CM-Well successfully with valid username and password values, the user receives an access token that's valid for 24 hours after its creation. This token must be passed in the X-CM-WELL-TOKEN HTTP header for any API call that requires permissions (e.g. any call that updates CM-Well). You can create users for your compiled instance of CM-Well with different permissions for accessing different subsets of folders. The following sections describe how to manage users and passwords, and how to optionally define user role profiles. Note : After any change to user details, such as adding a new user or changing a password, remember to refresh the authentication cache .","title":"Managing CM-Well Users"},{"location":"DeveloperGuide/DevGuide.ManagingUsers.html#creating-new-users","text":"User details are encapsulated in a file infoton under the /meta/auth/users folder on CM-Well. To create a user, you will need to create this file infoton with the format described below. To do so you will need admin permissions. In your compiled version of CM-Well, there is a pre-defined admin user whose username and password are \"root\" and \"root\". To create a CM-Well user: Login to CM-Well with an admin user. A token with admin permissions is returned in the response. Create the JSON body with the new user's details (see table and example below). Upload the JSON body you created to a FileInfoton named \\ username>, under the folder /meta/auth/users . (For example, if the new user's username is jsmith, you create the FileInfoton at /meta/auth/users/jsmith .) Here is an example of a Curl call for creating the user FileInfoton, assuming the JSON body is in the text file userDetails.json : curl cmwell/meta/auth/users/jsmith -H \"X-CM-Well-Type:File\" -H \"Content-Type:application/json\" -H \"X-CM-Well-Token: AdminToken \" --data-binary @userDetails.json In order for the new user information to take effect, refresh the CM-Well authentication cache using the following command: cm-well-host /_auth?op=invalidate-cache -H \"X-CM-Well-Token: AdminToken \" You should receive the response {\"success\":true} ; if you don't, retry the call. The following table describes the fields in the JSON body that you write to the FileInfoton: Field Type Description paths Array of path objects. Mandatory. The CM-Well paths whose access permissions you want to specify for this user. paths.id String Mandatory. The path name (not including the CM-Well hostname). paths.sign String Mandatory. \"+\" to allow access; \"-\" to deny access. paths.recursive Boolean Mandatory. Whether to extend permissions to all sub-folders. paths.permissions String Mandatory. \"r\" (read permission), \"w\" (write permission) or \"rw\" (both). rev Integer Optional. A revision number for the user details. This value is encoded in any token provided to this user. If you need to revoke user access, you can update the revision value. This invalidates any active tokens for this user, preventing user access. digest String Optional. The user's password, encrypted using bcrypt and CM-Well's private key. This value is checked when a user logs in with HTTP Basic Authentication. digest2 String Optional. The MD5 encryption of \"\\ username>:cmwell:\\ password>\". This value is checked when a user logs in with HTTP Digest Authentication. See Generating User Passwords . roles Array of strings Optional. An array of roles belonging to the user. See Managing User Roles for more details. operations Array of strings Optional. Possible values are: PriorityWrite - allows the user to use the priority flag to boost priority for _in actions. Admin - allows the user to perform administrator actions such as changing the log level and invalidating caches. Overwrite - allows the user to use the _ow endpoint to create infoton versions as specified (with no merge to existing versions). Notes : * The JSON body does not include the username, as the username is \"stored\" as the FileInfoton's name. * To call the _login API, the user will need either a digest or a digest2 value defined. Here is an example of a user FileInfoton's JSON body: { paths : [ { id : / , sign : + , recursive : true, permissions : r }, { id : /test.example.org , sign : + , recursive : true, permissions : rw } ], operations :[ PriorityWrite ], rev :101, digest : $2a$10$7AnXsjks.IZXTbpRiAGN4OQItwiz4sgxM49lvTiCjWgOhbbOQkg2m , digest2 : 156a19430260e6b09497478441aea344 }","title":"Creating New Users"},{"location":"DeveloperGuide/DevGuide.ManagingUsers.html#using-the-old-cm-well-ui-to-create-users","text":"You can use the old CM-Well UI to create a user with a convenient GUI. To create a user in the old CM-Well UI: Browse to /_login. Enter your admin user and password. Click on the Use old UI link at the top-right corner. Enter Edit Mode by clicking on the pencil icon (under the well image to the right). Navigate to /meta/auth/users . Click on the + sign at the end if the users list. The Add User dialog is displayed and a password is generated for the user. From the Password field, copy and save the password value for your own information. In the Username field, type the new username. In the Permissions field, edit the paths field as required. Click the Create button. The new user's FileInfoton is created. Note : The digest and digest2 values are not visible in the dialog, but are added to the FileInfoton automatically.","title":"Using the Old CM-Well UI to Create Users"},{"location":"DeveloperGuide/DevGuide.ManagingUsers.html#editing-user-details","text":"To edit user details, follow the same procedure as for creating a new user. This overrides the existing FileInfoton with your new user details content.","title":"Editing User Details"},{"location":"DeveloperGuide/DevGuide.ManagingUsers.html#generating-user-passwords","text":"You can use the generate-password API to generate a random password and its encoded digest value.","title":"Generating User Passwords"},{"location":"DeveloperGuide/DevGuide.ManagingUsers.html#changing-user-passwords","text":"You can use the change-password API to change an existing password.","title":"Changing User Passwords"},{"location":"DeveloperGuide/DevGuide.ManagingUsers.html#deleting-users","text":"To delete a user, simply delete the FileInfoton with the user's details, then call the invalidate-cache API to make the deletion effective immediately.","title":"Deleting Users"},{"location":"DeveloperGuide/DevGuide.ManagingUsers.html#managing-user-roles","text":"You may want to define user roles that confer a particular set of access permissions on users with those roles, to be applied to several users. You can do this by creating FileInfotons with the same paths field as described in Creating New Users (no other fields are required). If a user's FileInfoton has the roles field, then the user takes on the permissions of those roles. For example, if user jsmith has \"roles\":[\"Editor\"] in his FileInfoton, and there is a /meta/auth/roles/Editor FileInfoton which allows write permission on certain paths, then jsmith can write to those paths, even though they're not mentioned in his personal paths field. Note : If there's a contradiction between personal permissions and role-based permissions, the personal permissions take precedence. To create a role FileInfoton: Login to CM-Well with an admin user. A token with admin permissions is returned in the response. Create the JSON body with role paths and permissions as required. See paths field . Upload the JSON body you created to a FileInfoton named , under the folder /meta/auth/roles . For example: curl cmwell/meta/auth/roles/Editor -H \"X-CM-Well-Type:File\" -H \"Content-Type:application/json\" -H \"X-CM-Well-Token: AdminToken \" --data-binary @roleDetails.json In order for the new role information to take effect, refresh the CM-Well authentication cache using the following command: cm-well-host /_auth?op=invalidate-cache -H \"X-CM-Well-Token: AdminToken \"","title":"Managing User Roles"},{"location":"DeveloperGuide/DevGuide.ManagingUsers.html#related-topics","text":"CM-Well Security Features Login API Change Password API Generate Password API Invalidate Cache API","title":"Related Topics"},{"location":"DeveloperGuide/DevGuide.NewToCM-Well.html","text":"New to CM-Well? If you're new to CM-Well, this page is a good place to familiarize yourself with some basic concepts about CM-Well. What is CM-Well? CM-Well is a writable Linked Data repository, developed by Thomson Reuters Refinitiv and used as its central Knowledge Graph database. CM-Well (Content Matrix Well) adheres to RDF principles, meaning that data is in a standard , machine-readable format. CM-Well is not a triple store! Our focus is on high scale, immutability of changes and downstream distribution of content. In BI terminology, CM-Well is a data warehouse , you might use a triple store downstream as a data mart . You can read more about the key differentiating features of CM-Well in our paper accepted to 2017 International Semantic Web Conference . The Refinitiv Knowledge Graph contains information about organizations, instruments and people in the world of finance, but you can use CM-Well for any kind of linked data. Thomson Reuters Refinitiv are now offering CM-Well as an Open Source platform for the developer community to use and enrich. Key Features and Technology CM-Well is based on a clustered architecture, with durable storage into Apache Cassandra and indexing via Elastic Search . Key features include: Horizontal scaling to support billions of triples Cross site replication REST based APIs All writes treated as immutable, storing previous versions Named graph (quad) support Fast (~10ms by subject, ~50ms for search) retrieval by subject and predicate query Support for SPARQL on sub-graph and a beta of full graph SPARQL Subscription by query for downstream consumers Other key technologies used under the covers include: Angular and React for the UIs Akka for cluster management Jena for Sparql and RDF conversions Netty for network comms * Zookeeper for cluster configuration Learn More About CM-Well Here are some introductory topics you can read if you're new to CM-Well: Topic Description Introduction to CM-Well An overview of CM-Well and the business need it meets CM-Well Data Paradigms RDF, graph databases and other data paradigms related to CM-Well Overview of the CM-Well API A brief functional overview of the CM-Well API Technical Aspects of CM-Well A technical overview of the CM-Well API and platform, and what you'll need in order to develop a client application To learn about the CM-Well API, read at least these chapters of the CM-Well Developer Guide: Using the Curl Utility to Call CM-Well Basic Queries Advanced Queries To start getting some hands-on experience with CM-Well, work through one of the CM-Well Tutorials . You can install CM-Well on your laptop. Note We recommend completing all introductory material described above, including working through tutorials, before attempting a proof-of-concept project.","title":"New to CM-Well?"},{"location":"DeveloperGuide/DevGuide.NewToCM-Well.html#new-to-cm-well","text":"If you're new to CM-Well, this page is a good place to familiarize yourself with some basic concepts about CM-Well.","title":"New to CM-Well?"},{"location":"DeveloperGuide/DevGuide.NewToCM-Well.html#what-is-cm-well","text":"CM-Well is a writable Linked Data repository, developed by Thomson Reuters Refinitiv and used as its central Knowledge Graph database. CM-Well (Content Matrix Well) adheres to RDF principles, meaning that data is in a standard , machine-readable format. CM-Well is not a triple store! Our focus is on high scale, immutability of changes and downstream distribution of content. In BI terminology, CM-Well is a data warehouse , you might use a triple store downstream as a data mart . You can read more about the key differentiating features of CM-Well in our paper accepted to 2017 International Semantic Web Conference . The Refinitiv Knowledge Graph contains information about organizations, instruments and people in the world of finance, but you can use CM-Well for any kind of linked data. Thomson Reuters Refinitiv are now offering CM-Well as an Open Source platform for the developer community to use and enrich.","title":"What is CM-Well?"},{"location":"DeveloperGuide/DevGuide.NewToCM-Well.html#key-features-and-technology","text":"CM-Well is based on a clustered architecture, with durable storage into Apache Cassandra and indexing via Elastic Search . Key features include: Horizontal scaling to support billions of triples Cross site replication REST based APIs All writes treated as immutable, storing previous versions Named graph (quad) support Fast (~10ms by subject, ~50ms for search) retrieval by subject and predicate query Support for SPARQL on sub-graph and a beta of full graph SPARQL Subscription by query for downstream consumers Other key technologies used under the covers include: Angular and React for the UIs Akka for cluster management Jena for Sparql and RDF conversions Netty for network comms * Zookeeper for cluster configuration","title":"Key Features and Technology"},{"location":"DeveloperGuide/DevGuide.NewToCM-Well.html#learn-more-about-cm-well","text":"Here are some introductory topics you can read if you're new to CM-Well: Topic Description Introduction to CM-Well An overview of CM-Well and the business need it meets CM-Well Data Paradigms RDF, graph databases and other data paradigms related to CM-Well Overview of the CM-Well API A brief functional overview of the CM-Well API Technical Aspects of CM-Well A technical overview of the CM-Well API and platform, and what you'll need in order to develop a client application To learn about the CM-Well API, read at least these chapters of the CM-Well Developer Guide: Using the Curl Utility to Call CM-Well Basic Queries Advanced Queries To start getting some hands-on experience with CM-Well, work through one of the CM-Well Tutorials . You can install CM-Well on your laptop. Note We recommend completing all introductory material described above, including working through tutorials, before attempting a proof-of-concept project.","title":"Learn More About CM-Well"},{"location":"DeveloperGuide/DevGuide.QuickStart.html","text":"Quick Start This page provides developers with a brief overview of how to build and run CM-Well, and how to get started with some basic CM-Well read and write operations. Basic Write and Read Operations You can get started with CM-Well by running some basic write and read operations. Note The Curl commands in the examples below assume that CM-Well is running on your local machine. Write Infotons and Fields Action : Create 5 new infotons (an infoton is the basic unit of storage for RDF in CM-Well) under the path example/Individuals: MamaBear, PapaBear, BabyBear1, BabyBear2 and BabyBear3. Each bear has a hasName field with a name value. Curl command: curl -X POST http://localhost:8080/_in?format=ntriples --data-binary @input.txt File contents: http://example/Individuals/MamaBear http://purl.org/vocab/relationship/spouseOf http://example/Individuals/PapaBear . http://example/Individuals/MamaBear http://xmlns.com/foaf/0.1/givenName Betty . http://example/Individuals/PapaBear http://xmlns.com/foaf/0.1/givenName Barney . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear1 http://xmlns.com/foaf/0.1/givenName Barbara . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/siblingOf http://example/Individuals/BabyBear2 . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/siblingOf http://example/Individuals/BabyBear3 . http://example/Individuals/BabyBear2 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear2 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear2 http://xmlns.com/foaf/0.1/givenName Bobby . http://example/Individuals/BabyBear3 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear3 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear3 http://xmlns.com/foaf/0.1/givenName Bert . Response: { success :true} Read Infotons Action: Read the infotons you created in the previous step under example/individuals, with associated predicates. Curl command: curl http://localhost:8080/example/Individuals?op=search format=ttl recursive with-data Response: Note The sys namespace and predicates in the response are metadata produced by CM-Well, not user-defined data. @ prefix nn : http :// localhost : 8080 / meta / nn # . @ prefix foaf : http :// xmlns . com / foaf / 0 . 1 / . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix rel : http :// purl . org / vocab / relationship / . @ prefix sys : http :// localhost : 8080 / meta / sys # . http :// localhost : 8080 / example / Individuals / MamaBear sys : dataCenter lh ; sys : indexTime 1470058071114 ^^ xsd : long ; sys : lastModified 2016-08-01T13:27:49.241Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/MamaBear ; sys : type ObjectInfoton ; sys : uuid e6f36b01bec464f9e2a8d8b690590e31 ; foaf : givenName Betty ; rel : spouseOf http :// example / Individuals / PapaBear . http :// localhost : 8080 / example / Individuals / BabyBear2 sys : dataCenter lh ; sys : indexTime 1470058071125 ^^ xsd : long ; sys : lastModified 2016-08-01T13:27:49.241Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/BabyBear2 ; sys : type ObjectInfoton ; sys : uuid 284a5a2438db15b5f8d9ef87795c0945 ; foaf : givenName Bobby ; rel : childOf http :// example / Individuals / PapaBear , http :// example / Individuals / MamaBear . http :// localhost : 8080 / example / Individuals / BabyBear3 sys : dataCenter lh ; sys : indexTime 1470058071112 ^^ xsd : long ; sys : lastModified 2016-08-01T13:27:49.239Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/BabyBear3 ; sys : type ObjectInfoton ; sys : uuid 671d93482c72b51cef5afa18c71692a5 ; foaf : givenName Bert ; rel : childOf http :// example / Individuals / PapaBear , http :// example / Individuals / MamaBear . [ sys : pagination [ sys : first http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-01T13%3A27%3A49.239Z to=2016-08-01T13%3A27%3A49.242Z length=5 offset=0 ; sys : last http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-01T13%3A27%3A49.239Z to=2016-08-01T13%3A27%3A49.242Z length=5 offset=5 ; sys : self http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-01T13%3A27%3A49.239Z to=2016-08-01T13%3A27%3A49.242Z length=5 offset=0 ; sys : type PaginationInfo ] ; sys : results [ sys : fromDate 2016-08-01T13:27:49.239Z ^^ xsd : dateTime ; sys : infotons http : //localhost:8080/example/Individuals/MamaBear , http://localhost:8080/example/Individuals/BabyBear1 , http://localhost:8080/example/Individuals/PapaBear , http://localhost:8080/example/Individuals/BabyBear3 , http://localhost:8080/example/Individuals/BabyBear2 ; sys : length 5 ^^ xsd : long ; sys : offset 0 ^^ xsd : long ; sys : toDate 2016-08-01T13:27:49.242Z ^^ xsd : dateTime ; sys : total 5 ^^ xsd : long ; sys : type SearchResults ] ; sys : type SearchResponse ] . http :// localhost : 8080 / example / Individuals / BabyBear1 sys : dataCenter lh ; sys : indexTime 1470058071125 ^^ xsd : long ; sys : lastModified 2016-08-01T13:27:49.242Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/BabyBear1 ; sys : type ObjectInfoton ; sys : uuid 1627fe787d44b5a4fff19f50181b585b ; foaf : givenName Barbara ; rel : childOf http :// example / Individuals / MamaBear , http :// example / Individuals / PapaBear ; rel : siblingOf http :// example / Individuals / BabyBear2 , http :// example / Individuals / BabyBear3 . http :// localhost : 8080 / example / Individuals / PapaBear sys : dataCenter lh ; sys : indexTime 1470058071120 ^^ xsd : long ; sys : lastModified 2016-08-01T13:27:49.241Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/PapaBear ; sys : type ObjectInfoton ; sys : uuid 6513a8d6395af8db932f49afb97cbfd1 ; foaf : givenName Barney . CM-Well Tutorials See CM-Well Tutorials to learn how perform more CM-Well operations. Developer Resources See the following resources to learn more about CM-Well workflows, APIs and architecture: CM-Well API Reference CM-Well Developer Guide CM-Well Data Paradigms CM-Well High-Level Architecture System Requirements Build Requirements Before building CM-Well, you will need to install the following software packages: Java 8 Scala 2.12.4 SBT(Scala Build Tool) version 1.1.4 or later Note Currently, CM-Well only runs on Mac and Linux environments Run Requirements Java 8 Scala 2.11.11 8 GB RAM Downloading and Building CM-Well To build CM-Well from its code: Clone the CM-Well source branch from CM-Well GitHub Code Page to a local directory on your machine. On your machine, navigate to the server directory. To compile CM-Well, run the following Scala command: sbt packageCmwell or preferably (for a complete rebuild and testing): sbt ccft Note You may need to give sbt more heap to compile. A 2GB heap works, which you can set by specifying the following: export SBT_OPTS= -Xmx2G -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -Xss2M More detailed instructions can be found in the Building CM-Well . Code Repository Structure The following tables describe CM-Well\u2019s code directory structure: Top-level directories: Directory Description cm-well Root directory server Main CM-Well server directory Server directories: Directory Description cmwell-batch Old background indexing and persisting process cmwell-bg New background indexing and persisting process cmwell-common Common utility classes for several projects cmwell-cons CM-Well install/upgrade/maintenance console cmwell-controller A wrapper around Akka Cluster library to orchestrate all components cmwell-dao Cassandra driver cmwell-data-tools Auxiliary wrappers around CM-Well APIs, to be used as library by CM-Well client developers cmwell-data-tools-app cmwell-data-tools as a stand-alone app (can be used in Linux shell) cmwell-dc Distributed Container. In charge of: health control, data center synchronization, etc. cmwell-docs CM-Well documentation cmwell-domain CM-Well basic entities (e.g. Infoton) cmwell-formats Output formatters for CM-Well data (e.g. to nquads or trig) cmwell-fts Full-text-search wrapper around ElasticSearch cmwell-grid ActorSystem wrapper library used to manage actors across a CM-Well cluster cmwell-imp Infoton merge process used by the background process for incremental updated support cmwell-indexer Indexes data in ElasticSearch using FTS (and used by the background process) cmwell-irw Infoton read from/write to Cassandra (using dao) cmwell-it Integration tests cmwell-kafka-assigner Kafka assigner utility cmwell-plugin-gremlin _sp plugin to support Gremlin (graph traversal language) cmwell-rts Real time search a.k.a pub-sub (real time update of changes in the data according to a certain query) cmwell-spa CM-Well default web-app cmwell-sparql-agent SPARQL Agent Processor cmwell-stortill Utilities for manual data fixes cmwell-tlog TransactionLog (ingest queue) file mechanism. Old mechanism of communication between WS and the old background process. cmwell-tracking Tracking capabilities cmwell-util Common utilities that are used by multiple projects cmwell-ws Web Service (Play! Framework application) cmwell-zstore A distributed key/value store, using Cassandra. Used by multiple projects. project Build instructions and mechanism (SBT) Running CM-Well To run your compiled version of CM-Well: Build CM-Well as described in Downloading and Building CM-Well . Navigate to the server/cmwell-cons/app directory. To launch the CM-Well console, run the following command: ./cmwell.sh To install a Personal Edition (single-node installation) instance of CM-Well, run the following commands: :load pe pe.install Note : Once CM-Well is installed, the CM-Well web UI is available at http://localhost:9000. See CM-Well Web Interface to learn more.","title":"Quick Start"},{"location":"DeveloperGuide/DevGuide.QuickStart.html#quick-start","text":"This page provides developers with a brief overview of how to build and run CM-Well, and how to get started with some basic CM-Well read and write operations.","title":"Quick Start"},{"location":"DeveloperGuide/DevGuide.QuickStart.html#basic-write-and-read-operations","text":"You can get started with CM-Well by running some basic write and read operations. Note The Curl commands in the examples below assume that CM-Well is running on your local machine.","title":"Basic Write and Read Operations"},{"location":"DeveloperGuide/DevGuide.QuickStart.html#write-infotons-and-fields","text":"Action : Create 5 new infotons (an infoton is the basic unit of storage for RDF in CM-Well) under the path example/Individuals: MamaBear, PapaBear, BabyBear1, BabyBear2 and BabyBear3. Each bear has a hasName field with a name value. Curl command: curl -X POST http://localhost:8080/_in?format=ntriples --data-binary @input.txt File contents: http://example/Individuals/MamaBear http://purl.org/vocab/relationship/spouseOf http://example/Individuals/PapaBear . http://example/Individuals/MamaBear http://xmlns.com/foaf/0.1/givenName Betty . http://example/Individuals/PapaBear http://xmlns.com/foaf/0.1/givenName Barney . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear1 http://xmlns.com/foaf/0.1/givenName Barbara . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/siblingOf http://example/Individuals/BabyBear2 . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/siblingOf http://example/Individuals/BabyBear3 . http://example/Individuals/BabyBear2 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear2 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear2 http://xmlns.com/foaf/0.1/givenName Bobby . http://example/Individuals/BabyBear3 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear3 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear3 http://xmlns.com/foaf/0.1/givenName Bert . Response: { success :true}","title":"Write Infotons and Fields"},{"location":"DeveloperGuide/DevGuide.QuickStart.html#read-infotons","text":"Action: Read the infotons you created in the previous step under example/individuals, with associated predicates. Curl command: curl http://localhost:8080/example/Individuals?op=search format=ttl recursive with-data Response: Note The sys namespace and predicates in the response are metadata produced by CM-Well, not user-defined data. @ prefix nn : http :// localhost : 8080 / meta / nn # . @ prefix foaf : http :// xmlns . com / foaf / 0 . 1 / . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix rel : http :// purl . org / vocab / relationship / . @ prefix sys : http :// localhost : 8080 / meta / sys # . http :// localhost : 8080 / example / Individuals / MamaBear sys : dataCenter lh ; sys : indexTime 1470058071114 ^^ xsd : long ; sys : lastModified 2016-08-01T13:27:49.241Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/MamaBear ; sys : type ObjectInfoton ; sys : uuid e6f36b01bec464f9e2a8d8b690590e31 ; foaf : givenName Betty ; rel : spouseOf http :// example / Individuals / PapaBear . http :// localhost : 8080 / example / Individuals / BabyBear2 sys : dataCenter lh ; sys : indexTime 1470058071125 ^^ xsd : long ; sys : lastModified 2016-08-01T13:27:49.241Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/BabyBear2 ; sys : type ObjectInfoton ; sys : uuid 284a5a2438db15b5f8d9ef87795c0945 ; foaf : givenName Bobby ; rel : childOf http :// example / Individuals / PapaBear , http :// example / Individuals / MamaBear . http :// localhost : 8080 / example / Individuals / BabyBear3 sys : dataCenter lh ; sys : indexTime 1470058071112 ^^ xsd : long ; sys : lastModified 2016-08-01T13:27:49.239Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/BabyBear3 ; sys : type ObjectInfoton ; sys : uuid 671d93482c72b51cef5afa18c71692a5 ; foaf : givenName Bert ; rel : childOf http :// example / Individuals / PapaBear , http :// example / Individuals / MamaBear . [ sys : pagination [ sys : first http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-01T13%3A27%3A49.239Z to=2016-08-01T13%3A27%3A49.242Z length=5 offset=0 ; sys : last http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-01T13%3A27%3A49.239Z to=2016-08-01T13%3A27%3A49.242Z length=5 offset=5 ; sys : self http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-01T13%3A27%3A49.239Z to=2016-08-01T13%3A27%3A49.242Z length=5 offset=0 ; sys : type PaginationInfo ] ; sys : results [ sys : fromDate 2016-08-01T13:27:49.239Z ^^ xsd : dateTime ; sys : infotons http : //localhost:8080/example/Individuals/MamaBear , http://localhost:8080/example/Individuals/BabyBear1 , http://localhost:8080/example/Individuals/PapaBear , http://localhost:8080/example/Individuals/BabyBear3 , http://localhost:8080/example/Individuals/BabyBear2 ; sys : length 5 ^^ xsd : long ; sys : offset 0 ^^ xsd : long ; sys : toDate 2016-08-01T13:27:49.242Z ^^ xsd : dateTime ; sys : total 5 ^^ xsd : long ; sys : type SearchResults ] ; sys : type SearchResponse ] . http :// localhost : 8080 / example / Individuals / BabyBear1 sys : dataCenter lh ; sys : indexTime 1470058071125 ^^ xsd : long ; sys : lastModified 2016-08-01T13:27:49.242Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/BabyBear1 ; sys : type ObjectInfoton ; sys : uuid 1627fe787d44b5a4fff19f50181b585b ; foaf : givenName Barbara ; rel : childOf http :// example / Individuals / MamaBear , http :// example / Individuals / PapaBear ; rel : siblingOf http :// example / Individuals / BabyBear2 , http :// example / Individuals / BabyBear3 . http :// localhost : 8080 / example / Individuals / PapaBear sys : dataCenter lh ; sys : indexTime 1470058071120 ^^ xsd : long ; sys : lastModified 2016-08-01T13:27:49.241Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/PapaBear ; sys : type ObjectInfoton ; sys : uuid 6513a8d6395af8db932f49afb97cbfd1 ; foaf : givenName Barney .","title":"Read Infotons"},{"location":"DeveloperGuide/DevGuide.QuickStart.html#cm-well-tutorials","text":"See CM-Well Tutorials to learn how perform more CM-Well operations.","title":"CM-Well Tutorials"},{"location":"DeveloperGuide/DevGuide.QuickStart.html#developer-resources","text":"See the following resources to learn more about CM-Well workflows, APIs and architecture: CM-Well API Reference CM-Well Developer Guide CM-Well Data Paradigms CM-Well High-Level Architecture","title":"Developer Resources"},{"location":"DeveloperGuide/DevGuide.QuickStart.html#system-requirements","text":"","title":"System Requirements"},{"location":"DeveloperGuide/DevGuide.QuickStart.html#build-requirements","text":"Before building CM-Well, you will need to install the following software packages: Java 8 Scala 2.12.4 SBT(Scala Build Tool) version 1.1.4 or later Note Currently, CM-Well only runs on Mac and Linux environments","title":"Build Requirements"},{"location":"DeveloperGuide/DevGuide.QuickStart.html#run-requirements","text":"Java 8 Scala 2.11.11 8 GB RAM","title":"Run Requirements"},{"location":"DeveloperGuide/DevGuide.QuickStart.html#downloading-and-building-cm-well","text":"To build CM-Well from its code: Clone the CM-Well source branch from CM-Well GitHub Code Page to a local directory on your machine. On your machine, navigate to the server directory. To compile CM-Well, run the following Scala command: sbt packageCmwell or preferably (for a complete rebuild and testing): sbt ccft Note You may need to give sbt more heap to compile. A 2GB heap works, which you can set by specifying the following: export SBT_OPTS= -Xmx2G -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -Xss2M More detailed instructions can be found in the Building CM-Well .","title":"Downloading and Building CM-Well"},{"location":"DeveloperGuide/DevGuide.QuickStart.html#code-repository-structure","text":"The following tables describe CM-Well\u2019s code directory structure: Top-level directories: Directory Description cm-well Root directory server Main CM-Well server directory Server directories: Directory Description cmwell-batch Old background indexing and persisting process cmwell-bg New background indexing and persisting process cmwell-common Common utility classes for several projects cmwell-cons CM-Well install/upgrade/maintenance console cmwell-controller A wrapper around Akka Cluster library to orchestrate all components cmwell-dao Cassandra driver cmwell-data-tools Auxiliary wrappers around CM-Well APIs, to be used as library by CM-Well client developers cmwell-data-tools-app cmwell-data-tools as a stand-alone app (can be used in Linux shell) cmwell-dc Distributed Container. In charge of: health control, data center synchronization, etc. cmwell-docs CM-Well documentation cmwell-domain CM-Well basic entities (e.g. Infoton) cmwell-formats Output formatters for CM-Well data (e.g. to nquads or trig) cmwell-fts Full-text-search wrapper around ElasticSearch cmwell-grid ActorSystem wrapper library used to manage actors across a CM-Well cluster cmwell-imp Infoton merge process used by the background process for incremental updated support cmwell-indexer Indexes data in ElasticSearch using FTS (and used by the background process) cmwell-irw Infoton read from/write to Cassandra (using dao) cmwell-it Integration tests cmwell-kafka-assigner Kafka assigner utility cmwell-plugin-gremlin _sp plugin to support Gremlin (graph traversal language) cmwell-rts Real time search a.k.a pub-sub (real time update of changes in the data according to a certain query) cmwell-spa CM-Well default web-app cmwell-sparql-agent SPARQL Agent Processor cmwell-stortill Utilities for manual data fixes cmwell-tlog TransactionLog (ingest queue) file mechanism. Old mechanism of communication between WS and the old background process. cmwell-tracking Tracking capabilities cmwell-util Common utilities that are used by multiple projects cmwell-ws Web Service (Play! Framework application) cmwell-zstore A distributed key/value store, using Cassandra. Used by multiple projects. project Build instructions and mechanism (SBT)","title":"Code Repository Structure"},{"location":"DeveloperGuide/DevGuide.QuickStart.html#running-cm-well","text":"To run your compiled version of CM-Well: Build CM-Well as described in Downloading and Building CM-Well . Navigate to the server/cmwell-cons/app directory. To launch the CM-Well console, run the following command: ./cmwell.sh To install a Personal Edition (single-node installation) instance of CM-Well, run the following commands: :load pe pe.install Note : Once CM-Well is installed, the CM-Well web UI is available at http://localhost:9000. See CM-Well Web Interface to learn more.","title":"Running CM-Well"},{"location":"DeveloperGuide/DevGuide.StreamingDataFromCM-Well.html","text":"Streaming Data from CM-Well If you want to perform a one-time retrieval of a large amount of CM-Well data, you can do this by using the stream operation. You can define the data you want by its path in CM-Well, and optionally add a query filter and query parameters. The data returned is the list of infotons under the path you specified that match your query filter. For example, the following command streams all Organization infotons from the CM-Well pre-production environment: curl -X GET cm-well-host /data.com/?op=stream format=ntriples qp=type.rdf::http://ont.thomsonreuters.com/mdaas/Organization Tip If for any reason the streaming operation fails, you will have to retrieve all the data from the beginning. An alternative method is the Consumer API , which is slower than streaming, but if interrupted allows you to resume from where you left off. There are several different implementations of the streaming feature, with different operation names (stream, mstream, qstream, sstream). They have different approaches and may work better for different types of data (e.g. a small collection vs. a larger collection). You can also use the bulk consume operation to stream large numbers of infotons. This is a \"hybrid\" approach between streaming and iteration. Streaming Formats Only the following formats are supported for the stream command: Format format= Mimetype NTriples ntriples text/plain NQuads nquads text/turtle Note If the format is supplied in the call, the resulting infotons' data is returned. If you omit the format parameter, only the infotons' URIs are returned.","title":"Streaming Data from CM-Well"},{"location":"DeveloperGuide/DevGuide.StreamingDataFromCM-Well.html#streaming-data-from-cm-well","text":"If you want to perform a one-time retrieval of a large amount of CM-Well data, you can do this by using the stream operation. You can define the data you want by its path in CM-Well, and optionally add a query filter and query parameters. The data returned is the list of infotons under the path you specified that match your query filter. For example, the following command streams all Organization infotons from the CM-Well pre-production environment: curl -X GET cm-well-host /data.com/?op=stream format=ntriples qp=type.rdf::http://ont.thomsonreuters.com/mdaas/Organization Tip If for any reason the streaming operation fails, you will have to retrieve all the data from the beginning. An alternative method is the Consumer API , which is slower than streaming, but if interrupted allows you to resume from where you left off. There are several different implementations of the streaming feature, with different operation names (stream, mstream, qstream, sstream). They have different approaches and may work better for different types of data (e.g. a small collection vs. a larger collection). You can also use the bulk consume operation to stream large numbers of infotons. This is a \"hybrid\" approach between streaming and iteration.","title":"Streaming Data from CM-Well"},{"location":"DeveloperGuide/DevGuide.StreamingDataFromCM-Well.html#streaming-formats","text":"Only the following formats are supported for the stream command: Format format= Mimetype NTriples ntriples text/plain NQuads nquads text/turtle Note If the format is supplied in the call, the resulting infotons' data is returned. If you omit the format parameter, only the infotons' URIs are returned.","title":"Streaming Formats"},{"location":"DeveloperGuide/DevGuide.SubscribingToReal-TimeUpdates.html","text":"Subscribing to Updates You may want to subscribe to real-time updates of CM-Well, so that your application always has the latest data available. For example, if your application shows Organization data, you may want to ensure that you have the latest information before displaying an organization's details. CM-Well supports two types of real-time subscriptions: Push - Your application provides an address to which CM-Well will post all new infotons under the path you specify. Pull - Your application requests new data under a specific path. The call only returns when there is new data available. The following sections describe how to subscribe to push and pull real-time updates. Subscribing for Pushed Data Here is a template for how to subscribe to pushed data. Items in brackets are placeholders for actual values. curl -X GET cm-well-host / cm-well-path ?op=subscribe method=push format= outputFormat qp= fieldConditions callback= http://some.host/some/path These are the elements of the request: Element Description / The CM-Well path whose infotons you want to receive. op=subscribe Indicates a \"subscribe\" operation. method=push Indicates the \"push\" method of receiving data. format=\\ outputFormat> Specifies the push output format. qp=\\ fieldConditions> An optional filter on the infotons you want to receive. Only those that match the field conditions are pushed. callback=http://some.host/some/path The address to which you want the data to be pushed. This request returns the subscription ID that you'll need in order to unsubscribe from this search. Subscribing for Pulled Data Here is a template for how to subscribe to pulled data. Items in brackets are placeholders for actual values. curl -X GET cm-well-host / cm-well-path ?op=subscribe method=pull format= outputFormat qp= fieldConditions bulk-size= nofInfotons These are the elements of the request: Element Description / The CM-Well path whose infotons you want to receive. op=subscribe Indicates a \"subscribe\" operation. method=pull Indicates the \"pull\" method of receiving data. format=\\ outputFormat> Specifies the pull output format. qp=\\ fieldConditions> An optional filter on the infotons you want to receive. Only those that match the field conditions are pulled. bulk-size= The number of infotons that you want to receive for your next pull action. This request blocks until the number of new infotons with the specified path and filter are available. When they are, the call returns a subscription id. You use this id to get the new infotons, as follows: curl -X GET cm-well-host / cm-well-path ?op=pull sub= subscription key Unsubscribing from Updates When you no longer want to receive real-time updates, unsubscribe from updates using the ID you received from the subscribe call, as follows: curl -X GET cm-well-host / cm-well-path ?op=unsubscribe sub= subscriptionID The call to unsubscribe is the same for both push and pull subscriptions.","title":"Subscribing to Updates"},{"location":"DeveloperGuide/DevGuide.SubscribingToReal-TimeUpdates.html#subscribing-to-updates","text":"You may want to subscribe to real-time updates of CM-Well, so that your application always has the latest data available. For example, if your application shows Organization data, you may want to ensure that you have the latest information before displaying an organization's details. CM-Well supports two types of real-time subscriptions: Push - Your application provides an address to which CM-Well will post all new infotons under the path you specify. Pull - Your application requests new data under a specific path. The call only returns when there is new data available. The following sections describe how to subscribe to push and pull real-time updates.","title":"Subscribing to Updates"},{"location":"DeveloperGuide/DevGuide.SubscribingToReal-TimeUpdates.html#subscribing-for-pushed-data","text":"Here is a template for how to subscribe to pushed data. Items in brackets are placeholders for actual values. curl -X GET cm-well-host / cm-well-path ?op=subscribe method=push format= outputFormat qp= fieldConditions callback= http://some.host/some/path These are the elements of the request: Element Description / The CM-Well path whose infotons you want to receive. op=subscribe Indicates a \"subscribe\" operation. method=push Indicates the \"push\" method of receiving data. format=\\ outputFormat> Specifies the push output format. qp=\\ fieldConditions> An optional filter on the infotons you want to receive. Only those that match the field conditions are pushed. callback=http://some.host/some/path The address to which you want the data to be pushed. This request returns the subscription ID that you'll need in order to unsubscribe from this search.","title":"Subscribing for Pushed Data"},{"location":"DeveloperGuide/DevGuide.SubscribingToReal-TimeUpdates.html#subscribing-for-pulled-data","text":"Here is a template for how to subscribe to pulled data. Items in brackets are placeholders for actual values. curl -X GET cm-well-host / cm-well-path ?op=subscribe method=pull format= outputFormat qp= fieldConditions bulk-size= nofInfotons These are the elements of the request: Element Description / The CM-Well path whose infotons you want to receive. op=subscribe Indicates a \"subscribe\" operation. method=pull Indicates the \"pull\" method of receiving data. format=\\ outputFormat> Specifies the pull output format. qp=\\ fieldConditions> An optional filter on the infotons you want to receive. Only those that match the field conditions are pulled. bulk-size= The number of infotons that you want to receive for your next pull action. This request blocks until the number of new infotons with the specified path and filter are available. When they are, the call returns a subscription id. You use this id to get the new infotons, as follows: curl -X GET cm-well-host / cm-well-path ?op=pull sub= subscription key","title":"Subscribing for Pulled Data"},{"location":"DeveloperGuide/DevGuide.SubscribingToReal-TimeUpdates.html#unsubscribing-from-updates","text":"When you no longer want to receive real-time updates, unsubscribe from updates using the ID you received from the subscribe call, as follows: curl -X GET cm-well-host / cm-well-path ?op=unsubscribe sub= subscriptionID The call to unsubscribe is the same for both push and pull subscriptions.","title":"Unsubscribing from Updates"},{"location":"DeveloperGuide/DevGuide.UpdatingCM-Well.html","text":"Updating CM-Well CM-Well supports APIs for writing to it as well as reading from it. However, in order to protect production data, only internal CM-Well subsystems and authorized users can update the production instance of CM-Well. If you want to experiment with writing to CM-Well, you can use the lab or pre-production environments, or install the CM-Well Docker. Note If you're creating a repository with new entities that will eventually be part of the TR Knowledge Graph, you will need to consult with the TR Information Architecture team to determine how to assign or create domain IDs and entity URIs.` Updates to CM-Well use the standard HTTP POST or DELETE verbs. In our examples, we\u2019ll mostly use the cURL utility to issue commands to CM-Well, but you can use any application that can issue POST and DELETE requests. (A convenient application with a Windows UI is Fiddler, which you can downloaded at: http://www.telerik.com/fiddler .) Note Calls that update CM-Well (calls that add, change or delete data) operate asynchronously. This means that when the call returns, the update is not necessarily complete. The call adds the update request to a queue, and the request is performed eventually. The client may have to wait some time before the change is evident on CM-Well. If you want the call to be synchronous, use the blocking flag . Tip You can using the tracking API to track the status of update requests. Tip To prevent an update request from overwriting a parallel request, use conditional updates . Inserting New Infotons To create a new infoton in CM-Well: POST a request to the _in endpoint of the CM-Well instance. In the request's payload, include a triple of the format \\ entity URI> \\ predicate> \\ type URI> , to define a new infoton whose subject has the given type. In the request's payload, optionally include triples defining field values for the new infoton. Specify the format of the triples using the ?format parameter. Note If the format parameter is not used, CM-Well attempts to \"guess\" the format based on the Content-Type header. For example, here is a cURL command that creates the infoton with two triples: curl -X POST cm-well-host /_in?format=ttl -H Content-Type: text/plain --data-binary http://data.com/1-12345678 a http://data.com/Person ; http://ont.thomsonreuters.com/bermuda/hasName Fred Fredson . Note If you want to post a larger set of data for the infoton, it may be more convenient to use the -data @filename parameter instead of --data-binary. In this case, you enter the infoton's data in the file instead of in the command. After running the POST command above, you'll see this infoton in the graph: To create several new infotons at once, simply add more entity-type definitions in the request payload, for example: curl -X POST cm-well-host /_in?format=ttl `-H Content-Type: text/plain --data-binary` http://data.com/1-11111111 a http://data.com/Person . http://data.com/1-22222222 a http://data.com/Person . http://data.com/1-33333333 a http://data.com/Person . Deleting Infotons To delete the infoton you created in the previous section, you can issue this command: curl -X DELETE cm-well-host /data.com/1-12345678 If the DELETE operation succeeds, CM-Well returns a status code of 200, with a JSON payload of: {\u201csuccess\u201d: true}. Note CM-Well returns a \"success\" status code even if the infoton you requested to delete doesn't exist. Alternatively, you can use the following syntax to delete several infotons in one POST: curl -X POST cm-well-host /_in?format=ttl -H Content-Type: text/plain --data-binary http://data.com/1-11111111 cmwell://meta/sys#fullDelete false . http://data.com/1-22222222 cmwell://meta/sys#fullDelete false . http://data.com/1-33333333 cmwell://meta/sys#fullDelete false . Recursive Deletion of Infotons The Boolean value in the previous section's example indicates whether the deletion should be recursive, as follows: true - in addition to deleting the infotons in the request, if there are infotons under the paths supplied in the request, they will be deleted too. false - no recursive deletion. Note The number of infotons that can be deleted recursively in a single API call is limited to 500. To delete more infotons recursively, retrieve the list of infotons for deletion with a search or stream operation, divide them into groups of up to 500, and submit a deletion request as above, with a recursion flag of \"false\". Adding/Replacing Field Values In order to update an existing infoton, you use the same API endpoint as for a create operation. Using the example above, we\u2019ll update the same infoton, while entering in a new hasName value: curl -X POST cm-well-host /_in?format=ttl -H Content-Type: text/plain --data-binary http://data.com/1-12345678 http://ont.thomsonreuters.com/bermuda/hasName John Smith . Now, if we look at this infoton in CM-Well, we\u2019ll see something interesting: The infoton now has two entries for the name of the person. Rather than overwrite the field, the new value was appended to the infoton. This is the default behavior, but we can override it by specifying the replace-mode flag as a parameter on our POST call. For example: curl -X POST cm-well-host /_in?format=ttl replace-mode -H Content-Type: text/plain --data-binary http://data.com/1-12345678 http://ont.thomsonreuters.com/bermuda/hasName John Smith . Now when we look in CM-Well, we see the following: The hasName field was overwritten as expected. An alternate syntax for replacing field values (which allows multiple replacements in the same POST) is as follows: curl -X POST cm-well-host /_in?format=ttl -H Content-Type: text/plain --data-binary http://data.com/1-12345678 cmwell://meta/sys#markReplace http://ont.thomsonreuters.com/bermuda/hasName . http://data.com/1-12345678 http://ont.thomsonreuters.com/bermuda/hasName John Doe . Tip For best performance, if you're performing several updates to a certain infoton, include all the updates in a single call (rather than distribute updates to one infoton across several calls). Note If you attempt to perform an update on an infoton, where all of the \"new\" infotons triples are identical to the existing infoton's triples, no update will occur. This is in order to prevent saving a new infoton version when no actual change was made. Deleting Field Values To delete an infoton's field, you can use the following syntax (in this example, the hasName field is deleted): curl -X POST cm-well-host /_in?format=ttl -H Content-Type: text/plain --data-binary http://data.com/1-12345678 cmwell://meta/sys#markReplace http://ont.thomsonreuters.com/bermuda/hasName . You can delete multiple fields in the same POST by adding several #markReplace triples to the command. In some cases, an infoton may have several values for the same field name. For example, a Person infoton might have several Telephone or Email field values. Using the #markReplace operator to delete a field deletes all of it values. If you only want to delete a subset of a field's multiple values, while retaining the other values, you can use the #markDelete operator, as in the example below. curl -X POST cm-well-host /_in?format=turtle --data-binary @prefix vcard: http://www.w3.org/2006/vcard/ns# . http://example.org/Individuals/JohnSmith cmwell://meta/sys#markDelete [ vcard : EMAIL mailto : jane.smith @ example.org ; vcard : EMAIL mailto : jenny.smith @ example.org ] Special Infotons Standard infotons are collections of triples, usually representing an entity and its attributes. However, CM-Well supports two other types of \"special\" infotons: File infotons - any file may be uploaded to CM-Well. This can be useful for storing documentation files, configuration files, images and so on. See the Add File API for more details. Link infotons - a link infoton is a reference to another infoton. Performing a GET action on a link infoton retrieves the target (\"pointed-to\") infoton. You can define a link infoton as permanent, temporary or forward. See Add Link Infoton API for more details.","title":"Updating CM-Well"},{"location":"DeveloperGuide/DevGuide.UpdatingCM-Well.html#updating-cm-well","text":"CM-Well supports APIs for writing to it as well as reading from it. However, in order to protect production data, only internal CM-Well subsystems and authorized users can update the production instance of CM-Well. If you want to experiment with writing to CM-Well, you can use the lab or pre-production environments, or install the CM-Well Docker. Note If you're creating a repository with new entities that will eventually be part of the TR Knowledge Graph, you will need to consult with the TR Information Architecture team to determine how to assign or create domain IDs and entity URIs.` Updates to CM-Well use the standard HTTP POST or DELETE verbs. In our examples, we\u2019ll mostly use the cURL utility to issue commands to CM-Well, but you can use any application that can issue POST and DELETE requests. (A convenient application with a Windows UI is Fiddler, which you can downloaded at: http://www.telerik.com/fiddler .) Note Calls that update CM-Well (calls that add, change or delete data) operate asynchronously. This means that when the call returns, the update is not necessarily complete. The call adds the update request to a queue, and the request is performed eventually. The client may have to wait some time before the change is evident on CM-Well. If you want the call to be synchronous, use the blocking flag . Tip You can using the tracking API to track the status of update requests. Tip To prevent an update request from overwriting a parallel request, use conditional updates .","title":"Updating CM-Well"},{"location":"DeveloperGuide/DevGuide.UpdatingCM-Well.html#inserting-new-infotons","text":"To create a new infoton in CM-Well: POST a request to the _in endpoint of the CM-Well instance. In the request's payload, include a triple of the format \\ entity URI> \\ predicate> \\ type URI> , to define a new infoton whose subject has the given type. In the request's payload, optionally include triples defining field values for the new infoton. Specify the format of the triples using the ?format parameter. Note If the format parameter is not used, CM-Well attempts to \"guess\" the format based on the Content-Type header. For example, here is a cURL command that creates the infoton with two triples: curl -X POST cm-well-host /_in?format=ttl -H Content-Type: text/plain --data-binary http://data.com/1-12345678 a http://data.com/Person ; http://ont.thomsonreuters.com/bermuda/hasName Fred Fredson . Note If you want to post a larger set of data for the infoton, it may be more convenient to use the -data @filename parameter instead of --data-binary. In this case, you enter the infoton's data in the file instead of in the command. After running the POST command above, you'll see this infoton in the graph: To create several new infotons at once, simply add more entity-type definitions in the request payload, for example: curl -X POST cm-well-host /_in?format=ttl `-H Content-Type: text/plain --data-binary` http://data.com/1-11111111 a http://data.com/Person . http://data.com/1-22222222 a http://data.com/Person . http://data.com/1-33333333 a http://data.com/Person .","title":"Inserting New Infotons"},{"location":"DeveloperGuide/DevGuide.UpdatingCM-Well.html#deleting-infotons","text":"To delete the infoton you created in the previous section, you can issue this command: curl -X DELETE cm-well-host /data.com/1-12345678 If the DELETE operation succeeds, CM-Well returns a status code of 200, with a JSON payload of: {\u201csuccess\u201d: true}. Note CM-Well returns a \"success\" status code even if the infoton you requested to delete doesn't exist. Alternatively, you can use the following syntax to delete several infotons in one POST: curl -X POST cm-well-host /_in?format=ttl -H Content-Type: text/plain --data-binary http://data.com/1-11111111 cmwell://meta/sys#fullDelete false . http://data.com/1-22222222 cmwell://meta/sys#fullDelete false . http://data.com/1-33333333 cmwell://meta/sys#fullDelete false .","title":"Deleting Infotons"},{"location":"DeveloperGuide/DevGuide.UpdatingCM-Well.html#recursive-deletion-of-infotons","text":"The Boolean value in the previous section's example indicates whether the deletion should be recursive, as follows: true - in addition to deleting the infotons in the request, if there are infotons under the paths supplied in the request, they will be deleted too. false - no recursive deletion. Note The number of infotons that can be deleted recursively in a single API call is limited to 500. To delete more infotons recursively, retrieve the list of infotons for deletion with a search or stream operation, divide them into groups of up to 500, and submit a deletion request as above, with a recursion flag of \"false\".","title":"Recursive Deletion of Infotons"},{"location":"DeveloperGuide/DevGuide.UpdatingCM-Well.html#addingreplacing-field-values","text":"In order to update an existing infoton, you use the same API endpoint as for a create operation. Using the example above, we\u2019ll update the same infoton, while entering in a new hasName value: curl -X POST cm-well-host /_in?format=ttl -H Content-Type: text/plain --data-binary http://data.com/1-12345678 http://ont.thomsonreuters.com/bermuda/hasName John Smith . Now, if we look at this infoton in CM-Well, we\u2019ll see something interesting: The infoton now has two entries for the name of the person. Rather than overwrite the field, the new value was appended to the infoton. This is the default behavior, but we can override it by specifying the replace-mode flag as a parameter on our POST call. For example: curl -X POST cm-well-host /_in?format=ttl replace-mode -H Content-Type: text/plain --data-binary http://data.com/1-12345678 http://ont.thomsonreuters.com/bermuda/hasName John Smith . Now when we look in CM-Well, we see the following: The hasName field was overwritten as expected. An alternate syntax for replacing field values (which allows multiple replacements in the same POST) is as follows: curl -X POST cm-well-host /_in?format=ttl -H Content-Type: text/plain --data-binary http://data.com/1-12345678 cmwell://meta/sys#markReplace http://ont.thomsonreuters.com/bermuda/hasName . http://data.com/1-12345678 http://ont.thomsonreuters.com/bermuda/hasName John Doe . Tip For best performance, if you're performing several updates to a certain infoton, include all the updates in a single call (rather than distribute updates to one infoton across several calls). Note If you attempt to perform an update on an infoton, where all of the \"new\" infotons triples are identical to the existing infoton's triples, no update will occur. This is in order to prevent saving a new infoton version when no actual change was made.","title":"Adding/Replacing Field Values"},{"location":"DeveloperGuide/DevGuide.UpdatingCM-Well.html#deleting-field-values","text":"To delete an infoton's field, you can use the following syntax (in this example, the hasName field is deleted): curl -X POST cm-well-host /_in?format=ttl -H Content-Type: text/plain --data-binary http://data.com/1-12345678 cmwell://meta/sys#markReplace http://ont.thomsonreuters.com/bermuda/hasName . You can delete multiple fields in the same POST by adding several #markReplace triples to the command. In some cases, an infoton may have several values for the same field name. For example, a Person infoton might have several Telephone or Email field values. Using the #markReplace operator to delete a field deletes all of it values. If you only want to delete a subset of a field's multiple values, while retaining the other values, you can use the #markDelete operator, as in the example below. curl -X POST cm-well-host /_in?format=turtle --data-binary @prefix vcard: http://www.w3.org/2006/vcard/ns# . http://example.org/Individuals/JohnSmith cmwell://meta/sys#markDelete [ vcard : EMAIL mailto : jane.smith @ example.org ; vcard : EMAIL mailto : jenny.smith @ example.org ]","title":"Deleting Field Values"},{"location":"DeveloperGuide/DevGuide.UpdatingCM-Well.html#special-infotons","text":"Standard infotons are collections of triples, usually representing an entity and its attributes. However, CM-Well supports two other types of \"special\" infotons: File infotons - any file may be uploaded to CM-Well. This can be useful for storing documentation files, configuration files, images and so on. See the Add File API for more details. Link infotons - a link infoton is a reference to another infoton. Performing a GET action on a link infoton retrieves the target (\"pointed-to\") infoton. You can define a link infoton as permanent, temporary or forward. See Add Link Infoton API for more details.","title":"Special Infotons"},{"location":"DeveloperGuide/DevGuide.UsingElasticSearchStatistics.html","text":"Using Elastic Search Statistics What Are Elastic Search Statistics? Elastic Search is the underlying search engine that CM-Well uses when performing a query (which involves a full-text search on infoton field values). Elastic Search supports several types of statistical analyses of field values within a given group of infotons. For example, using statistics, you can discover how many distinct values there are for a certain field in a certain group of infotons. (The Elastic Search statistical feature is called \"aggregations\", and you may see some references to this term in the search syntax and results.) CM-Well passes the statistical query to Elastic Search, which performs the query and returns its results, which are passed back to the caller. You can learn more about Elastic Search aggregation options here . CM-Well supports only a subset of Elastic Search's aggregation options. These are described in the next section. Statistical Metric Types The following table describes the statistical metric types that CM-Well supports. The type is passed in the type parameter. Type Type Parameter Value Description Applies to Supports Sub-Queries Cardinality card Returns the number of distinct values of the specified field for a given group of infotons. All fields No Statistics stats Returns the count, sum, average, minimum and maximum of the field values. Numeric fields No Terms term Returns the top N most frequent terms in a given field for a given group of infotons, using the N you define in the query. All fields Yes Significant Terms sig Returns the top N most significant terms in a given field for a given group of infotons. \"Significant terms\" are terms that are significantly more frequent in the defined group than in the \"background\" group (a control group of infotons; by default the entire repository). All fields Yes Note All counts returned by statistical queries are approximate . This is because Elastic Search is a distributed application, and data updates may take time to replicate on all machines. Usually counts are accurate to within 5%-10% of the true value. Accuracy is affected by the optional precision_threshold parameter. Statistical Query Syntax Here is an example of a query that requests a cardinality metric: cm-well-host /permid.org?op=stats ap=type:card,name:MyCurrencyStats,field:iso4217.currency format=json pretty The query conforms to the following template: cm-well-host / cm-well-path ?op=stats ap=type: statsType ,field: statsField ,name: outputName format= outputFormat The placeholders in the template are as follows: cmwellPath - the path in CM-Well on which to apply the query. statsType - card , stats , term or sig . name - an optional parameter. If supplied, its value is returned as the name value in the query response. field - the name of the field on whose values you want to apply the query. outputFormat - the desired output format. The aggregation parameters must be passed in this order: Type Parameter Order Defaults term type:term[,name:MyName],field(:|::)MyFieldName[,size:MySize][subaggregations] size = 10 sig type:sig[,name:MyName],field(:|::)MyFieldName[,backgroundTerm:FieldName*Value][,minDocCount:MyCount][,size:MySize][subaggregations] size = 10, minDocCount = 10 card type:card[,name:MyName],field(:|::)MyFieldName[,precisionThreshold:MyLong] N/A stats type:stats[,name:MyName],field(:|::)MyFieldName N/A Note The values defined in ap (aggregation parameters) are passed on to Elastic Search as they are. The output format must be one of: csv, json, jsonl. Sub-Queries Term and Significant Term queries support sub-queries . This means that the first query defined in the ap parameter may be followed by one or more additional queries, defined in brackets. Each sub-query is applied to the output of the previous queries. Here is an example of a query that requests a \"significant terms\" query, and then a \"terms\" query: cm-well-host /permid.org?op=stats ap=type:sig,field::organizationCountryCode.mdaas,size:5 type:term,field::isPublicFlag.mdaas format=csv This query runs on the permid.org path in CM-Well, obtains the infotons with the top 5 most frequent country codes, and then examines the their isPublicFlag field values. The resulting csv file looks like this: Note When using sub-queries, you can only request a total of 2 queries with the csv format, as a table only has 2 dimensions. For larger numbers of queries, use the json format, which has no limit on its nesting levels. Statistical Query Examples Cardinality Action: Find out how many distinct currency values are found in permid.org. The result is 266. Call: curl cm-well-host /permid.org?op=stats ap=type:card,name:MyCurrencyStats,field:iso4217.currency format=json pretty Response: { AggregationResponse : [ { name : MyCurrencyStats , type : CardinalityAggregationResponse , filter : { name : MyCurrencyStats , type : CardinalityAggregation , field : iso4217.currency }, count : 266 } ] } Terms Action: Find the top 10 countries where companies are incorporated. Call: curl cm-well-host /permid.org?op=stats ap=type:term,name:MyIncorporatedStats,field::isIncorporatedIn.mdaas,size:10 pretty format=json Note To perform a query on the entire field value, use the :: operator for the field parameter, as in field::isIncorporatedIn.mdaas . Otherwise, queries are performed on the tokenized versions of the values, i.e. each word is counted separately. In the example above, \"United\" would be counted as one value (appearing both in \"United States\" and \"United Kingdom\"), while \"States\" and \"Kingdom\" would be counted as separate values. Response: { AggregationResponse : [ { name : MyIncorporatedStats , type : TermsAggregationResponse , filter : { name : MyIncorporatedStats , type : TermAggregation , field : isIncorporatedIn.mdaas , size : 10, subFilters : [ ] }, buckets : [ { key : United States , objects : 737160 }, { key : China (Mainland) , objects : 187429 }, { key : United Kingdom , objects : 179029 }, { key : Germany , objects : 169454 }, { key : France , objects : 60621 }, { key : Canada , objects : 55675 }, { key : Netherlands , objects : 50387 }, { key : Japan , objects : 46034 }, { key : Sweden , objects : 43550 }, { key : Australia , objects : 42465 } ] } ] }","title":"Using Elastic Search Statistics"},{"location":"DeveloperGuide/DevGuide.UsingElasticSearchStatistics.html#using-elastic-search-statistics","text":"","title":"Using Elastic Search Statistics"},{"location":"DeveloperGuide/DevGuide.UsingElasticSearchStatistics.html#what-are-elastic-search-statistics","text":"Elastic Search is the underlying search engine that CM-Well uses when performing a query (which involves a full-text search on infoton field values). Elastic Search supports several types of statistical analyses of field values within a given group of infotons. For example, using statistics, you can discover how many distinct values there are for a certain field in a certain group of infotons. (The Elastic Search statistical feature is called \"aggregations\", and you may see some references to this term in the search syntax and results.) CM-Well passes the statistical query to Elastic Search, which performs the query and returns its results, which are passed back to the caller. You can learn more about Elastic Search aggregation options here . CM-Well supports only a subset of Elastic Search's aggregation options. These are described in the next section.","title":"What Are Elastic Search Statistics?"},{"location":"DeveloperGuide/DevGuide.UsingElasticSearchStatistics.html#statistical-metric-types","text":"The following table describes the statistical metric types that CM-Well supports. The type is passed in the type parameter. Type Type Parameter Value Description Applies to Supports Sub-Queries Cardinality card Returns the number of distinct values of the specified field for a given group of infotons. All fields No Statistics stats Returns the count, sum, average, minimum and maximum of the field values. Numeric fields No Terms term Returns the top N most frequent terms in a given field for a given group of infotons, using the N you define in the query. All fields Yes Significant Terms sig Returns the top N most significant terms in a given field for a given group of infotons. \"Significant terms\" are terms that are significantly more frequent in the defined group than in the \"background\" group (a control group of infotons; by default the entire repository). All fields Yes Note All counts returned by statistical queries are approximate . This is because Elastic Search is a distributed application, and data updates may take time to replicate on all machines. Usually counts are accurate to within 5%-10% of the true value. Accuracy is affected by the optional precision_threshold parameter.","title":"Statistical Metric Types"},{"location":"DeveloperGuide/DevGuide.UsingElasticSearchStatistics.html#statistical-query-syntax","text":"Here is an example of a query that requests a cardinality metric: cm-well-host /permid.org?op=stats ap=type:card,name:MyCurrencyStats,field:iso4217.currency format=json pretty The query conforms to the following template: cm-well-host / cm-well-path ?op=stats ap=type: statsType ,field: statsField ,name: outputName format= outputFormat The placeholders in the template are as follows: cmwellPath - the path in CM-Well on which to apply the query. statsType - card , stats , term or sig . name - an optional parameter. If supplied, its value is returned as the name value in the query response. field - the name of the field on whose values you want to apply the query. outputFormat - the desired output format. The aggregation parameters must be passed in this order: Type Parameter Order Defaults term type:term[,name:MyName],field(:|::)MyFieldName[,size:MySize][subaggregations] size = 10 sig type:sig[,name:MyName],field(:|::)MyFieldName[,backgroundTerm:FieldName*Value][,minDocCount:MyCount][,size:MySize][subaggregations] size = 10, minDocCount = 10 card type:card[,name:MyName],field(:|::)MyFieldName[,precisionThreshold:MyLong] N/A stats type:stats[,name:MyName],field(:|::)MyFieldName N/A Note The values defined in ap (aggregation parameters) are passed on to Elastic Search as they are. The output format must be one of: csv, json, jsonl.","title":"Statistical Query Syntax"},{"location":"DeveloperGuide/DevGuide.UsingElasticSearchStatistics.html#sub-queries","text":"Term and Significant Term queries support sub-queries . This means that the first query defined in the ap parameter may be followed by one or more additional queries, defined in brackets. Each sub-query is applied to the output of the previous queries. Here is an example of a query that requests a \"significant terms\" query, and then a \"terms\" query: cm-well-host /permid.org?op=stats ap=type:sig,field::organizationCountryCode.mdaas,size:5 type:term,field::isPublicFlag.mdaas format=csv This query runs on the permid.org path in CM-Well, obtains the infotons with the top 5 most frequent country codes, and then examines the their isPublicFlag field values. The resulting csv file looks like this: Note When using sub-queries, you can only request a total of 2 queries with the csv format, as a table only has 2 dimensions. For larger numbers of queries, use the json format, which has no limit on its nesting levels.","title":"Sub-Queries"},{"location":"DeveloperGuide/DevGuide.UsingElasticSearchStatistics.html#statistical-query-examples","text":"","title":"Statistical Query Examples"},{"location":"DeveloperGuide/DevGuide.UsingElasticSearchStatistics.html#cardinality","text":"Action: Find out how many distinct currency values are found in permid.org. The result is 266. Call: curl cm-well-host /permid.org?op=stats ap=type:card,name:MyCurrencyStats,field:iso4217.currency format=json pretty Response: { AggregationResponse : [ { name : MyCurrencyStats , type : CardinalityAggregationResponse , filter : { name : MyCurrencyStats , type : CardinalityAggregation , field : iso4217.currency }, count : 266 } ] }","title":"Cardinality"},{"location":"DeveloperGuide/DevGuide.UsingElasticSearchStatistics.html#terms","text":"Action: Find the top 10 countries where companies are incorporated. Call: curl cm-well-host /permid.org?op=stats ap=type:term,name:MyIncorporatedStats,field::isIncorporatedIn.mdaas,size:10 pretty format=json Note To perform a query on the entire field value, use the :: operator for the field parameter, as in field::isIncorporatedIn.mdaas . Otherwise, queries are performed on the tokenized versions of the values, i.e. each word is counted separately. In the example above, \"United\" would be counted as one value (appearing both in \"United States\" and \"United Kingdom\"), while \"States\" and \"Kingdom\" would be counted as separate values. Response: { AggregationResponse : [ { name : MyIncorporatedStats , type : TermsAggregationResponse , filter : { name : MyIncorporatedStats , type : TermAggregation , field : isIncorporatedIn.mdaas , size : 10, subFilters : [ ] }, buckets : [ { key : United States , objects : 737160 }, { key : China (Mainland) , objects : 187429 }, { key : United Kingdom , objects : 179029 }, { key : Germany , objects : 169454 }, { key : France , objects : 60621 }, { key : Canada , objects : 55675 }, { key : Netherlands , objects : 50387 }, { key : Japan , objects : 46034 }, { key : Sweden , objects : 43550 }, { key : Australia , objects : 42465 } ] } ] }","title":"Terms"},{"location":"DeveloperGuide/DevGuide.UsingSPARQLOnCM-WellInfotons.html","text":"Using SPARQL on Infotons What is SPARQL? SPARQL (SPARQL Protocol and RDF Query Language - pronounced \"sparkle\") is an industry-standard query language designed to work with graph databases. It is similar in syntax to SQL. You can use SPARQL queries on CM-Well in order to apply database operations to infotons, which are the type of \"database records\" that CM-Well supports. The supported SPARQL version in CM-Well is SPARQL 1.1. Note Currently, the only SPARQL operations that CM-Well supports are SELECT and CONSTRUCT. A comprehensive description of SPARQL is beyond the scope of this document. You can learn more about SPARQL at: - Apache Jena tutorial - W3C specifications Submit SPARQL Queries via UI CM-Well provides a simple UI for submitting SPARQL queries. To access the SPARQL UI page, click the \"secret\" (S) button in the CM-Well home page, shown in the image below. Clicking the (S) button displays the following page: To submit a SPARQL query using this UI: Enter the paths part of the query (without the \"PATHS\" header) in the first edit box. Enter the SPARQL part of the query (without the \"SPARQL\" header) in the second edit box. Select the output format you want from the Results Format dropdown menu. Click POST . The query is submitted to the _sp endpoint of the CM-Well host you're accessing. From the SPARQL Query page, you can click on the SPARQL on whole graph link to display the page for submitting a SPARQL query that runs on the entire CM-Well graph. See Apply SPARQL to the Entire Graph to learn more. To submit a SPARQL query on the whole CM-Well graph using this UI: Enter the SPARQL query in the edit box. Click POST! . The query is submitted to the _sparql endpoint of the CM-Well host you're accessing. Paths for SPARQL Queries A SPARQL query to CM-Well has two parts. The second part is the SPARQL query itself. The first part is a set of paths within CM-Well on which you want to run the SPARQL query. The \"paths\" are in fact regular queries to CM-Well, which produce a list of infotons. After retrieving this list, CM-Well applies the SPARQL query to the list. Here are some examples of paths to which you could apply a SPARQL query: /permid.org/1-5035948006?xg=2 permid.org?op=search qp=organizationFoundedYear.mdaas 2014,type.rdf:Organization In the CM-Well GUI shown in the previous section, you would enter the paths in the top text box, and the query in the lower text box. Note The need to provide an initial path is not part of standard SPARQL syntax; it is unique to CM-Well. It is required in order to prevent the SPARQL query from running on the entire CM-Well graph, which could cause performance problems, due to the massive amount of data in CM-Well. CM-Well SPARQL Query Syntax Here is an example of a cURL call that applies a SPARQL query to CM-Well paths: curl -X POST cm-well-host /_sp?format=ascii --data-binary PATHS /example.org/Individuals?op=search length=1000 with-data /example.org/Individuals/RonaldKhun /example.org/Individuals/JohnSmith?xg=3 SPARQL SELECT DISTINCT ?name ?active WHERE { ?name http://www.tr-lbd.com/bold#active ?active . } ORDER BY DESC(?active) Let's break this command down to its components: Query Part Value in Example POST command to CM-Well's _sp endpoint curl -X POST \"http://cm-well-host.com/_sp\" format parameter ?format=ascii PATHS header PATHS List of paths, one per line /example.org/Individuals?op=search length=1000 with-data /example.org/Individuals/RonaldKhun /example.org/Individuals/JohnSmith?xg=3 Empty line There must be an empty line before the SPARQL header SPARQL header SPARQL SPARQL query SELECT DISTINCT ?name ?active WHERE { ?name http://www.tr-lbd.com/bold#active ?active . } ORDER BY DESC(?active) Note The --data-binary flag causes cURL to encode the subsequent string (surrounded by ' ') in binary format. The empty line before the SPARQL header is mandatory. You can also add several SPARQL queries to the same command, by separating them with lines of (at least 3) dashes, as follows: curl -X POST cm-well-host /_sp?verbose --data-binary PATHS /example.org/Individuals?op=search length=1000 with-data /example.org/Individuals/RonaldKhun /example.org/Individuals/JohnSmith?xg=3 SPARQL SELECT DISTINCT ?name ?active WHERE { ?name http://www.tr-lbd.com/bold#active ?active . } ORDER BY DESC(?active) -------------------------- SELECT DISTINCT ?name WHERE { ?name http://www.tr-lbd.com/bold#active false . } Example 1: Retrieving One Field In our example of how to use the yg flag , we were looking for the corporate address for a given RIC code. What we actually got in response to our regular CM-Well query was the infotons that were related to the RIC code. We still had to retrieve the corporate address information ourselves from the relevant field. By using SPARQL, we can cause CM-Well to handle that step. To retrieve the mdaas:headquartersCommonAddress value, we can use this SPARQL query: SELECT * WHERE { ?infoton http://ont.thomsonreuters.com/mdaas/headquartersCommonAddress ?addr. } Note that instead of using the prefix \u201cmdaas:\u201d, we used the full URL that defines the field. This is necessary in order for SPARQL to recognize the field we\u2019re looking for. The cURL command, which uses the PATH from the \u201cyg\u201d example but also retrieves the CommonName field by applying SPARQL, looks like this: $ curl -X POST cm-well-host /_sp?format=ascii -H Content-Type:text/plain --data-binary PATHS /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando with-data xg=hasImmediateParent.mdaas _ SPARQL SELECT * WHERE { ?infoton http://ont.thomsonreuters.com/mdaas/headquartersCommonAddress ?Addr. } The output of the command above looks like this: | infoton | Addr | ================================================================================================================== | http://permid.org/1-5035948006 | 6649 Westwood Blvd\\nORLANDO\\nFLORIDA\\n32821-8029\\nUnited States\\n @en | | http://permid.org/1-4294969614 | 6649 Westwood Blvd Ste 300\\nORLANDO\\nFLORIDA\\n32821-6066\\nUnited States\\n | ----------------------------------------------------------------------------------------------------------------- Example 2: Retrieving Two Fields and Sorting Results Here are some CM-Well paths (in a custom-made repository) to which we can apply a SPARQL query: Path Retrieves http://cm-well-host.com/example.org/Individuals?op=search length=1000 with-data The first 1000 people under Individuals http://cm-well.com/example.org/Individuals/RonaldKhun A specific person's infoton http://cm-well.com/example.org/Individuals/JohnSmith?xg=3 A specific person's outbound links Let's run a SPARQL query that retrieves each person's name and active fields, and sorts the results by the active value: curl -X POST cm-well-host /_sp?format=ascii --data-binary PATHS /example.org/Individuals?op=search length=1000 with-data /example.org/Individuals/RonaldKhun /example.org/Individuals/JohnSmith?xg=3 SPARQL SELECT DISTINCT ?name ?active WHERE { ?name http://www.tr-lbd.com/bold#active ?active . } ORDER BY DESC(?active) The results are: ------------------------------------------------------------- | name | active | ============================================================= | http://example.org/Individuals/BruceWayne | true | | http://example.org/Individuals/DonaldDuck | true | | http://example.org/Individuals/HarryMiller | true | | http://example.org/Individuals/JohnSmith | true | | http://example.org/Individuals/MartinOdersky | true | | http://example.org/Individuals/NatalieMiller | true | | http://example.org/Individuals/PeterParker | true | | http://example.org/Individuals/RonaldKhun | true | | http://example.org/Individuals/SaraSmith | true | | http://example.org/Individuals/DaisyDuck | false | | http://example.org/Individuals/RebbecaSmith | false | ------------------------------------------------------------- Specifying the Output Format for SPARQL Results As you can see in the examples above, by default the SPARQL results are a text-rendered table. They might be \"scrambled\" in your command window, depending on the length of its lines. This format is not convenient for machine-readability. However, you can specify different output formats with the _sp endpoint, just as for regular CM-Well queries. Note Only the following output formats are supported for SPARQL queries: ascii, json, rdf, tsv, xml. For example, we can specify the tsv (tab-separated values) output format as follows: $ curl -X POST cm-well-host /_sp?format=tsv -H Content-Type:text/plain --data-binary PATHS /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando with-data xg=hasImmediateParent.mdaas _ SPARQL SELECT * WHERE { ?infoton http://ont.thomsonreuters.com/mdaas/headquartersCommonAddress ?Addr. } The output now looks like this: ?infoton?Addr http://permid.org/1-5035948006 6649 Westwood Blvd\\nORLANDO\\nFLORIDA\\n32821-8029\\nUnited States\\n @en http://permid.org/1-4294969614 6649 Westwood Blvd Ste 300\\nORLANDO\\nFLORIDA\\n32821-6066\\nUnited States\\n SPARQL Query Options You can use the followings special options (or any combination of them) with SPARQL queries: quads - this option returns RDF \"quadruples\" rather than \"triples\", meaning that in addition to the subject, predicate and object, it also returns the graph name for each triple. verbose - this option returns the time-metrics of data retrieval and processing operations, as well as the data itself. show-graph - this option shows the list of infotons, which are the result of the initial CM-Well query, and the input to the SPARQL query. The following sections show examples of the usage of each special option. The \"quads\" option This option returns RDF \"quadruples\" rather than \"triples\", meaning that in addition to the subject, predicate and object, it also returns the graph name for each triple. Here is an example of a query using the \"quads\" option: curl -X POST cm-well-host /_sp?format=ascii quads --data-binary PATHS /example.org/Individuals?op=search length=1000 with-data /example.org/Individuals/RonaldKhun /example.org/Individuals/JohnSmith?xg=3 SPARQL SELECT * FROM NAMED http://example.org/graphs/spiderman WHERE { GRAPH ?g { ?s ?p ?o . } } Its results are: s | p | o | g ===========================================|===============================================|==============================================|===================================== http://example.org/Individuals/JohnSmith | http://purl.org/vocab/relationship/parentOf | http://example.org/Individuals/SaraSmith | http://example.org/graphs/spiderman http://example.org/Individuals/JohnSmith | http://purl.org/vocab/relationship/friendOf | http://example.org/Individuals/PeterParker | http://example.org/graphs/spiderman The \"verbose\" option This option returns the time-metrics of data retrieval and processing operations, as well as the data itself. You must use the ?format=ascii option if you want to receive verbose information. Here is an example of a query using the \"verbose\" option: curl -X POST cm-well-host /_sp?format=ascii verbose --data-binary PATHS /example.org/Individuals?op=search length=1000 with-data /example.org/Individuals/RonaldKhun /example.org/Individuals/JohnSmith?xg=3 SPARQL SELECT DISTINCT ?name ?active WHERE { ?name http://www.tr-lbd.com/bold#active ?active . } ORDER BY DESC(?active) Its results are: Time metrics: Start End Type Task 00:00:00.489 00:00:00.556 Subgraph /example.org/Individuals?op=search length=1000 with-data= format=nquads 00:00:00.490 00:00:00.505 Subgraph /example.org/Individuals/RonaldKhun?= format=nquads 00:00:00.499 00:00:00.552 Subgraph /example.org/Individuals/JohnSmith?xg=3 format=nquads 00:00:00.561 00:00:00.566 SPARQL SELECT DISTINCT ?name ?active WHERE { ?name http://www.tr-lbd.c... Results: ------------------------------------------------------------ | name | active | ============================================================ | http://example.org/Individuals/BruceWayne | true | | http://example.org/Individuals/DonaldDuck | true | | http://example.org/Individuals/HarryMiller | true | | http://example.org/Individuals/JohnSmith | true | | http://example.org/Individuals/MartinOdersky | true | | http://example.org/Individuals/NatalieMiller | true | | http://example.org/Individuals/PeterParker | true | | http://example.org/Individuals/RonaldKhun | true | | http://example.org/Individuals/SaraSmith | true | | http://example.org/Individuals/DaisyDuck | false | | http://example.org/Individuals/RebbecaSmith | false | ------------------------------------------------------------ The \"show-graph\" option This option shows the list of infotons, which are the result of the initial CM-Well query, and the input to the SPARQL query. You must use the ?format=ascii option if you want to use the \"show-graph\" option. Here is an example of a query using the \"show-graph\" option: curl -X POST cm-well-host /_sp?format=ascii show-graph --data-binary PATHS /example.org/Individuals?op=search length=1000 with-data /example.org/Individuals/RonaldKhun /example.org/Individuals/JohnSmith?xg=3 SPARQL SELECT DISTINCT ?name ?active WHERE { ?name http://www.tr-lbd.com/bold#active ?active . } ORDER BY DESC(?active) Its results are: Graph: http://example.org/Individuals/DonaldDuck http://purl.org/vocab/relationship/knowsByReputation http://example.org/Individuals/MartinOdersky . http://example.org/Individuals/DonaldDuck http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/DonaldDuck http://purl.org/vocab/relationship/mentorOf http://example.org/Individuals/JohnSmith . http://example.org/Individuals/RebbecaSmith http://www.tr-lbd.com/bold#active false . http://example.org/Individuals/RebbecaSmith http://purl.org/vocab/relationship/siblingOf http://example.org/Individuals/SaraSmith . http://example.org/Individuals/MartinOdersky http://purl.org/vocab/relationship/collaboratesWith http://example.org/Individuals/RonaldKhun . http://example.org/Individuals/MartinOdersky http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/BruceWayne http://purl.org/vocab/relationship/employedBy http://example.org/Individuals/DonaldDuck . http://example.org/Individuals/BruceWayne http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/PeterParker http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/PeterParker http://purl.org/vocab/relationship/worksWith http://example.org/Individuals/HarryMiller . http://example.org/Individuals/PeterParker http://purl.org/vocab/relationship/neighborOf http://example.org/Individuals/ClarkKent . http://example.org/Individuals/SaraSmith http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/SaraSmith http://purl.org/vocab/relationship/siblingOf http://example.org/Individuals/RebbecaSmith . http://example.org/Individuals/RonaldKhun http://www.tr-lbd.com/bold#category deals . http://example.org/Individuals/RonaldKhun http://www.tr-lbd.com/bold#category news . http://example.org/Individuals/RonaldKhun http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/RonaldKhun http://purl.org/vocab/relationship/collaboratesWith http://example.org/Individuals/MartinOdersky . http://example.org/Individuals/JohnSmith http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/NatalieMiller http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/NatalieMiller http://purl.org/vocab/relationship/childOf http://example.org/Individuals/HarryMiller . http://example.org/Individuals/HarryMiller http://purl.org/vocab/relationship/parentOf http://example.org/Individuals/NatalieMiller . http://example.org/Individuals/HarryMiller http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/DaisyDuck http://purl.org/vocab/relationship/colleagueOf http://example.org/Individuals/BruceWayne . http://example.org/Individuals/DaisyDuck http://www.tr-lbd.com/bold#active false . http://example.org/Individuals/JohnSmith http://purl.org/vocab/relationship/parentOf http://example.org/Individuals/SaraSmith . http://example.org/Individuals/JohnSmith http://purl.org/vocab/relationship/friendOf http://example.org/Individuals/PeterParker . Results: ------------------------------------------------------------ | name | active | ============================================================ | http://example.org/Individuals/BruceWayne | true | | http://example.org/Individuals/DonaldDuck | true | | http://example.org/Individuals/HarryMiller | true | | http://example.org/Individuals/JohnSmith | true | | http://example.org/Individuals/MartinOdersky | true | | http://example.org/Individuals/NatalieMiller | true | | http://example.org/Individuals/PeterParker | true | | http://example.org/Individuals/RonaldKhun | true | | http://example.org/Individuals/SaraSmith | true | | http://example.org/Individuals/DaisyDuck | false | | http://example.org/Individuals/RebbecaSmith | false | ------------------------------------------------------------ \"Placeholder\" Parameters Sometimes it can be useful to be able to insert \"macro-like\" placeholders in your SPARQL query, i.e. named parameters whose instances within the query are replaced with a string value that you define. CM-Well supports this option. You can define a placeholder parameter as one of the URI parameters, prefixed by \"sp.\" and followed by the value you want to use in the specific call. You can then reference this parameter by placing it anywhere in the SPARQL query (including the PATHS section and the SPARQL section), surrounded by the '%' character on either side, as many times as you want. The parameter is replaced with the value you defined before the SPARQL query is applied. Note Parameter names may contain only letter characters. Here is an example of a query with a placeholder parameter called boldpred : curl -X POST cm-well-host /_sp?sp.boldpred=active --data-binary PATHS /example.org/Individuals?op=search length=1000 with-data SPARQL SELECT DISTINCT ?name WHERE { ?name http://www.tr-lbd.com/bold#%BOLDPRED% true . } The WHERE clause, after placeholder replacement, becomes: WHERE { ?name http://www.tr-lbd.com/bold#active true . } Note The matching between placeholder name and its instances within the query is case insensitive. The CONSTRUCT Command In addition to the SELECT command, you can use SPARQL's CONSTRUCT command. The CONSTRUCT command allows you to formulate your own RDF triples by manipulating query results. You can perform changes such as creating new entities and relationships, or performing transformations on values. You can then use the new triples you created as input to CM-Well, or for any other purpose. Here is an example of a query using CONSTRUCT, that derives an \"UncleOf\" relationship from information about people's parents and siblings: curl -X POST cm-well-host /_sp --data-binary PATHS /example.org/Individuals?op=search length=1000 with-data SPARQL PREFIX rel: http://purl.org/vocab/relationship/ CONSTRUCT { ?uncle rel:demoUncleOf ?nephew . } WHERE { ?uncle rel:siblingOf ?x . ?x rel:ParentOf ?nephew . } Its results are: http://example.org/Individuals/JohnSmith http://purl.org/vocab/relationship/demoUncleOf http://example.org/Individuals/TimSmith . The IMPORT Directive CM-Well allows you to upload SPARQL CONSTRUCT commands, save them as \"file infotons\" and use them in subsequent CM-Well queries. This is conceptually similar to creating \"stored procedures\" for an SQL database. This feature allows you to reuse long/complex CONSTRUCT commands rather than having to recreate them every time you use them. Note In addition to infotons related to an RDF subject, CM-Well supports file infotons, which are simply files that are stored on CM-Well for various purposes. Uploading a CONSTRUCT File To upload a file containing a CONSTRUCT command: Create a text file containing a valid CONSTRUCT command. Upload it to CM-Well using the following syntax: curl cm-well-host /myQueryPath/myConstruct.sparql -H X-CM-Well-Type:File -H Content-Type:text/plain --data-binary @myConstruct.sparql SPARQL Query with IMPORT You can use the following syntax to submit a SPARQL query, while importing an uploaded construct file: PATHS data path 1 data path 2 ... IMPORT query path 1 query path 2 ... SPARQL sparql query Note Each query path can be absolute or relative. A query path that starts with a / is absolute. A query path that does not start with a / is relative, and will be retrieved from under /meta/sp/ . Each query path can refer to a specific endpoint, or end with a wildcard. The wildcard characters are * and _ . They both have the same meaning: retrieve all construct files under the given path (non-recursive; does not extend to sub-paths). The order of the imports does not matter, because each imported construct is only applied to the given PATHS, and not to other constructs' output. The \"placeholder parameters\" feature works for imported queries as well as regular queries. Example: Using Absolute and Relative Paths Let's assume the following construct files were pre-uploaded as file infotons: /meta/sp/quote/foo.sparql /meta/sp/quote/bar.sparql /meta/sp/foobar.sparql /myQueries/xyz/baz.sparql /myQueries/abc/1.sp /myQueries/abc/2.sp This would be a valid SPARQL query POST: PATHS /data?op=search with-data IMPORT foobar.sparql quote/* /myQueries/xyz/baz.sparql /myQueries/abc/_ SPARQL SELECT * WHERE { ?s ?p ?o } Note the different types of import path (in order of appearance): foobar.sparql - relative (implicitly to /meta/sp). quote/* - relative; uses a wildcard to refer to all files under the path. /myQueries/xyz/baz.sparql - absolute; refers to a specific file. /myQueries/abc/_ - absolute; uses a wildcard to refer to all files under the path. Example: Complete Usage Scenario for IMPORT The following sequence of commands does the following: Creates a small repository of people. Uploads a file containing a CONSTRUCT command to CM-Well. Applies a construct to add a sibling called \"his sister\" to each person with an active value of \"true\". Queries for all people with siblings, thereby retrieving all the people in the repository. Note The \"siblings\" are only added in the construct; they are not written to CM-Well. First, let's upload some data: $ curl -X POST cm-well-host /_in?format=ntriples -H Content-Type: text/plain --data-binary http://example.org/Individuals/DaisyDuck http://purl.org/vocab/relationship/colleagueOf http://example.org/Individuals/BruceWayne . http://example.org/Individuals/BruceWayne http://purl.org/vocab/relationship/employedBy http://example.org/Individuals/DonaldDuck . http://example.org/Individuals/DaisyDuck http://www.tr-lbd.com/bold#active false . http://example.org/Individuals/DonaldDuck http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/BruceWayne http://www.tr-lbd.com/bold#active true . Now, let's upload a SPARQL construct file: $ curl cm-well-host /myQueries/xyz/baz.sparql -H X-CM-Well-Type:File \\ -H Content-Type:text/plain --data-binary @baz.sparql Where the contents of baz.sparql are: CONSTRUCT { ?s http://purl.org/vocab/relationship/siblingOf his sister . } WHERE { ?s http://www.tr-lbd.com/bold#active true } Now, let's POST a SPARQL query, while importing the construct file we uploaded: $ curl -X POST cm-well-host /_sp?format=ascii --data-binary PATHS /example.org/Individuals?op=search length=1000 with-data IMPORT /myQueries/xyz/baz.sparql SPARQL PREFIX rel: http://purl.org/vocab/relationship/ SELECT ?name WHERE { ?name rel:siblingOf his sister . } The results are: -------------------------------------------------- | name | ================================================== | http://example.org/Individuals/BruceWayne | | http://example.org/Individuals/DonaldDuck | -------------------------------------------------- Note that Daisy Duck does not appear in the output, as her active value is \"false\", and therefore no sibling was added for her by the construct. Using the cmwell-import Directive for Nested Imports Sometimes you may want to use \"nested\" constructs, that is, constructs that import other constructs. You can do this by creating constructs that use the #cmwell-import directive. To use this directive, add a line starting with #cmwell-import to the beginning of the SPARQL construct, followed by one space character and a list of comma-separated absolute CM-Well paths of other CONSTRUCT queries, as follows: #cmwell-import /queries2/a1,/queries2/a2 Here is an example of how to use the #cmwell-import directive. Upload construct b : curl -X POST cm-well-host /queries/b -H X-CM-WELL-Type:File -H Content-Type:text/plain --data-binary @input.txt - with this input data: CONSTRUCT { ?s ?p b . } WHERE { ?s ?p ?o } Upload construct a : curl -X POST cm-well-host /queries/a -H X-CM-WELL-Type:File -H Content-Type:text/plain --data-binary @input.txt - with this input data: #cmwell-import /queries/b CONSTRUCT { ? s ? p a . } WHERE { ? s ? p ? o } Note that construct a imports construct b . Run a SPARQL query: curl -X POST cm-well-host /_sp?x-no-cache --data-binary @input.txt - with this input data: PATHS /example.org/Individuals/MartinOdersky IMPORT /queries/a SPARQL SELECT * WHERE { ?s http://www.tr-lbd.com/bold#active ?o } ORDER BY ?o The results are: ----------------------------------------------------------- | s | o | =========================================================== | http://example.org/Individuals/MartinOdersky | a | | http://example.org/Individuals/MartinOdersky | b | | http://example.org/Individuals/MartinOdersky | true | ----------------------------------------------------------- Note that both construct a and construct b are applied. Note CM-Well imports each recursively imported CONSTRUCT exactly once (you don't have to worry about circular references). In SPARQL, a line that starts with a # is considered a comment, so adding the #cmwell-import directive keeps the SPARQL valid. You cannot use relative paths or wildcards in recursive imports; use absolute paths. Using the SPARQL Trigger Processor Agent You may want to create a materialized view of certain infotons in an ongoing fashion, by running SPARQL queries and uploading their results. To do this, you can create a custom configuration file that is read and processed by the CM-Well SPARQL Trigger Processor Agent. See Using the SPARQL Trigger Processor to learn more.","title":"Using SPARQL on Infotons"},{"location":"DeveloperGuide/DevGuide.UsingSPARQLOnCM-WellInfotons.html#using-sparql-on-infotons","text":"","title":"Using SPARQL on Infotons"},{"location":"DeveloperGuide/DevGuide.UsingSPARQLOnCM-WellInfotons.html#what-is-sparql","text":"SPARQL (SPARQL Protocol and RDF Query Language - pronounced \"sparkle\") is an industry-standard query language designed to work with graph databases. It is similar in syntax to SQL. You can use SPARQL queries on CM-Well in order to apply database operations to infotons, which are the type of \"database records\" that CM-Well supports. The supported SPARQL version in CM-Well is SPARQL 1.1. Note Currently, the only SPARQL operations that CM-Well supports are SELECT and CONSTRUCT. A comprehensive description of SPARQL is beyond the scope of this document. You can learn more about SPARQL at: - Apache Jena tutorial - W3C specifications","title":"What is SPARQL?"},{"location":"DeveloperGuide/DevGuide.UsingSPARQLOnCM-WellInfotons.html#submit-sparql-queries-via-ui","text":"CM-Well provides a simple UI for submitting SPARQL queries. To access the SPARQL UI page, click the \"secret\" (S) button in the CM-Well home page, shown in the image below. Clicking the (S) button displays the following page: To submit a SPARQL query using this UI: Enter the paths part of the query (without the \"PATHS\" header) in the first edit box. Enter the SPARQL part of the query (without the \"SPARQL\" header) in the second edit box. Select the output format you want from the Results Format dropdown menu. Click POST . The query is submitted to the _sp endpoint of the CM-Well host you're accessing. From the SPARQL Query page, you can click on the SPARQL on whole graph link to display the page for submitting a SPARQL query that runs on the entire CM-Well graph. See Apply SPARQL to the Entire Graph to learn more. To submit a SPARQL query on the whole CM-Well graph using this UI: Enter the SPARQL query in the edit box. Click POST! . The query is submitted to the _sparql endpoint of the CM-Well host you're accessing.","title":"Submit SPARQL Queries via UI"},{"location":"DeveloperGuide/DevGuide.UsingSPARQLOnCM-WellInfotons.html#paths-for-sparql-queries","text":"A SPARQL query to CM-Well has two parts. The second part is the SPARQL query itself. The first part is a set of paths within CM-Well on which you want to run the SPARQL query. The \"paths\" are in fact regular queries to CM-Well, which produce a list of infotons. After retrieving this list, CM-Well applies the SPARQL query to the list. Here are some examples of paths to which you could apply a SPARQL query: /permid.org/1-5035948006?xg=2 permid.org?op=search qp=organizationFoundedYear.mdaas 2014,type.rdf:Organization In the CM-Well GUI shown in the previous section, you would enter the paths in the top text box, and the query in the lower text box. Note The need to provide an initial path is not part of standard SPARQL syntax; it is unique to CM-Well. It is required in order to prevent the SPARQL query from running on the entire CM-Well graph, which could cause performance problems, due to the massive amount of data in CM-Well.","title":"Paths for SPARQL Queries"},{"location":"DeveloperGuide/DevGuide.UsingSPARQLOnCM-WellInfotons.html#cm-well-sparql-query-syntax","text":"Here is an example of a cURL call that applies a SPARQL query to CM-Well paths: curl -X POST cm-well-host /_sp?format=ascii --data-binary PATHS /example.org/Individuals?op=search length=1000 with-data /example.org/Individuals/RonaldKhun /example.org/Individuals/JohnSmith?xg=3 SPARQL SELECT DISTINCT ?name ?active WHERE { ?name http://www.tr-lbd.com/bold#active ?active . } ORDER BY DESC(?active) Let's break this command down to its components: Query Part Value in Example POST command to CM-Well's _sp endpoint curl -X POST \"http://cm-well-host.com/_sp\" format parameter ?format=ascii PATHS header PATHS List of paths, one per line /example.org/Individuals?op=search length=1000 with-data /example.org/Individuals/RonaldKhun /example.org/Individuals/JohnSmith?xg=3 Empty line There must be an empty line before the SPARQL header SPARQL header SPARQL SPARQL query SELECT DISTINCT ?name ?active WHERE { ?name http://www.tr-lbd.com/bold#active ?active . } ORDER BY DESC(?active) Note The --data-binary flag causes cURL to encode the subsequent string (surrounded by ' ') in binary format. The empty line before the SPARQL header is mandatory. You can also add several SPARQL queries to the same command, by separating them with lines of (at least 3) dashes, as follows: curl -X POST cm-well-host /_sp?verbose --data-binary PATHS /example.org/Individuals?op=search length=1000 with-data /example.org/Individuals/RonaldKhun /example.org/Individuals/JohnSmith?xg=3 SPARQL SELECT DISTINCT ?name ?active WHERE { ?name http://www.tr-lbd.com/bold#active ?active . } ORDER BY DESC(?active) -------------------------- SELECT DISTINCT ?name WHERE { ?name http://www.tr-lbd.com/bold#active false . }","title":"CM-Well SPARQL Query Syntax"},{"location":"DeveloperGuide/DevGuide.UsingSPARQLOnCM-WellInfotons.html#example-1-retrieving-one-field","text":"In our example of how to use the yg flag , we were looking for the corporate address for a given RIC code. What we actually got in response to our regular CM-Well query was the infotons that were related to the RIC code. We still had to retrieve the corporate address information ourselves from the relevant field. By using SPARQL, we can cause CM-Well to handle that step. To retrieve the mdaas:headquartersCommonAddress value, we can use this SPARQL query: SELECT * WHERE { ?infoton http://ont.thomsonreuters.com/mdaas/headquartersCommonAddress ?addr. } Note that instead of using the prefix \u201cmdaas:\u201d, we used the full URL that defines the field. This is necessary in order for SPARQL to recognize the field we\u2019re looking for. The cURL command, which uses the PATH from the \u201cyg\u201d example but also retrieves the CommonName field by applying SPARQL, looks like this: $ curl -X POST cm-well-host /_sp?format=ascii -H Content-Type:text/plain --data-binary PATHS /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando with-data xg=hasImmediateParent.mdaas _ SPARQL SELECT * WHERE { ?infoton http://ont.thomsonreuters.com/mdaas/headquartersCommonAddress ?Addr. } The output of the command above looks like this: | infoton | Addr | ================================================================================================================== | http://permid.org/1-5035948006 | 6649 Westwood Blvd\\nORLANDO\\nFLORIDA\\n32821-8029\\nUnited States\\n @en | | http://permid.org/1-4294969614 | 6649 Westwood Blvd Ste 300\\nORLANDO\\nFLORIDA\\n32821-6066\\nUnited States\\n | -----------------------------------------------------------------------------------------------------------------","title":"Example 1: Retrieving One Field"},{"location":"DeveloperGuide/DevGuide.UsingSPARQLOnCM-WellInfotons.html#example-2-retrieving-two-fields-and-sorting-results","text":"Here are some CM-Well paths (in a custom-made repository) to which we can apply a SPARQL query: Path Retrieves http://cm-well-host.com/example.org/Individuals?op=search length=1000 with-data The first 1000 people under Individuals http://cm-well.com/example.org/Individuals/RonaldKhun A specific person's infoton http://cm-well.com/example.org/Individuals/JohnSmith?xg=3 A specific person's outbound links Let's run a SPARQL query that retrieves each person's name and active fields, and sorts the results by the active value: curl -X POST cm-well-host /_sp?format=ascii --data-binary PATHS /example.org/Individuals?op=search length=1000 with-data /example.org/Individuals/RonaldKhun /example.org/Individuals/JohnSmith?xg=3 SPARQL SELECT DISTINCT ?name ?active WHERE { ?name http://www.tr-lbd.com/bold#active ?active . } ORDER BY DESC(?active) The results are: ------------------------------------------------------------- | name | active | ============================================================= | http://example.org/Individuals/BruceWayne | true | | http://example.org/Individuals/DonaldDuck | true | | http://example.org/Individuals/HarryMiller | true | | http://example.org/Individuals/JohnSmith | true | | http://example.org/Individuals/MartinOdersky | true | | http://example.org/Individuals/NatalieMiller | true | | http://example.org/Individuals/PeterParker | true | | http://example.org/Individuals/RonaldKhun | true | | http://example.org/Individuals/SaraSmith | true | | http://example.org/Individuals/DaisyDuck | false | | http://example.org/Individuals/RebbecaSmith | false | -------------------------------------------------------------","title":"Example 2: Retrieving Two Fields and Sorting Results"},{"location":"DeveloperGuide/DevGuide.UsingSPARQLOnCM-WellInfotons.html#specifying-the-output-format-for-sparql-results","text":"As you can see in the examples above, by default the SPARQL results are a text-rendered table. They might be \"scrambled\" in your command window, depending on the length of its lines. This format is not convenient for machine-readability. However, you can specify different output formats with the _sp endpoint, just as for regular CM-Well queries. Note Only the following output formats are supported for SPARQL queries: ascii, json, rdf, tsv, xml. For example, we can specify the tsv (tab-separated values) output format as follows: $ curl -X POST cm-well-host /_sp?format=tsv -H Content-Type:text/plain --data-binary PATHS /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando with-data xg=hasImmediateParent.mdaas _ SPARQL SELECT * WHERE { ?infoton http://ont.thomsonreuters.com/mdaas/headquartersCommonAddress ?Addr. } The output now looks like this: ?infoton?Addr http://permid.org/1-5035948006 6649 Westwood Blvd\\nORLANDO\\nFLORIDA\\n32821-8029\\nUnited States\\n @en http://permid.org/1-4294969614 6649 Westwood Blvd Ste 300\\nORLANDO\\nFLORIDA\\n32821-6066\\nUnited States\\n","title":"Specifying the Output Format for SPARQL Results"},{"location":"DeveloperGuide/DevGuide.UsingSPARQLOnCM-WellInfotons.html#sparql-query-options","text":"You can use the followings special options (or any combination of them) with SPARQL queries: quads - this option returns RDF \"quadruples\" rather than \"triples\", meaning that in addition to the subject, predicate and object, it also returns the graph name for each triple. verbose - this option returns the time-metrics of data retrieval and processing operations, as well as the data itself. show-graph - this option shows the list of infotons, which are the result of the initial CM-Well query, and the input to the SPARQL query. The following sections show examples of the usage of each special option.","title":"SPARQL Query Options"},{"location":"DeveloperGuide/DevGuide.UsingSPARQLOnCM-WellInfotons.html#the-quads-option","text":"This option returns RDF \"quadruples\" rather than \"triples\", meaning that in addition to the subject, predicate and object, it also returns the graph name for each triple. Here is an example of a query using the \"quads\" option: curl -X POST cm-well-host /_sp?format=ascii quads --data-binary PATHS /example.org/Individuals?op=search length=1000 with-data /example.org/Individuals/RonaldKhun /example.org/Individuals/JohnSmith?xg=3 SPARQL SELECT * FROM NAMED http://example.org/graphs/spiderman WHERE { GRAPH ?g { ?s ?p ?o . } } Its results are: s | p | o | g ===========================================|===============================================|==============================================|===================================== http://example.org/Individuals/JohnSmith | http://purl.org/vocab/relationship/parentOf | http://example.org/Individuals/SaraSmith | http://example.org/graphs/spiderman http://example.org/Individuals/JohnSmith | http://purl.org/vocab/relationship/friendOf | http://example.org/Individuals/PeterParker | http://example.org/graphs/spiderman","title":"The \"quads\" option"},{"location":"DeveloperGuide/DevGuide.UsingSPARQLOnCM-WellInfotons.html#the-verbose-option","text":"This option returns the time-metrics of data retrieval and processing operations, as well as the data itself. You must use the ?format=ascii option if you want to receive verbose information. Here is an example of a query using the \"verbose\" option: curl -X POST cm-well-host /_sp?format=ascii verbose --data-binary PATHS /example.org/Individuals?op=search length=1000 with-data /example.org/Individuals/RonaldKhun /example.org/Individuals/JohnSmith?xg=3 SPARQL SELECT DISTINCT ?name ?active WHERE { ?name http://www.tr-lbd.com/bold#active ?active . } ORDER BY DESC(?active) Its results are: Time metrics: Start End Type Task 00:00:00.489 00:00:00.556 Subgraph /example.org/Individuals?op=search length=1000 with-data= format=nquads 00:00:00.490 00:00:00.505 Subgraph /example.org/Individuals/RonaldKhun?= format=nquads 00:00:00.499 00:00:00.552 Subgraph /example.org/Individuals/JohnSmith?xg=3 format=nquads 00:00:00.561 00:00:00.566 SPARQL SELECT DISTINCT ?name ?active WHERE { ?name http://www.tr-lbd.c... Results: ------------------------------------------------------------ | name | active | ============================================================ | http://example.org/Individuals/BruceWayne | true | | http://example.org/Individuals/DonaldDuck | true | | http://example.org/Individuals/HarryMiller | true | | http://example.org/Individuals/JohnSmith | true | | http://example.org/Individuals/MartinOdersky | true | | http://example.org/Individuals/NatalieMiller | true | | http://example.org/Individuals/PeterParker | true | | http://example.org/Individuals/RonaldKhun | true | | http://example.org/Individuals/SaraSmith | true | | http://example.org/Individuals/DaisyDuck | false | | http://example.org/Individuals/RebbecaSmith | false | ------------------------------------------------------------","title":"The \"verbose\" option"},{"location":"DeveloperGuide/DevGuide.UsingSPARQLOnCM-WellInfotons.html#the-show-graph-option","text":"This option shows the list of infotons, which are the result of the initial CM-Well query, and the input to the SPARQL query. You must use the ?format=ascii option if you want to use the \"show-graph\" option. Here is an example of a query using the \"show-graph\" option: curl -X POST cm-well-host /_sp?format=ascii show-graph --data-binary PATHS /example.org/Individuals?op=search length=1000 with-data /example.org/Individuals/RonaldKhun /example.org/Individuals/JohnSmith?xg=3 SPARQL SELECT DISTINCT ?name ?active WHERE { ?name http://www.tr-lbd.com/bold#active ?active . } ORDER BY DESC(?active) Its results are: Graph: http://example.org/Individuals/DonaldDuck http://purl.org/vocab/relationship/knowsByReputation http://example.org/Individuals/MartinOdersky . http://example.org/Individuals/DonaldDuck http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/DonaldDuck http://purl.org/vocab/relationship/mentorOf http://example.org/Individuals/JohnSmith . http://example.org/Individuals/RebbecaSmith http://www.tr-lbd.com/bold#active false . http://example.org/Individuals/RebbecaSmith http://purl.org/vocab/relationship/siblingOf http://example.org/Individuals/SaraSmith . http://example.org/Individuals/MartinOdersky http://purl.org/vocab/relationship/collaboratesWith http://example.org/Individuals/RonaldKhun . http://example.org/Individuals/MartinOdersky http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/BruceWayne http://purl.org/vocab/relationship/employedBy http://example.org/Individuals/DonaldDuck . http://example.org/Individuals/BruceWayne http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/PeterParker http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/PeterParker http://purl.org/vocab/relationship/worksWith http://example.org/Individuals/HarryMiller . http://example.org/Individuals/PeterParker http://purl.org/vocab/relationship/neighborOf http://example.org/Individuals/ClarkKent . http://example.org/Individuals/SaraSmith http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/SaraSmith http://purl.org/vocab/relationship/siblingOf http://example.org/Individuals/RebbecaSmith . http://example.org/Individuals/RonaldKhun http://www.tr-lbd.com/bold#category deals . http://example.org/Individuals/RonaldKhun http://www.tr-lbd.com/bold#category news . http://example.org/Individuals/RonaldKhun http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/RonaldKhun http://purl.org/vocab/relationship/collaboratesWith http://example.org/Individuals/MartinOdersky . http://example.org/Individuals/JohnSmith http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/NatalieMiller http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/NatalieMiller http://purl.org/vocab/relationship/childOf http://example.org/Individuals/HarryMiller . http://example.org/Individuals/HarryMiller http://purl.org/vocab/relationship/parentOf http://example.org/Individuals/NatalieMiller . http://example.org/Individuals/HarryMiller http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/DaisyDuck http://purl.org/vocab/relationship/colleagueOf http://example.org/Individuals/BruceWayne . http://example.org/Individuals/DaisyDuck http://www.tr-lbd.com/bold#active false . http://example.org/Individuals/JohnSmith http://purl.org/vocab/relationship/parentOf http://example.org/Individuals/SaraSmith . http://example.org/Individuals/JohnSmith http://purl.org/vocab/relationship/friendOf http://example.org/Individuals/PeterParker . Results: ------------------------------------------------------------ | name | active | ============================================================ | http://example.org/Individuals/BruceWayne | true | | http://example.org/Individuals/DonaldDuck | true | | http://example.org/Individuals/HarryMiller | true | | http://example.org/Individuals/JohnSmith | true | | http://example.org/Individuals/MartinOdersky | true | | http://example.org/Individuals/NatalieMiller | true | | http://example.org/Individuals/PeterParker | true | | http://example.org/Individuals/RonaldKhun | true | | http://example.org/Individuals/SaraSmith | true | | http://example.org/Individuals/DaisyDuck | false | | http://example.org/Individuals/RebbecaSmith | false | ------------------------------------------------------------","title":"The \"show-graph\" option"},{"location":"DeveloperGuide/DevGuide.UsingSPARQLOnCM-WellInfotons.html#placeholder-parameters","text":"Sometimes it can be useful to be able to insert \"macro-like\" placeholders in your SPARQL query, i.e. named parameters whose instances within the query are replaced with a string value that you define. CM-Well supports this option. You can define a placeholder parameter as one of the URI parameters, prefixed by \"sp.\" and followed by the value you want to use in the specific call. You can then reference this parameter by placing it anywhere in the SPARQL query (including the PATHS section and the SPARQL section), surrounded by the '%' character on either side, as many times as you want. The parameter is replaced with the value you defined before the SPARQL query is applied. Note Parameter names may contain only letter characters. Here is an example of a query with a placeholder parameter called boldpred : curl -X POST cm-well-host /_sp?sp.boldpred=active --data-binary PATHS /example.org/Individuals?op=search length=1000 with-data SPARQL SELECT DISTINCT ?name WHERE { ?name http://www.tr-lbd.com/bold#%BOLDPRED% true . } The WHERE clause, after placeholder replacement, becomes: WHERE { ?name http://www.tr-lbd.com/bold#active true . } Note The matching between placeholder name and its instances within the query is case insensitive.","title":"\"Placeholder\" Parameters"},{"location":"DeveloperGuide/DevGuide.UsingSPARQLOnCM-WellInfotons.html#the-construct-command","text":"In addition to the SELECT command, you can use SPARQL's CONSTRUCT command. The CONSTRUCT command allows you to formulate your own RDF triples by manipulating query results. You can perform changes such as creating new entities and relationships, or performing transformations on values. You can then use the new triples you created as input to CM-Well, or for any other purpose. Here is an example of a query using CONSTRUCT, that derives an \"UncleOf\" relationship from information about people's parents and siblings: curl -X POST cm-well-host /_sp --data-binary PATHS /example.org/Individuals?op=search length=1000 with-data SPARQL PREFIX rel: http://purl.org/vocab/relationship/ CONSTRUCT { ?uncle rel:demoUncleOf ?nephew . } WHERE { ?uncle rel:siblingOf ?x . ?x rel:ParentOf ?nephew . } Its results are: http://example.org/Individuals/JohnSmith http://purl.org/vocab/relationship/demoUncleOf http://example.org/Individuals/TimSmith .","title":"The CONSTRUCT Command"},{"location":"DeveloperGuide/DevGuide.UsingSPARQLOnCM-WellInfotons.html#the-import-directive","text":"CM-Well allows you to upload SPARQL CONSTRUCT commands, save them as \"file infotons\" and use them in subsequent CM-Well queries. This is conceptually similar to creating \"stored procedures\" for an SQL database. This feature allows you to reuse long/complex CONSTRUCT commands rather than having to recreate them every time you use them. Note In addition to infotons related to an RDF subject, CM-Well supports file infotons, which are simply files that are stored on CM-Well for various purposes.","title":"The IMPORT Directive"},{"location":"DeveloperGuide/DevGuide.UsingSPARQLOnCM-WellInfotons.html#uploading-a-construct-file","text":"To upload a file containing a CONSTRUCT command: Create a text file containing a valid CONSTRUCT command. Upload it to CM-Well using the following syntax: curl cm-well-host /myQueryPath/myConstruct.sparql -H X-CM-Well-Type:File -H Content-Type:text/plain --data-binary @myConstruct.sparql","title":"Uploading a CONSTRUCT File"},{"location":"DeveloperGuide/DevGuide.UsingSPARQLOnCM-WellInfotons.html#sparql-query-with-import","text":"You can use the following syntax to submit a SPARQL query, while importing an uploaded construct file: PATHS data path 1 data path 2 ... IMPORT query path 1 query path 2 ... SPARQL sparql query Note Each query path can be absolute or relative. A query path that starts with a / is absolute. A query path that does not start with a / is relative, and will be retrieved from under /meta/sp/ . Each query path can refer to a specific endpoint, or end with a wildcard. The wildcard characters are * and _ . They both have the same meaning: retrieve all construct files under the given path (non-recursive; does not extend to sub-paths). The order of the imports does not matter, because each imported construct is only applied to the given PATHS, and not to other constructs' output. The \"placeholder parameters\" feature works for imported queries as well as regular queries.","title":"SPARQL Query with IMPORT"},{"location":"DeveloperGuide/DevGuide.UsingSPARQLOnCM-WellInfotons.html#example-using-absolute-and-relative-paths","text":"Let's assume the following construct files were pre-uploaded as file infotons: /meta/sp/quote/foo.sparql /meta/sp/quote/bar.sparql /meta/sp/foobar.sparql /myQueries/xyz/baz.sparql /myQueries/abc/1.sp /myQueries/abc/2.sp This would be a valid SPARQL query POST: PATHS /data?op=search with-data IMPORT foobar.sparql quote/* /myQueries/xyz/baz.sparql /myQueries/abc/_ SPARQL SELECT * WHERE { ?s ?p ?o } Note the different types of import path (in order of appearance): foobar.sparql - relative (implicitly to /meta/sp). quote/* - relative; uses a wildcard to refer to all files under the path. /myQueries/xyz/baz.sparql - absolute; refers to a specific file. /myQueries/abc/_ - absolute; uses a wildcard to refer to all files under the path.","title":"Example: Using Absolute and Relative Paths"},{"location":"DeveloperGuide/DevGuide.UsingSPARQLOnCM-WellInfotons.html#example-complete-usage-scenario-for-import","text":"The following sequence of commands does the following: Creates a small repository of people. Uploads a file containing a CONSTRUCT command to CM-Well. Applies a construct to add a sibling called \"his sister\" to each person with an active value of \"true\". Queries for all people with siblings, thereby retrieving all the people in the repository. Note The \"siblings\" are only added in the construct; they are not written to CM-Well. First, let's upload some data: $ curl -X POST cm-well-host /_in?format=ntriples -H Content-Type: text/plain --data-binary http://example.org/Individuals/DaisyDuck http://purl.org/vocab/relationship/colleagueOf http://example.org/Individuals/BruceWayne . http://example.org/Individuals/BruceWayne http://purl.org/vocab/relationship/employedBy http://example.org/Individuals/DonaldDuck . http://example.org/Individuals/DaisyDuck http://www.tr-lbd.com/bold#active false . http://example.org/Individuals/DonaldDuck http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/BruceWayne http://www.tr-lbd.com/bold#active true . Now, let's upload a SPARQL construct file: $ curl cm-well-host /myQueries/xyz/baz.sparql -H X-CM-Well-Type:File \\ -H Content-Type:text/plain --data-binary @baz.sparql Where the contents of baz.sparql are: CONSTRUCT { ?s http://purl.org/vocab/relationship/siblingOf his sister . } WHERE { ?s http://www.tr-lbd.com/bold#active true } Now, let's POST a SPARQL query, while importing the construct file we uploaded: $ curl -X POST cm-well-host /_sp?format=ascii --data-binary PATHS /example.org/Individuals?op=search length=1000 with-data IMPORT /myQueries/xyz/baz.sparql SPARQL PREFIX rel: http://purl.org/vocab/relationship/ SELECT ?name WHERE { ?name rel:siblingOf his sister . } The results are: -------------------------------------------------- | name | ================================================== | http://example.org/Individuals/BruceWayne | | http://example.org/Individuals/DonaldDuck | -------------------------------------------------- Note that Daisy Duck does not appear in the output, as her active value is \"false\", and therefore no sibling was added for her by the construct.","title":"Example: Complete Usage Scenario for IMPORT"},{"location":"DeveloperGuide/DevGuide.UsingSPARQLOnCM-WellInfotons.html#using-the-cmwell-import-directive-for-nested-imports","text":"Sometimes you may want to use \"nested\" constructs, that is, constructs that import other constructs. You can do this by creating constructs that use the #cmwell-import directive. To use this directive, add a line starting with #cmwell-import to the beginning of the SPARQL construct, followed by one space character and a list of comma-separated absolute CM-Well paths of other CONSTRUCT queries, as follows: #cmwell-import /queries2/a1,/queries2/a2 Here is an example of how to use the #cmwell-import directive. Upload construct b : curl -X POST cm-well-host /queries/b -H X-CM-WELL-Type:File -H Content-Type:text/plain --data-binary @input.txt - with this input data: CONSTRUCT { ?s ?p b . } WHERE { ?s ?p ?o } Upload construct a : curl -X POST cm-well-host /queries/a -H X-CM-WELL-Type:File -H Content-Type:text/plain --data-binary @input.txt - with this input data: #cmwell-import /queries/b CONSTRUCT { ? s ? p a . } WHERE { ? s ? p ? o } Note that construct a imports construct b . Run a SPARQL query: curl -X POST cm-well-host /_sp?x-no-cache --data-binary @input.txt - with this input data: PATHS /example.org/Individuals/MartinOdersky IMPORT /queries/a SPARQL SELECT * WHERE { ?s http://www.tr-lbd.com/bold#active ?o } ORDER BY ?o The results are: ----------------------------------------------------------- | s | o | =========================================================== | http://example.org/Individuals/MartinOdersky | a | | http://example.org/Individuals/MartinOdersky | b | | http://example.org/Individuals/MartinOdersky | true | ----------------------------------------------------------- Note that both construct a and construct b are applied. Note CM-Well imports each recursively imported CONSTRUCT exactly once (you don't have to worry about circular references). In SPARQL, a line that starts with a # is considered a comment, so adding the #cmwell-import directive keeps the SPARQL valid. You cannot use relative paths or wildcards in recursive imports; use absolute paths.","title":"Using the cmwell-import Directive for Nested Imports"},{"location":"DeveloperGuide/DevGuide.UsingSPARQLOnCM-WellInfotons.html#using-the-sparql-trigger-processor-agent","text":"You may want to create a materialized view of certain infotons in an ongoing fashion, by running SPARQL queries and uploading their results. To do this, you can create a custom configuration file that is read and processed by the CM-Well SPARQL Trigger Processor Agent. See Using the SPARQL Trigger Processor to learn more.","title":"Using the SPARQL Trigger Processor Agent"},{"location":"DeveloperGuide/DevGuide.WorkingWithNamedSub-Graphs.html","text":"Working with Named Sub-Graphs Sometimes you may want to mark certain field values with a label. The CM-Well feature that supports this is called a \"named sub-graph\", where the label is the name, and the sub-graph are the items in the Linked Data graph that have the specific label. In this case, relationships in the graph are represented not by triples but by quads, which include the subject, predicate, object and label (sub-graph name). The named sub-graph feature allows you to manipulate data within the sub-graph. For example, you can search for or delete fields by sub-graph name. Note The named sub-graph feature is also referred to as \"quads\", which relates to the fourth quad value which is the sub-graph name or label. For example, suppose you are maintaining a database of movies under CM-Well. A movie may receive several review scores from several different sources. You want to save all the scores as \"Score\" field values, but label each value according to the reviewing entity. You can do this using named sub-graphs. Creating a Named Sub-Graph To create a field that belongs to a named sub-graph, create the field using a quad instead of a triple, where the fourth value of the quad is the sub-graph name that you choose. Note The sub-graph name must be a valid URI. For example, let's add some movies to our repository: curl -X POST cm-well-host /_in?format=ttl -H Content-Type: text/plain --data-binary http://example.org/movies/ET a http://dbpedia.org/ontology/Film . http://example.org/movies/GoneWithTheWind a http://dbpedia.org/ontology/Film . http://example.org/movies/TheAvenger a http://dbpedia.org/ontology/Film . Now let's add some review scores to the movies, using quads: curl -X POST cm-well-host /_in?format=nquads -H Content-Type: text/plain --data-binary http://example.org/movies/ET http://MyOntology/Score 8.3 http://MyOntology/RottenTomatoes . http://example.org/movies/ET http://MyOntology/Score 8.7 http://MyOntology/NewYorkTimes . http://example.org/movies/GoneWithTheWind http://MyOntology/Score 6.5 http://MyOntology/RottenTomatoes . http://example.org/movies/GoneWithTheWind http://MyOntology/Score 8.9 http://MyOntology/NewYorkTimes . http://example.org/movies/TheAvenger http://MyOntology/Score 7.2 http://MyOntology/RottenTomatoes . http://example.org/movies/TheAvenger http://MyOntology/Score 7.7 http://MyOntology/MovieGoers . Retrieving Quads by their Label You can retrieve all quads with a certain label by running a command with the following template: cm-well-host / cm-well-path ?op=search recursive qp=quad.system:: quadValue For example, the following command retrieves all quads under the PPE example.org folder, whose label (4th quad value) is http://MyOrgs/Startups : cm-well-host /example.org?op=search recursive qp=quad.system::http://MyOrgs/Startups Deleting/Replacing a Named Sub-Graph You can delete an entire named sub-graph by using the following command syntax: curl -X POST cm-well-host /_in?format=ntriples -H Content-Type: text/plain --data cmwell://meta/sys#replaceGraph http://MyOntology/MovieGoers . If the replaceGraph data is followed by one or more new quads, they will be inserted into the sub-graph, effectively performing a replacement rather than just a deletion, as follows: curl -X POST cm-well-host /_in?format=nquads -H Content-Type: text/plain --data cmwell://meta/sys#replaceGraph http://MyOntology/MovieGoers . http://example.org/movies/ET http://MyOntology/Score 10 http://MyOntology/MovieGoers . http://example.org/movies/GoneWithTheWind http://MyOntology/Score 10 http://MyOntology/MovieGoers . http://example.org/movies/TheAvenger http://MyOntology/Score 10 http://MyOntology/MovieGoers . Note A replaceGraph call will only succeed under the following conditions: The number of infotons in the sub-graph does not exceed 10,000. The infotons in the call data can be retrieved within 60 seconds. The number of graph replace statements does not exceed 20 in a single POST command. If you need to delete a large number of infotons, an alternative to replaceGraph is to retrieve all the sub-graph's infotons using an appropriate query, then delete each infoton. Using a Wildcard to Delete Multiple Fields You can use the special wildcard indicator * to delete multiple fields in a single command. You can either delete all values of a specific field, or all values related to a specific sub-graph. For example, let's add some data for a single infoton, that is associated with two different sub-graphs: curl -X POST cm-well-host /_in?format=nquads -H Content-Type: text/plain --data-binary http://example.org/parents/Dad http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://http://dbpedia.org/ontology/person http://example.org/males . http://example.org/parents/Dad http://http://dbpedia.org/ontology/wife Betty http://example.org/females . http://example.org/parents/Dad http://http://dbpedia.org/ontology/child Johnny http://example.org/males . http://example.org/parents/Dad http://http://dbpedia.org/ontology/child Teddy http://example.org/males . http://example.org/parents/Dad http://http://dbpedia.org/ontology/child Sarah http://example.org/females . http://example.org/parents/Dad http://http://dbpedia.org/ontology/child Nancy http://example.org/females . We have created a \"Dad\" person, who has a wife and two children belonging to the \"female\" named sub-graph, and two children belonging to the \"male\" named sub-graph. If we now run this command, using * instead of a field name: curl -X POST cm-well-host /_in?format=nquads -H Content-Type: text/plain --data-binary http://example.org/parents/Dad cmwell://meta/sys#markReplace * http://example.org/males . - all of Dad's fields belonging to the \"male\" sub-graph are deleted (in other words, all of Dad's male children). If, on the other hand, we run this command, using * instead of a graph name: curl -X POST cm-well-host /_in?format=nquads -H Content-Type: text/plain --data-binary http://example.org/parents/Dad cmwell://meta/sys#markReplace http://http://dbpedia.org/ontology/child * . - all of Dad's fields of the type \"child\" are deleted, regardless of whether they belong to the \"male\" or \"female\" sub-graph. Using String Labels as Sub-Graph Aliases As mentioned above, the sub-graph name must be a valid URI. You can also add a simple string label to the graph, as an alias for the graph's name (the 4th value of its quads). This can be more convenient and readable when working with named sub-graphs. For example, to create the alias \"superman\" for the graph name http://example.org/graphs/superman , you can run the following command: curl cm-well-host /_in?format=nquads --data-binary cmwell://meta/sys#graphAlias superman http://example.org/graphs/superman . You can then use the string label instead of the name URI in any API call that refers to named graphs. For example, using the example label created above, this command: cm-well-host /example.org?op=search recursive qp=quad.system::superman - is equivalent to this command: cm-well-host /example.org?op=search recursive qp=quad.system::http://example.org/graphs/superman Note You can only add one alias per named sub-graph. Creating an alias when one already exists will overwrite the existing alias.","title":"Working with Named Sub-Graphs"},{"location":"DeveloperGuide/DevGuide.WorkingWithNamedSub-Graphs.html#working-with-named-sub-graphs","text":"Sometimes you may want to mark certain field values with a label. The CM-Well feature that supports this is called a \"named sub-graph\", where the label is the name, and the sub-graph are the items in the Linked Data graph that have the specific label. In this case, relationships in the graph are represented not by triples but by quads, which include the subject, predicate, object and label (sub-graph name). The named sub-graph feature allows you to manipulate data within the sub-graph. For example, you can search for or delete fields by sub-graph name. Note The named sub-graph feature is also referred to as \"quads\", which relates to the fourth quad value which is the sub-graph name or label. For example, suppose you are maintaining a database of movies under CM-Well. A movie may receive several review scores from several different sources. You want to save all the scores as \"Score\" field values, but label each value according to the reviewing entity. You can do this using named sub-graphs.","title":"Working with Named Sub-Graphs"},{"location":"DeveloperGuide/DevGuide.WorkingWithNamedSub-Graphs.html#creating-a-named-sub-graph","text":"To create a field that belongs to a named sub-graph, create the field using a quad instead of a triple, where the fourth value of the quad is the sub-graph name that you choose. Note The sub-graph name must be a valid URI. For example, let's add some movies to our repository: curl -X POST cm-well-host /_in?format=ttl -H Content-Type: text/plain --data-binary http://example.org/movies/ET a http://dbpedia.org/ontology/Film . http://example.org/movies/GoneWithTheWind a http://dbpedia.org/ontology/Film . http://example.org/movies/TheAvenger a http://dbpedia.org/ontology/Film . Now let's add some review scores to the movies, using quads: curl -X POST cm-well-host /_in?format=nquads -H Content-Type: text/plain --data-binary http://example.org/movies/ET http://MyOntology/Score 8.3 http://MyOntology/RottenTomatoes . http://example.org/movies/ET http://MyOntology/Score 8.7 http://MyOntology/NewYorkTimes . http://example.org/movies/GoneWithTheWind http://MyOntology/Score 6.5 http://MyOntology/RottenTomatoes . http://example.org/movies/GoneWithTheWind http://MyOntology/Score 8.9 http://MyOntology/NewYorkTimes . http://example.org/movies/TheAvenger http://MyOntology/Score 7.2 http://MyOntology/RottenTomatoes . http://example.org/movies/TheAvenger http://MyOntology/Score 7.7 http://MyOntology/MovieGoers .","title":"Creating a Named Sub-Graph"},{"location":"DeveloperGuide/DevGuide.WorkingWithNamedSub-Graphs.html#retrieving-quads-by-their-label","text":"You can retrieve all quads with a certain label by running a command with the following template: cm-well-host / cm-well-path ?op=search recursive qp=quad.system:: quadValue For example, the following command retrieves all quads under the PPE example.org folder, whose label (4th quad value) is http://MyOrgs/Startups : cm-well-host /example.org?op=search recursive qp=quad.system::http://MyOrgs/Startups","title":"Retrieving Quads by their Label"},{"location":"DeveloperGuide/DevGuide.WorkingWithNamedSub-Graphs.html#deletingreplacing-a-named-sub-graph","text":"You can delete an entire named sub-graph by using the following command syntax: curl -X POST cm-well-host /_in?format=ntriples -H Content-Type: text/plain --data cmwell://meta/sys#replaceGraph http://MyOntology/MovieGoers . If the replaceGraph data is followed by one or more new quads, they will be inserted into the sub-graph, effectively performing a replacement rather than just a deletion, as follows: curl -X POST cm-well-host /_in?format=nquads -H Content-Type: text/plain --data cmwell://meta/sys#replaceGraph http://MyOntology/MovieGoers . http://example.org/movies/ET http://MyOntology/Score 10 http://MyOntology/MovieGoers . http://example.org/movies/GoneWithTheWind http://MyOntology/Score 10 http://MyOntology/MovieGoers . http://example.org/movies/TheAvenger http://MyOntology/Score 10 http://MyOntology/MovieGoers . Note A replaceGraph call will only succeed under the following conditions: The number of infotons in the sub-graph does not exceed 10,000. The infotons in the call data can be retrieved within 60 seconds. The number of graph replace statements does not exceed 20 in a single POST command. If you need to delete a large number of infotons, an alternative to replaceGraph is to retrieve all the sub-graph's infotons using an appropriate query, then delete each infoton.","title":"Deleting/Replacing a Named Sub-Graph"},{"location":"DeveloperGuide/DevGuide.WorkingWithNamedSub-Graphs.html#using-a-wildcard-to-delete-multiple-fields","text":"You can use the special wildcard indicator * to delete multiple fields in a single command. You can either delete all values of a specific field, or all values related to a specific sub-graph. For example, let's add some data for a single infoton, that is associated with two different sub-graphs: curl -X POST cm-well-host /_in?format=nquads -H Content-Type: text/plain --data-binary http://example.org/parents/Dad http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://http://dbpedia.org/ontology/person http://example.org/males . http://example.org/parents/Dad http://http://dbpedia.org/ontology/wife Betty http://example.org/females . http://example.org/parents/Dad http://http://dbpedia.org/ontology/child Johnny http://example.org/males . http://example.org/parents/Dad http://http://dbpedia.org/ontology/child Teddy http://example.org/males . http://example.org/parents/Dad http://http://dbpedia.org/ontology/child Sarah http://example.org/females . http://example.org/parents/Dad http://http://dbpedia.org/ontology/child Nancy http://example.org/females . We have created a \"Dad\" person, who has a wife and two children belonging to the \"female\" named sub-graph, and two children belonging to the \"male\" named sub-graph. If we now run this command, using * instead of a field name: curl -X POST cm-well-host /_in?format=nquads -H Content-Type: text/plain --data-binary http://example.org/parents/Dad cmwell://meta/sys#markReplace * http://example.org/males . - all of Dad's fields belonging to the \"male\" sub-graph are deleted (in other words, all of Dad's male children). If, on the other hand, we run this command, using * instead of a graph name: curl -X POST cm-well-host /_in?format=nquads -H Content-Type: text/plain --data-binary http://example.org/parents/Dad cmwell://meta/sys#markReplace http://http://dbpedia.org/ontology/child * . - all of Dad's fields of the type \"child\" are deleted, regardless of whether they belong to the \"male\" or \"female\" sub-graph.","title":"Using a Wildcard to Delete Multiple Fields"},{"location":"DeveloperGuide/DevGuide.WorkingWithNamedSub-Graphs.html#using-string-labels-as-sub-graph-aliases","text":"As mentioned above, the sub-graph name must be a valid URI. You can also add a simple string label to the graph, as an alias for the graph's name (the 4th value of its quads). This can be more convenient and readable when working with named sub-graphs. For example, to create the alias \"superman\" for the graph name http://example.org/graphs/superman , you can run the following command: curl cm-well-host /_in?format=nquads --data-binary cmwell://meta/sys#graphAlias superman http://example.org/graphs/superman . You can then use the string label instead of the name URI in any API call that refers to named graphs. For example, using the example label created above, this command: cm-well-host /example.org?op=search recursive qp=quad.system::superman - is equivalent to this command: cm-well-host /example.org?op=search recursive qp=quad.system::http://example.org/graphs/superman Note You can only add one alias per named sub-graph. Creating an alias when one already exists will overwrite the existing alias.","title":"Using String Labels as Sub-Graph Aliases"},{"location":"DeveloperGuide/BestPractices/DevGuide.BestPractices.ConditionalUpdates.html","text":"Avoiding Write Clashes with Conditional Updates If your application supports a user interface that enables writing to CM-Well, it's possible for several users to request updates to the same infoton at the same time. This can potentially result in one user's updates silently overwriting another user's updates. To avoid this situation, you can use the conditional update feature. To use the feature, you send the UUID of the infoton you want to update, and if the UUID has changed since the time you last read it, you can show a warning or error to your user. See Using Conditional Updates to learn more about conditional update syntax. If your application provides a UI for updating CM-Well, we recommend implementing the following application logic: Read the relevant data from CM-Well before displaying it to the user. Periodically refresh the displayed data. Refresh the data again when entering editing mode. When attempting an update, use the conditional update feature (send the previous UUID for verification). If you receive a status indicating that the infoton has changed since your last read, handle according to your requirements (for instance, fail the update or display a warning).","title":"Avoiding Write Clashes with Conditional Updates"},{"location":"DeveloperGuide/BestPractices/DevGuide.BestPractices.ConditionalUpdates.html#avoiding-write-clashes-with-conditional-updates","text":"If your application supports a user interface that enables writing to CM-Well, it's possible for several users to request updates to the same infoton at the same time. This can potentially result in one user's updates silently overwriting another user's updates. To avoid this situation, you can use the conditional update feature. To use the feature, you send the UUID of the infoton you want to update, and if the UUID has changed since the time you last read it, you can show a warning or error to your user. See Using Conditional Updates to learn more about conditional update syntax. If your application provides a UI for updating CM-Well, we recommend implementing the following application logic: Read the relevant data from CM-Well before displaying it to the user. Periodically refresh the displayed data. Refresh the data again when entering editing mode. When attempting an update, use the conditional update feature (send the previous UUID for verification). If you receive a status indicating that the infoton has changed since your last read, handle according to your requirements (for instance, fail the update or display a warning).","title":"Avoiding Write Clashes with Conditional Updates"},{"location":"DeveloperGuide/BestPractices/DevGuide.BestPractices.DeletingKnownFieldValues.html","text":"Deleting Known Field Values In CM-Well, it's legal for a single field to have more than one value. Here is an example where someField has 2 values: http://example.org/my/infoton http://ont.example.org/v1.0/ns#someField value#1 . http://example.org/my/infoton http://ont.example.org/v1.0/ns#someField value#2 . Suppose we want to preserve value#1 and delete value#2 . One way to do it is with the markReplace operator: http://example.org/my/infoton cmwell://meta/sys#markReplace http://ont.example.org/v1.0/ns#someField . http://example.org/my/infoton http://ont.example.org/v1.0/ns#someField value#1 . This command deletes all the values in someField and writes value#1 to someField . (We could also use the replace-mode flag, which implicitly adds a markReplace statement to every ingested field.) But this method may cause unexpected results. The other way is to use the markDelete operator to specifically delete the unwanted value: http://example.org/my/infoton cmwell://meta/sys#markDelete _:anon . _:anon http://ont.example.org/v1.0/ns#someField value#2 . The reason to use markDelete , when you know what value you want to delete, is that you know exactly which values will be deleted. The markReplace command deletes all existing fields before writing the new value. Therefore, using this command might delete some values added by another user, which was not the intention of the user calling markReplace . Therefore, to delete one or more specific field values, we recommend using the markDelete operator.","title":"Deleting Known Field Values"},{"location":"DeveloperGuide/BestPractices/DevGuide.BestPractices.DeletingKnownFieldValues.html#deleting-known-field-values","text":"In CM-Well, it's legal for a single field to have more than one value. Here is an example where someField has 2 values: http://example.org/my/infoton http://ont.example.org/v1.0/ns#someField value#1 . http://example.org/my/infoton http://ont.example.org/v1.0/ns#someField value#2 . Suppose we want to preserve value#1 and delete value#2 . One way to do it is with the markReplace operator: http://example.org/my/infoton cmwell://meta/sys#markReplace http://ont.example.org/v1.0/ns#someField . http://example.org/my/infoton http://ont.example.org/v1.0/ns#someField value#1 . This command deletes all the values in someField and writes value#1 to someField . (We could also use the replace-mode flag, which implicitly adds a markReplace statement to every ingested field.) But this method may cause unexpected results. The other way is to use the markDelete operator to specifically delete the unwanted value: http://example.org/my/infoton cmwell://meta/sys#markDelete _:anon . _:anon http://ont.example.org/v1.0/ns#someField value#2 . The reason to use markDelete , when you know what value you want to delete, is that you know exactly which values will be deleted. The markReplace command deletes all existing fields before writing the new value. Therefore, using this command might delete some values added by another user, which was not the intention of the user calling markReplace . Therefore, to delete one or more specific field values, we recommend using the markDelete operator.","title":"Deleting Known Field Values"},{"location":"DeveloperGuide/BestPractices/DevGuide.BestPractices.ManagingRetries.html","text":"Managing Retries Under conditions of heavy load, you may receive the 503 (Service Unavailable) HTTP error from CM-Well. In this case, we recommend implementing the following client logic: Sleep for 1 second, then retry the request. If you still get the 503 error, sleep for a longer period (for instance, 2-3 seconds), then retry the request. If you still experience the problem, retry periodically, while sleeping for longer periods each time, up to a maximum of 60 seconds.","title":"Managing Retries"},{"location":"DeveloperGuide/BestPractices/DevGuide.BestPractices.ManagingRetries.html#managing-retries","text":"Under conditions of heavy load, you may receive the 503 (Service Unavailable) HTTP error from CM-Well. In this case, we recommend implementing the following client logic: Sleep for 1 second, then retry the request. If you still get the 503 error, sleep for a longer period (for instance, 2-3 seconds), then retry the request. If you still experience the problem, retry periodically, while sleeping for longer periods each time, up to a maximum of 60 seconds.","title":"Managing Retries"},{"location":"DeveloperGuide/BestPractices/DevGuide.BestPractices.StreamingMethods.html","text":"Streaming Methods There are various methods for streaming large numbers of infotons from CM-Well. The following table describes the three main methods and their pros and cons: Method Description Reference Stream Implemented with thin management layers over the underlying indexing module's streaming feature. The operators stream , mstream and sstream are variants of the same type of streaming. This type of streaming is fast, but the results are unsorted, and there is no way to resume from the point of failure, if a failure occurs. Streaming Consume To use this API, you use the create-consumer operator to retrieve a position token, and then call the _consume endpoint. This API is relatively slow, but its results are sorted by their indexTime value, and you can resume from the point of failure, if a failure occurs. Alternatively, you can use the qstream operator, which is also sorted and resumable. Consume Bulk Consume This is the fastest option. To use this API, you use the create-consumer operator to retrieve a position token, and then call the _bulk-consume endpoint. Results are not sorted within a chunk, but the time ranges the chunk are in sequence. This means you can both resume from the point of failure, and use parallel threads to download the data of each chunk's infoton URIs. Note that you receive the next chunk's token in the response header before you finish downloading the current chunk's data. So you can use the next token to start streaming the next chunk (or the next several chunks, using additional tokens received) in parallel to the current chunk. Bulk Consume The package cmwell.tools.data.downloader contains Scala command line applications for exercising these methods. The examples directory also includes a simple Python script exercising the consume and bulk-consume methods. Downloading Infoton Data while Streaming By default, all streaming methods retrieve only the relevant infoton URIs. To download the infoton's data, you can use one of the following options: Add the with-data flag to the streaming request. The results stream then contains infoton fields as well as URIs. Stream URIs only (the faster option), then retrieve each infoton's fields by dereferencing its URI. The advantage of this option is that you can run threads in parallel to retrieve the data.","title":"Streaming Methods"},{"location":"DeveloperGuide/BestPractices/DevGuide.BestPractices.StreamingMethods.html#streaming-methods","text":"There are various methods for streaming large numbers of infotons from CM-Well. The following table describes the three main methods and their pros and cons: Method Description Reference Stream Implemented with thin management layers over the underlying indexing module's streaming feature. The operators stream , mstream and sstream are variants of the same type of streaming. This type of streaming is fast, but the results are unsorted, and there is no way to resume from the point of failure, if a failure occurs. Streaming Consume To use this API, you use the create-consumer operator to retrieve a position token, and then call the _consume endpoint. This API is relatively slow, but its results are sorted by their indexTime value, and you can resume from the point of failure, if a failure occurs. Alternatively, you can use the qstream operator, which is also sorted and resumable. Consume Bulk Consume This is the fastest option. To use this API, you use the create-consumer operator to retrieve a position token, and then call the _bulk-consume endpoint. Results are not sorted within a chunk, but the time ranges the chunk are in sequence. This means you can both resume from the point of failure, and use parallel threads to download the data of each chunk's infoton URIs. Note that you receive the next chunk's token in the response header before you finish downloading the current chunk's data. So you can use the next token to start streaming the next chunk (or the next several chunks, using additional tokens received) in parallel to the current chunk. Bulk Consume The package cmwell.tools.data.downloader contains Scala command line applications for exercising these methods. The examples directory also includes a simple Python script exercising the consume and bulk-consume methods.","title":"Streaming Methods"},{"location":"DeveloperGuide/BestPractices/DevGuide.BestPractices.StreamingMethods.html#downloading-infoton-data-while-streaming","text":"By default, all streaming methods retrieve only the relevant infoton URIs. To download the infoton's data, you can use one of the following options: Add the with-data flag to the streaming request. The results stream then contains infoton fields as well as URIs. Stream URIs only (the faster option), then retrieve each infoton's fields by dereferencing its URI. The advantage of this option is that you can run threads in parallel to retrieve the data.","title":"Downloading Infoton Data while Streaming"},{"location":"Introduction/Intro.BriefHistoryOfCM-Well.html","text":"A Brief History This page briefly describes the conceptual and technical motivations that led to the development of the CM-Well platform. In the Beginning... CM-Well was developed as an initiative of Thomson Reuters's (now Refinitiv) TMS (Text Management Services) division. TMS was once a startup company called ClearForest, which specialized in Natural Language Processing, text mining, data analysis and knowledge representation. Reuters (this preceded the merger with Thomson) acquired ClearForest in 2007, incorporating its highly relevant capabilities into its own products. TMS already had expertise in tagging entities, events and relationships in free-form text, and had implemented various methods for storage and analysis of the tagged data. To begin with, these methods did not conform to any widely-accepted standard. The data was stored in standard relational databases, although conceptually it behaved more like a connected graph. The Rise of Semantic Web The newly emerging standards of Semantic Web and Linked Data seemed like a natural choice for the data modeling standards TMS was seeking. These standards define a way to represent information that's conceptually similar to how people perceive it, but such that it's as easily accessible as a web page, and as easy to extend as it is to click on a link. Another key principle that Linked Data supports is interoperability - the ability for different data repositories to refer to and interact with each other. High-Level Requirements TMS wanted to create an information repository that would be: A container for TR's central entities and their attributes and relationships. A general, writable platform for data modeling. A Linked Data repository. Easily accessible to other TR applications. Updated in real-time as well as maintaining historical information. Scalable for huge amounts of data. CM-Well was developed to implement all of these requirements. CM-Well Architecture According to Linked Data and Web Oriented Architecture (WOA) best practices, the TMS team determined that the CM-Well service would support a REST API over HTTP, and that its data would be represented as Resource Description Format (RDF) \"triples\". (See CM-Well Data Paradigms for more information.) At the time, existing products for storing triples were not scalable to the degree required by CM-Well. NoSQL-type databases implemented an object-based design, as required by CM-Well, but did not perform well enough in terms of real-time consistency and supporting a high-level query language. The TMS team decided to develop a new platform, relying on off-the-shelf packages where possible. CM-Well utilizes the following 3rd-party infrastructure modules: Cassandra - distributed database management. ElasticSearch - search capabilities. SPARQL query language - sophisticated queries over an RDF structure. The CM-Well Vision CM-Well's vision is to be an eco-system of Linked Data objects, whose primary purpose is to describe the real-world entities that interest TR's customers - those that are significant in the business and financial domains. These entities are both inter-linked among themselves, and linkable to any application or platform that supports the RDF standard. In addition to being a repository for TR's central financial information, CM-Well is a \"technology stack\" or general platform, which allows you to model any information domain you wish and create your own repository. Our decision to Open Source CM-Well is a natural extension of this philosophy: we've found CM-Well to be exceptionally useful internally and hope it will be for you.","title":"A Brief History"},{"location":"Introduction/Intro.BriefHistoryOfCM-Well.html#a-brief-history","text":"This page briefly describes the conceptual and technical motivations that led to the development of the CM-Well platform.","title":"A Brief History"},{"location":"Introduction/Intro.BriefHistoryOfCM-Well.html#in-the-beginning","text":"CM-Well was developed as an initiative of Thomson Reuters's (now Refinitiv) TMS (Text Management Services) division. TMS was once a startup company called ClearForest, which specialized in Natural Language Processing, text mining, data analysis and knowledge representation. Reuters (this preceded the merger with Thomson) acquired ClearForest in 2007, incorporating its highly relevant capabilities into its own products. TMS already had expertise in tagging entities, events and relationships in free-form text, and had implemented various methods for storage and analysis of the tagged data. To begin with, these methods did not conform to any widely-accepted standard. The data was stored in standard relational databases, although conceptually it behaved more like a connected graph.","title":"In the Beginning..."},{"location":"Introduction/Intro.BriefHistoryOfCM-Well.html#the-rise-of-semantic-web","text":"The newly emerging standards of Semantic Web and Linked Data seemed like a natural choice for the data modeling standards TMS was seeking. These standards define a way to represent information that's conceptually similar to how people perceive it, but such that it's as easily accessible as a web page, and as easy to extend as it is to click on a link. Another key principle that Linked Data supports is interoperability - the ability for different data repositories to refer to and interact with each other.","title":"The Rise of Semantic Web"},{"location":"Introduction/Intro.BriefHistoryOfCM-Well.html#high-level-requirements","text":"TMS wanted to create an information repository that would be: A container for TR's central entities and their attributes and relationships. A general, writable platform for data modeling. A Linked Data repository. Easily accessible to other TR applications. Updated in real-time as well as maintaining historical information. Scalable for huge amounts of data. CM-Well was developed to implement all of these requirements.","title":"High-Level Requirements"},{"location":"Introduction/Intro.BriefHistoryOfCM-Well.html#cm-well-architecture","text":"According to Linked Data and Web Oriented Architecture (WOA) best practices, the TMS team determined that the CM-Well service would support a REST API over HTTP, and that its data would be represented as Resource Description Format (RDF) \"triples\". (See CM-Well Data Paradigms for more information.) At the time, existing products for storing triples were not scalable to the degree required by CM-Well. NoSQL-type databases implemented an object-based design, as required by CM-Well, but did not perform well enough in terms of real-time consistency and supporting a high-level query language. The TMS team decided to develop a new platform, relying on off-the-shelf packages where possible. CM-Well utilizes the following 3rd-party infrastructure modules: Cassandra - distributed database management. ElasticSearch - search capabilities. SPARQL query language - sophisticated queries over an RDF structure.","title":"CM-Well Architecture"},{"location":"Introduction/Intro.BriefHistoryOfCM-Well.html#the-cm-well-vision","text":"CM-Well's vision is to be an eco-system of Linked Data objects, whose primary purpose is to describe the real-world entities that interest TR's customers - those that are significant in the business and financial domains. These entities are both inter-linked among themselves, and linkable to any application or platform that supports the RDF standard. In addition to being a repository for TR's central financial information, CM-Well is a \"technology stack\" or general platform, which allows you to model any information domain you wish and create your own repository. Our decision to Open Source CM-Well is a natural extension of this philosophy: we've found CM-Well to be exceptionally useful internally and hope it will be for you.","title":"The CM-Well Vision"},{"location":"Introduction/Intro.CM-WellDataParadigms.html","text":"Data Paradigms Introduction Since CM-Well is a sophisticated data repository, it stands to reason that many data structures and paradigms are involved. This section describes CM-Well's most central data paradigms, which should help you get a good conceptual understanding of the principles that guide CM-Well's design and functionality. CM-Well is part of Thomson Reuters' Big Open Linked Data initiative. For a breakdown of what that means, read on! Big Data Big data is just what it sounds like: very large data sets. These sets are so large or complex that traditional data processing applications have a hard time handling them. Big data sets pose challenges related to many aspects of data processing, including capture, storage, transfer, sharing, curation, search, query, analysis, visualization and privacy. But together with the challenges comes huge potential. The right tools (usually those involving statistical analysis) can mine insights from big data sets that would otherwise be undiscoverable. For example, mining Twitter feeds can uncover trending news topics. Analyzing people's travel patterns might help understand how diseases spread. CM-Well is a repository for the financial information that TR excels at providing: information about people, companies and market data. Although the data grows continually, CM-Well is designed to be seamlessly scalable, so that storage issues are invisible to its users, and access time remains constant. Open Data A piece of data is \"open\" if anyone is free to use, reuse, and redistribute it, without restrictions from copyright, patents or other mechanisms of control. Open data is a principle that is particularly applicable in the Internet age. The idea is that freely sharing data can exponentially boost progress in diverse fields such as art, science, education, economics and so on. Thomson Reuters is a staunch supporter of open data principles, as exemplified by its platforms Open PermID , for open access to company information, and Open Calais for open access to metadata tagging services. Linked Data Linked data is a method of publishing structured data so that it can be interlinked and become more useful through semantic queries. It utilizes standard Web technologies such as HTTP, RDF and URIs, but rather than using them to serve web pages for human readers, it extends them to share information in a way that can be read automatically by computers. Linked data is a data modeling standard, and as such it promotes interoperability, meaning that it enables data from different sources to be automatically connected and queried as extensions of each other. Graph Databases Most of us are used to thinking of databases as tables with rows and columns, like a spreadsheet table. But this is just one possible structure for a database. CM-Well data is represented as a graph database. A graph database is modeled as a directed graph, with nodes representing entities, and arrows between the nodes, representing a relationship between the two entities. Here is an example of a simple graph that might be part of a larger graph database: Some advantages of graph databases vs. relational databases are: Relationships between entities are explicitly and compactly stated. Convenient for data modeling. The same field can have multiple values. Fields do not have to have a strict type. Data Triples When you examine the \"arrows\" or relationships in a graph database, you can see that there are 3 elements defining a relationship: a subject, and object, and the specific relationship between them. The arrow points from the subject to the object. In the graph in the previous section, you can see the following \"triple\": CompanyA (subject) --- is parent company of (relationship) --- CompanyB (object) You can think of a graph database as a collection of connected, overlapping triples of (subject, relationship, object) elements. Note that an entity can be a subject in one triple, and an object in another. This is what enables the graph to be one continuous structure, in which indirect relationships can be inferred from direct ones. RDF and URIs When you retrieve data from CM-Well, it is represented in Resource Description Framework (RDF) format. RDF is a set of World Wide Web Consortium (W3C) specifications, used as a method for modeling web resources information. RDF is designed to represent data triples. An RDF triple contains a subject, object and predicate (which is the same as the \"relationship\" described in the previous section). The subject of an RDF statement is a Uniform Resource Identifier (URI). A URI looks similar to a URL, but rather than pointing to a human-readable web page, it points to a machine-readable data resource. Here is an example of a CM-Well URI: http://cm-well-host.com/permid.org/1-5035948006 Here is an example of an RDF \\ subject, predicate, object> triple: http://example/superheroes/spiderman http://www.perceive.net/schemas/relationship/enemyOf http://example/superheroes/green-goblin RDF is a logical standard, which can be implemented by several different syntactical formats. CM-Well supports the following RDF encoding formats: RDF XML N-Triples Turtle N3 See CM-Well Input and Output Formats to learn more about these formats. CM-Well Infotons CM-Well uses a data structure nicknamed \"infoton\". An infoton is the set of all the triples associated with a single subject entity. The data is still logically structured as a set of separate triples, but the infoton is physically stored together with the set of its predicate-subject relationships, like this: By \u201cflattening\u201d the physical model in this way, CM-Well is able to more easily scale to very large numbers of triples, as it becomes easier to store the data horizontally across many more servers. The results of your queries to CM-Well will generally be one or more whole infotons.","title":"Data Paradigms"},{"location":"Introduction/Intro.CM-WellDataParadigms.html#data-paradigms","text":"","title":"Data Paradigms"},{"location":"Introduction/Intro.CM-WellDataParadigms.html#introduction","text":"Since CM-Well is a sophisticated data repository, it stands to reason that many data structures and paradigms are involved. This section describes CM-Well's most central data paradigms, which should help you get a good conceptual understanding of the principles that guide CM-Well's design and functionality. CM-Well is part of Thomson Reuters' Big Open Linked Data initiative. For a breakdown of what that means, read on!","title":"Introduction"},{"location":"Introduction/Intro.CM-WellDataParadigms.html#big-data","text":"Big data is just what it sounds like: very large data sets. These sets are so large or complex that traditional data processing applications have a hard time handling them. Big data sets pose challenges related to many aspects of data processing, including capture, storage, transfer, sharing, curation, search, query, analysis, visualization and privacy. But together with the challenges comes huge potential. The right tools (usually those involving statistical analysis) can mine insights from big data sets that would otherwise be undiscoverable. For example, mining Twitter feeds can uncover trending news topics. Analyzing people's travel patterns might help understand how diseases spread. CM-Well is a repository for the financial information that TR excels at providing: information about people, companies and market data. Although the data grows continually, CM-Well is designed to be seamlessly scalable, so that storage issues are invisible to its users, and access time remains constant.","title":"Big Data"},{"location":"Introduction/Intro.CM-WellDataParadigms.html#open-data","text":"A piece of data is \"open\" if anyone is free to use, reuse, and redistribute it, without restrictions from copyright, patents or other mechanisms of control. Open data is a principle that is particularly applicable in the Internet age. The idea is that freely sharing data can exponentially boost progress in diverse fields such as art, science, education, economics and so on. Thomson Reuters is a staunch supporter of open data principles, as exemplified by its platforms Open PermID , for open access to company information, and Open Calais for open access to metadata tagging services.","title":"Open Data"},{"location":"Introduction/Intro.CM-WellDataParadigms.html#linked-data","text":"Linked data is a method of publishing structured data so that it can be interlinked and become more useful through semantic queries. It utilizes standard Web technologies such as HTTP, RDF and URIs, but rather than using them to serve web pages for human readers, it extends them to share information in a way that can be read automatically by computers. Linked data is a data modeling standard, and as such it promotes interoperability, meaning that it enables data from different sources to be automatically connected and queried as extensions of each other.","title":"Linked Data"},{"location":"Introduction/Intro.CM-WellDataParadigms.html#graph-databases","text":"Most of us are used to thinking of databases as tables with rows and columns, like a spreadsheet table. But this is just one possible structure for a database. CM-Well data is represented as a graph database. A graph database is modeled as a directed graph, with nodes representing entities, and arrows between the nodes, representing a relationship between the two entities. Here is an example of a simple graph that might be part of a larger graph database: Some advantages of graph databases vs. relational databases are: Relationships between entities are explicitly and compactly stated. Convenient for data modeling. The same field can have multiple values. Fields do not have to have a strict type.","title":"Graph Databases"},{"location":"Introduction/Intro.CM-WellDataParadigms.html#data-triples","text":"When you examine the \"arrows\" or relationships in a graph database, you can see that there are 3 elements defining a relationship: a subject, and object, and the specific relationship between them. The arrow points from the subject to the object. In the graph in the previous section, you can see the following \"triple\": CompanyA (subject) --- is parent company of (relationship) --- CompanyB (object) You can think of a graph database as a collection of connected, overlapping triples of (subject, relationship, object) elements. Note that an entity can be a subject in one triple, and an object in another. This is what enables the graph to be one continuous structure, in which indirect relationships can be inferred from direct ones.","title":"Data Triples"},{"location":"Introduction/Intro.CM-WellDataParadigms.html#rdf-and-uris","text":"When you retrieve data from CM-Well, it is represented in Resource Description Framework (RDF) format. RDF is a set of World Wide Web Consortium (W3C) specifications, used as a method for modeling web resources information. RDF is designed to represent data triples. An RDF triple contains a subject, object and predicate (which is the same as the \"relationship\" described in the previous section). The subject of an RDF statement is a Uniform Resource Identifier (URI). A URI looks similar to a URL, but rather than pointing to a human-readable web page, it points to a machine-readable data resource. Here is an example of a CM-Well URI: http://cm-well-host.com/permid.org/1-5035948006 Here is an example of an RDF \\ subject, predicate, object> triple: http://example/superheroes/spiderman http://www.perceive.net/schemas/relationship/enemyOf http://example/superheroes/green-goblin RDF is a logical standard, which can be implemented by several different syntactical formats. CM-Well supports the following RDF encoding formats: RDF XML N-Triples Turtle N3 See CM-Well Input and Output Formats to learn more about these formats.","title":"RDF and URIs"},{"location":"Introduction/Intro.CM-WellDataParadigms.html#cm-well-infotons","text":"CM-Well uses a data structure nicknamed \"infoton\". An infoton is the set of all the triples associated with a single subject entity. The data is still logically structured as a set of separate triples, but the infoton is physically stored together with the set of its predicate-subject relationships, like this: By \u201cflattening\u201d the physical model in this way, CM-Well is able to more easily scale to very large numbers of triples, as it becomes easier to store the data horizontally across many more servers. The results of your queries to CM-Well will generally be one or more whole infotons.","title":"CM-Well Infotons"},{"location":"Introduction/Intro.CM-WellHigh-LevelArchitecture.html","text":"High-Level Architecture This page provides a high-level description of the CM-Well hardware, software and information architecture. Information Architecture The CM-Well information is modeled as triples in an RDF repository. (See CM-Well Data Paradigms to learn more.) Each triple is composed of a subject, a predicate and an object. For example, companyA - hasParentCompany - companyB . The repository is conceptually a graph, with nodes representing subjects and objects, and edges representing predicates. Some of the graph nodes represent entities, such as organizations or people, while some are simple types such as a name string or date value. To best serve CM-Well's use cases, information is not retrieved at the triple level, but rather at the infoton level. An infoton is an information object representing an entity (such as an organization, instrument, quote or person) and its attributes (the subject entity's predicates and objects). (Infotons are similar to UML objects, or RDBMS Entity-Relationship models.) The CM-Well Grid Each CM-Well system is contained within a single data center, and has a grid architecture. This means that the system is composed of several identical machines (a.k.a. nodes), enabling parallel processing of multiple requests, distributed database management and redundancy in case of failure. Every data item has a replication factor of 3, that is, it is saved in 3 copies over different machines. If one machine fails, other machines take over seamlessly. Once the machine is back online, data is copied to it so that full replication is restored. Note There is no failover among data centers in case one center becomes inaccessible. The production environment at Eagan, MN performs an automatic copy of its data to the production environment at Plano, TX, providing a backup in case of critical failure. Machine-Level Architecture The following diagram and table describe the modules running on each CM-Well node. Module Description Web Service The web service layer that handles read/write requests for users and external agents. FS-Logic An abstraction layer above the storage modules, allowing lower layers to be switched if necessary. HC Health Control - monitors health of CM-Well nodes. Cassandra A 3rd-party storage package, used for table-based search and direct access to infotons. ElasticSearch A 3rd-party search package, used for full-text search capabilities. Compute JVMs Separate processes for long computations e.g. SPARQL queries. Inter-DC Synch Synchronizes data of master production environment with backup environment. Background Processing Processes lengthy requests in the background, according to a work queue. Active Data Agent that updates time-triggered info for certain data items. Calais Agent Ingests new triples derived from Calais tagging of news metadata. Other Agents Agents for ingesting data from additional sources, such as Organization Authority. Note The Calais Agent and other agents are not an integral part of CM-Well. They are given as examples of applications that write data to CM-Well. The CM-Well API CM-Well provides a RESTful API that supports the following functionality: Direct read access to infotons via URI Querying for infotons by conditions on their field values Applying SPARQL queries to infotons Adding, deleting and modifying infotons and triples Subscribing to real-time updates Defining private groupings of objects (\"named sub-graphs\") and providing them as a virtual queue.","title":"High-Level Architecture"},{"location":"Introduction/Intro.CM-WellHigh-LevelArchitecture.html#high-level-architecture","text":"This page provides a high-level description of the CM-Well hardware, software and information architecture.","title":"High-Level Architecture"},{"location":"Introduction/Intro.CM-WellHigh-LevelArchitecture.html#information-architecture","text":"The CM-Well information is modeled as triples in an RDF repository. (See CM-Well Data Paradigms to learn more.) Each triple is composed of a subject, a predicate and an object. For example, companyA - hasParentCompany - companyB . The repository is conceptually a graph, with nodes representing subjects and objects, and edges representing predicates. Some of the graph nodes represent entities, such as organizations or people, while some are simple types such as a name string or date value. To best serve CM-Well's use cases, information is not retrieved at the triple level, but rather at the infoton level. An infoton is an information object representing an entity (such as an organization, instrument, quote or person) and its attributes (the subject entity's predicates and objects). (Infotons are similar to UML objects, or RDBMS Entity-Relationship models.)","title":"Information Architecture"},{"location":"Introduction/Intro.CM-WellHigh-LevelArchitecture.html#the-cm-well-grid","text":"Each CM-Well system is contained within a single data center, and has a grid architecture. This means that the system is composed of several identical machines (a.k.a. nodes), enabling parallel processing of multiple requests, distributed database management and redundancy in case of failure. Every data item has a replication factor of 3, that is, it is saved in 3 copies over different machines. If one machine fails, other machines take over seamlessly. Once the machine is back online, data is copied to it so that full replication is restored. Note There is no failover among data centers in case one center becomes inaccessible. The production environment at Eagan, MN performs an automatic copy of its data to the production environment at Plano, TX, providing a backup in case of critical failure.","title":"The CM-Well Grid"},{"location":"Introduction/Intro.CM-WellHigh-LevelArchitecture.html#machine-level-architecture","text":"The following diagram and table describe the modules running on each CM-Well node. Module Description Web Service The web service layer that handles read/write requests for users and external agents. FS-Logic An abstraction layer above the storage modules, allowing lower layers to be switched if necessary. HC Health Control - monitors health of CM-Well nodes. Cassandra A 3rd-party storage package, used for table-based search and direct access to infotons. ElasticSearch A 3rd-party search package, used for full-text search capabilities. Compute JVMs Separate processes for long computations e.g. SPARQL queries. Inter-DC Synch Synchronizes data of master production environment with backup environment. Background Processing Processes lengthy requests in the background, according to a work queue. Active Data Agent that updates time-triggered info for certain data items. Calais Agent Ingests new triples derived from Calais tagging of news metadata. Other Agents Agents for ingesting data from additional sources, such as Organization Authority. Note The Calais Agent and other agents are not an integral part of CM-Well. They are given as examples of applications that write data to CM-Well.","title":"Machine-Level Architecture"},{"location":"Introduction/Intro.CM-WellHigh-LevelArchitecture.html#the-cm-well-api","text":"CM-Well provides a RESTful API that supports the following functionality: Direct read access to infotons via URI Querying for infotons by conditions on their field values Applying SPARQL queries to infotons Adding, deleting and modifying infotons and triples Subscribing to real-time updates Defining private groupings of objects (\"named sub-graphs\") and providing them as a virtual queue.","title":"The CM-Well API"},{"location":"Introduction/Intro.IntroductionToCM-Well.html","text":"Introduction to CM-Well What is CM-Well? CM-Well is a writable Linked Data repository, which can be used to model data from various datasets. CM-Well (Content Matrix Well) adheres to Open Data principles, meaning that its data is in a standard, machine-readable format. The CM-Well code is Open Source and available at GitHub . CM-Well's data is represented as a graph database, which means that it contains both entities and relationships between pairs of entities. For instance, it contains facts such as \"CompanyA is a subsidiary of CompanyB\", or \"PersonX works at CompanyA\". Conceptually, a graph database is a structure composed of nodes representing entities, and directed arrows representing relationships among them. See the image below for an example. Platform for Data Modeling CM-Well can be used to build your own linked data repository. In addition to API calls for reading CM-Well information, there are calls for creating new entries and connections. For example, you could create a data repository describing countries, their capitals, continents and currencies. For each of these entities, you would create a corresponding entity in CM-Well, with appropriate relationships between them (e.g. \"Paris\" - \"is capital of\" - \"France\"). Why Should I Use CM-Well? CM-Well has many advantages and convenient features, including: Easy-to-use Linked Data sharing as a service. Direct access to entity info via URI. Does not require installation. Does not require downloading large files and subsequent processing and database insertion. Contains up-to-the-minute current info, as well as all historical versions of entities. Supports retrieval, querying and filtering of content at different levels of granularity - from a single entity, to a stream of updates, to the entire repository. Enables navigation among related entities via the links returned within an entity's info. Allows you to create your own data repository. As opposed to standard triple-stores that focus only on reading relatively static data, CM-Well is specifically designed to handle data that is constantly updated. This includes features such as convenient upload, handling historical versions, subscribing to real-time updates, and more. Getting Started with CM-Well Here are some more topics to help you get started with CM-Well: Technical Aspects of CM-Well CM-Well Data Paradigms CM-Well Input and Output Formats Overview of the CM-Well API Basic Queries","title":"Introduction to CM-Well"},{"location":"Introduction/Intro.IntroductionToCM-Well.html#introduction-to-cm-well","text":"","title":"Introduction to CM-Well"},{"location":"Introduction/Intro.IntroductionToCM-Well.html#what-is-cm-well","text":"CM-Well is a writable Linked Data repository, which can be used to model data from various datasets. CM-Well (Content Matrix Well) adheres to Open Data principles, meaning that its data is in a standard, machine-readable format. The CM-Well code is Open Source and available at GitHub . CM-Well's data is represented as a graph database, which means that it contains both entities and relationships between pairs of entities. For instance, it contains facts such as \"CompanyA is a subsidiary of CompanyB\", or \"PersonX works at CompanyA\". Conceptually, a graph database is a structure composed of nodes representing entities, and directed arrows representing relationships among them. See the image below for an example.","title":"What is CM-Well?"},{"location":"Introduction/Intro.IntroductionToCM-Well.html#platform-for-data-modeling","text":"CM-Well can be used to build your own linked data repository. In addition to API calls for reading CM-Well information, there are calls for creating new entries and connections. For example, you could create a data repository describing countries, their capitals, continents and currencies. For each of these entities, you would create a corresponding entity in CM-Well, with appropriate relationships between them (e.g. \"Paris\" - \"is capital of\" - \"France\").","title":"Platform for Data Modeling"},{"location":"Introduction/Intro.IntroductionToCM-Well.html#why-should-i-use-cm-well","text":"CM-Well has many advantages and convenient features, including: Easy-to-use Linked Data sharing as a service. Direct access to entity info via URI. Does not require installation. Does not require downloading large files and subsequent processing and database insertion. Contains up-to-the-minute current info, as well as all historical versions of entities. Supports retrieval, querying and filtering of content at different levels of granularity - from a single entity, to a stream of updates, to the entire repository. Enables navigation among related entities via the links returned within an entity's info. Allows you to create your own data repository. As opposed to standard triple-stores that focus only on reading relatively static data, CM-Well is specifically designed to handle data that is constantly updated. This includes features such as convenient upload, handling historical versions, subscribing to real-time updates, and more.","title":"Why Should I Use CM-Well?"},{"location":"Introduction/Intro.IntroductionToCM-Well.html#getting-started-with-cm-well","text":"Here are some more topics to help you get started with CM-Well: Technical Aspects of CM-Well CM-Well Data Paradigms CM-Well Input and Output Formats Overview of the CM-Well API Basic Queries","title":"Getting Started with CM-Well"},{"location":"Introduction/Intro.OverviewOfTheCM-WellAPI.html","text":"API Overview This page provides a brief, high-level overview of the CM-Well API's functionality. For the detailed API documentation, please see the CM-Well API Reference. Before diving into the API, we recommend reading the following introductory topics: Introduction to CM-Well Technical Aspects of CM-Well CM-Well Data Paradigms CM-Well Input and Output Formats CM-Well is a Linked Data repository that contains information from the TR Knowledge Graph and more. It is a software platform running in TR data centers and accessible to all TR developers. It supports read, write and query operations via a REST API . CM-Well contains RDF triples with these components: subject -- predicate -- object . For example: CompanyA -- hasImmediateParent -- CompanyB. Since users are usually interested in a specific entity (a subject) and all of its accompanying attributes (predicates and objects), CM-Well supports a basic information unit called an infoton which contains exactly that (an entity and all of its accompanying attributes). CM-Well API Features The following table provides a high-level summary of the CM-Well API's functionality, and where to read more about each feature: Feature Reference Get infoton Basic Queries Search by field value Advanced Queries Advanced search using SPARQL Using SPARQL on CM-Well Infotons Traverse inbound/outbound links Traversing Outbound and Inbound Links Stream data Streaming Data from CM-Well Subscribe to real-time updates Subscribing to Real-Time Updates CM-Well Downloader Using the CM-Well Downloader CM-Well Ingester Using the CM-Well Ingester Create a new infoton Updating CM-Well Add/update infoton fields Updating CM-Well Delete infotons and fields Updating CM-Well","title":"API Overview"},{"location":"Introduction/Intro.OverviewOfTheCM-WellAPI.html#api-overview","text":"This page provides a brief, high-level overview of the CM-Well API's functionality. For the detailed API documentation, please see the CM-Well API Reference. Before diving into the API, we recommend reading the following introductory topics: Introduction to CM-Well Technical Aspects of CM-Well CM-Well Data Paradigms CM-Well Input and Output Formats CM-Well is a Linked Data repository that contains information from the TR Knowledge Graph and more. It is a software platform running in TR data centers and accessible to all TR developers. It supports read, write and query operations via a REST API . CM-Well contains RDF triples with these components: subject -- predicate -- object . For example: CompanyA -- hasImmediateParent -- CompanyB. Since users are usually interested in a specific entity (a subject) and all of its accompanying attributes (predicates and objects), CM-Well supports a basic information unit called an infoton which contains exactly that (an entity and all of its accompanying attributes).","title":"API Overview"},{"location":"Introduction/Intro.OverviewOfTheCM-WellAPI.html#cm-well-api-features","text":"The following table provides a high-level summary of the CM-Well API's functionality, and where to read more about each feature: Feature Reference Get infoton Basic Queries Search by field value Advanced Queries Advanced search using SPARQL Using SPARQL on CM-Well Infotons Traverse inbound/outbound links Traversing Outbound and Inbound Links Stream data Streaming Data from CM-Well Subscribe to real-time updates Subscribing to Real-Time Updates CM-Well Downloader Using the CM-Well Downloader CM-Well Ingester Using the CM-Well Ingester Create a new infoton Updating CM-Well Add/update infoton fields Updating CM-Well Delete infotons and fields Updating CM-Well","title":"CM-Well API Features"},{"location":"Introduction/Intro.TechnicalAspectsOfCM-Well.html","text":"Technical Aspects The following sections provide a high-level overview of CM-Well's technical properties. This overview should be a good starting point, if you want to understand what is involved in developing an application that works with CM-Well. REST API and Other Tools CM-Well's basic API is a REST interface. This is an HTTP interface that allows the caller to read and write information in CM-Well. You can call the CM-Well API from standard tools that support REST, such as the cURL utility. You can also perform some operations in a browser, such as reading a single Organization's details. Note CM-Well browser operations are tested in Chrome. Most operations will also work in Firefox, Safari and Edge. In addition to the central API, CM-Well offers several utilities to assist developers, such as: CM-Well Docker - a small instance of the CM-Well server, which you can install on your own local server for experimentation, independent of the public CM-Well environments. CM-Well Downloader - a utility for performing bulk downloads of CM-Well data. This tool is also packaged as Java and Scala libraries, which you can call from your application to perform bulk downloads. CM-Well Ingester - a utility for uploading infotons to CM-Well in bulk. You can run it as a stand-alone executable, or call it as a library from your application. Development Languages You can develop your application in any language and development environment that allow you to make REST calls. If you are coding in Java or Scala, you can use the CM-Well utility libraries for these languages. See CM-Well Git Repository to download and collaborate on CM-Well-related code and libraries. Accessing CM-Well You can perform CM-Well read operations over HTTP, with no special credentials. Data Paradigms Formats The underlying structure of CM-Well is a graph database, which means that the data is represented as nodes and connecting relationships rather than in tabular format. CM-Well conforms to the RDF (Resource Description Framework) Linked Data standard. RDF information can be formatted in several ways, and you can choose the format you prefer. For more information, see: CM-Well Data Paradigms CM-Well Input and Output Formats","title":"Technical Aspects"},{"location":"Introduction/Intro.TechnicalAspectsOfCM-Well.html#technical-aspects","text":"The following sections provide a high-level overview of CM-Well's technical properties. This overview should be a good starting point, if you want to understand what is involved in developing an application that works with CM-Well.","title":"Technical Aspects"},{"location":"Introduction/Intro.TechnicalAspectsOfCM-Well.html#rest-api-and-other-tools","text":"CM-Well's basic API is a REST interface. This is an HTTP interface that allows the caller to read and write information in CM-Well. You can call the CM-Well API from standard tools that support REST, such as the cURL utility. You can also perform some operations in a browser, such as reading a single Organization's details. Note CM-Well browser operations are tested in Chrome. Most operations will also work in Firefox, Safari and Edge. In addition to the central API, CM-Well offers several utilities to assist developers, such as: CM-Well Docker - a small instance of the CM-Well server, which you can install on your own local server for experimentation, independent of the public CM-Well environments. CM-Well Downloader - a utility for performing bulk downloads of CM-Well data. This tool is also packaged as Java and Scala libraries, which you can call from your application to perform bulk downloads. CM-Well Ingester - a utility for uploading infotons to CM-Well in bulk. You can run it as a stand-alone executable, or call it as a library from your application.","title":"REST API and Other Tools"},{"location":"Introduction/Intro.TechnicalAspectsOfCM-Well.html#development-languages","text":"You can develop your application in any language and development environment that allow you to make REST calls. If you are coding in Java or Scala, you can use the CM-Well utility libraries for these languages. See CM-Well Git Repository to download and collaborate on CM-Well-related code and libraries.","title":"Development Languages"},{"location":"Introduction/Intro.TechnicalAspectsOfCM-Well.html#accessing-cm-well","text":"You can perform CM-Well read operations over HTTP, with no special credentials.","title":"Accessing CM-Well"},{"location":"Introduction/Intro.TechnicalAspectsOfCM-Well.html#data-paradigms-formats","text":"The underlying structure of CM-Well is a graph database, which means that the data is represented as nodes and connecting relationships rather than in tabular format. CM-Well conforms to the RDF (Resource Description Framework) Linked Data standard. RDF information can be formatted in several ways, and you can choose the format you prefer. For more information, see: CM-Well Data Paradigms CM-Well Input and Output Formats","title":"Data Paradigms &amp; Formats"},{"location":"Introduction/Intro.TechnicalDecisionsInCM-WellDesign.html","text":"Technical Design Decisions This page describes CM-Well's main technical features and design principles, the implementation options that were considered, and the decisions that were taken. Linked Data WOA CM-Well is first and foremost a Linked Data repository, accessible via web service. Linked Data and Web Oriented Architecture (WOA) are global standards and design principles that model information so that it is extensible (by other data sets), easily machine-readable, and enables semantic queries and inference of implicit relationships among the modeled entities. These are the most central principles that CM-Well implements, from which many other requirements are derived. (See CM-Well Data Paradigms to learn more.) RDF and Triple Stores The standard way of encoding Linked Data is in Resource Description Format (RDF), which is a way of describing subject-predicate-object triples. These triples represent either attributes belonging to entities (e.g. CompanyX - FoundedOnDate - 03/28/1998), or relationships between two entities (e.g. JohnSmith - WorksAt - Intel). Since triples are the most basic unit of an RDF repository, the first requirement that CM-Well had to implement was to maintain a triple-store infrastructure that would be convenient, robust and scalable. Many triple-store products were assessed, including Oracle NoSQL, Apache JENA and BigData (now BlazeGraph). But none had the necessary scalability that was required for Thomson Reuters huge and ever-growing amount of data. It was decided to develop a thin proprietary layer to implement a scalable triple-store over 3rd-party storage packages (see Storage and Search Modules ). Information Object (Infoton) Upon consideration of the type of data that would feed CM-Well (among other things, entities from the Refintiv Knowledge Graph) it quickly became clear that a higher level of abstraction than the triple would be required. Most use cases focused on entities and their accompanying attributes and related entities. Thus the \"information object\" was born, and nicknamed \"infoton\". The infoton represents a single entity (such as an organization or person), and contains all the triples related to that entity. As dictated by Linked Data principles, infotons were designed to be accessible via URI (Universal Resource Identifier). Adding the infoton abstraction positioned CM-Well at the mid-point between key-value databases (the infoton's URI serves as a \"key\" for retrieving it) and document databases (the infoton itself is a kind of \"document\" containing all its related information). Storage and Search Modules CM-Well storage needed to be able to handle the magnitude of Big Data, while still enabling speedy retrieval and scalability. Again, several products were evaluated (including SONAR and Apache HBase) before deciding on the optimal tools. CM-Well uses Apache Cassandra for table-based search (for direct access to infotons) and Elastic Search for full-text search capabilities. There is also a proprietary layer called FS-Logic, which hides implementation details from higher-level modules, allowing the infrastructure underneath to be changed if necessary. Advanced Queries Although the initial versions of CM-Well only supported direct URI access and traversing triples, later versions needed the added sophistication of complex queries. These were implemented using SPARQL - the standard query language for RDF stores. CM-Well uses the Jena SPARQL package. \"Information in Motion\" Many Linked Data repositories are geared to be \"static\", i.e. to represent a data set that hardly changes over time, which mostly serves read requests. CM-Well is a dynamic data store, with capabilities for real-time updates and notifications. Users can create their own repository, modeling any data they choose. Users can also subscribe to get real-time notifications about changes to items of interest. To support these functions, CM-Well has write functions in its API, which allow users to add, delete and update triples and infotons. It also supports PuSH notifications (an extension of RSS feeds that provides real-time notifications over HTTP). Immutable Data and Deep History CM-Well supports an \"immutable data\" paradigm, meaning that even though infotons may be updated over time, any version of an infoton that you retrieve will always exist in the CM-Well repository, possibly as a \"historical\" version. The \"main\" version (the one retrieved by the entity's URI) is always the most current version. This way, you have the option of both obtaining the up-to-the-minute information, while still being able to access historical versions for analytical purposes. Historical versions allow you to examine changes in attribute values over time.","title":"Technical Design Decisions"},{"location":"Introduction/Intro.TechnicalDecisionsInCM-WellDesign.html#technical-design-decisions","text":"This page describes CM-Well's main technical features and design principles, the implementation options that were considered, and the decisions that were taken.","title":"Technical Design Decisions"},{"location":"Introduction/Intro.TechnicalDecisionsInCM-WellDesign.html#linked-data-woa","text":"CM-Well is first and foremost a Linked Data repository, accessible via web service. Linked Data and Web Oriented Architecture (WOA) are global standards and design principles that model information so that it is extensible (by other data sets), easily machine-readable, and enables semantic queries and inference of implicit relationships among the modeled entities. These are the most central principles that CM-Well implements, from which many other requirements are derived. (See CM-Well Data Paradigms to learn more.)","title":"Linked Data &amp; WOA"},{"location":"Introduction/Intro.TechnicalDecisionsInCM-WellDesign.html#rdf-and-triple-stores","text":"The standard way of encoding Linked Data is in Resource Description Format (RDF), which is a way of describing subject-predicate-object triples. These triples represent either attributes belonging to entities (e.g. CompanyX - FoundedOnDate - 03/28/1998), or relationships between two entities (e.g. JohnSmith - WorksAt - Intel). Since triples are the most basic unit of an RDF repository, the first requirement that CM-Well had to implement was to maintain a triple-store infrastructure that would be convenient, robust and scalable. Many triple-store products were assessed, including Oracle NoSQL, Apache JENA and BigData (now BlazeGraph). But none had the necessary scalability that was required for Thomson Reuters huge and ever-growing amount of data. It was decided to develop a thin proprietary layer to implement a scalable triple-store over 3rd-party storage packages (see Storage and Search Modules ).","title":"RDF and Triple Stores"},{"location":"Introduction/Intro.TechnicalDecisionsInCM-WellDesign.html#information-object-infoton","text":"Upon consideration of the type of data that would feed CM-Well (among other things, entities from the Refintiv Knowledge Graph) it quickly became clear that a higher level of abstraction than the triple would be required. Most use cases focused on entities and their accompanying attributes and related entities. Thus the \"information object\" was born, and nicknamed \"infoton\". The infoton represents a single entity (such as an organization or person), and contains all the triples related to that entity. As dictated by Linked Data principles, infotons were designed to be accessible via URI (Universal Resource Identifier). Adding the infoton abstraction positioned CM-Well at the mid-point between key-value databases (the infoton's URI serves as a \"key\" for retrieving it) and document databases (the infoton itself is a kind of \"document\" containing all its related information).","title":"Information Object (Infoton)"},{"location":"Introduction/Intro.TechnicalDecisionsInCM-WellDesign.html#storage-and-search-modules","text":"CM-Well storage needed to be able to handle the magnitude of Big Data, while still enabling speedy retrieval and scalability. Again, several products were evaluated (including SONAR and Apache HBase) before deciding on the optimal tools. CM-Well uses Apache Cassandra for table-based search (for direct access to infotons) and Elastic Search for full-text search capabilities. There is also a proprietary layer called FS-Logic, which hides implementation details from higher-level modules, allowing the infrastructure underneath to be changed if necessary.","title":"Storage and Search Modules"},{"location":"Introduction/Intro.TechnicalDecisionsInCM-WellDesign.html#advanced-queries","text":"Although the initial versions of CM-Well only supported direct URI access and traversing triples, later versions needed the added sophistication of complex queries. These were implemented using SPARQL - the standard query language for RDF stores. CM-Well uses the Jena SPARQL package.","title":"Advanced Queries"},{"location":"Introduction/Intro.TechnicalDecisionsInCM-WellDesign.html#information-in-motion","text":"Many Linked Data repositories are geared to be \"static\", i.e. to represent a data set that hardly changes over time, which mostly serves read requests. CM-Well is a dynamic data store, with capabilities for real-time updates and notifications. Users can create their own repository, modeling any data they choose. Users can also subscribe to get real-time notifications about changes to items of interest. To support these functions, CM-Well has write functions in its API, which allow users to add, delete and update triples and infotons. It also supports PuSH notifications (an extension of RSS feeds that provides real-time notifications over HTTP).","title":"\"Information in Motion\""},{"location":"Introduction/Intro.TechnicalDecisionsInCM-WellDesign.html#immutable-data-and-deep-history","text":"CM-Well supports an \"immutable data\" paradigm, meaning that even though infotons may be updated over time, any version of an infoton that you retrieve will always exist in the CM-Well repository, possibly as a \"historical\" version. The \"main\" version (the one retrieved by the entity's URI) is always the most current version. This way, you have the option of both obtaining the up-to-the-minute information, while still being able to access historical versions for analytical purposes. Historical versions allow you to examine changes in attribute values over time.","title":"Immutable Data and Deep History"},{"location":"ReleaseNotes/ReleaseNotes.Zebra2.February.2019.html","text":"Zebra Update 2 (February 2019) Title Git Issue Description Modification to blank node rendering 1014 When ingesting RDF Data into CM-Well, previously blank nodes (nodes representing a resource for which a URI or literal is not given) were given a random ID and placed in http://blank_node/[id] for persistence. This meant that when rendering their RDF data, they were rendered as subjects of the \"blank_node domain\", and not as actual RDF Blank Nodes. This is now fixed. See more info and rendering examples at Git Issue 1015 . yg chunk size enlarged for the GraphFeed application 1044 The GraphFeed application invokes CM-Well\u2019s Consume API with yg. The maximum amount of infotons per chunk was previously 100, which lead to bad overall performance. The limit is now 3000, improving performance. Changes to API None.","title":"Zebra Update 2 (February 2019)"},{"location":"ReleaseNotes/ReleaseNotes.Zebra2.February.2019.html#zebra-update-2-february-2019","text":"Title Git Issue Description Modification to blank node rendering 1014 When ingesting RDF Data into CM-Well, previously blank nodes (nodes representing a resource for which a URI or literal is not given) were given a random ID and placed in http://blank_node/[id] for persistence. This meant that when rendering their RDF data, they were rendered as subjects of the \"blank_node domain\", and not as actual RDF Blank Nodes. This is now fixed. See more info and rendering examples at Git Issue 1015 . yg chunk size enlarged for the GraphFeed application 1044 The GraphFeed application invokes CM-Well\u2019s Consume API with yg. The maximum amount of infotons per chunk was previously 100, which lead to bad overall performance. The limit is now 3000, improving performance.","title":"Zebra Update 2 (February 2019)"},{"location":"ReleaseNotes/ReleaseNotes.Zebra2.February.2019.html#changes-to-api","text":"None.","title":"Changes to API"},{"location":"ReleaseNotes/2016/ReleaseNotes.Dec.15.2016.html","text":"Dec. 15 2016 Change Summary New Features Feature/Link Description SPARQL Trigger Processor Is Now an Internal CM-Well Agent The SPARQL Trigger Processor, which previously was an external utility of CM-Well, is now part of the CM-Well server and runs automatically. Alternative Syntax for \"Create Consumer\" Alternative syntax for \"create consumer\" API (uses POST instead of GET to enable long query values). Cache in SPARQL Cache added to SPARQL queries. Notable Bug Fixes N/A Changes to API Alternative syntax for \"create consumer\" API (uses POST instead of GET to enable long query values). Feature Descriptions SPARQL Trigger Processor Is Now an Internal CM-Well Agent Description: The SPARQL Trigger Processor, which previously was an external utility of CM-Well, is now part of the CM-Well server and runs automatically. In addition, the agent has been enhanced to adjust its consumption rate dynamically according to local network conditions. The YAML configuration file remains the same, except for the addition of the Boolean active flag, which you can use to enable or disable the specific configuration. Documentation: Using the SPARQL Trigger Processor Alternative Syntax for Create Consumer Description: Previously, the CM-Well API only supported a GET command for creating a consumer object (for bulk streaming of infotons). Now there is a new alternative syntax for creating a consumer, which uses POST instead of GET. The purpose of the new syntax is to avoid the length limitation that some clients impose on GET commands, in case the user needs to define a very long qp value. In the new syntax, the query parameters are passed as data rather than as part of the URL. Example: curl -vX POST http://cm-well/permid.org?op=create-consumer -H Content-Type:application/x-www-form-urlencoded --data-binary index-time=123456789 qp=\\*type.rdf::http://permid.org/ontology/organization/Organization,\\*type.rdf::http://ont.thomsonreuters.com/mdaas/Organization Documentation: Create Consumer Cache in SPARQL Description: A cache has been added to the SPARQL query feature. Queries that recur within a short period of time return results from the cache instead of causing the query to be rerun. This is transparent to the user and improves performance of SPARQL queries. Documentation: N/A.","title":"Dec. 15 2016"},{"location":"ReleaseNotes/2016/ReleaseNotes.Dec.15.2016.html#dec-15-2016","text":"","title":"Dec. 15 2016"},{"location":"ReleaseNotes/2016/ReleaseNotes.Dec.15.2016.html#change-summary","text":"","title":"Change Summary"},{"location":"ReleaseNotes/2016/ReleaseNotes.Dec.15.2016.html#new-features","text":"Feature/Link Description SPARQL Trigger Processor Is Now an Internal CM-Well Agent The SPARQL Trigger Processor, which previously was an external utility of CM-Well, is now part of the CM-Well server and runs automatically. Alternative Syntax for \"Create Consumer\" Alternative syntax for \"create consumer\" API (uses POST instead of GET to enable long query values). Cache in SPARQL Cache added to SPARQL queries.","title":"New Features"},{"location":"ReleaseNotes/2016/ReleaseNotes.Dec.15.2016.html#notable-bug-fixes","text":"N/A","title":"Notable Bug Fixes"},{"location":"ReleaseNotes/2016/ReleaseNotes.Dec.15.2016.html#changes-to-api","text":"Alternative syntax for \"create consumer\" API (uses POST instead of GET to enable long query values).","title":"Changes to API"},{"location":"ReleaseNotes/2016/ReleaseNotes.Dec.15.2016.html#feature-descriptions","text":"","title":"Feature Descriptions"},{"location":"ReleaseNotes/2016/ReleaseNotes.Dec.15.2016.html#sparql-trigger-processor-is-now-an-internal-cm-well-agent","text":"Description: The SPARQL Trigger Processor, which previously was an external utility of CM-Well, is now part of the CM-Well server and runs automatically. In addition, the agent has been enhanced to adjust its consumption rate dynamically according to local network conditions. The YAML configuration file remains the same, except for the addition of the Boolean active flag, which you can use to enable or disable the specific configuration. Documentation: Using the SPARQL Trigger Processor","title":"SPARQL Trigger Processor Is Now an Internal CM-Well Agent"},{"location":"ReleaseNotes/2016/ReleaseNotes.Dec.15.2016.html#alternative-syntax-for-create-consumer","text":"Description: Previously, the CM-Well API only supported a GET command for creating a consumer object (for bulk streaming of infotons). Now there is a new alternative syntax for creating a consumer, which uses POST instead of GET. The purpose of the new syntax is to avoid the length limitation that some clients impose on GET commands, in case the user needs to define a very long qp value. In the new syntax, the query parameters are passed as data rather than as part of the URL. Example: curl -vX POST http://cm-well/permid.org?op=create-consumer -H Content-Type:application/x-www-form-urlencoded --data-binary index-time=123456789 qp=\\*type.rdf::http://permid.org/ontology/organization/Organization,\\*type.rdf::http://ont.thomsonreuters.com/mdaas/Organization Documentation: Create Consumer","title":"Alternative Syntax for Create Consumer"},{"location":"ReleaseNotes/2016/ReleaseNotes.Dec.15.2016.html#cache-in-sparql","text":"Description: A cache has been added to the SPARQL query feature. Queries that recur within a short period of time return results from the cache instead of causing the query to be rerun. This is transparent to the user and improves performance of SPARQL queries. Documentation: N/A.","title":"Cache in SPARQL"},{"location":"ReleaseNotes/2016/ReleaseNotes.Dec.7.2016.html","text":"Dec. 7 2016 Change Summary New Features Feature/Link Description UI for Submitting a SPARQL Query on the Whole Graph CM-Well UI includes a page for submitting queries to the _sparql endpoint (to be applied to the whole CM-Well graph). Enhanced SPARQL Editor Features in CM-Well UI The two SPARQL edit boxes are now enhanced with syntax highlighting, auto-completion, line numbering and so on. Configuring Infoton Link Display by Type POC of feature that allows you to configure the display format of infoton links by RDF type. markReplace and markDelete Take Quad Values markReplace and markDelete now take quad values that allow you to delete only field values from specified named graph. Sudo User instead of Root for CM-Well Machine Preparation For Ops personnel. Machine preparation now requires entering root password via sudo, rather than logging in as root. Notable Bug Fixes More bugs were fixed in the \"SPARQL on whole graph\" feature. Fixes were made to bugs in the CM-Well Console, which were encountered when upgrading to Oracle Linux 7.1. Changes to API markReplace and markDelete now take quad values that allow you to delete only field values from specified named graph Feature Descriptions UI for Submitting a SPARQL Query on the Whole Graph Description: This feature was added in a previous release, but was undocumented until now. In the CM-Well UI, in the SPARQL Query page, you can now click the SPARQL on whole graph link . This displays a page that allows you to submit a query to the _sparql endpoint, which runs the query on the entire CM-Well graph rather than on a specific set of paths. Documentation: Apply SPARQL to the Entire Graph The CM-Well Web Interface Enhanced SPARQL Editor Features in CM-Well UI Description: The two SPARQL edit boxes in the CM-Well UI (SPARQL on paths and SPARQL on entire graph) are now enhanced with usability features such as syntax highlighting, auto-completion, line numbering and so on. Documentation: N/A. Configuring Infoton Link Display by Type - POC Description: The new release contains a proof-of-concept for a feature that will allow authorized users to configure the display of infoton links according to RDF type, instead of displaying the infoton link only as a path with a cryptic UUID. For example, for a Person infoton, you might want to display the person's first and last names in the link. For an organization, you might want to display the organization's name, CEO and country of origin. To configure the infoton link display for a specific type, you must upload a special configuration infoton to the /meta/dn path (dn = Display Name) in CM-Well. The infoton contains the RDF type for which you want to configure display, and additional fields that define the field values that you want to appear in the link. Here is an example of a configuration infoton for the Person type: And this is what the configured Person links look like: Documentation: The CM-Well Web Interface . markReplace and markDelete Take Quad Values Description: The markReplace and markDelete operators in the CM-Well API now take quad values that allow you to delete only field values from specified sub-graphs. If you specify a quad format (e.g. format=nquads) but provide triples data, CM-Well infers * as the missing quad value, and therefore will delete all specified fields that have any quad value. This change was requested by the Legal Analytics team. Documentation: API: Delete Fields API: Delete Specific Field Values Sudo User instead of Root for CM-Well Machine Preparation Description: This feature is of interest only to Operations personnel. Previously, the preparation stage for a CM-Well machine required you to login with the root user, thus allowing access to all root privileges. A change was made to CM-Well Console such that you can perform this stage using sudo and entering the root password, thus assuming root privileges only for the preparation operation. Documentation: N/A.","title":"Dec. 7 2016"},{"location":"ReleaseNotes/2016/ReleaseNotes.Dec.7.2016.html#dec-7-2016","text":"","title":"Dec. 7 2016"},{"location":"ReleaseNotes/2016/ReleaseNotes.Dec.7.2016.html#change-summary","text":"","title":"Change Summary"},{"location":"ReleaseNotes/2016/ReleaseNotes.Dec.7.2016.html#new-features","text":"Feature/Link Description UI for Submitting a SPARQL Query on the Whole Graph CM-Well UI includes a page for submitting queries to the _sparql endpoint (to be applied to the whole CM-Well graph). Enhanced SPARQL Editor Features in CM-Well UI The two SPARQL edit boxes are now enhanced with syntax highlighting, auto-completion, line numbering and so on. Configuring Infoton Link Display by Type POC of feature that allows you to configure the display format of infoton links by RDF type. markReplace and markDelete Take Quad Values markReplace and markDelete now take quad values that allow you to delete only field values from specified named graph. Sudo User instead of Root for CM-Well Machine Preparation For Ops personnel. Machine preparation now requires entering root password via sudo, rather than logging in as root.","title":"New Features"},{"location":"ReleaseNotes/2016/ReleaseNotes.Dec.7.2016.html#notable-bug-fixes","text":"More bugs were fixed in the \"SPARQL on whole graph\" feature. Fixes were made to bugs in the CM-Well Console, which were encountered when upgrading to Oracle Linux 7.1.","title":"Notable Bug Fixes"},{"location":"ReleaseNotes/2016/ReleaseNotes.Dec.7.2016.html#changes-to-api","text":"markReplace and markDelete now take quad values that allow you to delete only field values from specified named graph","title":"Changes to API"},{"location":"ReleaseNotes/2016/ReleaseNotes.Dec.7.2016.html#feature-descriptions","text":"","title":"Feature Descriptions"},{"location":"ReleaseNotes/2016/ReleaseNotes.Dec.7.2016.html#ui-for-submitting-a-sparql-query-on-the-whole-graph","text":"Description: This feature was added in a previous release, but was undocumented until now. In the CM-Well UI, in the SPARQL Query page, you can now click the SPARQL on whole graph link . This displays a page that allows you to submit a query to the _sparql endpoint, which runs the query on the entire CM-Well graph rather than on a specific set of paths. Documentation: Apply SPARQL to the Entire Graph The CM-Well Web Interface","title":"UI for Submitting a SPARQL Query on the Whole Graph"},{"location":"ReleaseNotes/2016/ReleaseNotes.Dec.7.2016.html#enhanced-sparql-editor-features-in-cm-well-ui","text":"Description: The two SPARQL edit boxes in the CM-Well UI (SPARQL on paths and SPARQL on entire graph) are now enhanced with usability features such as syntax highlighting, auto-completion, line numbering and so on. Documentation: N/A.","title":"Enhanced SPARQL Editor Features in CM-Well UI"},{"location":"ReleaseNotes/2016/ReleaseNotes.Dec.7.2016.html#configuring-infoton-link-display-by-type-poc","text":"Description: The new release contains a proof-of-concept for a feature that will allow authorized users to configure the display of infoton links according to RDF type, instead of displaying the infoton link only as a path with a cryptic UUID. For example, for a Person infoton, you might want to display the person's first and last names in the link. For an organization, you might want to display the organization's name, CEO and country of origin. To configure the infoton link display for a specific type, you must upload a special configuration infoton to the /meta/dn path (dn = Display Name) in CM-Well. The infoton contains the RDF type for which you want to configure display, and additional fields that define the field values that you want to appear in the link. Here is an example of a configuration infoton for the Person type: And this is what the configured Person links look like: Documentation: The CM-Well Web Interface .","title":"Configuring Infoton Link Display by Type - POC"},{"location":"ReleaseNotes/2016/ReleaseNotes.Dec.7.2016.html#markreplace-and-markdelete-take-quad-values","text":"Description: The markReplace and markDelete operators in the CM-Well API now take quad values that allow you to delete only field values from specified sub-graphs. If you specify a quad format (e.g. format=nquads) but provide triples data, CM-Well infers * as the missing quad value, and therefore will delete all specified fields that have any quad value. This change was requested by the Legal Analytics team. Documentation: API: Delete Fields API: Delete Specific Field Values","title":"markReplace and markDelete Take Quad Values"},{"location":"ReleaseNotes/2016/ReleaseNotes.Dec.7.2016.html#sudo-user-instead-of-root-for-cm-well-machine-preparation","text":"Description: This feature is of interest only to Operations personnel. Previously, the preparation stage for a CM-Well machine required you to login with the root user, thus allowing access to all root privileges. A change was made to CM-Well Console such that you can perform this stage using sudo and entering the root password, thus assuming root privileges only for the preparation operation. Documentation: N/A.","title":"Sudo User instead of Root for CM-Well Machine Preparation"},{"location":"ReleaseNotes/2016/ReleaseNotes.Nov.10.2016.html","text":"Nov. 10 2016 Change Summary New Features Feature/Link Description slow-bulk Flag for Handling Slow Network Connections More robust handling of streaming over slow network connections. CM-Well Downloader Switches Automatically among Consume Modes Switch among consume, bulk-consume and slow-bulk, according to network conditions. Status of New JVM Processes Reported in Health Dashboard Status of new queue-related JVMs now reported in Health Dashboard. Enhanced SPARQL Trigger Processor The SPARQL Trigger Processor tool for creating materialized views now takes a user defined configuration file. Cassandra version upgrade The Cassandra database component in CM-Well was upgraded to a new minor version. cmwell-import Directive in SPARQL Stored Procedures SPARQL \"stored procedures\" now support the cmwell-import directive, for importing other stored procedures commands, while supporting nested imports. Notable Bug Fixes Various bugs were fixed in the \"SPARQL on whole graph\" feature. (The bugs were related to variable binding, non-string type mangling in SPARQL queries, and more.) The bugs used to cause duplicated query results (mentioned in last version's Known Issues), no results when the query included a start-date, etc. Additional bug fixes for this feature are expected for the next version. Rebooting a CM-Well node failed to restart some of the new JVM processes. This could result in failure to ingest data to CM-Well. Relevant to Ops personnel: Fixed an issue in self-healing of CM-Well nodes. Rolling patch reboots resulted in loss of connection with Elastic Search components, causing nodes to retain an error status. If a user used the qstream flavor for a streaming operation, this could case duplicate results to be returned. Changes to API The new parameter slow-bulk was added to the _bulk-consume API, to handle bulk streaming for slower network connections. A new cmwell-import directive is now supported for SPARQL stored procedures. Feature Descriptions slow-bulk Flag for Handling Slow Network Connections Description: The _bulk-consume API, when run over certain slow network connections (usually WAN connections) would result in timeouts and loss of connection, as network speed became a bottleneck in the process. To address this issue, the slow-bulk optional flag was added to the _bulk-consume API. When the slow-bulk flag is used, large bulk chunks are still streamed, but at a slower rate that is compatible with slower network connections. Documentation: Consume Next Bulk . CM-Well Downloader Switches Automatically among Consume Modes Description: The CM-Well Downloader standalone tool now switches automatically among the consume, bulk-consume and slow-bulk modes, depending on network conditions. This adjusts chunk size and/or streaming rate so that timeouts and loss of connection can be avoided, while still streaming at the highest rate possible. Documentation: N/A. Status of New JVM Processes Reported in Health Dashboard Description: The status of new JVM processes that handle queues is now reported in the CM-Well Health Dashboard. This allows Ops personnel to see the complete picture of JVM process statuses. Documentation: N/A. Enhanced SPARQL Trigger Processor Description: The SPARQL Trigger Processor tool for creating materialized views of CM-Well data has been improved. It now takes a user-defined YAML configuration file. The configuration file allows you to define \"sensors\" that detect changes in specified CM-Well paths, and create materialized views using the SPARQL CONSTRUCT commands that you define. Documentation: Using the SPARQL Trigger Processor . cmwell-import Directive in SPARQL Stored Procedures Description: SPARQL \"stored procedures\" (SPARQL CONSTRUCT commands that are uploaded to CM-Well as file infotons) now support an import directive that allows you to define \"nested\" imports, i.e. constructs that import other constructs. To use the new directive, add #cmwell-import on a separate line at the beginning of the SPARQL construct, followed by one space character and a list of comma-separated absolute CM-Well paths of other CONSTRUCT queries. Example: #cmwell-import /queries2/a1,/queries2/a2 Documentation: Using SPARQL on CM-Well Infotons Using the IMPORT Directive to Apply Uploaded CONSTRUCTs","title":"Nov. 10 2016"},{"location":"ReleaseNotes/2016/ReleaseNotes.Nov.10.2016.html#nov-10-2016","text":"","title":"Nov. 10 2016"},{"location":"ReleaseNotes/2016/ReleaseNotes.Nov.10.2016.html#change-summary","text":"","title":"Change Summary"},{"location":"ReleaseNotes/2016/ReleaseNotes.Nov.10.2016.html#new-features","text":"Feature/Link Description slow-bulk Flag for Handling Slow Network Connections More robust handling of streaming over slow network connections. CM-Well Downloader Switches Automatically among Consume Modes Switch among consume, bulk-consume and slow-bulk, according to network conditions. Status of New JVM Processes Reported in Health Dashboard Status of new queue-related JVMs now reported in Health Dashboard. Enhanced SPARQL Trigger Processor The SPARQL Trigger Processor tool for creating materialized views now takes a user defined configuration file. Cassandra version upgrade The Cassandra database component in CM-Well was upgraded to a new minor version. cmwell-import Directive in SPARQL Stored Procedures SPARQL \"stored procedures\" now support the cmwell-import directive, for importing other stored procedures commands, while supporting nested imports.","title":"New Features"},{"location":"ReleaseNotes/2016/ReleaseNotes.Nov.10.2016.html#notable-bug-fixes","text":"Various bugs were fixed in the \"SPARQL on whole graph\" feature. (The bugs were related to variable binding, non-string type mangling in SPARQL queries, and more.) The bugs used to cause duplicated query results (mentioned in last version's Known Issues), no results when the query included a start-date, etc. Additional bug fixes for this feature are expected for the next version. Rebooting a CM-Well node failed to restart some of the new JVM processes. This could result in failure to ingest data to CM-Well. Relevant to Ops personnel: Fixed an issue in self-healing of CM-Well nodes. Rolling patch reboots resulted in loss of connection with Elastic Search components, causing nodes to retain an error status. If a user used the qstream flavor for a streaming operation, this could case duplicate results to be returned.","title":"Notable Bug Fixes"},{"location":"ReleaseNotes/2016/ReleaseNotes.Nov.10.2016.html#changes-to-api","text":"The new parameter slow-bulk was added to the _bulk-consume API, to handle bulk streaming for slower network connections. A new cmwell-import directive is now supported for SPARQL stored procedures.","title":"Changes to API"},{"location":"ReleaseNotes/2016/ReleaseNotes.Nov.10.2016.html#feature-descriptions","text":"","title":"Feature Descriptions"},{"location":"ReleaseNotes/2016/ReleaseNotes.Nov.10.2016.html#slow-bulk-flag-for-handling-slow-network-connections","text":"Description: The _bulk-consume API, when run over certain slow network connections (usually WAN connections) would result in timeouts and loss of connection, as network speed became a bottleneck in the process. To address this issue, the slow-bulk optional flag was added to the _bulk-consume API. When the slow-bulk flag is used, large bulk chunks are still streamed, but at a slower rate that is compatible with slower network connections. Documentation: Consume Next Bulk .","title":"slow-bulk Flag for Handling Slow Network Connections"},{"location":"ReleaseNotes/2016/ReleaseNotes.Nov.10.2016.html#cm-well-downloader-switches-automatically-among-consume-modes","text":"Description: The CM-Well Downloader standalone tool now switches automatically among the consume, bulk-consume and slow-bulk modes, depending on network conditions. This adjusts chunk size and/or streaming rate so that timeouts and loss of connection can be avoided, while still streaming at the highest rate possible. Documentation: N/A.","title":"CM-Well Downloader Switches Automatically among Consume Modes"},{"location":"ReleaseNotes/2016/ReleaseNotes.Nov.10.2016.html#status-of-new-jvm-processes-reported-in-health-dashboard","text":"Description: The status of new JVM processes that handle queues is now reported in the CM-Well Health Dashboard. This allows Ops personnel to see the complete picture of JVM process statuses. Documentation: N/A.","title":"Status of New JVM Processes Reported in Health Dashboard"},{"location":"ReleaseNotes/2016/ReleaseNotes.Nov.10.2016.html#enhanced-sparql-trigger-processor","text":"Description: The SPARQL Trigger Processor tool for creating materialized views of CM-Well data has been improved. It now takes a user-defined YAML configuration file. The configuration file allows you to define \"sensors\" that detect changes in specified CM-Well paths, and create materialized views using the SPARQL CONSTRUCT commands that you define. Documentation: Using the SPARQL Trigger Processor .","title":"Enhanced SPARQL Trigger Processor"},{"location":"ReleaseNotes/2016/ReleaseNotes.Nov.10.2016.html#cmwell-import-directive-in-sparql-stored-procedures","text":"Description: SPARQL \"stored procedures\" (SPARQL CONSTRUCT commands that are uploaded to CM-Well as file infotons) now support an import directive that allows you to define \"nested\" imports, i.e. constructs that import other constructs. To use the new directive, add #cmwell-import on a separate line at the beginning of the SPARQL construct, followed by one space character and a list of comma-separated absolute CM-Well paths of other CONSTRUCT queries. Example: #cmwell-import /queries2/a1,/queries2/a2 Documentation: Using SPARQL on CM-Well Infotons Using the IMPORT Directive to Apply Uploaded CONSTRUCTs","title":"cmwell-import Directive in SPARQL Stored Procedures"},{"location":"ReleaseNotes/2016/ReleaseNotes.Oct.6.2016.html","text":"Oct. 6th 2016 Change Summary HIGHLIGHTED FEATURES !!! Feature/Link Description CM-Well platform documentation published on CM-Well You can now access CM-Well documentation directly through the CM-Well web UI, by clicking on the HELP link in the top-right corner. Here you can find a Developer Guide, API Reference, introductory topics, tutorials and more. More Features Feature/Link Description Markdown displays in pretty mode by default Markdown content is displayed with HTML-like formatting rather than as plain text. Better handling of lengthy bulk-consume prep stage Enhancement to bulk-consume API when its warmup stage takes too long. Improved handling of large file infoton uploads Faster upload and more efficient storage model. Notable Bug Fixes Fixed: The bulk-consume token that encodes the read location in the queue would sometimes gets assigned a future point-in-time, when the consumer reached the present time. Changes to API None. Feature Descriptions Documentation Published on CM-Well Description: Current CM-Well documentation is now published on CM-Well itself with every version. CM-Well documentation topics include: Introductory Topics - background about what CM-Well is and how it was developed. Use Cases - live use cases of TR products that incorporate CM-Well. Developer Guide - detailed descriptions of CM-Well workflows. API Reference - a comprehensive reference for CM-Well API functions. Tutorials - hands-on exercises for getting started with CM-Well, including example calls and the responses you can expect to receive. To access the CM-Well documentation root table-of-contents, click the HELP link at the top-right of the CM-Well web page. Documentation: N/A. Markdown Displays in Pretty Mode by Default Description: Markdown content is now displayed with the addition of the \"pretty\" flag by default. This causes the display to have HTML-like formatting rather than plain text formatting. This behavior was added in order to create a friendlier user experience when reading CM-Well documentation. Documentation: N/A. Better Handling of Lengthy bulk-consume Preparation Stage Description: While the overall bulk-consume API provides very fast data streaming, bulk-consume has a preparation (\"warm-up\") stage that can be long. This could previously result in a long response time for returning the first chunk. Bulk-consume behavior was changed such that if the preparation stage takes more than 8 seconds, the API returns a shorter chunk (as for a call to the consume API) for that request, causing it to return faster. Documentation: Consume Next Bulk Improved Handling of Large File Infoton Uploads Description: Some customers need to upload large files to CM-Well, for instance when packaging user-defined functions in large jar files, to be called within CM-Well SPARQL queries. Previously, CM-Well could fail to upload large files, and its storage of such files was less efficient. Both these problems have been solved in this version. Documentation: N/A.","title":"Oct. 6th 2016"},{"location":"ReleaseNotes/2016/ReleaseNotes.Oct.6.2016.html#oct-6th-2016","text":"","title":"Oct. 6th 2016"},{"location":"ReleaseNotes/2016/ReleaseNotes.Oct.6.2016.html#change-summary","text":"","title":"Change Summary"},{"location":"ReleaseNotes/2016/ReleaseNotes.Oct.6.2016.html#highlighted-features","text":"Feature/Link Description CM-Well platform documentation published on CM-Well You can now access CM-Well documentation directly through the CM-Well web UI, by clicking on the HELP link in the top-right corner. Here you can find a Developer Guide, API Reference, introductory topics, tutorials and more.","title":"HIGHLIGHTED FEATURES !!!"},{"location":"ReleaseNotes/2016/ReleaseNotes.Oct.6.2016.html#more-features","text":"Feature/Link Description Markdown displays in pretty mode by default Markdown content is displayed with HTML-like formatting rather than as plain text. Better handling of lengthy bulk-consume prep stage Enhancement to bulk-consume API when its warmup stage takes too long. Improved handling of large file infoton uploads Faster upload and more efficient storage model.","title":"More Features"},{"location":"ReleaseNotes/2016/ReleaseNotes.Oct.6.2016.html#notable-bug-fixes","text":"Fixed: The bulk-consume token that encodes the read location in the queue would sometimes gets assigned a future point-in-time, when the consumer reached the present time.","title":"Notable Bug Fixes"},{"location":"ReleaseNotes/2016/ReleaseNotes.Oct.6.2016.html#changes-to-api","text":"None.","title":"Changes to API"},{"location":"ReleaseNotes/2016/ReleaseNotes.Oct.6.2016.html#feature-descriptions","text":"","title":"Feature Descriptions"},{"location":"ReleaseNotes/2016/ReleaseNotes.Oct.6.2016.html#documentation-published-on-cm-well","text":"Description: Current CM-Well documentation is now published on CM-Well itself with every version. CM-Well documentation topics include: Introductory Topics - background about what CM-Well is and how it was developed. Use Cases - live use cases of TR products that incorporate CM-Well. Developer Guide - detailed descriptions of CM-Well workflows. API Reference - a comprehensive reference for CM-Well API functions. Tutorials - hands-on exercises for getting started with CM-Well, including example calls and the responses you can expect to receive. To access the CM-Well documentation root table-of-contents, click the HELP link at the top-right of the CM-Well web page. Documentation: N/A.","title":"Documentation Published on CM-Well"},{"location":"ReleaseNotes/2016/ReleaseNotes.Oct.6.2016.html#markdown-displays-in-pretty-mode-by-default","text":"Description: Markdown content is now displayed with the addition of the \"pretty\" flag by default. This causes the display to have HTML-like formatting rather than plain text formatting. This behavior was added in order to create a friendlier user experience when reading CM-Well documentation. Documentation: N/A.","title":"Markdown Displays in Pretty Mode by Default"},{"location":"ReleaseNotes/2016/ReleaseNotes.Oct.6.2016.html#better-handling-of-lengthy-bulk-consume-preparation-stage","text":"Description: While the overall bulk-consume API provides very fast data streaming, bulk-consume has a preparation (\"warm-up\") stage that can be long. This could previously result in a long response time for returning the first chunk. Bulk-consume behavior was changed such that if the preparation stage takes more than 8 seconds, the API returns a shorter chunk (as for a call to the consume API) for that request, causing it to return faster. Documentation: Consume Next Bulk","title":"Better Handling of Lengthy bulk-consume Preparation Stage"},{"location":"ReleaseNotes/2016/ReleaseNotes.Oct.6.2016.html#improved-handling-of-large-file-infoton-uploads","text":"Description: Some customers need to upload large files to CM-Well, for instance when packaging user-defined functions in large jar files, to be called within CM-Well SPARQL queries. Previously, CM-Well could fail to upload large files, and its storage of such files was less efficient. Both these problems have been solved in this version. Documentation: N/A.","title":"Improved Handling of Large File Infoton Uploads"},{"location":"ReleaseNotes/2016/ReleaseNotes.Sept.11.2016.html","text":"Sept. 11th 2016 Change Summary Features The following features have been added to CM-Well: With-deleted query flag - The optional with-deleted flag allows you to retrieve the latest versions of the matched infotons, together with deleted infotons that match the query. Traffic shaping - The CM-Well logic for managing traffic was modified to take into account the processing time that each user consumes, rather than just the rate of requests that the user sends. Automated Materialized View - An external CM-Well utility processes all infotons defined in a configuration file, and creates \"flattened\" versions of them for more efficient search. Consume API - An API for consuming infotons as a time-ordered \"virtual queue\". Bulk-consume API - An additional consume API, optimized for high-capacity streaming. SPARQL on Entire Graph - a new endpoint that enables performing a SPARQL query on the entire CM-Well graph. Calling Custom Java/Scala Functions from SPARQL Queries - Allows uploading Scala files or Java/Scala jars and calling their functions from within a SPARQL query. SPARQL \"Stored Procedures\" - Allows uploading SPARQL CONSTRUCT commands as files and calling them as \"stored procedures\" from within a SPARQL query. Navigation by RDF Type - A new feature of the CM-Well web UI, which allows you to navigate infotons by their RDF type value. stats API - Allows you to perform statistical queries on CM-Well data, to obtain metrics such as count, minimum, maximum, average and so on, on infoton field values. Sort by Matching Score - Allows sorting query results by the system matching score, which indicates the relative frequency of the search terms. Improvements to Data Synchronization - Improvements to data sync between the Eagan and Plano production environments. Storage Layer Enhancements - Improvements to data consistency checks and behavior under load. Minimize Repair Time of Web Service - Reduced auto-repair time for web service from 13 minutes to 30 seconds. Enhancements to Downloader and Ingester - Bug fixes and stability improvements. New Storage Format for Data - Enables upgrade of underlying Cassandra and Elastic Search components. Upgrade Time Reduced - CM-Well upgrade time reduced from 30 minutes to 5 minutes. Changes to API The following features were added to the CM-Well API: The optional with-deleted flag, which can be used with op=search . consume API. bulk-consume API. _sparql endpoint, allowing SPARQL queries on the entire graph. Call Java/Scala functions from SPARQL queries. Call SPARQL CONSTRUCT \"stored procedures\" from SPARQL queries. Obtain data statistics (produced by Elastic Search), via the op=stats flag. (The previous flag name op=aggregate is still supported.) Sort results by matching score ( sort-by=system.score ). Attention Please note the following items regarding changes in CM-Well's behavior: Users who send unusually heavy queries may receive more 503 - Server unavailable errors, due to the new traffic shaping feature. Any streaming/consume tokens created before the upgrade must be re-created. Known Issues The bulk-consume token that encodes the read location in the queue sometimes gets assigned a future point-in-time, when the consumer reaches real-time. Consume tokens created in previous versions are no longer valid. New tokens must be created. SPARQL on the whole graph still has bugs. Among others, duplicate results sometimes appear in SELECT responses; to work around, use SELECT DISTINCT. New Features With-deleted Query Flag Description: By default, queries to CM-Well return only the most recent version of each matching infoton (although all versions are retained in the repository). If you add the with-history flag, the query returns all \"historical\" versions as well as the most recent versions. However, deleted infotons are returned neither for the default query nor for a with-history query. The with-deleted flag was introduced to allow you to indicate that you wish to retrieve deleted infotons that match the query, as well as \"live\" infotons. Notes: The feature will become fully operational when the rewriting of CM-Well data in the new format is complete (see New Storage Format for Data ). Documentation: Using the with-deleted Flag Traffic Shaping Description: Previously, CM-Well managed allocation of processing resources to users based on the number of requests the users sent per second. For certain heavy queries, the request rate is not a good indicator of the share of resources a user is consuming. A better indicator is the amount of time CM-Well spends actually processing the users' requests. Therefore, CM-Well now tracks a processing-time metric per user, looking at a window of the past 20 seconds. CM-Well manages statuses per user according to this metric. Users that send unusually heavy requests over time are penalized with an extra wait period before their query results are returned (thus freeing up some resources for other users). In extreme situations, a user may be cut off entirely and receive no responses from CM-Well. Notes: Users who send unusually heavy queries may receive more 503 - Server unavailable errors, due to traffic shaping. Documentation: N/A. Automated Materialized View Description: Certain complex queries require a great deal of graph traversal, making them inefficient and time-consuming. This problem was identified as being especially acute for certain matching scenarios required by the LBD client (e.g. matching people to the companies they work for), which were implemented using SPARQL constructs. The matching logic can be greatly simplified by \"flattening\" out multiple indirect relationships. A single \"artificial\" infoton can be created, which contains all required relationships directly as fields, rather than having to traverse several outbound links to retrieve the same information. An external CM-Well utility has been developed, which processes infotons defined in a configuration file, and creates \"flattened\" versions (materialized views) of them for more efficient search. This utility will eventually be incorporated into the CM-Well engine, transparently to users, but greatly improving complex query times. Notes: This feature is also known internally as \"SPARQL Trigger Processor\". Documentation: N/A. consume API Description: The consume API allows you to iteratively read \"chunks\" of infotons streamed from CM-Well. The data stream acts a \"virtual queue\", where the infotons are sorted by time of modification. CM-Well supplies a token that indicates your location within the queue, which you pass to the consume API in order to retrieve the next chunk. Notes: * In case of a failure in the middle of a consume operation, you can resume reading from the same location by passing the latest token you received. * You can also use the bulk-consume API (described below) for faster processing. Documentation: Create Consumer bulk-consume API Description: The bulk-consume API is similar to the consume API, but more efficient for high-capacity streaming. Notes: The same location token is used for both the consume and the bulk-consume APIs. You can also switch between calls to consume and bulk-consume , using the same token instance. You may want to switch from bulk-consume to consume if network load is causing bulk-consume operations to fail. Documentation: Consume Next Bulk SPARQL on Entire Graph Description: You can apply SPARQL queries to specific paths within the CM-Well graph, using the _sp endpoint (see Apply SPARQL to Query Results ). There is a new _sparql endpoint that initiates a query that is optimized to handle the entire CM-Well graph. Use this endpoint when you want to process the whole graph and not just specific paths within it. Notes: See Known Issues . Documentation: Apply SPARQL to Entire Graph Calling Custom Java/Scala Functions from SPARQL Queries Description: You can write a custom function in Java or Scala, upload a Scala source file or Java/Scala jar file, and call the function from within your SPARQL query code. This allows you unlimited flexibility to manipulate the data resulting from a SPARQL query. Notes: None. Documentation: Calling Custom Java/Scala Functions from SPARQL Queries SPARQL \"Stored Procedures\" Description: CM-Well allows you to upload SPARQL CONSTRUCT commands, save them as file infotons and call them in SPARQL queries. This is conceptually similar to creating \"stored procedures\" for a database. This feature allows you to reuse long/complex CONSTRUCT commands rather than having to recreate them every time you use them. Notes: None. Documentation: SPARQL: Uploading CONSTRUCTs as Stored Procedures . Navigation by RDF Type Description: A new feature has been added to the CM-Well Web UI, which allows you to easily retrieve infotons by their RDF type value. For example, you can use this feature to retrieve only Organization infotons. To activate the feature, click the T button to the right of the Home button. This displays the RDF types that are found in the current CM-Well path, and their counts. Clicking on a type name retrieves only infotons that have the chosen RDF type. Notes: The UI of this feature is temporary, and will be enhanced in upcoming versions. Documentation: Coming soon with CM-Well UI documentation. stats API Description: You can retrieve statistical information about CM-Well data by directing a special query to CM-Well. For example, you can discover how many distinct values there are for a certain field in a certain group of infotons. The statistics feature is accessed by the op=stats operation. The feature supports several output formats, including CSV. Notes: The previous keyword for the feature was op=aggregate , now changed to op=stats . Both keywords are supported. Documentation: Developer Guide: Using Elastic Search Statistics API Reference: Data Statistics Sort by Matching Score Description: Adding sort-by=system.score to a query causes the results to be sorted in descending order of the matching score. The matching score is produced by Elastic Search, as a TFIDF (Term Frequency Inverse Document Frequency) score on the search terms. This means that the score is higher if the search terms appear more frequently in a specific infoton than in other infotons on average. Notes: This feature does not work when the with-data flag is included in the query. Documentation: Sorting Results with the sort-by Flag Improvements to Data Synchronization Description: The data synchronization process has been significantly improved in the latest version. Notes: None. Documentation: N/A. Storage Layer Enhancements Description: Enhancements have been made to the CM-Well storage layer such that data consistency is checked more reliably and system load is handled better. Notes: None. Documentation: N/A. Minimize Repair Time of Web Service Description: CM-Well automatically identifies unhealthy web service nodes and restarts them when necessary. The restart process could previously take 13 minutes and is now handled within 30 seconds. Notes: None. Documentation: N/A. Enhancements to Downloader and Ingester Description: Many bug fixes and stabilization enhancements have been made to the CM-Well Downloader and Ingester utilities. Among others: the Ingester now pauses if it identifies a network connectivity problem, and resumes when it is resolved. Notes: None. Documentation: N/A. New Storage Format for Data Description: CM-Well is transitioning to a new data format that will allow upgrading to new versions of the Cassandra and Elastic Search database and search layers. (For example, the new version of Elastic Search does not accept a '.' character in field names). Notes: This change is transparent to CM-Well users and does not require any code changes. Documentation: N/A. Upgrade Time Reduced Description: The CM-Well upgrade time has been reduced from 30 minutes to under 5 minutes. Notes: Relevant only to Operations personnel. Documentation: N/A.","title":"Sept. 11th 2016"},{"location":"ReleaseNotes/2016/ReleaseNotes.Sept.11.2016.html#sept-11th-2016","text":"","title":"Sept. 11th 2016"},{"location":"ReleaseNotes/2016/ReleaseNotes.Sept.11.2016.html#change-summary","text":"","title":"Change Summary"},{"location":"ReleaseNotes/2016/ReleaseNotes.Sept.11.2016.html#features","text":"The following features have been added to CM-Well: With-deleted query flag - The optional with-deleted flag allows you to retrieve the latest versions of the matched infotons, together with deleted infotons that match the query. Traffic shaping - The CM-Well logic for managing traffic was modified to take into account the processing time that each user consumes, rather than just the rate of requests that the user sends. Automated Materialized View - An external CM-Well utility processes all infotons defined in a configuration file, and creates \"flattened\" versions of them for more efficient search. Consume API - An API for consuming infotons as a time-ordered \"virtual queue\". Bulk-consume API - An additional consume API, optimized for high-capacity streaming. SPARQL on Entire Graph - a new endpoint that enables performing a SPARQL query on the entire CM-Well graph. Calling Custom Java/Scala Functions from SPARQL Queries - Allows uploading Scala files or Java/Scala jars and calling their functions from within a SPARQL query. SPARQL \"Stored Procedures\" - Allows uploading SPARQL CONSTRUCT commands as files and calling them as \"stored procedures\" from within a SPARQL query. Navigation by RDF Type - A new feature of the CM-Well web UI, which allows you to navigate infotons by their RDF type value. stats API - Allows you to perform statistical queries on CM-Well data, to obtain metrics such as count, minimum, maximum, average and so on, on infoton field values. Sort by Matching Score - Allows sorting query results by the system matching score, which indicates the relative frequency of the search terms. Improvements to Data Synchronization - Improvements to data sync between the Eagan and Plano production environments. Storage Layer Enhancements - Improvements to data consistency checks and behavior under load. Minimize Repair Time of Web Service - Reduced auto-repair time for web service from 13 minutes to 30 seconds. Enhancements to Downloader and Ingester - Bug fixes and stability improvements. New Storage Format for Data - Enables upgrade of underlying Cassandra and Elastic Search components. Upgrade Time Reduced - CM-Well upgrade time reduced from 30 minutes to 5 minutes.","title":"Features"},{"location":"ReleaseNotes/2016/ReleaseNotes.Sept.11.2016.html#changes-to-api","text":"The following features were added to the CM-Well API: The optional with-deleted flag, which can be used with op=search . consume API. bulk-consume API. _sparql endpoint, allowing SPARQL queries on the entire graph. Call Java/Scala functions from SPARQL queries. Call SPARQL CONSTRUCT \"stored procedures\" from SPARQL queries. Obtain data statistics (produced by Elastic Search), via the op=stats flag. (The previous flag name op=aggregate is still supported.) Sort results by matching score ( sort-by=system.score ).","title":"Changes to API"},{"location":"ReleaseNotes/2016/ReleaseNotes.Sept.11.2016.html#attention","text":"Please note the following items regarding changes in CM-Well's behavior: Users who send unusually heavy queries may receive more 503 - Server unavailable errors, due to the new traffic shaping feature. Any streaming/consume tokens created before the upgrade must be re-created.","title":"Attention"},{"location":"ReleaseNotes/2016/ReleaseNotes.Sept.11.2016.html#known-issues","text":"The bulk-consume token that encodes the read location in the queue sometimes gets assigned a future point-in-time, when the consumer reaches real-time. Consume tokens created in previous versions are no longer valid. New tokens must be created. SPARQL on the whole graph still has bugs. Among others, duplicate results sometimes appear in SELECT responses; to work around, use SELECT DISTINCT.","title":"Known Issues"},{"location":"ReleaseNotes/2016/ReleaseNotes.Sept.11.2016.html#new-features","text":"","title":"New Features"},{"location":"ReleaseNotes/2016/ReleaseNotes.Sept.11.2016.html#with-deleted-query-flag","text":"Description: By default, queries to CM-Well return only the most recent version of each matching infoton (although all versions are retained in the repository). If you add the with-history flag, the query returns all \"historical\" versions as well as the most recent versions. However, deleted infotons are returned neither for the default query nor for a with-history query. The with-deleted flag was introduced to allow you to indicate that you wish to retrieve deleted infotons that match the query, as well as \"live\" infotons. Notes: The feature will become fully operational when the rewriting of CM-Well data in the new format is complete (see New Storage Format for Data ). Documentation: Using the with-deleted Flag","title":"With-deleted Query Flag"},{"location":"ReleaseNotes/2016/ReleaseNotes.Sept.11.2016.html#traffic-shaping","text":"Description: Previously, CM-Well managed allocation of processing resources to users based on the number of requests the users sent per second. For certain heavy queries, the request rate is not a good indicator of the share of resources a user is consuming. A better indicator is the amount of time CM-Well spends actually processing the users' requests. Therefore, CM-Well now tracks a processing-time metric per user, looking at a window of the past 20 seconds. CM-Well manages statuses per user according to this metric. Users that send unusually heavy requests over time are penalized with an extra wait period before their query results are returned (thus freeing up some resources for other users). In extreme situations, a user may be cut off entirely and receive no responses from CM-Well. Notes: Users who send unusually heavy queries may receive more 503 - Server unavailable errors, due to traffic shaping. Documentation: N/A.","title":"Traffic Shaping"},{"location":"ReleaseNotes/2016/ReleaseNotes.Sept.11.2016.html#automated-materialized-view","text":"Description: Certain complex queries require a great deal of graph traversal, making them inefficient and time-consuming. This problem was identified as being especially acute for certain matching scenarios required by the LBD client (e.g. matching people to the companies they work for), which were implemented using SPARQL constructs. The matching logic can be greatly simplified by \"flattening\" out multiple indirect relationships. A single \"artificial\" infoton can be created, which contains all required relationships directly as fields, rather than having to traverse several outbound links to retrieve the same information. An external CM-Well utility has been developed, which processes infotons defined in a configuration file, and creates \"flattened\" versions (materialized views) of them for more efficient search. This utility will eventually be incorporated into the CM-Well engine, transparently to users, but greatly improving complex query times. Notes: This feature is also known internally as \"SPARQL Trigger Processor\". Documentation: N/A.","title":"Automated Materialized View"},{"location":"ReleaseNotes/2016/ReleaseNotes.Sept.11.2016.html#consume-api","text":"Description: The consume API allows you to iteratively read \"chunks\" of infotons streamed from CM-Well. The data stream acts a \"virtual queue\", where the infotons are sorted by time of modification. CM-Well supplies a token that indicates your location within the queue, which you pass to the consume API in order to retrieve the next chunk. Notes: * In case of a failure in the middle of a consume operation, you can resume reading from the same location by passing the latest token you received. * You can also use the bulk-consume API (described below) for faster processing. Documentation: Create Consumer","title":"consume API"},{"location":"ReleaseNotes/2016/ReleaseNotes.Sept.11.2016.html#bulk-consume-api","text":"Description: The bulk-consume API is similar to the consume API, but more efficient for high-capacity streaming. Notes: The same location token is used for both the consume and the bulk-consume APIs. You can also switch between calls to consume and bulk-consume , using the same token instance. You may want to switch from bulk-consume to consume if network load is causing bulk-consume operations to fail. Documentation: Consume Next Bulk","title":"bulk-consume API"},{"location":"ReleaseNotes/2016/ReleaseNotes.Sept.11.2016.html#sparql-on-entire-graph","text":"Description: You can apply SPARQL queries to specific paths within the CM-Well graph, using the _sp endpoint (see Apply SPARQL to Query Results ). There is a new _sparql endpoint that initiates a query that is optimized to handle the entire CM-Well graph. Use this endpoint when you want to process the whole graph and not just specific paths within it. Notes: See Known Issues . Documentation: Apply SPARQL to Entire Graph","title":"SPARQL on Entire Graph"},{"location":"ReleaseNotes/2016/ReleaseNotes.Sept.11.2016.html#calling-custom-javascala-functions-from-sparql-queries","text":"Description: You can write a custom function in Java or Scala, upload a Scala source file or Java/Scala jar file, and call the function from within your SPARQL query code. This allows you unlimited flexibility to manipulate the data resulting from a SPARQL query. Notes: None. Documentation: Calling Custom Java/Scala Functions from SPARQL Queries","title":"Calling Custom Java/Scala Functions from SPARQL Queries"},{"location":"ReleaseNotes/2016/ReleaseNotes.Sept.11.2016.html#sparql-stored-procedures","text":"Description: CM-Well allows you to upload SPARQL CONSTRUCT commands, save them as file infotons and call them in SPARQL queries. This is conceptually similar to creating \"stored procedures\" for a database. This feature allows you to reuse long/complex CONSTRUCT commands rather than having to recreate them every time you use them. Notes: None. Documentation: SPARQL: Uploading CONSTRUCTs as Stored Procedures .","title":"SPARQL \"Stored Procedures\""},{"location":"ReleaseNotes/2016/ReleaseNotes.Sept.11.2016.html#navigation-by-rdf-type","text":"Description: A new feature has been added to the CM-Well Web UI, which allows you to easily retrieve infotons by their RDF type value. For example, you can use this feature to retrieve only Organization infotons. To activate the feature, click the T button to the right of the Home button. This displays the RDF types that are found in the current CM-Well path, and their counts. Clicking on a type name retrieves only infotons that have the chosen RDF type. Notes: The UI of this feature is temporary, and will be enhanced in upcoming versions. Documentation: Coming soon with CM-Well UI documentation.","title":"Navigation by RDF Type"},{"location":"ReleaseNotes/2016/ReleaseNotes.Sept.11.2016.html#stats-api","text":"Description: You can retrieve statistical information about CM-Well data by directing a special query to CM-Well. For example, you can discover how many distinct values there are for a certain field in a certain group of infotons. The statistics feature is accessed by the op=stats operation. The feature supports several output formats, including CSV. Notes: The previous keyword for the feature was op=aggregate , now changed to op=stats . Both keywords are supported. Documentation: Developer Guide: Using Elastic Search Statistics API Reference: Data Statistics","title":"stats API"},{"location":"ReleaseNotes/2016/ReleaseNotes.Sept.11.2016.html#sort-by-matching-score","text":"Description: Adding sort-by=system.score to a query causes the results to be sorted in descending order of the matching score. The matching score is produced by Elastic Search, as a TFIDF (Term Frequency Inverse Document Frequency) score on the search terms. This means that the score is higher if the search terms appear more frequently in a specific infoton than in other infotons on average. Notes: This feature does not work when the with-data flag is included in the query. Documentation: Sorting Results with the sort-by Flag","title":"Sort by Matching Score"},{"location":"ReleaseNotes/2016/ReleaseNotes.Sept.11.2016.html#improvements-to-data-synchronization","text":"Description: The data synchronization process has been significantly improved in the latest version. Notes: None. Documentation: N/A.","title":"Improvements to Data Synchronization"},{"location":"ReleaseNotes/2016/ReleaseNotes.Sept.11.2016.html#storage-layer-enhancements","text":"Description: Enhancements have been made to the CM-Well storage layer such that data consistency is checked more reliably and system load is handled better. Notes: None. Documentation: N/A.","title":"Storage Layer Enhancements"},{"location":"ReleaseNotes/2016/ReleaseNotes.Sept.11.2016.html#minimize-repair-time-of-web-service","text":"Description: CM-Well automatically identifies unhealthy web service nodes and restarts them when necessary. The restart process could previously take 13 minutes and is now handled within 30 seconds. Notes: None. Documentation: N/A.","title":"Minimize Repair Time of Web Service"},{"location":"ReleaseNotes/2016/ReleaseNotes.Sept.11.2016.html#enhancements-to-downloader-and-ingester","text":"Description: Many bug fixes and stabilization enhancements have been made to the CM-Well Downloader and Ingester utilities. Among others: the Ingester now pauses if it identifies a network connectivity problem, and resumes when it is resolved. Notes: None. Documentation: N/A.","title":"Enhancements to Downloader and Ingester"},{"location":"ReleaseNotes/2016/ReleaseNotes.Sept.11.2016.html#new-storage-format-for-data","text":"Description: CM-Well is transitioning to a new data format that will allow upgrading to new versions of the Cassandra and Elastic Search database and search layers. (For example, the new version of Elastic Search does not accept a '.' character in field names). Notes: This change is transparent to CM-Well users and does not require any code changes. Documentation: N/A.","title":"New Storage Format for Data"},{"location":"ReleaseNotes/2016/ReleaseNotes.Sept.11.2016.html#upgrade-time-reduced","text":"Description: The CM-Well upgrade time has been reduced from 30 minutes to under 5 minutes. Notes: Relevant only to Operations personnel. Documentation: N/A.","title":"Upgrade Time Reduced"},{"location":"ReleaseNotes/2017/ReleaseNotes.Amoeba.Feb.2017.html","text":"Amoeba (Feb. 2017) Change Summary New Features Pushback Pressure for Ingest to Prevent Slowdowns Kafka Partition Reassignment for Inoperative Machine Version name added to CM-Well web UI. Notable Bug Fixes GitLab Item No. 321: Fix race condition in system restart. Changes to API N/A Feature Descriptions Pushback Pressure for Ingest to Prevent Slowdowns GitLab Item No.: 322. Description: We have encountered situations where a significant load of ingest requests causes CM-Well's response time to degrade severely. To prevent this situation, a \"pushback pressure\" feature has been added to ingestion, so that if ingestion queues are too full, new requests may get the HTTP response code 503. In this case, the recommended behavior is for the client to \"sleep\" for a brief period and retry the request. (Sleep for 1 second for the first retry, then if necessary increase sleep period to up to 30 seconds.) Documentation: N/A Kafka Partition Reassignment for Inoperative Machine GitLab Item No.: 176. Description: This feature enhances infrastructure stability and has no direct effect on the user. CM-Well maintains 3 copies of each data item for redundancy. If a machine goes offline for 15 minutes, it is assumed inoperative, and its data is rewritten to other machines. The \"Kafka partition reassignment\" feature refers to triggering replication of the Kafka queue management module's data in case of a \"dead\" machine. Documentation: N/A","title":"Amoeba (Feb. 2017)"},{"location":"ReleaseNotes/2017/ReleaseNotes.Amoeba.Feb.2017.html#amoeba-feb-2017","text":"","title":"Amoeba (Feb. 2017)"},{"location":"ReleaseNotes/2017/ReleaseNotes.Amoeba.Feb.2017.html#change-summary","text":"","title":"Change Summary"},{"location":"ReleaseNotes/2017/ReleaseNotes.Amoeba.Feb.2017.html#new-features","text":"Pushback Pressure for Ingest to Prevent Slowdowns Kafka Partition Reassignment for Inoperative Machine Version name added to CM-Well web UI.","title":"New Features"},{"location":"ReleaseNotes/2017/ReleaseNotes.Amoeba.Feb.2017.html#notable-bug-fixes","text":"GitLab Item No. 321: Fix race condition in system restart.","title":"Notable Bug Fixes"},{"location":"ReleaseNotes/2017/ReleaseNotes.Amoeba.Feb.2017.html#changes-to-api","text":"N/A","title":"Changes to API"},{"location":"ReleaseNotes/2017/ReleaseNotes.Amoeba.Feb.2017.html#feature-descriptions","text":"","title":"Feature Descriptions"},{"location":"ReleaseNotes/2017/ReleaseNotes.Amoeba.Feb.2017.html#pushback-pressure-for-ingest-to-prevent-slowdowns","text":"GitLab Item No.: 322. Description: We have encountered situations where a significant load of ingest requests causes CM-Well's response time to degrade severely. To prevent this situation, a \"pushback pressure\" feature has been added to ingestion, so that if ingestion queues are too full, new requests may get the HTTP response code 503. In this case, the recommended behavior is for the client to \"sleep\" for a brief period and retry the request. (Sleep for 1 second for the first retry, then if necessary increase sleep period to up to 30 seconds.) Documentation: N/A","title":"Pushback Pressure for Ingest to Prevent Slowdowns"},{"location":"ReleaseNotes/2017/ReleaseNotes.Amoeba.Feb.2017.html#kafka-partition-reassignment-for-inoperative-machine","text":"GitLab Item No.: 176. Description: This feature enhances infrastructure stability and has no direct effect on the user. CM-Well maintains 3 copies of each data item for redundancy. If a machine goes offline for 15 minutes, it is assumed inoperative, and its data is rewritten to other machines. The \"Kafka partition reassignment\" feature refers to triggering replication of the Kafka queue management module's data in case of a \"dead\" machine. Documentation: N/A","title":"Kafka Partition Reassignment for Inoperative Machine"},{"location":"ReleaseNotes/2017/ReleaseNotes.Beowulf.Feb.2017.html","text":"Beowulf (Feb. 2017) Change Summary New Features Support the '#' Character in Infoton UUIDs Notable Bug Fixes GitLab Item # Title Description 370 Empty subjects caused an error in trig format. This bug caused an error to be produced when an attempt was made to ingest a triple with an empty subject (i.e. a the subject \" \"). Now supported. Reported by the Linked Data team. 389 Failure to retrieve infotons whose timestamp has a UTC offset. Infotons whose timestamp has a UTC offset would be ingested successfully, but trying to retrieve them would fail. Changes to API The '#' is now supported as a valid character in infoton UUIDs. Feature Descriptions Support the '#' Character in Infoton UUIDs GitLab Item No.: 324. Description: CM-Well has been modified to support the '#' character in infoton UUIDs (previously not supported). This character is often used in ontology subjects, so this change comes to facilitate that usage. Both the CM-Well API and the web UI now support this change. Note When using the '#' character as part of an infoton UUID, it must be escaped as %23 . Documentation: N/A","title":"Beowulf (Feb. 2017)"},{"location":"ReleaseNotes/2017/ReleaseNotes.Beowulf.Feb.2017.html#beowulf-feb-2017","text":"","title":"Beowulf (Feb. 2017)"},{"location":"ReleaseNotes/2017/ReleaseNotes.Beowulf.Feb.2017.html#change-summary","text":"","title":"Change Summary"},{"location":"ReleaseNotes/2017/ReleaseNotes.Beowulf.Feb.2017.html#new-features","text":"Support the '#' Character in Infoton UUIDs","title":"New Features"},{"location":"ReleaseNotes/2017/ReleaseNotes.Beowulf.Feb.2017.html#notable-bug-fixes","text":"GitLab Item # Title Description 370 Empty subjects caused an error in trig format. This bug caused an error to be produced when an attempt was made to ingest a triple with an empty subject (i.e. a the subject \" \"). Now supported. Reported by the Linked Data team. 389 Failure to retrieve infotons whose timestamp has a UTC offset. Infotons whose timestamp has a UTC offset would be ingested successfully, but trying to retrieve them would fail.","title":"Notable Bug Fixes"},{"location":"ReleaseNotes/2017/ReleaseNotes.Beowulf.Feb.2017.html#changes-to-api","text":"The '#' is now supported as a valid character in infoton UUIDs.","title":"Changes to API"},{"location":"ReleaseNotes/2017/ReleaseNotes.Beowulf.Feb.2017.html#feature-descriptions","text":"","title":"Feature Descriptions"},{"location":"ReleaseNotes/2017/ReleaseNotes.Beowulf.Feb.2017.html#support-the-character-in-infoton-uuids","text":"GitLab Item No.: 324. Description: CM-Well has been modified to support the '#' character in infoton UUIDs (previously not supported). This character is often used in ontology subjects, so this change comes to facilitate that usage. Both the CM-Well API and the web UI now support this change. Note When using the '#' character as part of an infoton UUID, it must be escaped as %23 . Documentation: N/A","title":"Support the '#' Character in Infoton UUIDs"},{"location":"ReleaseNotes/2017/ReleaseNotes.CElegans.Mar.2017.html","text":"C.Elegans (Mar. 2017) Change Summary GitLab Item # Title Description 415 Improve performance of ingestion to new data path. In the standard method of ingestion, two separate queues are managed: one for writing to Cassandra storage and one for writing to Elastic Search indexing. In the case of small infotons, a single queue is managed for both these operations, allowing a cache to be utilized and making the ingestion faster. 422, 444 Bug fixes and enhancements to the web service caching component. See Title. Changes to API N/A","title":"C.Elegans (Mar. 2017)"},{"location":"ReleaseNotes/2017/ReleaseNotes.CElegans.Mar.2017.html#celegans-mar-2017","text":"","title":"C.Elegans (Mar. 2017)"},{"location":"ReleaseNotes/2017/ReleaseNotes.CElegans.Mar.2017.html#change-summary","text":"GitLab Item # Title Description 415 Improve performance of ingestion to new data path. In the standard method of ingestion, two separate queues are managed: one for writing to Cassandra storage and one for writing to Elastic Search indexing. In the case of small infotons, a single queue is managed for both these operations, allowing a cache to be utilized and making the ingestion faster. 422, 444 Bug fixes and enhancements to the web service caching component. See Title.","title":"Change Summary"},{"location":"ReleaseNotes/2017/ReleaseNotes.CElegans.Mar.2017.html#changes-to-api","text":"N/A","title":"Changes to API"},{"location":"ReleaseNotes/2017/ReleaseNotes.Dolphin.Mar.2017.html","text":"Dolphin (Mar. 2017) Change Summary This version mostly addresses bug fixes, performance and stability. GitLab Item # Title Description 458 Remove version number from web UI We have decided to remove the numeric version label from the CM-Well web UI to prevent confusion, since versions now have textual names. 445 Consumer exception for bad data chunk This bug would sometimes occur when using the consume API. If an invalid data chunk was encountered, the HTTP error 500 (Internal Server Error) was produced and the consume operation would fail at that point. After the fix, in this case the 206 error (Partial Content) is produced, and the consume stream continues with the next valid data chunk. (This fix is important for the Data Fusion user.) Changes to API N/A","title":"Dolphin (Mar. 2017)"},{"location":"ReleaseNotes/2017/ReleaseNotes.Dolphin.Mar.2017.html#dolphin-mar-2017","text":"","title":"Dolphin (Mar. 2017)"},{"location":"ReleaseNotes/2017/ReleaseNotes.Dolphin.Mar.2017.html#change-summary","text":"This version mostly addresses bug fixes, performance and stability. GitLab Item # Title Description 458 Remove version number from web UI We have decided to remove the numeric version label from the CM-Well web UI to prevent confusion, since versions now have textual names. 445 Consumer exception for bad data chunk This bug would sometimes occur when using the consume API. If an invalid data chunk was encountered, the HTTP error 500 (Internal Server Error) was produced and the consume operation would fail at that point. After the fix, in this case the 206 error (Partial Content) is produced, and the consume stream continues with the next valid data chunk. (This fix is important for the Data Fusion user.)","title":"Change Summary"},{"location":"ReleaseNotes/2017/ReleaseNotes.Dolphin.Mar.2017.html#changes-to-api","text":"N/A","title":"Changes to API"},{"location":"ReleaseNotes/2017/ReleaseNotes.Firebird.May.2017.html","text":"Firebird (May 2017) Change Summary New Features Conditional Updates to Prevent Write Conflicts Track Update Progress Synchronous Update Notable Bug Fixes Add Node to CM-Well Cluster Changes to API New _track endpoint for tracking update requests. New tracking flag to produce a tracking ID for update requests. New blocking flag to cause update requests to be blocking (synchronous). New option to add prevUUID triple, to indicate conditional update. Link to Demo N/A Feature Descriptions Conditional Updates to Prevent Write Conflicts GitLab Item No.: 366. Description: This feature allows you to prevent a situation where several clients' parallel update requests for the same infoton can cause overwriting of data. Documentation: Conditional updates Track Update Progress GitLab Item No.: 371. Description: This feature allows you to track the status of an update request, using the new _track endpoint. Documentation: Tracking API Synchronous Update GitLab Item No.: 365. Description: By adding the new blocking flag to an update request, you can cause the request to be blocking (synchronous) instead of the default asynchronous behavior. Documentation: Blocking flag Bug Fix: Add Node to CM-Well Cluster GitLab Item No.: 358. Description: Previously there was a bug that caused the \"add node\" admin script to fail; now fixed. Documentation: N/A","title":"Firebird (May 2017)"},{"location":"ReleaseNotes/2017/ReleaseNotes.Firebird.May.2017.html#firebird-may-2017","text":"","title":"Firebird (May 2017)"},{"location":"ReleaseNotes/2017/ReleaseNotes.Firebird.May.2017.html#change-summary","text":"","title":"Change Summary"},{"location":"ReleaseNotes/2017/ReleaseNotes.Firebird.May.2017.html#new-features","text":"Conditional Updates to Prevent Write Conflicts Track Update Progress Synchronous Update","title":"New Features"},{"location":"ReleaseNotes/2017/ReleaseNotes.Firebird.May.2017.html#notable-bug-fixes","text":"Add Node to CM-Well Cluster","title":"Notable Bug Fixes"},{"location":"ReleaseNotes/2017/ReleaseNotes.Firebird.May.2017.html#changes-to-api","text":"New _track endpoint for tracking update requests. New tracking flag to produce a tracking ID for update requests. New blocking flag to cause update requests to be blocking (synchronous). New option to add prevUUID triple, to indicate conditional update.","title":"Changes to API"},{"location":"ReleaseNotes/2017/ReleaseNotes.Firebird.May.2017.html#link-to-demo","text":"N/A","title":"Link to Demo"},{"location":"ReleaseNotes/2017/ReleaseNotes.Firebird.May.2017.html#feature-descriptions","text":"","title":"Feature Descriptions"},{"location":"ReleaseNotes/2017/ReleaseNotes.Firebird.May.2017.html#conditional-updates-to-prevent-write-conflicts","text":"GitLab Item No.: 366. Description: This feature allows you to prevent a situation where several clients' parallel update requests for the same infoton can cause overwriting of data. Documentation: Conditional updates","title":"Conditional Updates to Prevent Write Conflicts"},{"location":"ReleaseNotes/2017/ReleaseNotes.Firebird.May.2017.html#track-update-progress","text":"GitLab Item No.: 371. Description: This feature allows you to track the status of an update request, using the new _track endpoint. Documentation: Tracking API","title":"Track Update Progress"},{"location":"ReleaseNotes/2017/ReleaseNotes.Firebird.May.2017.html#synchronous-update","text":"GitLab Item No.: 365. Description: By adding the new blocking flag to an update request, you can cause the request to be blocking (synchronous) instead of the default asynchronous behavior. Documentation: Blocking flag","title":"Synchronous Update"},{"location":"ReleaseNotes/2017/ReleaseNotes.Firebird.May.2017.html#bug-fix-add-node-to-cm-well-cluster","text":"GitLab Item No.: 358. Description: Previously there was a bug that caused the \"add node\" admin script to fail; now fixed. Documentation: N/A","title":"Bug Fix: Add Node to CM-Well Cluster"},{"location":"ReleaseNotes/2017/ReleaseNotes.Gopher.May.2017.html","text":"Gopher (May 2017) Change Summary GitLab Item # Title Description 553 Sort-by bug fix The sorting of infoton results when using the sort-by parameter did not work correctly; now fixed. N/A Sort by multiple fields You can provide multiple, comma-separated field names in the sort-by parameter, to sort by several field values. See Sorting Results with the sort-by Parameter to learn more. Several Expand testing infrastructure in preparation for platform features CM-Well supports several features that allow users to run their own code on the CM-Well platform (e.g. SPARQL queries). This release focuses on enhancing the testability of these features. Changes to API N/A","title":"Gopher (May 2017)"},{"location":"ReleaseNotes/2017/ReleaseNotes.Gopher.May.2017.html#gopher-may-2017","text":"","title":"Gopher (May 2017)"},{"location":"ReleaseNotes/2017/ReleaseNotes.Gopher.May.2017.html#change-summary","text":"GitLab Item # Title Description 553 Sort-by bug fix The sorting of infoton results when using the sort-by parameter did not work correctly; now fixed. N/A Sort by multiple fields You can provide multiple, comma-separated field names in the sort-by parameter, to sort by several field values. See Sorting Results with the sort-by Parameter to learn more. Several Expand testing infrastructure in preparation for platform features CM-Well supports several features that allow users to run their own code on the CM-Well platform (e.g. SPARQL queries). This release focuses on enhancing the testability of these features.","title":"Change Summary"},{"location":"ReleaseNotes/2017/ReleaseNotes.Gopher.May.2017.html#changes-to-api","text":"N/A","title":"Changes to API"},{"location":"ReleaseNotes/2017/ReleaseNotes.Hydra.June.2017.html","text":"Hydra (June 2017) Change Summary Title Description yg-chunk-size parameter You can now add a yg-chunk-size parameter to a yg query (that searches for inbound links to a given set of paths).The yg-chunk-size value determines how many infoton paths (that resulted from the query preceding the yg query) will be processed at a time in a single yg query. This prevents heavy yg queries from \"starving\" other operations. The default value for yg-chunk-size is 10. See yg : Traversing Inbound and Outbound Links to learn more. SPARQL Trigger Processor Agent The SPARQL Trigger Processor runs SPARQL queries and constructs for the purposes of creating materialized views of CM-Well infotons. Previously, the SPARQL Trigger Processor could only be run as an external utility. Now it has an agent inside CM-Well, and its jobs are run as an integral part of CM-Well. See Using the SPARQL Trigger Processor to learn more. Processing metrics added to bg process Various processing metrics have been added to the CM-Well bg (background) process, such as numbers and types of requests, duplicate requests and so on. Among other things, this enables analysis and suggestions for optimization of user workflows. Log message cleanup CM-Well log messages were reviewed and edited for clarity, conciseness and informativeness. Changes to API New yg-chunk-size parameter may be added to yg (inbound link) queries.","title":"Hydra (June 2017)"},{"location":"ReleaseNotes/2017/ReleaseNotes.Hydra.June.2017.html#hydra-june-2017","text":"","title":"Hydra (June 2017)"},{"location":"ReleaseNotes/2017/ReleaseNotes.Hydra.June.2017.html#change-summary","text":"Title Description yg-chunk-size parameter You can now add a yg-chunk-size parameter to a yg query (that searches for inbound links to a given set of paths).The yg-chunk-size value determines how many infoton paths (that resulted from the query preceding the yg query) will be processed at a time in a single yg query. This prevents heavy yg queries from \"starving\" other operations. The default value for yg-chunk-size is 10. See yg : Traversing Inbound and Outbound Links to learn more. SPARQL Trigger Processor Agent The SPARQL Trigger Processor runs SPARQL queries and constructs for the purposes of creating materialized views of CM-Well infotons. Previously, the SPARQL Trigger Processor could only be run as an external utility. Now it has an agent inside CM-Well, and its jobs are run as an integral part of CM-Well. See Using the SPARQL Trigger Processor to learn more. Processing metrics added to bg process Various processing metrics have been added to the CM-Well bg (background) process, such as numbers and types of requests, duplicate requests and so on. Among other things, this enables analysis and suggestions for optimization of user workflows. Log message cleanup CM-Well log messages were reviewed and edited for clarity, conciseness and informativeness.","title":"Change Summary"},{"location":"ReleaseNotes/2017/ReleaseNotes.Hydra.June.2017.html#changes-to-api","text":"New yg-chunk-size parameter may be added to yg (inbound link) queries.","title":"Changes to API"},{"location":"ReleaseNotes/2017/ReleaseNotes.Iguana.July.2017.html","text":"Iguana (July 2017) Change Summary Title Description Open Source CM-Well has been published as an Open Source Platform at https://github.com/thomsonreuters/CM-Well . Learn more at CM-Well readme . New UI The CM-Well web UI has been updated. Learn more at CM-Well web UI . Note: The CM-Well web UI is currently fully supported only in the Chrome browser. SPARQL Trigger Processor as internal agent The SPARQL Trigger Processor utility for creating materialized views is now an internal CM-Well agent. Its jobs run automatically; you no longer have to run it as a stand-alone utility. Learn more at Using the SPARQL Trigger Processor . Play version upgrade The Play web service component has been upgraded to a newer version. Log message cleanup Continued efforts to edit CM-Well log messages for clarity, conciseness and informativeness. Changes to API None.","title":"Iguana (July 2017)"},{"location":"ReleaseNotes/2017/ReleaseNotes.Iguana.July.2017.html#iguana-july-2017","text":"","title":"Iguana (July 2017)"},{"location":"ReleaseNotes/2017/ReleaseNotes.Iguana.July.2017.html#change-summary","text":"Title Description Open Source CM-Well has been published as an Open Source Platform at https://github.com/thomsonreuters/CM-Well . Learn more at CM-Well readme . New UI The CM-Well web UI has been updated. Learn more at CM-Well web UI . Note: The CM-Well web UI is currently fully supported only in the Chrome browser. SPARQL Trigger Processor as internal agent The SPARQL Trigger Processor utility for creating materialized views is now an internal CM-Well agent. Its jobs run automatically; you no longer have to run it as a stand-alone utility. Learn more at Using the SPARQL Trigger Processor . Play version upgrade The Play web service component has been upgraded to a newer version. Log message cleanup Continued efforts to edit CM-Well log messages for clarity, conciseness and informativeness.","title":"Change Summary"},{"location":"ReleaseNotes/2017/ReleaseNotes.Iguana.July.2017.html#changes-to-api","text":"None.","title":"Changes to API"},{"location":"ReleaseNotes/2017/ReleaseNotes.Jaguar.August.2017.html","text":"Jaguar (August 2017) Change Summary Title Description SPARQL Trigger Processor unit tests added Unit tests added to the SPARQL Trigger Processor tool to ensure code stability. Web service errors reduced Some redundant/unnecessary error logs have been removed from the CM-Well web service to streamline the log. Additional info in x-info response The x-info administrator function returns Elastic Search and Cassandra entries for a given infoton. This response has now been extended. See Testing and Fixing Corrupted Data for details. General enhancement and improvements General enhancement and improvements Changes to API x-info response format. See Testing and Fixing Corrupted Data for details.","title":"Jaguar (August 2017)"},{"location":"ReleaseNotes/2017/ReleaseNotes.Jaguar.August.2017.html#jaguar-august-2017","text":"","title":"Jaguar (August 2017)"},{"location":"ReleaseNotes/2017/ReleaseNotes.Jaguar.August.2017.html#change-summary","text":"Title Description SPARQL Trigger Processor unit tests added Unit tests added to the SPARQL Trigger Processor tool to ensure code stability. Web service errors reduced Some redundant/unnecessary error logs have been removed from the CM-Well web service to streamline the log. Additional info in x-info response The x-info administrator function returns Elastic Search and Cassandra entries for a given infoton. This response has now been extended. See Testing and Fixing Corrupted Data for details. General enhancement and improvements General enhancement and improvements","title":"Change Summary"},{"location":"ReleaseNotes/2017/ReleaseNotes.Jaguar.August.2017.html#changes-to-api","text":"x-info response format. See Testing and Fixing Corrupted Data for details.","title":"Changes to API"},{"location":"ReleaseNotes/2017/ReleaseNotes.Jan.17.2017.html","text":"Jan. 17 2017 Change Summary The changes in this release include bug fixes and infrastructure improvements only - see next section. Notable Bug Fixes and Improvements Data center synchronization improvement. The data transfer that is managed during sync now switches automatically among 3 different modes: consume, bulk-consume and slow-bulk, depending on environment conditions. Improved resilience of the background process that writes data in the new format. Tasks are now transferred seamlessly among machines if a machine goes offline or comes back online. Bug fix #285: Some whole-graph SPARQL queries timed out due to errors in the optimization logic. Here is an example of a query that timed out: SELECT ?x ?name WHERE { ?typebridge metadata:geographyType data:1-308005 . ?x metadata:geographyType ?typebridge . ?x metadata:geographyUniqueName ?name . } Bug fix #292: Due to an error in caching, CM-Well would sometimes return the \"pending\" response when under stress. Changes to API None.","title":"Jan. 17 2017"},{"location":"ReleaseNotes/2017/ReleaseNotes.Jan.17.2017.html#jan-17-2017","text":"","title":"Jan. 17 2017"},{"location":"ReleaseNotes/2017/ReleaseNotes.Jan.17.2017.html#change-summary","text":"The changes in this release include bug fixes and infrastructure improvements only - see next section.","title":"Change Summary"},{"location":"ReleaseNotes/2017/ReleaseNotes.Jan.17.2017.html#notable-bug-fixes-and-improvements","text":"Data center synchronization improvement. The data transfer that is managed during sync now switches automatically among 3 different modes: consume, bulk-consume and slow-bulk, depending on environment conditions. Improved resilience of the background process that writes data in the new format. Tasks are now transferred seamlessly among machines if a machine goes offline or comes back online. Bug fix #285: Some whole-graph SPARQL queries timed out due to errors in the optimization logic. Here is an example of a query that timed out: SELECT ?x ?name WHERE { ?typebridge metadata:geographyType data:1-308005 . ?x metadata:geographyType ?typebridge . ?x metadata:geographyUniqueName ?name . } Bug fix #292: Due to an error in caching, CM-Well would sometimes return the \"pending\" response when under stress.","title":"Notable Bug Fixes and Improvements"},{"location":"ReleaseNotes/2017/ReleaseNotes.Jan.17.2017.html#changes-to-api","text":"None.","title":"Changes to API"},{"location":"ReleaseNotes/2017/ReleaseNotes.Jan.4.2017.html","text":"Jan. 4 2017 Change Summary The changes in this release include bug fixes and infrastructure improvements only - see next section. Notable Bug Fixes and Improvements A bug was fixed that caused sorting on metadata fields to fail. Specifically, this caused consume actions and the data center synchronization that depended on them to skip some data, as they require a sort on the system field indexTime. Note: This bug may have also affected end user calls to the consume API, mostly when consuming historical time ranges, as opposed to the real-time \"horizon\". Improvements and optimizations were made to the bulk-consume operation and its responsiveness to load. Performance and stability improvements were made to data correction operations ( purge and the administrator operation x-fix ) as related to large infotons. Ingestion of large infotons ( = 1MB) was improved. The previous handling could be very slow or fail occasionally. Performance and stability improvements were made to the CM-Well storage layer so that load is leveled more evenly for the data layer. Data center synchronization was improved such that it now does not pause or stall when it encounters invalid data. In this case, it writes the relevant info to the red error log and continues. Operations-related: Per request from the Operations team, the install command has been renamed to the unambiguous wipeandinstall , so that it's clear that this command wipes all CM-Well data. An additional confirmation step was also added. Changes to API None.","title":"Jan. 4 2017"},{"location":"ReleaseNotes/2017/ReleaseNotes.Jan.4.2017.html#jan-4-2017","text":"","title":"Jan. 4 2017"},{"location":"ReleaseNotes/2017/ReleaseNotes.Jan.4.2017.html#change-summary","text":"The changes in this release include bug fixes and infrastructure improvements only - see next section.","title":"Change Summary"},{"location":"ReleaseNotes/2017/ReleaseNotes.Jan.4.2017.html#notable-bug-fixes-and-improvements","text":"A bug was fixed that caused sorting on metadata fields to fail. Specifically, this caused consume actions and the data center synchronization that depended on them to skip some data, as they require a sort on the system field indexTime. Note: This bug may have also affected end user calls to the consume API, mostly when consuming historical time ranges, as opposed to the real-time \"horizon\". Improvements and optimizations were made to the bulk-consume operation and its responsiveness to load. Performance and stability improvements were made to data correction operations ( purge and the administrator operation x-fix ) as related to large infotons. Ingestion of large infotons ( = 1MB) was improved. The previous handling could be very slow or fail occasionally. Performance and stability improvements were made to the CM-Well storage layer so that load is leveled more evenly for the data layer. Data center synchronization was improved such that it now does not pause or stall when it encounters invalid data. In this case, it writes the relevant info to the red error log and continues. Operations-related: Per request from the Operations team, the install command has been renamed to the unambiguous wipeandinstall , so that it's clear that this command wipes all CM-Well data. An additional confirmation step was also added.","title":"Notable Bug Fixes and Improvements"},{"location":"ReleaseNotes/2017/ReleaseNotes.Jan.4.2017.html#changes-to-api","text":"None.","title":"Changes to API"},{"location":"ReleaseNotes/2017/ReleaseNotes.Kingbird.September.2017.html","text":"Kingbird (September 2017) Change Summary Title Description Priority queue Introducing the Priority Queue feature. Adding the priority flag to an update request causes the request to receive priority in relation to other update requests. Bug fixes and improvements Bug fixes in Consumer Tool, UI, Consume and Bulk-Consume APIs, bg (background) process. Consumer Tool optimizations. Documentation Additions and improvements. Configuration refactoring Many configuration parameters were moved from -D injections to configuration files. This is related to internal CM-Well launch mechanisms and doesn't affect the user. The qp parameter is now supported for DC-Sync The Data Center synchronization mechanism allows you to automatically synchronize data among multiple CM-Well instances. Previously the synchronization could only be performed on the entire data repository. This feature has now been enhanced with the option to use qp parameter, thus controlling the subset of data that is synchronized. This can be useful, for example, when you want to provide access to \"edge\" instances with a limited dataset. Changes to API The priority flag was added to POST calls and calls to the _in endpoint. See Query Parameters to learn more.","title":"Kingbird (September 2017)"},{"location":"ReleaseNotes/2017/ReleaseNotes.Kingbird.September.2017.html#kingbird-september-2017","text":"","title":"Kingbird (September 2017)"},{"location":"ReleaseNotes/2017/ReleaseNotes.Kingbird.September.2017.html#change-summary","text":"Title Description Priority queue Introducing the Priority Queue feature. Adding the priority flag to an update request causes the request to receive priority in relation to other update requests. Bug fixes and improvements Bug fixes in Consumer Tool, UI, Consume and Bulk-Consume APIs, bg (background) process. Consumer Tool optimizations. Documentation Additions and improvements. Configuration refactoring Many configuration parameters were moved from -D injections to configuration files. This is related to internal CM-Well launch mechanisms and doesn't affect the user. The qp parameter is now supported for DC-Sync The Data Center synchronization mechanism allows you to automatically synchronize data among multiple CM-Well instances. Previously the synchronization could only be performed on the entire data repository. This feature has now been enhanced with the option to use qp parameter, thus controlling the subset of data that is synchronized. This can be useful, for example, when you want to provide access to \"edge\" instances with a limited dataset.","title":"Change Summary"},{"location":"ReleaseNotes/2017/ReleaseNotes.Kingbird.September.2017.html#changes-to-api","text":"The priority flag was added to POST calls and calls to the _in endpoint. See Query Parameters to learn more.","title":"Changes to API"},{"location":"ReleaseNotes/2017/ReleaseNotes.Lynx.September.2017.html","text":"Lynx (September 2017) Change Summary Title Description LNAV added to package The LNAV 3rd-party utility for reading log files is now part of the CM-Well package. New script for ingesting multiple file infotons Using this script, you can recursively upload to CM-Well all files in the working directory and its descendant folders. See comments in CM-Well/server/cmwell-spa/utils/upload.sh to learn more. UI load time has been reduced See title Navigation by type This feature existed in the old UI, but has only now been added to the new UI. In each view, the types and counts of the results are displayed at the top of the view. Error code for invalid login credentials Attempting to login with invalid credentials now produces the 400 error (previously produced no reply). Enhanced robustness of the upgrade process The upgrade process robustness was improved in cases of errors in default UI injection. Cassandra version upgrade From 1.7.4 to 1.7.6 Changes to API None.","title":"Lynx (September 2017)"},{"location":"ReleaseNotes/2017/ReleaseNotes.Lynx.September.2017.html#lynx-september-2017","text":"","title":"Lynx (September 2017)"},{"location":"ReleaseNotes/2017/ReleaseNotes.Lynx.September.2017.html#change-summary","text":"Title Description LNAV added to package The LNAV 3rd-party utility for reading log files is now part of the CM-Well package. New script for ingesting multiple file infotons Using this script, you can recursively upload to CM-Well all files in the working directory and its descendant folders. See comments in CM-Well/server/cmwell-spa/utils/upload.sh to learn more. UI load time has been reduced See title Navigation by type This feature existed in the old UI, but has only now been added to the new UI. In each view, the types and counts of the results are displayed at the top of the view. Error code for invalid login credentials Attempting to login with invalid credentials now produces the 400 error (previously produced no reply). Enhanced robustness of the upgrade process The upgrade process robustness was improved in cases of errors in default UI injection. Cassandra version upgrade From 1.7.4 to 1.7.6","title":"Change Summary"},{"location":"ReleaseNotes/2017/ReleaseNotes.Lynx.September.2017.html#changes-to-api","text":"None.","title":"Changes to API"},{"location":"ReleaseNotes/2017/ReleaseNotes.Mono.November.2017.html","text":"Mono (November 2017) New gqp query flag | N/A | The new gqp flag has the same syntax as yg , but only filters the original result set rather than adding inbound/outbound links to it. See Traversing Outbound and Inbound Links ( xg , yg and gqp ) to learn more. Play 2.6 | 167 | Upgraded to Play version 2.6 Prevent deletion/purge of Root infoton | 193 | Do not allow any form of deletion or purge of the infoton that encapsulates the user information for the root user. Improvements to consumer | Several | Fixed several bugs that would occur in edge cases. Bug Fix | 233 | Improve Authorization Cache mechanism to prevent erroneous 403 errors. Bug Fix | 245 | After installing a new Elastic Search version, all ES statuses showed as RED, although all ES services were up and running. Changes to API New gqp flag. See Traversing Outbound and Inbound Links ( xg , yg and gqp ) to learn more.","title":"Mono (November 2017)"},{"location":"ReleaseNotes/2017/ReleaseNotes.Mono.November.2017.html#mono-november-2017","text":"New gqp query flag | N/A | The new gqp flag has the same syntax as yg , but only filters the original result set rather than adding inbound/outbound links to it. See Traversing Outbound and Inbound Links ( xg , yg and gqp ) to learn more. Play 2.6 | 167 | Upgraded to Play version 2.6 Prevent deletion/purge of Root infoton | 193 | Do not allow any form of deletion or purge of the infoton that encapsulates the user information for the root user. Improvements to consumer | Several | Fixed several bugs that would occur in edge cases. Bug Fix | 233 | Improve Authorization Cache mechanism to prevent erroneous 403 errors. Bug Fix | 245 | After installing a new Elastic Search version, all ES statuses showed as RED, although all ES services were up and running.","title":"Mono (November 2017)"},{"location":"ReleaseNotes/2017/ReleaseNotes.Mono.November.2017.html#changes-to-api","text":"New gqp flag. See Traversing Outbound and Inbound Links ( xg , yg and gqp ) to learn more.","title":"Changes to API"},{"location":"ReleaseNotes/2017/ReleaseNotes.Nautilus.November.2017.html","text":"Nautilus (November 2017) Change Summary Title Git Issue Description Play minor version upgrade 287 Play 3rd-party package upgraded to version 2.6.7 Integration test improvements 275 Integration test improvements qstream now supports length parameter 285 The qstream streaming operator now supports the length parameter, which is the maximum number of infotons you want to receive. Range filters now supported for xg / yg / gqp 297 Range filters ( , , , ) for field values are now supported for xg / yg / gqp queries. See Traversing Outbound and Inbound Links ( xg , yg and gqp ) . Bug fix: Removed unreliable missing data testing from _sp query 296 The _sp API used to compare indexed infoton numbers with stored infoton numbers. In some cases of duplicate infotons, this would return erroneous \"data missing\" errors. This test has been disabled. Bug fix: Hang in upgrade process 279 A health test for Elastic Search would fail and the upgrade process would hang, due to a badly formed curl command (with no -X parameter). Bug fix : Broken pagination links in Atom format 222 Pagination links in Atom-formatted results were broken because of redundant question marks. Changes to API qstream now takes the length parameter. Range filters now supported for xg / yg / gqp .","title":"Nautilus (November 2017)"},{"location":"ReleaseNotes/2017/ReleaseNotes.Nautilus.November.2017.html#nautilus-november-2017","text":"","title":"Nautilus (November 2017)"},{"location":"ReleaseNotes/2017/ReleaseNotes.Nautilus.November.2017.html#change-summary","text":"Title Git Issue Description Play minor version upgrade 287 Play 3rd-party package upgraded to version 2.6.7 Integration test improvements 275 Integration test improvements qstream now supports length parameter 285 The qstream streaming operator now supports the length parameter, which is the maximum number of infotons you want to receive. Range filters now supported for xg / yg / gqp 297 Range filters ( , , , ) for field values are now supported for xg / yg / gqp queries. See Traversing Outbound and Inbound Links ( xg , yg and gqp ) . Bug fix: Removed unreliable missing data testing from _sp query 296 The _sp API used to compare indexed infoton numbers with stored infoton numbers. In some cases of duplicate infotons, this would return erroneous \"data missing\" errors. This test has been disabled. Bug fix: Hang in upgrade process 279 A health test for Elastic Search would fail and the upgrade process would hang, due to a badly formed curl command (with no -X parameter). Bug fix : Broken pagination links in Atom format 222 Pagination links in Atom-formatted results were broken because of redundant question marks.","title":"Change Summary"},{"location":"ReleaseNotes/2017/ReleaseNotes.Nautilus.November.2017.html#changes-to-api","text":"qstream now takes the length parameter. Range filters now supported for xg / yg / gqp .","title":"Changes to API"},{"location":"ReleaseNotes/2017/ReleaseNotes.Octopus.December.2017.html","text":"Octopus (December 2017) Title Git Issue Description Upgrade SBT (Scala/Java build tool) to 0.13.16 and Scala to 2.11.12 302 See title Support 2 private key values for authentication 304 The CM-Well TR production environment now supports both legacy and new JWT authentication keys. Both keys are tested for during authentication. Improve authorization cache 319 The authorization module occasionally produced false 403 errors. Authorization data is now stored in a simple in-memory map, and other improvements to robustness were made. There is no change to authorization APIs. DC-Sync only for current data is now possible 323 The DC-Sync feature enables synchronization of data across data centers. Adding \"with-history\": false to the DC-Sync configuration JSON causes the replication to apply only to current versions of all infotons, while historical versions are ignored. Changes to SPARQL Trigger Processor configuration N/A Use X-CM-WELL-TOKEN header for authentication; configuration file path changed; start/stop flag no longer created automatically. See Using the SPARQL Trigger Processor for more details. Bug fix: Enable running ws/console code from the SBT console 308 Previously there was a bug when trying to run ws/console code in Scala REPL mode. The related bug in configuration files was fixed. Bug fix: Bug invoking a CM-Well host without the schema 315 Previously if you tried invoking a CM-Well host without the schema (e.g. \"localhost:9000\" rather than \"http://localhost:9000\"), this caused an exception. Now fixed. Changes to API Changes to SPARQL Trigger Processor configuration. See Using the SPARQL Trigger Processor for more details.","title":"Octopus (December 2017)"},{"location":"ReleaseNotes/2017/ReleaseNotes.Octopus.December.2017.html#octopus-december-2017","text":"Title Git Issue Description Upgrade SBT (Scala/Java build tool) to 0.13.16 and Scala to 2.11.12 302 See title Support 2 private key values for authentication 304 The CM-Well TR production environment now supports both legacy and new JWT authentication keys. Both keys are tested for during authentication. Improve authorization cache 319 The authorization module occasionally produced false 403 errors. Authorization data is now stored in a simple in-memory map, and other improvements to robustness were made. There is no change to authorization APIs. DC-Sync only for current data is now possible 323 The DC-Sync feature enables synchronization of data across data centers. Adding \"with-history\": false to the DC-Sync configuration JSON causes the replication to apply only to current versions of all infotons, while historical versions are ignored. Changes to SPARQL Trigger Processor configuration N/A Use X-CM-WELL-TOKEN header for authentication; configuration file path changed; start/stop flag no longer created automatically. See Using the SPARQL Trigger Processor for more details. Bug fix: Enable running ws/console code from the SBT console 308 Previously there was a bug when trying to run ws/console code in Scala REPL mode. The related bug in configuration files was fixed. Bug fix: Bug invoking a CM-Well host without the schema 315 Previously if you tried invoking a CM-Well host without the schema (e.g. \"localhost:9000\" rather than \"http://localhost:9000\"), this caused an exception. Now fixed.","title":"Octopus (December 2017)"},{"location":"ReleaseNotes/2017/ReleaseNotes.Octopus.December.2017.html#changes-to-api","text":"Changes to SPARQL Trigger Processor configuration. See Using the SPARQL Trigger Processor for more details.","title":"Changes to API"},{"location":"ReleaseNotes/2018/ReleaseNotes.Piranha.January.2018.html","text":"Piranha (January 2018) Change Summary Title Git Issue Description Scala upgrade to 2.12.4 218 Scala package upgraded to 2.12.4 Added control mechanism to bulk-consume / sstream to limit parallel processing of ES indices 337 The sstream operation (which is used by bulk-consume ) performs parallel processing of several Elastic Search indices. When the parallelism was unlimited, this could cause performance issues. A mechanism has been added to allow limiting the number of parallel processing threads. Improve DC-Sync robustness by ignoring indexTime errors 339 Cases of faulty data, such that the indexTime value of an infoton in Cassandra is significantly different from the indexTime as it appears in Elastic Search, could cause gaps in the Data Center Synchronization (DC-Sync) operation. Now such faulty cases are written to an error log and skipped by the sync process. New use_auth environment variable 134 A new Boolean use_auth environment variable is now exposed under the proc/node folder. When its value is TRUE, this means that the CM-Well cluster is write-protected, and authorization is required to write to it. Display of historical infoton versions is now supported in the new UI 244 Several bugs were fixed in the /ii/\\ uuid> API that displays historical infoton versions in the new UI. Performance boost to DC-Sync 140 All DC-Sync requests and responses are now compressed in order to boost performance. Log improvements Several Noisy log messages were cleaned up, and more informative messages were added in several cases of runtime errors/warnings. Bug fix: Don't allow writing to deleted infotons 358 Previously, it was possible to update deleted infotons. An attempt to do this will now fail. Bug fix: Lost iterator chunks 328 A bug was fixed in the next-chunk operator, which could cause chunks to be lost in some cases. Changes to API None.","title":"Piranha (January 2018)"},{"location":"ReleaseNotes/2018/ReleaseNotes.Piranha.January.2018.html#piranha-january-2018","text":"","title":"Piranha (January 2018)"},{"location":"ReleaseNotes/2018/ReleaseNotes.Piranha.January.2018.html#change-summary","text":"Title Git Issue Description Scala upgrade to 2.12.4 218 Scala package upgraded to 2.12.4 Added control mechanism to bulk-consume / sstream to limit parallel processing of ES indices 337 The sstream operation (which is used by bulk-consume ) performs parallel processing of several Elastic Search indices. When the parallelism was unlimited, this could cause performance issues. A mechanism has been added to allow limiting the number of parallel processing threads. Improve DC-Sync robustness by ignoring indexTime errors 339 Cases of faulty data, such that the indexTime value of an infoton in Cassandra is significantly different from the indexTime as it appears in Elastic Search, could cause gaps in the Data Center Synchronization (DC-Sync) operation. Now such faulty cases are written to an error log and skipped by the sync process. New use_auth environment variable 134 A new Boolean use_auth environment variable is now exposed under the proc/node folder. When its value is TRUE, this means that the CM-Well cluster is write-protected, and authorization is required to write to it. Display of historical infoton versions is now supported in the new UI 244 Several bugs were fixed in the /ii/\\ uuid> API that displays historical infoton versions in the new UI. Performance boost to DC-Sync 140 All DC-Sync requests and responses are now compressed in order to boost performance. Log improvements Several Noisy log messages were cleaned up, and more informative messages were added in several cases of runtime errors/warnings. Bug fix: Don't allow writing to deleted infotons 358 Previously, it was possible to update deleted infotons. An attempt to do this will now fail. Bug fix: Lost iterator chunks 328 A bug was fixed in the next-chunk operator, which could cause chunks to be lost in some cases.","title":"Change Summary"},{"location":"ReleaseNotes/2018/ReleaseNotes.Piranha.January.2018.html#changes-to-api","text":"None.","title":"Changes to API"},{"location":"ReleaseNotes/2018/ReleaseNotes.Quetzal.February.2018.html","text":"Quetzal (February 2018) Change Summary Title Git Issue Description New parallelism query parameter for sstream bulk-consume 338 Allows controlling the number of parallel processing threads during streaming. Default is 10. Play upgrade 402 Play minor version upgrade from 2.6.7 to 2.6.11 Akka upgrade 402 Akka libraries minor version upgrade from 2.5.6 to 2.5.9 Full-text search improvements 414 Infrastructure for improving FTS performance. Solves some cases of timeouts in Elastic Search client layer. The SPARQL Trigger Processor Engine now uses consume rather than bulk-consume 427 This improves STP's robustness. New fields in STP Dashboard 454 See /proc/stp.md to view the dashboard, and see Using the SPARQL Trigger Processor to learn more about the details displayed. Activated cluster sniffing for Elastic Search clients 448 Previously full-text search might fail if the default ES instance didn't respond. Now the client will look for alternative ES instances. Optional source configuration for STP 480 Previously materialized views created by the SPARQL Trigger Processor were always from and to the same environment. This is still the default, but you can now specify a different source environment, using the host-updates-source parameter. Bug fix : searching for content and link fields 399 Fixed bug that prevented for searching for content and link metadata fields in file and link infotons respectively Bug fix : Cassandra status in health dashboard 411 The health dashboard failed to report Cassandra status in some cases Bug fix : STP sensors were written to the wrong folder 386 Didn't affect sensor operation, only the sensor file storage path. Bug fix : health-detailed dashboard showed wrong metrics for Kafka partition status 449 Showed the status of the (irrelevant) batch process rather than the bg process Changes to API New parallelism query parameter for sstream and bulk-consume . New hostUpdatesSource parameter in SPARQL Trigger Processor configuration. Known Issues Queries on values of all fields, using the _all wildcard, currently do not work. To be fixed.","title":"Quetzal (February 2018)"},{"location":"ReleaseNotes/2018/ReleaseNotes.Quetzal.February.2018.html#quetzal-february-2018","text":"","title":"Quetzal (February 2018)"},{"location":"ReleaseNotes/2018/ReleaseNotes.Quetzal.February.2018.html#change-summary","text":"Title Git Issue Description New parallelism query parameter for sstream bulk-consume 338 Allows controlling the number of parallel processing threads during streaming. Default is 10. Play upgrade 402 Play minor version upgrade from 2.6.7 to 2.6.11 Akka upgrade 402 Akka libraries minor version upgrade from 2.5.6 to 2.5.9 Full-text search improvements 414 Infrastructure for improving FTS performance. Solves some cases of timeouts in Elastic Search client layer. The SPARQL Trigger Processor Engine now uses consume rather than bulk-consume 427 This improves STP's robustness. New fields in STP Dashboard 454 See /proc/stp.md to view the dashboard, and see Using the SPARQL Trigger Processor to learn more about the details displayed. Activated cluster sniffing for Elastic Search clients 448 Previously full-text search might fail if the default ES instance didn't respond. Now the client will look for alternative ES instances. Optional source configuration for STP 480 Previously materialized views created by the SPARQL Trigger Processor were always from and to the same environment. This is still the default, but you can now specify a different source environment, using the host-updates-source parameter. Bug fix : searching for content and link fields 399 Fixed bug that prevented for searching for content and link metadata fields in file and link infotons respectively Bug fix : Cassandra status in health dashboard 411 The health dashboard failed to report Cassandra status in some cases Bug fix : STP sensors were written to the wrong folder 386 Didn't affect sensor operation, only the sensor file storage path. Bug fix : health-detailed dashboard showed wrong metrics for Kafka partition status 449 Showed the status of the (irrelevant) batch process rather than the bg process","title":"Change Summary"},{"location":"ReleaseNotes/2018/ReleaseNotes.Quetzal.February.2018.html#changes-to-api","text":"New parallelism query parameter for sstream and bulk-consume . New hostUpdatesSource parameter in SPARQL Trigger Processor configuration.","title":"Changes to API"},{"location":"ReleaseNotes/2018/ReleaseNotes.Quetzal.February.2018.html#known-issues","text":"Queries on values of all fields, using the _all wildcard, currently do not work. To be fixed.","title":"Known Issues"},{"location":"ReleaseNotes/2018/ReleaseNotes.Rhino.March.2018.html","text":"Rhino (March 2018) Change Summary Title Git Issue Description Preventing namespace prefix ambiguity 538 If an ingested field name has a namespace prefix (e.g. \"common\") that is already found in an existing namespace, the new prefix will be concatenated with its hash before being saved. This prevents the ambiguity that would arise if two namespaces had the same prefix. For developers: More descriptive error messages for 400 Bad Request on _ow endpoint 412 See title. STP Dashboard: Display processing point-in-time per sensor 458 The SPARQL Trigger Processor (STP) Dashboard now displays for each sensor the update time of the input infotons that it's currently processing. If a sensor has reached its processing \"horizon\" (i.e. it has processed all relevant infotons), instead of a time value, the string \"Horizon\" is displayed. STP Dashboard: Display source value 443 The STP Dashboard now displays the configured source data center, i.e. the data center from which infotons are taken in order to create a materialized view. Bug fix: STP Dashboard rate calculations 450 A bug was fixed regarding calculation of the rate of producing materialized views. Bug fix: STP Dashboard statistics 500 A bug was fixed regarding calculation of STP statistics. Bug fix: STP Dashboard, erroneous data displayed in point-in-time field 451 See title. Bug fix: yg / xg filters for outbound links of non-string fields 529 Previously, yg / xg graph traversal would fail for any filter applied to non-string fields. Bug fix: Ingest of typed empty literal would fail 544 See title. Bug fix: Memory leak in Iterator API 550 A memory leak in the Iterator API would cause the CM-Well Web Service component to reset frequently. Changes to API None. Known Issues Queries on values of all fields, using the _all wildcard, currently do not work. To be fixed. If the Web Service instance that the STP Agent is working with restarts, all STP Dashboard Statistics will be reset.","title":"Rhino (March 2018)"},{"location":"ReleaseNotes/2018/ReleaseNotes.Rhino.March.2018.html#rhino-march-2018","text":"","title":"Rhino (March 2018)"},{"location":"ReleaseNotes/2018/ReleaseNotes.Rhino.March.2018.html#change-summary","text":"Title Git Issue Description Preventing namespace prefix ambiguity 538 If an ingested field name has a namespace prefix (e.g. \"common\") that is already found in an existing namespace, the new prefix will be concatenated with its hash before being saved. This prevents the ambiguity that would arise if two namespaces had the same prefix. For developers: More descriptive error messages for 400 Bad Request on _ow endpoint 412 See title. STP Dashboard: Display processing point-in-time per sensor 458 The SPARQL Trigger Processor (STP) Dashboard now displays for each sensor the update time of the input infotons that it's currently processing. If a sensor has reached its processing \"horizon\" (i.e. it has processed all relevant infotons), instead of a time value, the string \"Horizon\" is displayed. STP Dashboard: Display source value 443 The STP Dashboard now displays the configured source data center, i.e. the data center from which infotons are taken in order to create a materialized view. Bug fix: STP Dashboard rate calculations 450 A bug was fixed regarding calculation of the rate of producing materialized views. Bug fix: STP Dashboard statistics 500 A bug was fixed regarding calculation of STP statistics. Bug fix: STP Dashboard, erroneous data displayed in point-in-time field 451 See title. Bug fix: yg / xg filters for outbound links of non-string fields 529 Previously, yg / xg graph traversal would fail for any filter applied to non-string fields. Bug fix: Ingest of typed empty literal would fail 544 See title. Bug fix: Memory leak in Iterator API 550 A memory leak in the Iterator API would cause the CM-Well Web Service component to reset frequently.","title":"Change Summary"},{"location":"ReleaseNotes/2018/ReleaseNotes.Rhino.March.2018.html#changes-to-api","text":"None.","title":"Changes to API"},{"location":"ReleaseNotes/2018/ReleaseNotes.Rhino.March.2018.html#known-issues","text":"Queries on values of all fields, using the _all wildcard, currently do not work. To be fixed. If the Web Service instance that the STP Agent is working with restarts, all STP Dashboard Statistics will be reset.","title":"Known Issues"},{"location":"ReleaseNotes/2018/ReleaseNotes.Swan.April.2018.html","text":"Swan (April 2018) Change Summary Title Git Issue Description SPARQL Trigger Processor (STP): \"Bad data\" logging 613 New log message produced by the STP agent, in case an attempt is made to upload invalid data. STP: Limit retries in case of a failure to retrieve data. 624 , 616 Limit the number of retries in case of a failure to retrieve data, so that the STP doesn't enter an endless loop. Modify JVM arguments to avoid lack of disk space problem 615 Occasionally, some process core dumps were written to their working directories, causing the disk to fill to capacity. Now written to larger data disks. SBT version update 623 SBT version updated to 1.1.4. Bug fix: Correct display of non-English characters in CM-Well web UI 627 Added charset=utf8 when a textual format is requested, so that non-English characters are displayed correctly. Changes to API None.","title":"Swan (April 2018)"},{"location":"ReleaseNotes/2018/ReleaseNotes.Swan.April.2018.html#swan-april-2018","text":"","title":"Swan (April 2018)"},{"location":"ReleaseNotes/2018/ReleaseNotes.Swan.April.2018.html#change-summary","text":"Title Git Issue Description SPARQL Trigger Processor (STP): \"Bad data\" logging 613 New log message produced by the STP agent, in case an attempt is made to upload invalid data. STP: Limit retries in case of a failure to retrieve data. 624 , 616 Limit the number of retries in case of a failure to retrieve data, so that the STP doesn't enter an endless loop. Modify JVM arguments to avoid lack of disk space problem 615 Occasionally, some process core dumps were written to their working directories, causing the disk to fill to capacity. Now written to larger data disks. SBT version update 623 SBT version updated to 1.1.4. Bug fix: Correct display of non-English characters in CM-Well web UI 627 Added charset=utf8 when a textual format is requested, so that non-English characters are displayed correctly.","title":"Change Summary"},{"location":"ReleaseNotes/2018/ReleaseNotes.Swan.April.2018.html#changes-to-api","text":"None.","title":"Changes to API"},{"location":"ReleaseNotes/2018/ReleaseNotes.Turtle.May.2018.html","text":"Turtle (May 2018) Change Summary Title Git Issue Description SPARQL Trigger Processor (STP) performance improvements 640 The values of the arguments for Consume and Bulk Consume (called by the STP) were fine-tuned. Should result in a major performance boost. STP: New sp.path parameter 652 A new sp.path parameter is supported for the _sp endpoint, allowing the currently processed path to be used in SPARQL queries. See more details below. New health view showing Elastic Search thread pool info 643 Usage: GET /health/es_thread_pool . (The result is equivalent to querying the internal ES cluster that CM-Well is using with /_cat/thread_pool?v ). This view shows the state of threads processing search and indexing requests to ES. Improvements to robustness of the BG process 651 Each Background (BG) Process can now host 0 to 3 BG Actors, rather than 1. Each BG Actor is in charge of one Partition, as before. If one BG Process crashes (e.g. due to a physical node failure), another BG Process automatically takes the lead on those Partitions. Bug fix: Fixed operation of _all field indicator 656 The qp=_all: value usage to indicate a search in all fields didn't work; now fixed. (Also affected searches in the CM-Well UI.) Bug fix: Font size in UI search box 659 In the CM-Well UI, the search box's font was slightly larger than the font in the \u201csearch where\u201d drop down. Now they are the same size. Git Issue #652: New sp.path parameter for _sp endpoint When the STP invokes the _sp endpoint, it previously provided only the sp.pid value. It now provides an sp.path value as well. Note that _sp supports parameter placeholders in SPARQL queries, and replaces any instance of %VARIABLE% in the post body with the value of sp.variable in the query parameters. The new feature enables you to use the currently processed path in SPARQL queries. The PID and path parameters have the following values: For a given path P, the sp.pid value contains the substring following the last dash in P. The sp.path contains the substring following the last slash in P. For example, if the STP is currently processing the path /example.org/123-xyz , the invocation to _sp will include /_sp?sp.pid=xyz sp.path=123-xyz . Changes to API New sp.path parameter for _sp endpoint.","title":"Turtle (May 2018)"},{"location":"ReleaseNotes/2018/ReleaseNotes.Turtle.May.2018.html#turtle-may-2018","text":"","title":"Turtle (May 2018)"},{"location":"ReleaseNotes/2018/ReleaseNotes.Turtle.May.2018.html#change-summary","text":"Title Git Issue Description SPARQL Trigger Processor (STP) performance improvements 640 The values of the arguments for Consume and Bulk Consume (called by the STP) were fine-tuned. Should result in a major performance boost. STP: New sp.path parameter 652 A new sp.path parameter is supported for the _sp endpoint, allowing the currently processed path to be used in SPARQL queries. See more details below. New health view showing Elastic Search thread pool info 643 Usage: GET /health/es_thread_pool . (The result is equivalent to querying the internal ES cluster that CM-Well is using with /_cat/thread_pool?v ). This view shows the state of threads processing search and indexing requests to ES. Improvements to robustness of the BG process 651 Each Background (BG) Process can now host 0 to 3 BG Actors, rather than 1. Each BG Actor is in charge of one Partition, as before. If one BG Process crashes (e.g. due to a physical node failure), another BG Process automatically takes the lead on those Partitions. Bug fix: Fixed operation of _all field indicator 656 The qp=_all: value usage to indicate a search in all fields didn't work; now fixed. (Also affected searches in the CM-Well UI.) Bug fix: Font size in UI search box 659 In the CM-Well UI, the search box's font was slightly larger than the font in the \u201csearch where\u201d drop down. Now they are the same size.","title":"Change Summary"},{"location":"ReleaseNotes/2018/ReleaseNotes.Turtle.May.2018.html#git-issue-652-new-sppath-parameter-for-_sp-endpoint","text":"When the STP invokes the _sp endpoint, it previously provided only the sp.pid value. It now provides an sp.path value as well. Note that _sp supports parameter placeholders in SPARQL queries, and replaces any instance of %VARIABLE% in the post body with the value of sp.variable in the query parameters. The new feature enables you to use the currently processed path in SPARQL queries. The PID and path parameters have the following values: For a given path P, the sp.pid value contains the substring following the last dash in P. The sp.path contains the substring following the last slash in P. For example, if the STP is currently processing the path /example.org/123-xyz , the invocation to _sp will include /_sp?sp.pid=xyz sp.path=123-xyz .","title":"Git Issue #652: New sp.path parameter for _sp endpoint"},{"location":"ReleaseNotes/2018/ReleaseNotes.Turtle.May.2018.html#changes-to-api","text":"New sp.path parameter for _sp endpoint.","title":"Changes to API"},{"location":"ReleaseNotes/2018/ReleaseNotes.Unicorn.June.2018.html","text":"Unicorn (June 2018) Change Summary Title Git Issue Description STP input queue count 691 In the SPARQL Trigger Processor dashboard, we now show the number of infotons waiting in the queue to be materialized. STP persistent sensor parameters 692 STP sensor position token and statistics are now stored per sensor in Cassandra, to enable a robust restart from the same place in case of fault. STP fine tuning of consumption parameters 697 Results in better control of consumption process. Bug Fix: Fixed problem with JAVA_HOME setting when installing on AWS 704 When installing CM-Well on Amazon Web Services (AWS), this bug required that the JAVA_HOME value be configured manually instead of automatically as part of installation. Improvement in CM-Well integration tests 706 Performance improvements to CM-Well integration tests. Changes to API None","title":"Unicorn (June 2018)"},{"location":"ReleaseNotes/2018/ReleaseNotes.Unicorn.June.2018.html#unicorn-june-2018","text":"","title":"Unicorn (June 2018)"},{"location":"ReleaseNotes/2018/ReleaseNotes.Unicorn.June.2018.html#change-summary","text":"Title Git Issue Description STP input queue count 691 In the SPARQL Trigger Processor dashboard, we now show the number of infotons waiting in the queue to be materialized. STP persistent sensor parameters 692 STP sensor position token and statistics are now stored per sensor in Cassandra, to enable a robust restart from the same place in case of fault. STP fine tuning of consumption parameters 697 Results in better control of consumption process. Bug Fix: Fixed problem with JAVA_HOME setting when installing on AWS 704 When installing CM-Well on Amazon Web Services (AWS), this bug required that the JAVA_HOME value be configured manually instead of automatically as part of installation. Improvement in CM-Well integration tests 706 Performance improvements to CM-Well integration tests.","title":"Change Summary"},{"location":"ReleaseNotes/2018/ReleaseNotes.Unicorn.June.2018.html#changes-to-api","text":"None","title":"Changes to API"},{"location":"ReleaseNotes/2018/ReleaseNotes.Viper.June.2018.html","text":"Viper (June 2018) Change Summary Title Git Issue Description Data Consistency Crawler (DCC) 736 A new module was added to the BG process. DCC checks for data consistency of infoton versions. Still in development; first phase will only test for and log inconsistencies without handling them. New _kafka API 743 The new _kafka API allows you to consume a Kafka queue via HTTP. Requires an Admin token for consuming system queues. (Enables the new DCC feature.) SBT version upgrade 748 From 1.1.4 to 1.1.5 New values for _backpressure API 742 Rather than new\\old\\off\\bar values for the _backpressure API, there are now enable\\disable\\block values. STP performance improvement 738 STP: adjusted fetch size for better performance. STP Connection Pool 747 Create a limited pool of connections to CM-Well that all STP sensors use. This limits the number of concurrent STP requests, thus preventing the STP from flooding CM-Well with requests. Changes to API New values for _backpressure Admin API New _kafka Admin API","title":"Viper (June 2018)"},{"location":"ReleaseNotes/2018/ReleaseNotes.Viper.June.2018.html#viper-june-2018","text":"","title":"Viper (June 2018)"},{"location":"ReleaseNotes/2018/ReleaseNotes.Viper.June.2018.html#change-summary","text":"Title Git Issue Description Data Consistency Crawler (DCC) 736 A new module was added to the BG process. DCC checks for data consistency of infoton versions. Still in development; first phase will only test for and log inconsistencies without handling them. New _kafka API 743 The new _kafka API allows you to consume a Kafka queue via HTTP. Requires an Admin token for consuming system queues. (Enables the new DCC feature.) SBT version upgrade 748 From 1.1.4 to 1.1.5 New values for _backpressure API 742 Rather than new\\old\\off\\bar values for the _backpressure API, there are now enable\\disable\\block values. STP performance improvement 738 STP: adjusted fetch size for better performance. STP Connection Pool 747 Create a limited pool of connections to CM-Well that all STP sensors use. This limits the number of concurrent STP requests, thus preventing the STP from flooding CM-Well with requests.","title":"Change Summary"},{"location":"ReleaseNotes/2018/ReleaseNotes.Viper.June.2018.html#changes-to-api","text":"New values for _backpressure Admin API New _kafka Admin API","title":"Changes to API"},{"location":"ReleaseNotes/2018/ReleaseNotes.Wombat.August.2018.html","text":"Wombat (August 2018) Features and Upgrades Title Git Issue Description Java version upgrade 821 Upgraded Java8 version to 172 SBT version upgrade 748 Upgraded SBT to version to 1.1.5 Scala version upgrade 806 Scala version upgraded from 2.12.5 to 2.12.6 HTTPS prefix not saved in subject path 857 Previously the http prefix in an infoton subject's path was dropped (e.g. http://example.org/abc to /example.org/abc ), while https was retained in the path (e.g. http://example.org/abc to https.example.org/abc ). Now the https prefix is omitted as well. New release info file in CM-Well install package 827 A new cmwell.properties file is now included in the CM-Well installation package. It contains the CM-Well release name and version, and the last Git commit ID added to the release. Example: {\"git_commit_version\": \"90a2e179a6b46351a0cab18e45000aad3c0d35c4\", \"cm-well_release\": \"Viper\", \"cm-well_version\": \"1.5.x-SNAPSHOT\"} Minor change to Health Dashboard 796 When a Cassandra node's status is Red, the relevant text will be in red bold font. Data Consistency Crawler (DCC) now detects duplicate infotons 863 DCC now detects situations where an Infoton has more than one version in ElasticSearch with the current=true property. DCC performance improvement 752 When fetching system fields for comparison, DCC now ignores the payload of FileInfotons (which is a system field). This improves runtime and lowers system stress. DCC Detection Parallelism is now configurable 780 The configuration key cmwell.crawler.checkParallelism was added. Default value is 1. This controls the DCC's level of parallel processing. Data Consistency Tools added to code repository 817 This is a set of tools that utlilizes SPARK to check consistency of Infotons in a CM-Well Cluster. Calculate total agent runtime 814 The total time an STP agent has been running for as well as the current uptime are now viewable in proc/stp.md . Search by POST documentation added 866 This feature enables using the request body to pass all search terms and parameters. Good for long queries that can't be passed in the URL. See Syntax 2 in Query for Infotons Using Field Conditions to learn more. Bug Fixes Title Git Issue Description Search by POST bug 843 Invoking a Search query with the POST verb didn't work on the root path. Recovery from crash in DCC streaming 762 The Data Consistency Crawler (DCC) is now robust when it crashes while streaming. False positive for new Infotons 787 Fixed false positive for new Infotons. DCC crash for malformed history data 766 Previously the DCC would crash if history data was malformed. Large file infotons duplicated 778 Previously file infotons larger than 512KB would be duplicated. Don't force version=1 when updating ElasticSearch 773 Previously, we always forced version-1 when writing to ES. This caused duplicates in some cases, e.g. when x-fix was used on the relevant path. BG created duplicates after a crash 801 When the BG process crashes, it restarts and may replay ingest commands that were already processed. This sometimes led to duplicate infotons. Now fixed by introducing Recovery Mode: when the BG process starts, it keeps the oldest existing Kafka offset. Until hitting that offset, it processes commands carefully, while not allowing duplicates to be created. STP token time not always saved 836 The token time was not always saved for the Sparql Triggered Processor. Would cause an empty sensor row to be displayed in CM-Well Health UI. Changes to API None.","title":"Wombat (August 2018)"},{"location":"ReleaseNotes/2018/ReleaseNotes.Wombat.August.2018.html#wombat-august-2018","text":"","title":"Wombat (August 2018)"},{"location":"ReleaseNotes/2018/ReleaseNotes.Wombat.August.2018.html#features-and-upgrades","text":"Title Git Issue Description Java version upgrade 821 Upgraded Java8 version to 172 SBT version upgrade 748 Upgraded SBT to version to 1.1.5 Scala version upgrade 806 Scala version upgraded from 2.12.5 to 2.12.6 HTTPS prefix not saved in subject path 857 Previously the http prefix in an infoton subject's path was dropped (e.g. http://example.org/abc to /example.org/abc ), while https was retained in the path (e.g. http://example.org/abc to https.example.org/abc ). Now the https prefix is omitted as well. New release info file in CM-Well install package 827 A new cmwell.properties file is now included in the CM-Well installation package. It contains the CM-Well release name and version, and the last Git commit ID added to the release. Example: {\"git_commit_version\": \"90a2e179a6b46351a0cab18e45000aad3c0d35c4\", \"cm-well_release\": \"Viper\", \"cm-well_version\": \"1.5.x-SNAPSHOT\"} Minor change to Health Dashboard 796 When a Cassandra node's status is Red, the relevant text will be in red bold font. Data Consistency Crawler (DCC) now detects duplicate infotons 863 DCC now detects situations where an Infoton has more than one version in ElasticSearch with the current=true property. DCC performance improvement 752 When fetching system fields for comparison, DCC now ignores the payload of FileInfotons (which is a system field). This improves runtime and lowers system stress. DCC Detection Parallelism is now configurable 780 The configuration key cmwell.crawler.checkParallelism was added. Default value is 1. This controls the DCC's level of parallel processing. Data Consistency Tools added to code repository 817 This is a set of tools that utlilizes SPARK to check consistency of Infotons in a CM-Well Cluster. Calculate total agent runtime 814 The total time an STP agent has been running for as well as the current uptime are now viewable in proc/stp.md . Search by POST documentation added 866 This feature enables using the request body to pass all search terms and parameters. Good for long queries that can't be passed in the URL. See Syntax 2 in Query for Infotons Using Field Conditions to learn more.","title":"Features and Upgrades"},{"location":"ReleaseNotes/2018/ReleaseNotes.Wombat.August.2018.html#bug-fixes","text":"Title Git Issue Description Search by POST bug 843 Invoking a Search query with the POST verb didn't work on the root path. Recovery from crash in DCC streaming 762 The Data Consistency Crawler (DCC) is now robust when it crashes while streaming. False positive for new Infotons 787 Fixed false positive for new Infotons. DCC crash for malformed history data 766 Previously the DCC would crash if history data was malformed. Large file infotons duplicated 778 Previously file infotons larger than 512KB would be duplicated. Don't force version=1 when updating ElasticSearch 773 Previously, we always forced version-1 when writing to ES. This caused duplicates in some cases, e.g. when x-fix was used on the relevant path. BG created duplicates after a crash 801 When the BG process crashes, it restarts and may replay ingest commands that were already processed. This sometimes led to duplicate infotons. Now fixed by introducing Recovery Mode: when the BG process starts, it keeps the oldest existing Kafka offset. Until hitting that offset, it processes commands carefully, while not allowing duplicates to be created. STP token time not always saved 836 The token time was not always saved for the Sparql Triggered Processor. Would cause an empty sensor row to be displayed in CM-Well Health UI.","title":"Bug Fixes"},{"location":"ReleaseNotes/2018/ReleaseNotes.Wombat.August.2018.html#changes-to-api","text":"None.","title":"Changes to API"},{"location":"ReleaseNotes/2018/ReleaseNotes.Xerus.October.2018.html","text":"Xerus (October 2018) Title Git Issue Description New GitHub release page N/A There is now a formal CM-Well release page on GitHub . Set # of ES shards to 10 870 Set the number of ElasticSearch shards to 10 for new installations. Change Cassandra strategy to NetworkTopologyStrategy 871 This changes makes Cassandra aware of the physical machine topology, and prevents it from saving replicas of the same data in the same physical machine (which is a bad practice for data redundancy). SBT build of CM-Well now produces a meaningful version label 878 The version label now includes the Git tag. Support versioning in SBT build 897 SBT is now aware of the specific CM-Well build version. This allows performing customized actions during upgrades, according to the version. Custom upgrade actions per version 914 In the CM-Well installation package, support custom upgrade actions according to the specific version. Support multiple parameters in the sparqlToRoot query 940 The sparqlToRoot query in the STP sensor definition, which is run on the data that is input to the sparqlMaterializer command, can now query several parameters. Previously it could only query the orgId paramter. See Using the SPARQL Trigger Processor for more details. Bug Fixes Many of the bug fixes in this release are related to the CM-Well Data Consistency Crawler (DCC). This is a background service that \"crawls\" the recently written infotons and fixes data inconsistencies. It traverses the infoton that are stored for a certain period of time in a Kafka queue. Several bugs were fixed that were related to DCC false positives, i.e. infotons identified as inconsistent which actually weren't. Title Git Issue Description Kafka queue retention time enlarged to 1 week 895 The Kafka queue storing updated infotons now stores them for 1 week instead of 24 hours. This prevents an issue of updates being deleted from the queue before the DCC can test them. DCC false positive for null updates 883 DCC would falsely identify an infoton as changed when in fact it was a null update (an update where no field values have changed). DCC false positive if CAS version updated before ES 888 If the DCC tested a new infoton that was updated in Cassandra but not in ElasticSearch yet, it would identify a false positive. DCC false positive for deleted infotons 900 Deletion of a non-existent infoton caused a false positive. DCC false positive for 1ms difference in update time 908 , 910 This is caused by an \"artificial\" update time that addresses the problem of two writes of the same path having reverse order in the Kafka queue. In order to solve this issue, BG adds 1ms to the time written by the WS and writes it to CAS and to ES. This case was previously identified as a data inconsistency, but should not be. DCC false positive due to \"quorum of 1\" 919 , 921 The CAS reads performed by DCC only required a \"quorum of 1\" (out of the 3 replicas). This could lead to false positives. Cassandra Monitor parse error for \"?\" result 916 If the Cassandra Monitoring service received a DN status of \"?\", this would cause an exception. Graph traversal APIs modified to support https links 924 The xg / yg / gqp APIs did not work for links with the https protocol. Installation failure if another service was listening on port 9000 906 During CM-Well installation, the installer checks to see if the CM-Well Web Service is listening on port 9000. If a different service was listening on port 9000, the installer incorrectly assumed that the WS was installed and working, and proceeded with the installation. This caused the upload of the initial data to fail, and the whole system was not usable. Changes to API None.","title":"Xerus (October 2018)"},{"location":"ReleaseNotes/2018/ReleaseNotes.Xerus.October.2018.html#xerus-october-2018","text":"Title Git Issue Description New GitHub release page N/A There is now a formal CM-Well release page on GitHub . Set # of ES shards to 10 870 Set the number of ElasticSearch shards to 10 for new installations. Change Cassandra strategy to NetworkTopologyStrategy 871 This changes makes Cassandra aware of the physical machine topology, and prevents it from saving replicas of the same data in the same physical machine (which is a bad practice for data redundancy). SBT build of CM-Well now produces a meaningful version label 878 The version label now includes the Git tag. Support versioning in SBT build 897 SBT is now aware of the specific CM-Well build version. This allows performing customized actions during upgrades, according to the version. Custom upgrade actions per version 914 In the CM-Well installation package, support custom upgrade actions according to the specific version. Support multiple parameters in the sparqlToRoot query 940 The sparqlToRoot query in the STP sensor definition, which is run on the data that is input to the sparqlMaterializer command, can now query several parameters. Previously it could only query the orgId paramter. See Using the SPARQL Trigger Processor for more details.","title":"Xerus (October 2018)"},{"location":"ReleaseNotes/2018/ReleaseNotes.Xerus.October.2018.html#bug-fixes","text":"Many of the bug fixes in this release are related to the CM-Well Data Consistency Crawler (DCC). This is a background service that \"crawls\" the recently written infotons and fixes data inconsistencies. It traverses the infoton that are stored for a certain period of time in a Kafka queue. Several bugs were fixed that were related to DCC false positives, i.e. infotons identified as inconsistent which actually weren't. Title Git Issue Description Kafka queue retention time enlarged to 1 week 895 The Kafka queue storing updated infotons now stores them for 1 week instead of 24 hours. This prevents an issue of updates being deleted from the queue before the DCC can test them. DCC false positive for null updates 883 DCC would falsely identify an infoton as changed when in fact it was a null update (an update where no field values have changed). DCC false positive if CAS version updated before ES 888 If the DCC tested a new infoton that was updated in Cassandra but not in ElasticSearch yet, it would identify a false positive. DCC false positive for deleted infotons 900 Deletion of a non-existent infoton caused a false positive. DCC false positive for 1ms difference in update time 908 , 910 This is caused by an \"artificial\" update time that addresses the problem of two writes of the same path having reverse order in the Kafka queue. In order to solve this issue, BG adds 1ms to the time written by the WS and writes it to CAS and to ES. This case was previously identified as a data inconsistency, but should not be. DCC false positive due to \"quorum of 1\" 919 , 921 The CAS reads performed by DCC only required a \"quorum of 1\" (out of the 3 replicas). This could lead to false positives. Cassandra Monitor parse error for \"?\" result 916 If the Cassandra Monitoring service received a DN status of \"?\", this would cause an exception. Graph traversal APIs modified to support https links 924 The xg / yg / gqp APIs did not work for links with the https protocol. Installation failure if another service was listening on port 9000 906 During CM-Well installation, the installer checks to see if the CM-Well Web Service is listening on port 9000. If a different service was listening on port 9000, the installer incorrectly assumed that the WS was installed and working, and proceeded with the installation. This caused the upload of the initial data to fail, and the whole system was not usable.","title":"Bug Fixes"},{"location":"ReleaseNotes/2018/ReleaseNotes.Xerus.October.2018.html#changes-to-api","text":"None.","title":"Changes to API"},{"location":"ReleaseNotes/2018/ReleaseNotes.Yak.November.2018.html","text":"Yak (November 2018) Features and Upgrades Title Git Issue Description HTTPS protocol support 951 The HTTPS protocol is now supported in RDF Subjects and preserved per infoton across all CM-Well APIs. STP payloads now compressed 952 The input to STP (retrieved with the _in API) is now compressed using GZip, for improved performance. STP infoton rate now shown for last minute 947 The infoton processing rate (displayed in the STP dashboard per sensor) now shows the latest per-minute rate rather than the overall mean value. Bug Fixes Title Git Issue Description STP can now handle empty results from sparqlToRoot query 943 See title. Bulk Consume API now respects the with-history parameter 954 See title. Changes to API None.","title":"Yak (November 2018)"},{"location":"ReleaseNotes/2018/ReleaseNotes.Yak.November.2018.html#yak-november-2018","text":"","title":"Yak (November 2018)"},{"location":"ReleaseNotes/2018/ReleaseNotes.Yak.November.2018.html#features-and-upgrades","text":"Title Git Issue Description HTTPS protocol support 951 The HTTPS protocol is now supported in RDF Subjects and preserved per infoton across all CM-Well APIs. STP payloads now compressed 952 The input to STP (retrieved with the _in API) is now compressed using GZip, for improved performance. STP infoton rate now shown for last minute 947 The infoton processing rate (displayed in the STP dashboard per sensor) now shows the latest per-minute rate rather than the overall mean value.","title":"Features and Upgrades"},{"location":"ReleaseNotes/2018/ReleaseNotes.Yak.November.2018.html#bug-fixes","text":"Title Git Issue Description STP can now handle empty results from sparqlToRoot query 943 See title. Bulk Consume API now respects the with-history parameter 954 See title.","title":"Bug Fixes"},{"location":"ReleaseNotes/2018/ReleaseNotes.Yak.November.2018.html#changes-to-api","text":"None.","title":"Changes to API"},{"location":"ReleaseNotes/2018/ReleaseNotes.Zebra.December.2018.html","text":"Zebra (December 2018) Title Git Issue Description New default RDF protocol parameter in cluster configuration 961 You can now define the cluster's default RDF protocol ( http or https ) in the cluster's conf file. Example: val cmw = GridSubDiv(... , defaultRdfProtocol = \"https\") The default protocol will be added to URIs of infotons for which the protocol is not provided in the ingested data. Split data reads in case of failure in STP fetch of bulk data 930 If the STP bulk read fails due to bad data, the entire _out request can fail (even for one bad infoton). Now in this case, STP splits _out requests into multiple single read (GET) requests so that the valid infotons in the bulk can be successfully read. Failed reads are written into a \u201cred\u201d log file. Bug Fixes Title Git Issue Description Fixed bug in handling response to heavy request 972 Previously, when handling an expensive ingest request, the WS module would send newlines to the HA Proxy periodically, to prevent it from closing the connection. There was a bug related to this mechanism that caused an OK response to be sent erroneously after a failure to ingest. Now fixed. Error reading timestamp in zStore caused false positive for Crawler 980 In case of a timestamp artificially incremented with +1 in the case of very close updates, there was a bug in BG-Crawler coordination with regards to reading the timezone of the timestamps that are persisted in zStore. This caused false positive detections of updates in the Crawler\u2019s report. Support https in URIs with no domain 968 Infoton subjects with the https protocol which didn't contain domain names (e.g. https://example/foo/bar ) were erroneously rendered as http://example/foo/bar . Now fixed. Changes to API None.","title":"Zebra (December 2018)"},{"location":"ReleaseNotes/2018/ReleaseNotes.Zebra.December.2018.html#zebra-december-2018","text":"Title Git Issue Description New default RDF protocol parameter in cluster configuration 961 You can now define the cluster's default RDF protocol ( http or https ) in the cluster's conf file. Example: val cmw = GridSubDiv(... , defaultRdfProtocol = \"https\") The default protocol will be added to URIs of infotons for which the protocol is not provided in the ingested data. Split data reads in case of failure in STP fetch of bulk data 930 If the STP bulk read fails due to bad data, the entire _out request can fail (even for one bad infoton). Now in this case, STP splits _out requests into multiple single read (GET) requests so that the valid infotons in the bulk can be successfully read. Failed reads are written into a \u201cred\u201d log file.","title":"Zebra (December 2018)"},{"location":"ReleaseNotes/2018/ReleaseNotes.Zebra.December.2018.html#bug-fixes","text":"Title Git Issue Description Fixed bug in handling response to heavy request 972 Previously, when handling an expensive ingest request, the WS module would send newlines to the HA Proxy periodically, to prevent it from closing the connection. There was a bug related to this mechanism that caused an OK response to be sent erroneously after a failure to ingest. Now fixed. Error reading timestamp in zStore caused false positive for Crawler 980 In case of a timestamp artificially incremented with +1 in the case of very close updates, there was a bug in BG-Crawler coordination with regards to reading the timezone of the timestamps that are persisted in zStore. This caused false positive detections of updates in the Crawler\u2019s report. Support https in URIs with no domain 968 Infoton subjects with the https protocol which didn't contain domain names (e.g. https://example/foo/bar ) were erroneously rendered as http://example/foo/bar . Now fixed.","title":"Bug Fixes"},{"location":"ReleaseNotes/2018/ReleaseNotes.Zebra.December.2018.html#changes-to-api","text":"None.","title":"Changes to API"},{"location":"TestingAndMonitoring/Monitoring.HealthDashboards.html","text":"Health Dashboards CM-Well provides several views that display the health status of its nodes (machines) and sub-systems. Two of the main views are: Component view - shows the health of each type of component pool. Node view - shows the health of each machine in the environment. These are the software component acronyms you will see in the health views: WS - web service components, which serve API requests. BG - background processes, which perform lengthier tasks. ES - Elastic Search components, which perform full-text search operations. CAS - Cassandra components, which provide storage infrastructure. ZK - Zookeeper modules that manage synchronization for a distributed cluster environment KF - Kafka modules that manage virtual queues for writing to CM-Well The health of each node and component instance is polled about every 30 seconds. These are the statuses you may see for components and nodes: Status Description OK Warning status but no operational impact Error status with operational impact Note A red status does not necessarily mean complete failure; requests may still be processed. The health views may show additional information about the components. These are internal status/error messages, which are not documented here. Component View Each CM-Well cluster runs multiple instances of each type of component, for purposes of parallel processing and redundancy. The component view shows the status of each of these \"pools\" of components. To display the component view: Open the CM-Well home page in a browser. Click the proc item at the top of the left-hand menu. Hover your cursor over the health.md item in the left-hand menu. The \"plain text\" and \"markdown\" icons are displayed. Click the blue \"markdown\" icon. The component view is displayed. It show the overall health status of the cluster, and a table showing each type of component, its health status, any additional status or error messages, and the date-time the status was last updated. Node View The node view shows the status of each machine running in the CM-Well cluster, and the software components running on it. To display the node view: Open the CM-Well home page in a browser. Click the proc item at the top of the left-hand menu. Hover your cursor over the health-detailed.md item in the left-hand menu. The \"plain text\" and \"markdown\" icons are displayed. Click the blue \"markdown\" icon. The node view is displayed. It contains a table showing each node's IP address, the health status of each type of software component on that node, and any additional status or error messages. JVM Views (for internal TMS use) The following views show the health of the JVM processes running on CM-Well nodes. All JVM processes: cm-well-host /proc/members-all.md?pretty Active JVM processes: cm-well-host /proc/members-active.md?pretty","title":"Health Dashboards"},{"location":"TestingAndMonitoring/Monitoring.HealthDashboards.html#health-dashboards","text":"CM-Well provides several views that display the health status of its nodes (machines) and sub-systems. Two of the main views are: Component view - shows the health of each type of component pool. Node view - shows the health of each machine in the environment. These are the software component acronyms you will see in the health views: WS - web service components, which serve API requests. BG - background processes, which perform lengthier tasks. ES - Elastic Search components, which perform full-text search operations. CAS - Cassandra components, which provide storage infrastructure. ZK - Zookeeper modules that manage synchronization for a distributed cluster environment KF - Kafka modules that manage virtual queues for writing to CM-Well The health of each node and component instance is polled about every 30 seconds. These are the statuses you may see for components and nodes: Status Description OK Warning status but no operational impact Error status with operational impact Note A red status does not necessarily mean complete failure; requests may still be processed. The health views may show additional information about the components. These are internal status/error messages, which are not documented here.","title":"Health Dashboards"},{"location":"TestingAndMonitoring/Monitoring.HealthDashboards.html#component-view","text":"Each CM-Well cluster runs multiple instances of each type of component, for purposes of parallel processing and redundancy. The component view shows the status of each of these \"pools\" of components. To display the component view: Open the CM-Well home page in a browser. Click the proc item at the top of the left-hand menu. Hover your cursor over the health.md item in the left-hand menu. The \"plain text\" and \"markdown\" icons are displayed. Click the blue \"markdown\" icon. The component view is displayed. It show the overall health status of the cluster, and a table showing each type of component, its health status, any additional status or error messages, and the date-time the status was last updated.","title":"Component View"},{"location":"TestingAndMonitoring/Monitoring.HealthDashboards.html#node-view","text":"The node view shows the status of each machine running in the CM-Well cluster, and the software components running on it. To display the node view: Open the CM-Well home page in a browser. Click the proc item at the top of the left-hand menu. Hover your cursor over the health-detailed.md item in the left-hand menu. The \"plain text\" and \"markdown\" icons are displayed. Click the blue \"markdown\" icon. The node view is displayed. It contains a table showing each node's IP address, the health status of each type of software component on that node, and any additional status or error messages.","title":"Node View"},{"location":"TestingAndMonitoring/Monitoring.HealthDashboards.html#jvm-views-for-internal-tms-use","text":"The following views show the health of the JVM processes running on CM-Well nodes. All JVM processes: cm-well-host /proc/members-all.md?pretty Active JVM processes: cm-well-host /proc/members-active.md?pretty","title":"JVM Views (for internal TMS use)"},{"location":"TestingAndMonitoring/Testing.TestingAndDebugging.html","text":"Tips for Testing and Debugging This page describes some tips for facilitating testing and debugging of your CM-Well client application. Using the debug-info Flag in Search Operations If a search operation is not behaving as expected, you may want to examine the precise query that CM-Well sends to the Elastic Search module (that is responsible for full-text search on infotons). To do this, add the debug-info flag to the query, as follows: curl cm-well-host /permid.org?op=search qp=CommonName.mdaas:Disney debug-info format=yaml pretty length=1 Note The debug-info flag only works with the following output formats: json,jsonl,yaml. The response then contains the searchQueryStr attribute, as follows: pagination : next : http :// cm - well - prod . int . thomsonreuters . com / permid . org ? op = search format = yaml from = 2018 - 02 - 09 T15 % 3 A11 % 3 A11 . 160 Z to = 2018 - 02 - 09 T15 % 3 A11 % 3 A11 . 160 Z qp = CommonName . mdaas % 3 ADisney length = 1 offset = 1 last : http :// cm - well - prod . int . thomsonreuters . com / permid . org ? op = search format = yaml from = 2018 - 02 - 09 T15 % 3 A11 % 3 A11 . 160 Z to = 2018 - 02 - 09 T15 % 3 A11 % 3 A11 . 160 Z qp = CommonName . mdaas % 3 ADisney length = 1 offset = 15464 self : http :// cm - well - prod . int . thomsonreuters . com / permid . org ? op = search format = yaml from = 2018 - 02 - 09 T15 % 3 A11 % 3 A11 . 160 Z to = 2018 - 02 - 09 T15 % 3 A11 % 3 A11 . 160 Z qp = CommonName . mdaas % 3 ADisney length = 1 offset = 0 type : PaginationInfo first : http :// cm - well - prod . int . thomsonreuters . com / permid . org ? op = search format = yaml from = 2018 - 02 - 09 T15 % 3 A11 % 3 A11 . 160 Z to = 2018 - 02 - 09 T15 % 3 A11 % 3 A11 . 160 Z qp = CommonName . mdaas % 3 ADisney length = 1 offset = 0 type : SearchResponse results : fromDate : id001 !! org . joda . time . DateTime {} total : 15464 offset : 0 toDate : * id001 infotons : - system : path : /permid.org/ 1 - 21636243712 indexTime : 1518189077158 parent : / permid . org dataCenter : dc1 lastModified : * id001 uuid : 8 d294722cbf2f9827d9f9d2baf8dc81c type : ObjectInfoton length : 1 type : SearchResults searchQueryStr : |- { from : 0 , size : 1 , query : { filtered : { query : { bool : { must : { match : { fields.-Jamjg.CommonName : { query : Disney , type : phrase } } } } }, filter : { bool : { must : [ { term : { system.current : true } }, { term : { parent : /permid.org } } ], must_not : { term : { system.kind : DeletedInfoton } } } } } }, fields : [ system.kind , system.path , system.uuid , system.lastModified , content.length , content.mimeType , link.to , link.kind , system.dc , system.indexTime , system.quad , system.current ], sort : [ { system.lastModified : { order : desc } } ] } Using the verbose Flag in SPARQL Queries You can add the verbose flag to SPARQL queries, to see a timed breakdown of the operations that the query performs. For example, if you add the verbose flag to this query: curl -X POST cm-well-host /_sp?format=ascii verbose -H Content-Type:text/plain --data-binary PATHS /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando with-data xg=hasImmediateParent.mdaas _ SPARQL SELECT * WHERE { ?infoton http://ont.thomsonreuters.com/mdaas/headquartersCommonAddress ?Addr. } You get this response: Time metrics: Start End Duration Type Task # lines 00:00:00.002 00:00:00.258 00:00:00.256 Subgraph /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownershi... 141 00:00:00.264 00:00:00.272 00:00:00.008 SPARQL SELECT * WHERE { ?infoton http://ont.thomsonreuters.com/mdaa... 3 Results: ------------------------------------------------------------------------------------------------------------------ | infoton | Addr | ================================================================================================================== | http://permid.org/1-4294969614 | 6649 Westwood Blvd Ste 300\\nORLANDO\\nFLORIDA\\n32821-6066\\nUnited States\\n | | http://permid.org/1-5035948006 | 6649 Westwood Blvd\\nORLANDO\\nFLORIDA\\n32821-8029\\nUnited States\\n | ------------------------------------------------------------------------------------------------------------------ In the Time Metrics table, you can see the two query tasks: the search that collects infotons from CM-Well, and the SPARQL query that's applied to them. For each task, you see the following values: Start - the start time of the operation (in the format HH:MM:SS.MSC) End - the end time of the operation (in the format HH:MM:SS.MSC) Duration - the duration of the task's processing (in the format HH:MM:SS.MSC) Type - Subgraph for search on infotons; SPARQL for SPARQL queries Task - the query's text # lines - The number of lines (triples or quads) returned by matching the CM-Well query in the Task value. Using the show-graph Flag in SPARQL Queries You can add the show-graph parameter to SPARQL queries, in order to see the sub-graph that is produced by collecting the triples defined in the PATHS section. This can be helpful when you want to determine if there's a problem in the PATHS section or the SPARQL query. Note You can only use this feature with the format=ascii flag and value. For example, this call: curl -X POST cm-well-host /_sp?format=ascii show-graph --data-binary PATHS /example.org/Individuals?op=search length=1000 with-data /example.org/Individuals/RonaldKhun /example.org/Individuals/JohnSmith?xg=3 SPARQL SELECT DISTINCT ?name ?active WHERE { ?name http://www.tr-lbd.com/bold#active ?active . } ORDER BY DESC(?active) - produces these results: Graph: http://example.org/Individuals/DonaldDuck http://purl.org/vocab/relationship/knowsByReputation http://example.org/Individuals/MartinOdersky . http://example.org/Individuals/DonaldDuck http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/DonaldDuck http://purl.org/vocab/relationship/mentorOf http://example.org/Individuals/JohnSmith . http://example.org/Individuals/RebbecaSmith http://www.tr-lbd.com/bold#active false . http://example.org/Individuals/RebbecaSmith http://purl.org/vocab/relationship/siblingOf http://example.org/Individuals/SaraSmith . http://example.org/Individuals/MartinOdersky http://purl.org/vocab/relationship/collaboratesWith http://example.org/Individuals/RonaldKhun . http://example.org/Individuals/MartinOdersky http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/BruceWayne http://purl.org/vocab/relationship/employedBy http://example.org/Individuals/DonaldDuck . http://example.org/Individuals/BruceWayne http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/PeterParker http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/PeterParker http://purl.org/vocab/relationship/worksWith http://example.org/Individuals/HarryMiller . http://example.org/Individuals/PeterParker http://purl.org/vocab/relationship/neighborOf http://example.org/Individuals/ClarkKent . http://example.org/Individuals/SaraSmith http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/SaraSmith http://purl.org/vocab/relationship/siblingOf http://example.org/Individuals/RebbecaSmith . http://example.org/Individuals/RonaldKhun http://www.tr-lbd.com/bold#category deals . http://example.org/Individuals/RonaldKhun http://www.tr-lbd.com/bold#category news . http://example.org/Individuals/RonaldKhun http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/RonaldKhun http://purl.org/vocab/relationship/collaboratesWith http://example.org/Individuals/MartinOdersky . http://example.org/Individuals/JohnSmith http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/NatalieMiller http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/NatalieMiller http://purl.org/vocab/relationship/childOf http://example.org/Individuals/HarryMiller . http://example.org/Individuals/HarryMiller http://purl.org/vocab/relationship/parentOf http://example.org/Individuals/NatalieMiller . http://example.org/Individuals/HarryMiller http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/DaisyDuck http://purl.org/vocab/relationship/colleagueOf http://example.org/Individuals/BruceWayne . http://example.org/Individuals/DaisyDuck http://www.tr-lbd.com/bold#active false . http://example.org/Individuals/JohnSmith http://purl.org/vocab/relationship/parentOf http://example.org/Individuals/SaraSmith . http://example.org/Individuals/JohnSmith http://purl.org/vocab/relationship/friendOf http://example.org/Individuals/PeterParker . Results: ------------------------------------------------------------ | name | active | ============================================================ | http://example.org/Individuals/BruceWayne | true | | http://example.org/Individuals/DonaldDuck | true | | http://example.org/Individuals/HarryMiller | true | | http://example.org/Individuals/JohnSmith | true | | http://example.org/Individuals/MartinOdersky | true | | http://example.org/Individuals/NatalieMiller | true | | http://example.org/Individuals/PeterParker | true | | http://example.org/Individuals/RonaldKhun | true | | http://example.org/Individuals/SaraSmith | true | | http://example.org/Individuals/DaisyDuck | false | | http://example.org/Individuals/RebbecaSmith | false | ------------------------------------------------------------ Testing RDF Syntax with the dry-run Flag You can test the validity of your RDF input's syntax by adding the dry-run flag to an upload operation (directed to the _in endpoint). When this flag is added, the call only returns the validity status, without actually performing the upload. For example, if you add the dry-run flag to this call: curl -X POST cm-well-host /_in?format=ttl dry-run -H Content-Type: text/plain --data-binary http://example/Individuals/SantaClaus a http://data.com/Person . - you get this response: { success :true, dry-run :true} For this call: curl -X POST cm-well-host /_in?format=ttl dry-run -H Content-Type: text/plain --data-binary http://example/Individuals/SantaClaus is_a http://data.com/Person . - you get this response: { success :false, error : [line: 1, col: 42] Unrecognized: is_a } Obtaining Processing Time from the X-CMWELL-RT Header You can obtain the processing time for a call to CM-Well, by adding the -v flag to the curl command, and examining the value of the X-CMWELL-RT (RT = Run Time) response header. The time value is in milliseconds. Note The X-CMWELL-RT value is the internal CM-Well processing time, without network latency. For example, this call: curl -v cm-well-host /permid.org?op=search qp=CommonName.mdaas:Coca%20Cola length=1 format=ttl - returns this response: * Trying 163 . 231 . 74 . 90 ... * Connected to cm-well-host . com ( 163 . 231 . 74 . 90 ) port 80 ( # 0 ) GET / permid . org ? op = search qp = CommonName . mdaas : Coca % 20Cola length = 1 format = ttl HTTP / 1 . 1 Host : cm-well-host . com User-Agent : curl / 7 . 48 . 0 Accept : */* HTTP / 1 . 1 200 OK X-CMWELL-RT : 451 Content-Type : text / turtle ; charset = UTF8 X-CMWELL-Version : 1 . 5 . x-SNAPSHOT X-CMWELL-Hostname : c053wmjcend06 . int . thomsonreuters . com Date : Wed , 20 Jul 2016 12 : 18 : 12 GMT Content-Length : 2065 @ prefix nn : http :// cm-well-host . com / meta / nn # . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix sys : http :// cm-well-host . com / meta / sys # . http :// permid . org / 1-21570701963 sys : dataCenter dc1 ; sys : indexTime 1469000214747 ^^ xsd : long ; sys : lastModified 2016-07-20T07:36:53.295Z ^^ xsd : dateTime ; sys : parent /permid.org ; sys : path /permid.org/1-21570701963 ; sys : type ObjectInfoton ; sys : uuid 043eaf8e1c751c285a08d1e2e89fb732 . [ sys : pagination [ sys : first http : //cm-well-host.com/permid.org?format=ttl? op=search from=2016-07-20T07%3A36%3A53.295Z to=2016-07-20T07%3A36%3A53.295Z qp=CommonName.mdaas%3ACoca+Cola length=1 offset=0 ; sys : last http : //cm-well-host.com/permid.org?format=ttl? op=search from=2016-07-20T07%3A36%3A53.295Z to=2016-07-20T07%3A36%3A53.295Z qp=CommonName.mdaas%3ACoca+Cola length=1 offset=11943 ; sys : next http : //cm-well-host.com/permid.org?format=ttl? op=search from=2016-07-20T07%3A36%3A53.295Z to=2016-07-20T07%3A36%3A53.295Z qp=CommonName.mdaas%3ACoca+Cola length=1 offset=1 ; sys : self http : //cm-well-host.com/permid.org?format=ttl? op=search from=2016-07-20T07%3A36%3A53.295Z to=2016-07-20T07%3A36%3A53.295Z qp=CommonName.mdaas%3ACoca+Cola length=1 offset=0 ; sys : type PaginationInfo ] ; sys : results [ sys : fromDate 2016-07-20T07:36:53.295Z ^^ xsd : dateTime ; sys : infotons http : //permid.org/1-21570701963 ; sys : length 1 ^^ xsd : long ; sys : offset 0 ^^ xsd : long ; sys : toDate 2016-07-20T07:36:53.295Z ^^ xsd : dateTime ; sys : total 11943 ^^ xsd : long ; sys : type SearchResults ] ; sys : type SearchResponse ] . Connection # 0 to host cm-well-host . com left intact","title":"Tips for Testing and Debugging"},{"location":"TestingAndMonitoring/Testing.TestingAndDebugging.html#tips-for-testing-and-debugging","text":"This page describes some tips for facilitating testing and debugging of your CM-Well client application.","title":"Tips for Testing and Debugging"},{"location":"TestingAndMonitoring/Testing.TestingAndDebugging.html#using-the-debug-info-flag-in-search-operations","text":"If a search operation is not behaving as expected, you may want to examine the precise query that CM-Well sends to the Elastic Search module (that is responsible for full-text search on infotons). To do this, add the debug-info flag to the query, as follows: curl cm-well-host /permid.org?op=search qp=CommonName.mdaas:Disney debug-info format=yaml pretty length=1 Note The debug-info flag only works with the following output formats: json,jsonl,yaml. The response then contains the searchQueryStr attribute, as follows: pagination : next : http :// cm - well - prod . int . thomsonreuters . com / permid . org ? op = search format = yaml from = 2018 - 02 - 09 T15 % 3 A11 % 3 A11 . 160 Z to = 2018 - 02 - 09 T15 % 3 A11 % 3 A11 . 160 Z qp = CommonName . mdaas % 3 ADisney length = 1 offset = 1 last : http :// cm - well - prod . int . thomsonreuters . com / permid . org ? op = search format = yaml from = 2018 - 02 - 09 T15 % 3 A11 % 3 A11 . 160 Z to = 2018 - 02 - 09 T15 % 3 A11 % 3 A11 . 160 Z qp = CommonName . mdaas % 3 ADisney length = 1 offset = 15464 self : http :// cm - well - prod . int . thomsonreuters . com / permid . org ? op = search format = yaml from = 2018 - 02 - 09 T15 % 3 A11 % 3 A11 . 160 Z to = 2018 - 02 - 09 T15 % 3 A11 % 3 A11 . 160 Z qp = CommonName . mdaas % 3 ADisney length = 1 offset = 0 type : PaginationInfo first : http :// cm - well - prod . int . thomsonreuters . com / permid . org ? op = search format = yaml from = 2018 - 02 - 09 T15 % 3 A11 % 3 A11 . 160 Z to = 2018 - 02 - 09 T15 % 3 A11 % 3 A11 . 160 Z qp = CommonName . mdaas % 3 ADisney length = 1 offset = 0 type : SearchResponse results : fromDate : id001 !! org . joda . time . DateTime {} total : 15464 offset : 0 toDate : * id001 infotons : - system : path : /permid.org/ 1 - 21636243712 indexTime : 1518189077158 parent : / permid . org dataCenter : dc1 lastModified : * id001 uuid : 8 d294722cbf2f9827d9f9d2baf8dc81c type : ObjectInfoton length : 1 type : SearchResults searchQueryStr : |- { from : 0 , size : 1 , query : { filtered : { query : { bool : { must : { match : { fields.-Jamjg.CommonName : { query : Disney , type : phrase } } } } }, filter : { bool : { must : [ { term : { system.current : true } }, { term : { parent : /permid.org } } ], must_not : { term : { system.kind : DeletedInfoton } } } } } }, fields : [ system.kind , system.path , system.uuid , system.lastModified , content.length , content.mimeType , link.to , link.kind , system.dc , system.indexTime , system.quad , system.current ], sort : [ { system.lastModified : { order : desc } } ] }","title":"Using the debug-info Flag in Search Operations"},{"location":"TestingAndMonitoring/Testing.TestingAndDebugging.html#using-the-verbose-flag-in-sparql-queries","text":"You can add the verbose flag to SPARQL queries, to see a timed breakdown of the operations that the query performs. For example, if you add the verbose flag to this query: curl -X POST cm-well-host /_sp?format=ascii verbose -H Content-Type:text/plain --data-binary PATHS /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownership,organizationCity.mdaas:Orlando with-data xg=hasImmediateParent.mdaas _ SPARQL SELECT * WHERE { ?infoton http://ont.thomsonreuters.com/mdaas/headquartersCommonAddress ?Addr. } You get this response: Time metrics: Start End Duration Type Task # lines 00:00:00.002 00:00:00.258 00:00:00.256 Subgraph /permid.org?op=search qp=CommonName.mdaas:Marriott%20Ownershi... 141 00:00:00.264 00:00:00.272 00:00:00.008 SPARQL SELECT * WHERE { ?infoton http://ont.thomsonreuters.com/mdaa... 3 Results: ------------------------------------------------------------------------------------------------------------------ | infoton | Addr | ================================================================================================================== | http://permid.org/1-4294969614 | 6649 Westwood Blvd Ste 300\\nORLANDO\\nFLORIDA\\n32821-6066\\nUnited States\\n | | http://permid.org/1-5035948006 | 6649 Westwood Blvd\\nORLANDO\\nFLORIDA\\n32821-8029\\nUnited States\\n | ------------------------------------------------------------------------------------------------------------------ In the Time Metrics table, you can see the two query tasks: the search that collects infotons from CM-Well, and the SPARQL query that's applied to them. For each task, you see the following values: Start - the start time of the operation (in the format HH:MM:SS.MSC) End - the end time of the operation (in the format HH:MM:SS.MSC) Duration - the duration of the task's processing (in the format HH:MM:SS.MSC) Type - Subgraph for search on infotons; SPARQL for SPARQL queries Task - the query's text # lines - The number of lines (triples or quads) returned by matching the CM-Well query in the Task value.","title":"Using the verbose Flag in SPARQL Queries"},{"location":"TestingAndMonitoring/Testing.TestingAndDebugging.html#using-the-show-graph-flag-in-sparql-queries","text":"You can add the show-graph parameter to SPARQL queries, in order to see the sub-graph that is produced by collecting the triples defined in the PATHS section. This can be helpful when you want to determine if there's a problem in the PATHS section or the SPARQL query. Note You can only use this feature with the format=ascii flag and value. For example, this call: curl -X POST cm-well-host /_sp?format=ascii show-graph --data-binary PATHS /example.org/Individuals?op=search length=1000 with-data /example.org/Individuals/RonaldKhun /example.org/Individuals/JohnSmith?xg=3 SPARQL SELECT DISTINCT ?name ?active WHERE { ?name http://www.tr-lbd.com/bold#active ?active . } ORDER BY DESC(?active) - produces these results: Graph: http://example.org/Individuals/DonaldDuck http://purl.org/vocab/relationship/knowsByReputation http://example.org/Individuals/MartinOdersky . http://example.org/Individuals/DonaldDuck http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/DonaldDuck http://purl.org/vocab/relationship/mentorOf http://example.org/Individuals/JohnSmith . http://example.org/Individuals/RebbecaSmith http://www.tr-lbd.com/bold#active false . http://example.org/Individuals/RebbecaSmith http://purl.org/vocab/relationship/siblingOf http://example.org/Individuals/SaraSmith . http://example.org/Individuals/MartinOdersky http://purl.org/vocab/relationship/collaboratesWith http://example.org/Individuals/RonaldKhun . http://example.org/Individuals/MartinOdersky http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/BruceWayne http://purl.org/vocab/relationship/employedBy http://example.org/Individuals/DonaldDuck . http://example.org/Individuals/BruceWayne http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/PeterParker http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/PeterParker http://purl.org/vocab/relationship/worksWith http://example.org/Individuals/HarryMiller . http://example.org/Individuals/PeterParker http://purl.org/vocab/relationship/neighborOf http://example.org/Individuals/ClarkKent . http://example.org/Individuals/SaraSmith http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/SaraSmith http://purl.org/vocab/relationship/siblingOf http://example.org/Individuals/RebbecaSmith . http://example.org/Individuals/RonaldKhun http://www.tr-lbd.com/bold#category deals . http://example.org/Individuals/RonaldKhun http://www.tr-lbd.com/bold#category news . http://example.org/Individuals/RonaldKhun http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/RonaldKhun http://purl.org/vocab/relationship/collaboratesWith http://example.org/Individuals/MartinOdersky . http://example.org/Individuals/JohnSmith http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/NatalieMiller http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/NatalieMiller http://purl.org/vocab/relationship/childOf http://example.org/Individuals/HarryMiller . http://example.org/Individuals/HarryMiller http://purl.org/vocab/relationship/parentOf http://example.org/Individuals/NatalieMiller . http://example.org/Individuals/HarryMiller http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/DaisyDuck http://purl.org/vocab/relationship/colleagueOf http://example.org/Individuals/BruceWayne . http://example.org/Individuals/DaisyDuck http://www.tr-lbd.com/bold#active false . http://example.org/Individuals/JohnSmith http://purl.org/vocab/relationship/parentOf http://example.org/Individuals/SaraSmith . http://example.org/Individuals/JohnSmith http://purl.org/vocab/relationship/friendOf http://example.org/Individuals/PeterParker . Results: ------------------------------------------------------------ | name | active | ============================================================ | http://example.org/Individuals/BruceWayne | true | | http://example.org/Individuals/DonaldDuck | true | | http://example.org/Individuals/HarryMiller | true | | http://example.org/Individuals/JohnSmith | true | | http://example.org/Individuals/MartinOdersky | true | | http://example.org/Individuals/NatalieMiller | true | | http://example.org/Individuals/PeterParker | true | | http://example.org/Individuals/RonaldKhun | true | | http://example.org/Individuals/SaraSmith | true | | http://example.org/Individuals/DaisyDuck | false | | http://example.org/Individuals/RebbecaSmith | false | ------------------------------------------------------------","title":"Using the show-graph Flag in SPARQL Queries"},{"location":"TestingAndMonitoring/Testing.TestingAndDebugging.html#testing-rdf-syntax-with-the-dry-run-flag","text":"You can test the validity of your RDF input's syntax by adding the dry-run flag to an upload operation (directed to the _in endpoint). When this flag is added, the call only returns the validity status, without actually performing the upload. For example, if you add the dry-run flag to this call: curl -X POST cm-well-host /_in?format=ttl dry-run -H Content-Type: text/plain --data-binary http://example/Individuals/SantaClaus a http://data.com/Person . - you get this response: { success :true, dry-run :true} For this call: curl -X POST cm-well-host /_in?format=ttl dry-run -H Content-Type: text/plain --data-binary http://example/Individuals/SantaClaus is_a http://data.com/Person . - you get this response: { success :false, error : [line: 1, col: 42] Unrecognized: is_a }","title":"Testing RDF Syntax with the dry-run Flag"},{"location":"TestingAndMonitoring/Testing.TestingAndDebugging.html#obtaining-processing-time-from-the-x-cmwell-rt-header","text":"You can obtain the processing time for a call to CM-Well, by adding the -v flag to the curl command, and examining the value of the X-CMWELL-RT (RT = Run Time) response header. The time value is in milliseconds. Note The X-CMWELL-RT value is the internal CM-Well processing time, without network latency. For example, this call: curl -v cm-well-host /permid.org?op=search qp=CommonName.mdaas:Coca%20Cola length=1 format=ttl - returns this response: * Trying 163 . 231 . 74 . 90 ... * Connected to cm-well-host . com ( 163 . 231 . 74 . 90 ) port 80 ( # 0 ) GET / permid . org ? op = search qp = CommonName . mdaas : Coca % 20Cola length = 1 format = ttl HTTP / 1 . 1 Host : cm-well-host . com User-Agent : curl / 7 . 48 . 0 Accept : */* HTTP / 1 . 1 200 OK X-CMWELL-RT : 451 Content-Type : text / turtle ; charset = UTF8 X-CMWELL-Version : 1 . 5 . x-SNAPSHOT X-CMWELL-Hostname : c053wmjcend06 . int . thomsonreuters . com Date : Wed , 20 Jul 2016 12 : 18 : 12 GMT Content-Length : 2065 @ prefix nn : http :// cm-well-host . com / meta / nn # . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix sys : http :// cm-well-host . com / meta / sys # . http :// permid . org / 1-21570701963 sys : dataCenter dc1 ; sys : indexTime 1469000214747 ^^ xsd : long ; sys : lastModified 2016-07-20T07:36:53.295Z ^^ xsd : dateTime ; sys : parent /permid.org ; sys : path /permid.org/1-21570701963 ; sys : type ObjectInfoton ; sys : uuid 043eaf8e1c751c285a08d1e2e89fb732 . [ sys : pagination [ sys : first http : //cm-well-host.com/permid.org?format=ttl? op=search from=2016-07-20T07%3A36%3A53.295Z to=2016-07-20T07%3A36%3A53.295Z qp=CommonName.mdaas%3ACoca+Cola length=1 offset=0 ; sys : last http : //cm-well-host.com/permid.org?format=ttl? op=search from=2016-07-20T07%3A36%3A53.295Z to=2016-07-20T07%3A36%3A53.295Z qp=CommonName.mdaas%3ACoca+Cola length=1 offset=11943 ; sys : next http : //cm-well-host.com/permid.org?format=ttl? op=search from=2016-07-20T07%3A36%3A53.295Z to=2016-07-20T07%3A36%3A53.295Z qp=CommonName.mdaas%3ACoca+Cola length=1 offset=1 ; sys : self http : //cm-well-host.com/permid.org?format=ttl? op=search from=2016-07-20T07%3A36%3A53.295Z to=2016-07-20T07%3A36%3A53.295Z qp=CommonName.mdaas%3ACoca+Cola length=1 offset=0 ; sys : type PaginationInfo ] ; sys : results [ sys : fromDate 2016-07-20T07:36:53.295Z ^^ xsd : dateTime ; sys : infotons http : //permid.org/1-21570701963 ; sys : length 1 ^^ xsd : long ; sys : offset 0 ^^ xsd : long ; sys : toDate 2016-07-20T07:36:53.295Z ^^ xsd : dateTime ; sys : total 11943 ^^ xsd : long ; sys : type SearchResults ] ; sys : type SearchResponse ] . Connection # 0 to host cm-well-host . com left intact","title":"Obtaining Processing Time from the X-CMWELL-RT Header"},{"location":"Tutorials/Tutorial.Docker.html","text":"A Brief CM-Well Docker Tutorial This page describes how to get started with CM-Well, by running some basic workflows over a private CM-Well Docker instance. First, learn about CM-Well Docker and how to install and run it . After installing and running CM-Well Docker, run the following workflows: Add some infotons and their fields . Read the infotons you wrote . Query for infotons by field values . Update field values . Read the changed infotons and verify that their fields were updated . Delete some infotons and fields . Read the infotons again and verify the deletions . Note If you're planning to use the Curl command, read Using the Curl Utility to Call CM-Well . 1. Add some infotons and their fields Action: Create 5 new infotons under the path example/Individuals: MamaBear, PapaBear, BabyBear1, BabyBear2 and BabyBear3. Each bear has a hasName field with a name value. Curl command: curl -X POST http://localhost:8080/_in?format=ntriples --data-binary @input.txt File contents: http://example/Individuals/MamaBear http://purl.org/vocab/relationship/spouseOf http://example/Individuals/PapaBear . http://example/Individuals/MamaBear http://ont.thomsonreuters.com/bermuda/hasName Betty . http://example/Individuals/PapaBear http://ont.thomsonreuters.com/bermuda/hasName Barney . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear1 http://ont.thomsonreuters.com/bermuda/hasName Barbara . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/siblingOf http://example/Individuals/BabyBear2 . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/siblingOf http://example/Individuals/BabyBear3 . http://example/Individuals/BabyBear2 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear2 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear2 http://ont.thomsonreuters.com/bermuda/hasName Bobby . http://example/Individuals/BabyBear3 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear3 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear3 http://ont.thomsonreuters.com/bermuda/hasName Bert . Response: { success :true} 2. Read the infotons you wrote Action: Read all infotons under example/Individuals, with their fields. Curl command: curl http://localhost:8080/example/Individuals?op=search format=ttl recursive with-data Response: @ prefix nn : http :// localhost : 8080 / meta / nn # . @ prefix bermuda : http :// ont . thomsonreuters . com / bermuda / . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix rel : http :// purl . org / vocab / relationship / . @ prefix sys : http :// localhost : 8080 / meta / sys # . http :// localhost : 8080 / example / Individuals / MamaBear sys : dataCenter lh ; sys : indexTime 1470058071114 ^^ xsd : long ; sys : lastModified 2016-08-01T13:27:49.241Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/MamaBear ; sys : type ObjectInfoton ; sys : uuid e6f36b01bec464f9e2a8d8b690590e31 ; bermuda : hasName Betty ; rel : spouseOf http :// example / Individuals / PapaBear . http :// localhost : 8080 / example / Individuals / BabyBear2 sys : dataCenter lh ; sys : indexTime 1470058071125 ^^ xsd : long ; sys : lastModified 2016-08-01T13:27:49.241Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/BabyBear2 ; sys : type ObjectInfoton ; sys : uuid 284a5a2438db15b5f8d9ef87795c0945 ; bermuda : hasName Bobby ; rel : childOf http :// example / Individuals / PapaBear , http :// example / Individuals / MamaBear . http :// localhost : 8080 / example / Individuals / BabyBear3 sys : dataCenter lh ; sys : indexTime 1470058071112 ^^ xsd : long ; sys : lastModified 2016-08-01T13:27:49.239Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/BabyBear3 ; sys : type ObjectInfoton ; sys : uuid 671d93482c72b51cef5afa18c71692a5 ; bermuda : hasName Bert ; rel : childOf http :// example / Individuals / PapaBear , http :// example / Individuals / MamaBear . [ sys : pagination [ sys : first http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-01T13%3A27%3A49.239Z to=2016-08-01T13%3A27%3A49.242Z length=5 offset=0 ; sys : last http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-01T13%3A27%3A49.239Z to=2016-08-01T13%3A27%3A49.242Z length=5 offset=5 ; sys : self http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-01T13%3A27%3A49.239Z to=2016-08-01T13%3A27%3A49.242Z length=5 offset=0 ; sys : type PaginationInfo ] ; sys : results [ sys : fromDate 2016-08-01T13:27:49.239Z ^^ xsd : dateTime ; sys : infotons http : //localhost:8080/example/Individuals/MamaBear , http://localhost:8080/example/Individuals/BabyBear1 , http://localhost:8080/example/Individuals/PapaBear , http://localhost:8080/example/Individuals/BabyBear3 , http://localhost:8080/example/Individuals/BabyBear2 ; sys : length 5 ^^ xsd : long ; sys : offset 0 ^^ xsd : long ; sys : toDate 2016-08-01T13:27:49.242Z ^^ xsd : dateTime ; sys : total 5 ^^ xsd : long ; sys : type SearchResults ] ; sys : type SearchResponse ] . http :// localhost : 8080 / example / Individuals / BabyBear1 sys : dataCenter lh ; sys : indexTime 1470058071125 ^^ xsd : long ; sys : lastModified 2016-08-01T13:27:49.242Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/BabyBear1 ; sys : type ObjectInfoton ; sys : uuid 1627fe787d44b5a4fff19f50181b585b ; bermuda : hasName Barbara ; rel : childOf http :// example / Individuals / MamaBear , http :// example / Individuals / PapaBear ; rel : siblingOf http :// example / Individuals / BabyBear2 , http :// example / Individuals / BabyBear3 . http :// localhost : 8080 / example / Individuals / PapaBear sys : dataCenter lh ; sys : indexTime 1470058071120 ^^ xsd : long ; sys : lastModified 2016-08-01T13:27:49.241Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/PapaBear ; sys : type ObjectInfoton ; sys : uuid 6513a8d6395af8db932f49afb97cbfd1 ; bermuda : hasName Barney . 3. Query for infotons by field values Action: Read all infotons under example/Individuals that have a childOf relationship to PapaBear. Curl command: curl http://localhost:8080/example/Individuals?op=search qp=childOf.rel:PapaBear format=ttl recursive Response: @ prefix nn : http :// localhost : 8080 / meta / nn # . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix sys : http :// localhost : 8080 / meta / sys # . http :// localhost : 8080 / example / Individuals / BabyBear2 sys : dataCenter lh ; sys : indexTime 1470058071125 ^^ xsd : long ; sys : lastModified 2016-08-01T13:27:49.241Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/BabyBear2 ; sys : type ObjectInfoton ; sys : uuid 284a5a2438db15b5f8d9ef87795c0945 . http :// localhost : 8080 / example / Individuals / BabyBear3 sys : dataCenter lh ; sys : indexTime 1470058071112 ^^ xsd : long ; sys : lastModified 2016-08-01T13:27:49.239Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/BabyBear3 ; sys : type ObjectInfoton ; sys : uuid 671d93482c72b51cef5afa18c71692a5 . [ sys : pagination [ sys : first http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-01T13%3A27%3A49.239Z to=2016-08-01T13%3A27%3A49.242Z qp=childOf.rel%3APapaBear length=3 offset=0 ; sys : last http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-01T13%3A27%3A49.239Z to=2016-08-01T13%3A27%3A49.242Z qp=childOf.rel%3APapaBear length=3 offset=3 ; sys : self http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-01T13%3A27%3A49.239Z to=2016-08-01T13%3A27%3A49.242Z qp=childOf.rel%3APapaBear length=3 offset=0 ; sys : type PaginationInfo ] ; sys : results [ sys : fromDate 2016-08-01T13:27:49.239Z ^^ xsd : dateTime ; sys : infotons http : //localhost:8080/example/Individuals/BabyBear3 , http://localhost:8080/example/Individuals/BabyBear2 , http://localhost:8080/example/Individuals/BabyBear1 ; sys : length 3 ^^ xsd : long ; sys : offset 0 ^^ xsd : long ; sys : toDate 2016-08-01T13:27:49.242Z ^^ xsd : dateTime ; sys : total 3 ^^ xsd : long ; sys : type SearchResults ] ; sys : type SearchResponse ] . http :// localhost : 8080 / example / Individuals / BabyBear1 sys : dataCenter lh ; sys : indexTime 1470058071125 ^^ xsd : long ; sys : lastModified 2016-08-01T13:27:49.242Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/BabyBear1 ; sys : type ObjectInfoton ; sys : uuid 1627fe787d44b5a4fff19f50181b585b . 4. Update field values Action: Change all Baby Bear names. Curl command: curl -X POST http://localhost:8080/_in?format=ntriples --data-binary @input.txt File contents: http://example/Individuals/BabyBear1 cmwell://meta/sys#markReplace http://ont.thomsonreuters.com/bermuda/hasName . http://example/Individuals/BabyBear1 http://ont.thomsonreuters.com/bermuda/hasName Cathy . http://example/Individuals/BabyBear2 cmwell://meta/sys#markReplace http://ont.thomsonreuters.com/bermuda/hasName . http://example/Individuals/BabyBear2 http://ont.thomsonreuters.com/bermuda/hasName Craig . http://example/Individuals/BabyBear3 cmwell://meta/sys#markReplace http://ont.thomsonreuters.com/bermuda/hasName . http://example/Individuals/BabyBear3 http://ont.thomsonreuters.com/bermuda/hasName Curt . Response: { success :true} 5. Read the changed infotons and verify that their fields were updated Action: Read the Baby Bear infotons and verify that their fields were updated. Curl command: curl http://localhost:8080/example/Individuals?op=search qp=childOf.rel:PapaBear format=ttl recursive with-data Response: @ prefix nn : http :// localhost : 8080 / meta / nn # . @ prefix bermuda : http :// ont . thomsonreuters . com / bermuda / . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix rel : http :// purl . org / vocab / relationship / . @ prefix sys : http :// localhost : 8080 / meta / sys # . http :// localhost : 8080 / example / Individuals / BabyBear2 sys : dataCenter lh ; sys : indexTime 1470063470479 ^^ xsd : long ; sys : lastModified 2016-08-01T14:57:49.993Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/BabyBear2 ; sys : type ObjectInfoton ; sys : uuid ad07b30c8ba4ea88d5702872c4146fab ; bermuda : hasName Craig ; rel : childOf http :// example / Individuals / PapaBear , http :// example / Individuals / MamaBear . http :// localhost : 8080 / example / Individuals / BabyBear3 sys : dataCenter lh ; sys : indexTime 1470063470478 ^^ xsd : long ; sys : lastModified 2016-08-01T14:57:49.992Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/BabyBear3 ; sys : type ObjectInfoton ; sys : uuid 54ec65cd8e06c19b9007b8b5fb60ba71 ; bermuda : hasName Curt ; rel : childOf http :// example / Individuals / PapaBear , http :// example / Individuals / MamaBear . [ sys : pagination [ sys : first http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-01T14%3A57%3A49.992Z to=2016-08-01T14%3A57%3A49.993Z qp=childOf.rel%3APapaBear length=3 offset=0 ; sys : last http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-01T14%3A57%3A49.992Z to=2016-08-01T14%3A57%3A49.993Z qp=childOf.rel%3APapaBear length=3 offset=3 ; sys : self http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-01T14%3A57%3A49.992Z to=2016-08-01T14%3A57%3A49.993Z qp=childOf.rel%3APapaBear length=3 offset=0 ; sys : type PaginationInfo ] ; sys : results [ sys : fromDate 2016-08-01T14:57:49.992Z ^^ xsd : dateTime ; sys : infotons http : //localhost:8080/example/Individuals/BabyBear3 , http://localhost:8080/example/Individuals/BabyBear1 , http://localhost:8080/example/Individuals/BabyBear2 ; sys : length 3 ^^ xsd : long ; sys : offset 0 ^^ xsd : long ; sys : toDate 2016-08-01T14:57:49.993Z ^^ xsd : dateTime ; sys : total 3 ^^ xsd : long ; sys : type SearchResults ] ; sys : type SearchResponse ] . http :// localhost : 8080 / example / Individuals / BabyBear1 sys : dataCenter lh ; sys : indexTime 1470063470479 ^^ xsd : long ; sys : lastModified 2016-08-01T14:57:49.993Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/BabyBear1 ; sys : type ObjectInfoton ; sys : uuid 70e303b295d4abdb68f9197ca76531cc ; bermuda : hasName Cathy ; rel : childOf http :// example / Individuals / MamaBear , http :// example / Individuals / PapaBear ; rel : siblingOf http :// example / Individuals / BabyBear2 , http :// example / Individuals / BabyBear3 . 6. Delete some infotons and fields Action: Delete the BabyBear3 infoton, and delete BabyBear1's siblingOf field. Curl command: curl -X POST http://localhost:8080/_in?format=ntriples --data-binary @input.txt File contents: http://example/Individuals/BabyBear3 cmwell://meta/sys#fullDelete false . http://example/Individuals/BabyBear1 cmwell://meta/sys#markReplace http://purl.org/vocab/relationship/siblingOf . Response: { success :true} 7. Read the infotons again and verify the deletions Action: Read the Baby Bear infotons again and verify the deletions. Curl command: curl http://localhost:8080/example/Individuals?op=search qp=$http://purl.org/vocab/relationship/childOf$:PapaBear format=ttl recursive with-data Response: @ prefix nn : http :// localhost : 8080 / meta / nn # . @ prefix bermuda : http :// ont . thomsonreuters . com / bermuda / . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix sys : http :// localhost : 8080 / meta / sys # . @ prefix relationship : http :// purl . org / vocab / relationship / . http :// localhost : 8080 / example / Individuals / BabyBear2 sys : dataCenter dc1 ; sys : indexTime 1470126116579 ^^ xsd : long ; sys : lastModified 2016-08-02T08:21:54.723Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/BabyBear2 ; sys : type ObjectInfoton ; sys : uuid e53aca37ccc41b075eb74902e3f9c1ec ; bermuda : hasName Craig ; relationship : childOf http :// example / Individuals / PapaBear , http :// example / Individuals / MamaBear . [ sys : pagination [ sys : first http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-02T08%3A21%3A54.723Z to=2016-08-02T08%3A25%3A47.780Z qp=%24http%3A%2F%2Fpurl.org%2Fvocab%2Frelationship%2FchildOf%24%3APapaBear length=2 offset=0 ; sys : last http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-02T08%3A21%3A54.723Z to=2016-08-02T08%3A25%3A47.780Z qp=%24http%3A%2F%2Fpurl.org%2Fvocab%2Frelationship%2FchildOf%24%3APapaBear length=2 offset=2 ; sys : self http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-02T08%3A21%3A54.723Z to=2016-08-02T08%3A25%3A47.780Z qp=%24http%3A%2F%2Fpurl.org%2Fvocab%2Frelationship%2FchildOf%24%3APapaBear length=2 offset=0 ; sys : type PaginationInfo ] ; sys : results [ sys : fromDate 2016-08-02T08:21:54.723Z ^^ xsd : dateTime ; sys : infotons http : //localhost:8080/example/Individuals/BabyBear2 , http://localhost:8080/example/Individuals/BabyBear1 ; sys : length 2 ^^ xsd : long ; sys : offset 0 ^^ xsd : long ; sys : toDate 2016-08-02T08:25:47.780Z ^^ xsd : dateTime ; sys : total 2 ^^ xsd : long ; sys : type SearchResults ] ; sys : type SearchResponse ] . http :// localhost : 8080 / example / Individuals / BabyBear1 sys : dataCenter dc1 ; sys : indexTime 1470126348410 ^^ xsd : long ; sys : lastModified 2016-08-02T08:25:47.780Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/BabyBear1 ; sys : type ObjectInfoton ; sys : uuid 90e936f386a580c559a4919647edcae6 ; bermuda : hasName Cathy ; relationship : childOf http :// example / Individuals / MamaBear , http :// example / Individuals / PapaBear . API Reference Add Infotons and Fields Delete Multiple Infotons Delete Fields Get Multiple Infotons by URI Query for Infotons Using Field Conditions Replace Field Values","title":"A Brief CM-Well Docker Tutorial"},{"location":"Tutorials/Tutorial.Docker.html#a-brief-cm-well-docker-tutorial","text":"This page describes how to get started with CM-Well, by running some basic workflows over a private CM-Well Docker instance. First, learn about CM-Well Docker and how to install and run it . After installing and running CM-Well Docker, run the following workflows: Add some infotons and their fields . Read the infotons you wrote . Query for infotons by field values . Update field values . Read the changed infotons and verify that their fields were updated . Delete some infotons and fields . Read the infotons again and verify the deletions . Note If you're planning to use the Curl command, read Using the Curl Utility to Call CM-Well .","title":"A Brief CM-Well Docker Tutorial"},{"location":"Tutorials/Tutorial.Docker.html#1-add-some-infotons-and-their-fields","text":"Action: Create 5 new infotons under the path example/Individuals: MamaBear, PapaBear, BabyBear1, BabyBear2 and BabyBear3. Each bear has a hasName field with a name value. Curl command: curl -X POST http://localhost:8080/_in?format=ntriples --data-binary @input.txt File contents: http://example/Individuals/MamaBear http://purl.org/vocab/relationship/spouseOf http://example/Individuals/PapaBear . http://example/Individuals/MamaBear http://ont.thomsonreuters.com/bermuda/hasName Betty . http://example/Individuals/PapaBear http://ont.thomsonreuters.com/bermuda/hasName Barney . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear1 http://ont.thomsonreuters.com/bermuda/hasName Barbara . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/siblingOf http://example/Individuals/BabyBear2 . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/siblingOf http://example/Individuals/BabyBear3 . http://example/Individuals/BabyBear2 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear2 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear2 http://ont.thomsonreuters.com/bermuda/hasName Bobby . http://example/Individuals/BabyBear3 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear3 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear3 http://ont.thomsonreuters.com/bermuda/hasName Bert . Response: { success :true}","title":"1. Add some infotons and their fields"},{"location":"Tutorials/Tutorial.Docker.html#2-read-the-infotons-you-wrote","text":"Action: Read all infotons under example/Individuals, with their fields. Curl command: curl http://localhost:8080/example/Individuals?op=search format=ttl recursive with-data Response: @ prefix nn : http :// localhost : 8080 / meta / nn # . @ prefix bermuda : http :// ont . thomsonreuters . com / bermuda / . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix rel : http :// purl . org / vocab / relationship / . @ prefix sys : http :// localhost : 8080 / meta / sys # . http :// localhost : 8080 / example / Individuals / MamaBear sys : dataCenter lh ; sys : indexTime 1470058071114 ^^ xsd : long ; sys : lastModified 2016-08-01T13:27:49.241Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/MamaBear ; sys : type ObjectInfoton ; sys : uuid e6f36b01bec464f9e2a8d8b690590e31 ; bermuda : hasName Betty ; rel : spouseOf http :// example / Individuals / PapaBear . http :// localhost : 8080 / example / Individuals / BabyBear2 sys : dataCenter lh ; sys : indexTime 1470058071125 ^^ xsd : long ; sys : lastModified 2016-08-01T13:27:49.241Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/BabyBear2 ; sys : type ObjectInfoton ; sys : uuid 284a5a2438db15b5f8d9ef87795c0945 ; bermuda : hasName Bobby ; rel : childOf http :// example / Individuals / PapaBear , http :// example / Individuals / MamaBear . http :// localhost : 8080 / example / Individuals / BabyBear3 sys : dataCenter lh ; sys : indexTime 1470058071112 ^^ xsd : long ; sys : lastModified 2016-08-01T13:27:49.239Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/BabyBear3 ; sys : type ObjectInfoton ; sys : uuid 671d93482c72b51cef5afa18c71692a5 ; bermuda : hasName Bert ; rel : childOf http :// example / Individuals / PapaBear , http :// example / Individuals / MamaBear . [ sys : pagination [ sys : first http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-01T13%3A27%3A49.239Z to=2016-08-01T13%3A27%3A49.242Z length=5 offset=0 ; sys : last http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-01T13%3A27%3A49.239Z to=2016-08-01T13%3A27%3A49.242Z length=5 offset=5 ; sys : self http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-01T13%3A27%3A49.239Z to=2016-08-01T13%3A27%3A49.242Z length=5 offset=0 ; sys : type PaginationInfo ] ; sys : results [ sys : fromDate 2016-08-01T13:27:49.239Z ^^ xsd : dateTime ; sys : infotons http : //localhost:8080/example/Individuals/MamaBear , http://localhost:8080/example/Individuals/BabyBear1 , http://localhost:8080/example/Individuals/PapaBear , http://localhost:8080/example/Individuals/BabyBear3 , http://localhost:8080/example/Individuals/BabyBear2 ; sys : length 5 ^^ xsd : long ; sys : offset 0 ^^ xsd : long ; sys : toDate 2016-08-01T13:27:49.242Z ^^ xsd : dateTime ; sys : total 5 ^^ xsd : long ; sys : type SearchResults ] ; sys : type SearchResponse ] . http :// localhost : 8080 / example / Individuals / BabyBear1 sys : dataCenter lh ; sys : indexTime 1470058071125 ^^ xsd : long ; sys : lastModified 2016-08-01T13:27:49.242Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/BabyBear1 ; sys : type ObjectInfoton ; sys : uuid 1627fe787d44b5a4fff19f50181b585b ; bermuda : hasName Barbara ; rel : childOf http :// example / Individuals / MamaBear , http :// example / Individuals / PapaBear ; rel : siblingOf http :// example / Individuals / BabyBear2 , http :// example / Individuals / BabyBear3 . http :// localhost : 8080 / example / Individuals / PapaBear sys : dataCenter lh ; sys : indexTime 1470058071120 ^^ xsd : long ; sys : lastModified 2016-08-01T13:27:49.241Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/PapaBear ; sys : type ObjectInfoton ; sys : uuid 6513a8d6395af8db932f49afb97cbfd1 ; bermuda : hasName Barney .","title":"2. Read the infotons you wrote"},{"location":"Tutorials/Tutorial.Docker.html#3-query-for-infotons-by-field-values","text":"Action: Read all infotons under example/Individuals that have a childOf relationship to PapaBear. Curl command: curl http://localhost:8080/example/Individuals?op=search qp=childOf.rel:PapaBear format=ttl recursive Response: @ prefix nn : http :// localhost : 8080 / meta / nn # . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix sys : http :// localhost : 8080 / meta / sys # . http :// localhost : 8080 / example / Individuals / BabyBear2 sys : dataCenter lh ; sys : indexTime 1470058071125 ^^ xsd : long ; sys : lastModified 2016-08-01T13:27:49.241Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/BabyBear2 ; sys : type ObjectInfoton ; sys : uuid 284a5a2438db15b5f8d9ef87795c0945 . http :// localhost : 8080 / example / Individuals / BabyBear3 sys : dataCenter lh ; sys : indexTime 1470058071112 ^^ xsd : long ; sys : lastModified 2016-08-01T13:27:49.239Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/BabyBear3 ; sys : type ObjectInfoton ; sys : uuid 671d93482c72b51cef5afa18c71692a5 . [ sys : pagination [ sys : first http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-01T13%3A27%3A49.239Z to=2016-08-01T13%3A27%3A49.242Z qp=childOf.rel%3APapaBear length=3 offset=0 ; sys : last http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-01T13%3A27%3A49.239Z to=2016-08-01T13%3A27%3A49.242Z qp=childOf.rel%3APapaBear length=3 offset=3 ; sys : self http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-01T13%3A27%3A49.239Z to=2016-08-01T13%3A27%3A49.242Z qp=childOf.rel%3APapaBear length=3 offset=0 ; sys : type PaginationInfo ] ; sys : results [ sys : fromDate 2016-08-01T13:27:49.239Z ^^ xsd : dateTime ; sys : infotons http : //localhost:8080/example/Individuals/BabyBear3 , http://localhost:8080/example/Individuals/BabyBear2 , http://localhost:8080/example/Individuals/BabyBear1 ; sys : length 3 ^^ xsd : long ; sys : offset 0 ^^ xsd : long ; sys : toDate 2016-08-01T13:27:49.242Z ^^ xsd : dateTime ; sys : total 3 ^^ xsd : long ; sys : type SearchResults ] ; sys : type SearchResponse ] . http :// localhost : 8080 / example / Individuals / BabyBear1 sys : dataCenter lh ; sys : indexTime 1470058071125 ^^ xsd : long ; sys : lastModified 2016-08-01T13:27:49.242Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/BabyBear1 ; sys : type ObjectInfoton ; sys : uuid 1627fe787d44b5a4fff19f50181b585b .","title":"3. Query for infotons by field values"},{"location":"Tutorials/Tutorial.Docker.html#4-update-field-values","text":"Action: Change all Baby Bear names. Curl command: curl -X POST http://localhost:8080/_in?format=ntriples --data-binary @input.txt File contents: http://example/Individuals/BabyBear1 cmwell://meta/sys#markReplace http://ont.thomsonreuters.com/bermuda/hasName . http://example/Individuals/BabyBear1 http://ont.thomsonreuters.com/bermuda/hasName Cathy . http://example/Individuals/BabyBear2 cmwell://meta/sys#markReplace http://ont.thomsonreuters.com/bermuda/hasName . http://example/Individuals/BabyBear2 http://ont.thomsonreuters.com/bermuda/hasName Craig . http://example/Individuals/BabyBear3 cmwell://meta/sys#markReplace http://ont.thomsonreuters.com/bermuda/hasName . http://example/Individuals/BabyBear3 http://ont.thomsonreuters.com/bermuda/hasName Curt . Response: { success :true}","title":"4. Update field values"},{"location":"Tutorials/Tutorial.Docker.html#5-read-the-changed-infotons-and-verify-that-their-fields-were-updated","text":"Action: Read the Baby Bear infotons and verify that their fields were updated. Curl command: curl http://localhost:8080/example/Individuals?op=search qp=childOf.rel:PapaBear format=ttl recursive with-data Response: @ prefix nn : http :// localhost : 8080 / meta / nn # . @ prefix bermuda : http :// ont . thomsonreuters . com / bermuda / . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix rel : http :// purl . org / vocab / relationship / . @ prefix sys : http :// localhost : 8080 / meta / sys # . http :// localhost : 8080 / example / Individuals / BabyBear2 sys : dataCenter lh ; sys : indexTime 1470063470479 ^^ xsd : long ; sys : lastModified 2016-08-01T14:57:49.993Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/BabyBear2 ; sys : type ObjectInfoton ; sys : uuid ad07b30c8ba4ea88d5702872c4146fab ; bermuda : hasName Craig ; rel : childOf http :// example / Individuals / PapaBear , http :// example / Individuals / MamaBear . http :// localhost : 8080 / example / Individuals / BabyBear3 sys : dataCenter lh ; sys : indexTime 1470063470478 ^^ xsd : long ; sys : lastModified 2016-08-01T14:57:49.992Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/BabyBear3 ; sys : type ObjectInfoton ; sys : uuid 54ec65cd8e06c19b9007b8b5fb60ba71 ; bermuda : hasName Curt ; rel : childOf http :// example / Individuals / PapaBear , http :// example / Individuals / MamaBear . [ sys : pagination [ sys : first http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-01T14%3A57%3A49.992Z to=2016-08-01T14%3A57%3A49.993Z qp=childOf.rel%3APapaBear length=3 offset=0 ; sys : last http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-01T14%3A57%3A49.992Z to=2016-08-01T14%3A57%3A49.993Z qp=childOf.rel%3APapaBear length=3 offset=3 ; sys : self http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-01T14%3A57%3A49.992Z to=2016-08-01T14%3A57%3A49.993Z qp=childOf.rel%3APapaBear length=3 offset=0 ; sys : type PaginationInfo ] ; sys : results [ sys : fromDate 2016-08-01T14:57:49.992Z ^^ xsd : dateTime ; sys : infotons http : //localhost:8080/example/Individuals/BabyBear3 , http://localhost:8080/example/Individuals/BabyBear1 , http://localhost:8080/example/Individuals/BabyBear2 ; sys : length 3 ^^ xsd : long ; sys : offset 0 ^^ xsd : long ; sys : toDate 2016-08-01T14:57:49.993Z ^^ xsd : dateTime ; sys : total 3 ^^ xsd : long ; sys : type SearchResults ] ; sys : type SearchResponse ] . http :// localhost : 8080 / example / Individuals / BabyBear1 sys : dataCenter lh ; sys : indexTime 1470063470479 ^^ xsd : long ; sys : lastModified 2016-08-01T14:57:49.993Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/BabyBear1 ; sys : type ObjectInfoton ; sys : uuid 70e303b295d4abdb68f9197ca76531cc ; bermuda : hasName Cathy ; rel : childOf http :// example / Individuals / MamaBear , http :// example / Individuals / PapaBear ; rel : siblingOf http :// example / Individuals / BabyBear2 , http :// example / Individuals / BabyBear3 .","title":"5. Read the changed infotons and verify that their fields were updated"},{"location":"Tutorials/Tutorial.Docker.html#6-delete-some-infotons-and-fields","text":"Action: Delete the BabyBear3 infoton, and delete BabyBear1's siblingOf field. Curl command: curl -X POST http://localhost:8080/_in?format=ntriples --data-binary @input.txt File contents: http://example/Individuals/BabyBear3 cmwell://meta/sys#fullDelete false . http://example/Individuals/BabyBear1 cmwell://meta/sys#markReplace http://purl.org/vocab/relationship/siblingOf . Response: { success :true}","title":"6. Delete some infotons and fields"},{"location":"Tutorials/Tutorial.Docker.html#7-read-the-infotons-again-and-verify-the-deletions","text":"Action: Read the Baby Bear infotons again and verify the deletions. Curl command: curl http://localhost:8080/example/Individuals?op=search qp=$http://purl.org/vocab/relationship/childOf$:PapaBear format=ttl recursive with-data Response: @ prefix nn : http :// localhost : 8080 / meta / nn # . @ prefix bermuda : http :// ont . thomsonreuters . com / bermuda / . @ prefix xsd : http :// www . w3 . org / 2001 / XMLSchema # . @ prefix sys : http :// localhost : 8080 / meta / sys # . @ prefix relationship : http :// purl . org / vocab / relationship / . http :// localhost : 8080 / example / Individuals / BabyBear2 sys : dataCenter dc1 ; sys : indexTime 1470126116579 ^^ xsd : long ; sys : lastModified 2016-08-02T08:21:54.723Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/BabyBear2 ; sys : type ObjectInfoton ; sys : uuid e53aca37ccc41b075eb74902e3f9c1ec ; bermuda : hasName Craig ; relationship : childOf http :// example / Individuals / PapaBear , http :// example / Individuals / MamaBear . [ sys : pagination [ sys : first http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-02T08%3A21%3A54.723Z to=2016-08-02T08%3A25%3A47.780Z qp=%24http%3A%2F%2Fpurl.org%2Fvocab%2Frelationship%2FchildOf%24%3APapaBear length=2 offset=0 ; sys : last http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-02T08%3A21%3A54.723Z to=2016-08-02T08%3A25%3A47.780Z qp=%24http%3A%2F%2Fpurl.org%2Fvocab%2Frelationship%2FchildOf%24%3APapaBear length=2 offset=2 ; sys : self http : //localhost:8080/example/Individuals?format=ttl? recursive= op=search from=2016-08-02T08%3A21%3A54.723Z to=2016-08-02T08%3A25%3A47.780Z qp=%24http%3A%2F%2Fpurl.org%2Fvocab%2Frelationship%2FchildOf%24%3APapaBear length=2 offset=0 ; sys : type PaginationInfo ] ; sys : results [ sys : fromDate 2016-08-02T08:21:54.723Z ^^ xsd : dateTime ; sys : infotons http : //localhost:8080/example/Individuals/BabyBear2 , http://localhost:8080/example/Individuals/BabyBear1 ; sys : length 2 ^^ xsd : long ; sys : offset 0 ^^ xsd : long ; sys : toDate 2016-08-02T08:25:47.780Z ^^ xsd : dateTime ; sys : total 2 ^^ xsd : long ; sys : type SearchResults ] ; sys : type SearchResponse ] . http :// localhost : 8080 / example / Individuals / BabyBear1 sys : dataCenter dc1 ; sys : indexTime 1470126348410 ^^ xsd : long ; sys : lastModified 2016-08-02T08:25:47.780Z ^^ xsd : dateTime ; sys : parent /example/Individuals ; sys : path /example/Individuals/BabyBear1 ; sys : type ObjectInfoton ; sys : uuid 90e936f386a580c559a4919647edcae6 ; bermuda : hasName Cathy ; relationship : childOf http :// example / Individuals / MamaBear , http :// example / Individuals / PapaBear .","title":"7. Read the infotons again and verify the deletions"},{"location":"Tutorials/Tutorial.Docker.html#api-reference","text":"Add Infotons and Fields Delete Multiple Infotons Delete Fields Get Multiple Infotons by URI Query for Infotons Using Field Conditions Replace Field Values","title":"API Reference"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.AddFileInfoton.html","text":"Add a File Infoton Action: Add an image file to CM-Well. Note Before running the curl command, create the file: c:\\mypath\\test.png . After running the curl command, browse to /exercise/files/test.png and verify that the file was uploaded. Curl command: curl - X POST cm - well - host / exercise / files / test . png - H X-CM-WELL-TYPE: FILE - H Content-Type: image/png -- data - binary @ c:\\mypath \\t est.png Response: { success :true} Host an HTML Page in CM-Well Beyond hosting blob files like an image, CM-Well will also serve full HTML files (in fact, the CM-Well UI is hosted under the /meta URI structure and served using this method). This means that you can easily create additional applications that integrate with CM-Well APIs just by loading the file to CM-Well. The most basic HTML file is, of course, hello world. Create a new file on your file system with the following text html head title Hello World! /title /head body h3 Hello World! /body /html Publish to CM-Well curl - X POST cm - well - host / exercise / files / hello . html - H X-CM-WELL-TYPE: FILE - H Content-Type: text/html -- data - binary @ hello.html Now navigate to the page in your browser: Two more complex examples, a query builder , and a D3 integration , can be found in the examples directory. API Reference Add File Infoton","title":"Add a File Infoton"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.AddFileInfoton.html#add-a-file-infoton","text":"Action: Add an image file to CM-Well. Note Before running the curl command, create the file: c:\\mypath\\test.png . After running the curl command, browse to /exercise/files/test.png and verify that the file was uploaded. Curl command: curl - X POST cm - well - host / exercise / files / test . png - H X-CM-WELL-TYPE: FILE - H Content-Type: image/png -- data - binary @ c:\\mypath \\t est.png Response: { success :true}","title":"Add a File Infoton"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.AddFileInfoton.html#host-an-html-page-in-cm-well","text":"Beyond hosting blob files like an image, CM-Well will also serve full HTML files (in fact, the CM-Well UI is hosted under the /meta URI structure and served using this method). This means that you can easily create additional applications that integrate with CM-Well APIs just by loading the file to CM-Well. The most basic HTML file is, of course, hello world. Create a new file on your file system with the following text html head title Hello World! /title /head body h3 Hello World! /body /html Publish to CM-Well curl - X POST cm - well - host / exercise / files / hello . html - H X-CM-WELL-TYPE: FILE - H Content-Type: text/html -- data - binary @ hello.html Now navigate to the page in your browser: Two more complex examples, a query builder , and a D3 integration , can be found in the examples directory.","title":"Host an HTML Page in CM-Well"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.AddFileInfoton.html#api-reference","text":"Add File Infoton","title":"API Reference"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.AddInfotonsAndFields.html","text":"Add Infotons and Fields Action: Add several infotons and field values. After adding them, you can browse to their URIs and examine their fields. Curl command: curl -X POST cm-well-host /_in?format=ntriples --data-binary @input.txt File contents: http://example/Individuals/MamaBear http://purl.org/vocab/relationship/spouseOf http://example/Individuals/PapaBear . http://example/Individuals/MamaBear http://ont.thomsonreuters.com/bermuda/hasName Betty . http://example/Individuals/PapaBear http://ont.thomsonreuters.com/bermuda/hasName Barney . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear1 http://ont.thomsonreuters.com/bermuda/hasName Barbara . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/siblingOf http://example/Individuals/BabyBear2 . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/siblingOf http://example/Individuals/BabyBear3 . http://example/Individuals/BabyBear2 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear2 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear2 http://ont.thomsonreuters.com/bermuda/hasName Bobby . http://example/Individuals/BabyBear3 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear3 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear3 http://ont.thomsonreuters.com/bermuda/hasName Bert . Response: { success :true} API Reference Add Infotons and Fields","title":"Add Infotons and Fields"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.AddInfotonsAndFields.html#add-infotons-and-fields","text":"Action: Add several infotons and field values. After adding them, you can browse to their URIs and examine their fields. Curl command: curl -X POST cm-well-host /_in?format=ntriples --data-binary @input.txt File contents: http://example/Individuals/MamaBear http://purl.org/vocab/relationship/spouseOf http://example/Individuals/PapaBear . http://example/Individuals/MamaBear http://ont.thomsonreuters.com/bermuda/hasName Betty . http://example/Individuals/PapaBear http://ont.thomsonreuters.com/bermuda/hasName Barney . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear1 http://ont.thomsonreuters.com/bermuda/hasName Barbara . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/siblingOf http://example/Individuals/BabyBear2 . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/siblingOf http://example/Individuals/BabyBear3 . http://example/Individuals/BabyBear2 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear2 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear2 http://ont.thomsonreuters.com/bermuda/hasName Bobby . http://example/Individuals/BabyBear3 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear3 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear3 http://ont.thomsonreuters.com/bermuda/hasName Bert . Response: { success :true}","title":"Add Infotons and Fields"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.AddInfotonsAndFields.html#api-reference","text":"Add Infotons and Fields","title":"API Reference"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.DeleteInfotonsAndFields.html","text":"Delete Infotons and Fields Step Outline Add Infotons and Fields . Delete Infotons and Fields 1. Add Infotons and Fields Action: Add several infotons and field values. Curl command: curl -X POST cm-well-host /_in?format=ntriples --data-binary @input.txt File contents: http://example/Individuals/MamaBear http://purl.org/vocab/relationship/spouseOf http://example/Individuals/PapaBear . http://example/Individuals/MamaBear http://ont.thomsonreuters.com/bermuda/hasName Betty . http://example/Individuals/PapaBear http://purl.org/vocab/relationship/spouseOf http://example/Individuals/MamaBear . http://example/Individuals/PapaBear http://ont.thomsonreuters.com/bermuda/hasName Barney . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear1 http://ont.thomsonreuters.com/bermuda/hasName Barbara . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/siblingOf http://example/Individuals/BabyBear2 . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/siblingOf http://example/Individuals/BabyBear3 . http://example/Individuals/BabyBear2 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear2 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear2 http://ont.thomsonreuters.com/bermuda/hasName Bobby . http://example/Individuals/BabyBear3 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear3 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear3 http://ont.thomsonreuters.com/bermuda/hasName Bert . Response: { success :true} 2. Update Field Values Action: Delete all \"BabyBear\" infotons and all name fields. Curl command: curl -X POST cm-well-host /_in?format=ntriples --data-binary @input.txt File contents: http://example/Individuals/BabyBear1 cmwell://meta/sys#fullDelete false . http://example/Individuals/BabyBear2 cmwell://meta/sys#fullDelete false . http://example/Individuals/BabyBear3 cmwell://meta/sys#fullDelete false . http://example/Individuals/MamaBear cmwell://meta/sys#markReplace http://ont.thomsonreuters.com/bermuda/hasName . http://example/Individuals/PapaBear cmwell://meta/sys#markReplace http://ont.thomsonreuters.com/bermuda/hasName . Response: { success :true} API Reference Add Infotons and Fields Delete Multiple Infotons Delete Fields","title":"Delete Infotons and Fields"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.DeleteInfotonsAndFields.html#delete-infotons-and-fields","text":"","title":"Delete Infotons and Fields"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.DeleteInfotonsAndFields.html#step-outline","text":"Add Infotons and Fields . Delete Infotons and Fields","title":"Step Outline"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.DeleteInfotonsAndFields.html#1-add-infotons-and-fields","text":"Action: Add several infotons and field values. Curl command: curl -X POST cm-well-host /_in?format=ntriples --data-binary @input.txt File contents: http://example/Individuals/MamaBear http://purl.org/vocab/relationship/spouseOf http://example/Individuals/PapaBear . http://example/Individuals/MamaBear http://ont.thomsonreuters.com/bermuda/hasName Betty . http://example/Individuals/PapaBear http://purl.org/vocab/relationship/spouseOf http://example/Individuals/MamaBear . http://example/Individuals/PapaBear http://ont.thomsonreuters.com/bermuda/hasName Barney . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear1 http://ont.thomsonreuters.com/bermuda/hasName Barbara . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/siblingOf http://example/Individuals/BabyBear2 . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/siblingOf http://example/Individuals/BabyBear3 . http://example/Individuals/BabyBear2 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear2 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear2 http://ont.thomsonreuters.com/bermuda/hasName Bobby . http://example/Individuals/BabyBear3 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear3 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear3 http://ont.thomsonreuters.com/bermuda/hasName Bert . Response: { success :true}","title":"1. Add Infotons and Fields"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.DeleteInfotonsAndFields.html#2-update-field-values","text":"Action: Delete all \"BabyBear\" infotons and all name fields. Curl command: curl -X POST cm-well-host /_in?format=ntriples --data-binary @input.txt File contents: http://example/Individuals/BabyBear1 cmwell://meta/sys#fullDelete false . http://example/Individuals/BabyBear2 cmwell://meta/sys#fullDelete false . http://example/Individuals/BabyBear3 cmwell://meta/sys#fullDelete false . http://example/Individuals/MamaBear cmwell://meta/sys#markReplace http://ont.thomsonreuters.com/bermuda/hasName . http://example/Individuals/PapaBear cmwell://meta/sys#markReplace http://ont.thomsonreuters.com/bermuda/hasName . Response: { success :true}","title":"2. Update Field Values"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.DeleteInfotonsAndFields.html#api-reference","text":"Add Infotons and Fields Delete Multiple Infotons Delete Fields","title":"API Reference"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.GetInfotonsByURI.html","text":"Get Infotons by URI Step Outline Upload infotons . Get a single infoton by URI . Get multiple infotons by URI . 1. Upload Infotons Action: Upload triples for 2 person entities with gender and name fields. Curl command: curl -X POST cm-well-host /_in?format=ntriples -H Content-Type: text/plain --data-binary @inputfile.txt Input file contents: http://exercise/JohnSmith http://www.w3.org/2006/vcard/ns#GENDER Male . http://exercise/JohnSmith http://www.w3.org/2006/vcard/ns#FN John Smith . http://exercise/JohnSmith http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://www.w3.org/2006/vcard/ns#Individual . http://exercise/JaneSmith http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://www.w3.org/2006/vcard/ns#Individual . http://exercise/JaneSmith http://www.w3.org/2006/vcard/ns#GENDER Female . http://exercise/JaneSmith http://www.w3.org/2006/vcard/ns#FN Jane Smith . Response: { success :true} 2. Get a Single Infoton by URI Action: Get \"Jane Smith\" infoton. Curl command: curl cm-well-host /exercise/JaneSmith?format=json pretty Response: { type : ObjectInfoton , system : { uuid : 8efaa16a187376ea6663b1882e371d5d , lastModified : 2016-07-08T15:20:12.496Z , path : /exercise/JaneSmith , dataCenter : dc1 , indexTime : 1467991213647, parent : /exercise }, fields : { FN.vcard : [ Jane Smith ], GENDER.vcard : [ Female ], type.rdf : [ http://www.w3.org/2006/vcard/ns#Individual ] } } 3. Get Multiple Infotons by URI Action: Get \"John Smith\" and \"Jane Smith\" infotons. Curl command: curl -X POST cm-well-host /_out?format=json pretty -H Content-Type: text/plain --data-binary @inputfile.txt Input file contents: /exercise/JohnSmith /exercise/JaneSmith Response: { type : RetrievablePaths , infotons :[ { type : ObjectInfoton , system :{ uuid : 181063461a14dae633f096ff4d142f00 , lastModified : 2016-07-08T15:20:12.496Z , path : /exercise/JohnSmith , dataCenter : dc1 , indexTime :1467991213647, parent : /exercise }, fields :{ FN.vcard :[ John Smith ], GENDER.vcard :[ Male ], type.rdf :[ http://www.w3.org/2006/vcard/ns#Individual ] } }, { type : ObjectInfoton , system :{ uuid : 8efaa16a187376ea6663b1882e371d5d , lastModified : 2016-07-08T15:20:12.496Z , path : /exercise/JaneSmith , dataCenter : dc1 , indexTime :1467991213647, parent : /exercise }, fields :{ FN.vcard :[ Jane Smith ], GENDER.vcard :[ Female ], type.rdf :[ http://www.w3.org/2006/vcard/ns#Individual ] } } ], irretrievablePaths :[] } API Reference Add Infotons and Fields Get a Single Infoton by URI Get Multiple Infotons by URI","title":"Get Infotons by URI"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.GetInfotonsByURI.html#get-infotons-by-uri","text":"","title":"Get Infotons by URI"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.GetInfotonsByURI.html#step-outline","text":"Upload infotons . Get a single infoton by URI . Get multiple infotons by URI .","title":"Step Outline"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.GetInfotonsByURI.html#1-upload-infotons","text":"Action: Upload triples for 2 person entities with gender and name fields. Curl command: curl -X POST cm-well-host /_in?format=ntriples -H Content-Type: text/plain --data-binary @inputfile.txt Input file contents: http://exercise/JohnSmith http://www.w3.org/2006/vcard/ns#GENDER Male . http://exercise/JohnSmith http://www.w3.org/2006/vcard/ns#FN John Smith . http://exercise/JohnSmith http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://www.w3.org/2006/vcard/ns#Individual . http://exercise/JaneSmith http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://www.w3.org/2006/vcard/ns#Individual . http://exercise/JaneSmith http://www.w3.org/2006/vcard/ns#GENDER Female . http://exercise/JaneSmith http://www.w3.org/2006/vcard/ns#FN Jane Smith . Response: { success :true}","title":"1. Upload Infotons"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.GetInfotonsByURI.html#2-get-a-single-infoton-by-uri","text":"Action: Get \"Jane Smith\" infoton. Curl command: curl cm-well-host /exercise/JaneSmith?format=json pretty Response: { type : ObjectInfoton , system : { uuid : 8efaa16a187376ea6663b1882e371d5d , lastModified : 2016-07-08T15:20:12.496Z , path : /exercise/JaneSmith , dataCenter : dc1 , indexTime : 1467991213647, parent : /exercise }, fields : { FN.vcard : [ Jane Smith ], GENDER.vcard : [ Female ], type.rdf : [ http://www.w3.org/2006/vcard/ns#Individual ] } }","title":"2. Get a Single Infoton by URI"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.GetInfotonsByURI.html#3-get-multiple-infotons-by-uri","text":"Action: Get \"John Smith\" and \"Jane Smith\" infotons. Curl command: curl -X POST cm-well-host /_out?format=json pretty -H Content-Type: text/plain --data-binary @inputfile.txt Input file contents: /exercise/JohnSmith /exercise/JaneSmith Response: { type : RetrievablePaths , infotons :[ { type : ObjectInfoton , system :{ uuid : 181063461a14dae633f096ff4d142f00 , lastModified : 2016-07-08T15:20:12.496Z , path : /exercise/JohnSmith , dataCenter : dc1 , indexTime :1467991213647, parent : /exercise }, fields :{ FN.vcard :[ John Smith ], GENDER.vcard :[ Male ], type.rdf :[ http://www.w3.org/2006/vcard/ns#Individual ] } }, { type : ObjectInfoton , system :{ uuid : 8efaa16a187376ea6663b1882e371d5d , lastModified : 2016-07-08T15:20:12.496Z , path : /exercise/JaneSmith , dataCenter : dc1 , indexTime :1467991213647, parent : /exercise }, fields :{ FN.vcard :[ Jane Smith ], GENDER.vcard :[ Female ], type.rdf :[ http://www.w3.org/2006/vcard/ns#Individual ] } } ], irretrievablePaths :[] }","title":"3. Get Multiple Infotons by URI"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.GetInfotonsByURI.html#api-reference","text":"Add Infotons and Fields Get a Single Infoton by URI Get Multiple Infotons by URI","title":"API Reference"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.QueryForInfotons.html","text":"Query for Infotons Step Outline Note These steps are not dependent on each other and do not have to be completed in order. Query by One Field Value . Get Results with Data Use Various Comparison Operators . Specify Output Fields . Implement AND, OR, NOT . Page through Results . Traverse Inbound and Outbound Links . 1. Query by One Field Value Action: Get up to 3 entities under permid.org, whose CommonName value contains the string \"Reuters\". Curl command: curl cm-well-host /permid.org?op=search qp=CommonName.mdaas:Reuters length=3 format=json pretty Response: { type : SearchResponse , pagination : { type : PaginationInfo , first : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A40%3A01.740Z to=2016-07-08T15%3A40%3A01.979Z qp=CommonName.mdaas%3AReuters length=3 offset=0 , self : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A40%3A01.740Z to=2016-07-08T15%3A40%3A01.979Z qp=CommonName.mdaas%3AReuters length=3 offset=0 , next : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A40%3A01.740Z to=2016-07-08T15%3A40%3A01.979Z qp=CommonName.mdaas%3AReuters length=3 offset=3 , last : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A40%3A01.740Z to=2016-07-08T15%3A40%3A01.979Z qp=CommonName.mdaas%3AReuters length=3 offset=70914 }, results : { type : SearchResults , fromDate : 2016-07-08T15:40:01.740Z , toDate : 2016-07-08T15:40:01.979Z , total : 70914, offset : 0, length : 3, infotons : [ { type : ObjectInfoton , system : { uuid : 08e369b8d4660826eb9494810e0af09b , lastModified : 2016-07-08T15:40:01.979Z , path : /permid.org/1-21591377740 , dataCenter : dc1 , indexTime : 1467992402553, parent : /permid.org } }, { type : ObjectInfoton , system : { uuid : c8fc5e38b51892b529caa66646d6a56a , lastModified : 2016-07-08T15:40:01.940Z , path : /permid.org/1-21591377619 , dataCenter : dc1 , indexTime : 1467992403912, parent : /permid.org } }, { type : ObjectInfoton , system : { uuid : f188963093cd7b90a169c81bb8973daf , lastModified : 2016-07-08T15:40:01.740Z , path : /permid.org/1-21591374238 , dataCenter : dc1 , indexTime : 1467992402499, parent : /permid.org } } ] } } 2. Get Results with Data Action: Get up to 3 entities under permid.org, whose CommonName value contains the string \"Reuters\", with their data, i.e. with all fields and not just system fields. Curl command: curl cm-well-host /permid.org?op=search qp=CommonName.mdaas:Reuters length=3 format=json pretty with-data Response: { type : SearchResponse , pagination : { type : PaginationInfo , first : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A40%3A01.740Z to=2016-07-08T15%3A40%3A01.979Z qp=CommonName.mdaas%3AReuters length=3 offset=0 , self : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A40%3A01.740Z to=2016-07-08T15%3A40%3A01.979Z qp=CommonName.mdaas%3AReuters length=3 offset=0 , next : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A40%3A01.740Z to=2016-07-08T15%3A40%3A01.979Z qp=CommonName.mdaas%3AReuters length=3 offset=3 , last : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A40%3A01.740Z to=2016-07-08T15%3A40%3A01.979Z qp=CommonName.mdaas%3AReuters length=3 offset=70914 }, results : { type : SearchResults , fromDate : 2016-07-08T15:40:01.740Z , toDate : 2016-07-08T15:40:01.979Z , total : 70914, offset : 0, length : 3, infotons : [ { type : ObjectInfoton , system : { uuid : 08e369b8d4660826eb9494810e0af09b , lastModified : 2016-07-08T15:40:01.979Z , path : /permid.org/1-21591377740 , dataCenter : dc1 , indexTime : 1467992402553, parent : /permid.org }, fields : { type.rdf : [ http://ont.thomsonreuters.com/mdaas/Instrument ], instrumentExpiryDate.mdaas : [ 2050-12-31 ], isIssuedBy.mdaas : [ http://permid.org/1-4296733007 ], CommonName.mdaas : [ Goldman Sachs Co Wertpapier GMBH Call 1313.7255 USD Thomson Reuters: Gold / US Dollar FX Spot Rate 31Dec99 ], instrumentCurrencyName.mdaas : [ EUR ], instrumentStatus.mdaas : [ Active ], RCSAssetClass.mdaas : [ BARWNT ], instrumentAssetClass.mdaas : [ Barrier Warrants ] } }, { type : ObjectInfoton , system : { uuid : c8fc5e38b51892b529caa66646d6a56a , lastModified : 2016-07-08T15:40:01.940Z , path : /permid.org/1-21591377619 , dataCenter : dc1 , indexTime : 1467992403912, parent : /permid.org }, fields : { type.rdf : [ http://ont.thomsonreuters.com/mdaas/Instrument ], instrumentExpiryDate.mdaas : [ 2050-12-31 ], isIssuedBy.mdaas : [ http://permid.org/1-4296733007 ], CommonName.mdaas : [ Goldman Sachs Co Wertpapier GMBH Call 1240 USD Thomson Reuters: Gold / US Dollar FX Spot Rate 31Dec99 ], instrumentCurrencyName.mdaas : [ EUR ], instrumentStatus.mdaas : [ Active ], RCSAssetClass.mdaas : [ BARWNT ], instrumentAssetClass.mdaas : [ Barrier Warrants ] } }, { type : ObjectInfoton , system : { uuid : f188963093cd7b90a169c81bb8973daf , lastModified : 2016-07-08T15:40:01.740Z , path : /permid.org/1-21591374238 , dataCenter : dc1 , indexTime : 1467992402499, parent : /permid.org }, fields : { type.rdf : [ http://ont.thomsonreuters.com/mdaas/Instrument ], instrumentExpiryDate.mdaas : [ 2016-12-13 ], isIssuedBy.mdaas : [ http://permid.org/1-8589934314 ], CommonName.mdaas : [ COMMERZBANK AG Put 0.0001 USD Thomson Reuters: Gold / US Dollar FX Spot Rate 13Dec16 ], instrumentCurrencyName.mdaas : [ EUR ], instrumentStatus.mdaas : [ Active ], RCSAssetClass.mdaas : [ BARWNT ], instrumentAssetClass.mdaas : [ Barrier Warrants ] } } ] } } 3. Use Various Comparison Operators Partial Match Action: Get all entities under permid.org, whose CommonName value contains the string \"qqqqq\" (there are no infotons that match this query). The field condition uses the : partial match operator. Partial match Curl command: curl cm-well-host /permid.org?op=search qp=CommonName.mdaas:qqqqq format=json pretty with-data Partial match response: { type : SearchResponse , pagination : { type : PaginationInfo , first : http://cm-well-host.com/permid.org?format=json? op=search qp=CommonName.mdaas%3Aqqqqq length=0 offset=0 , previous : http://cm-well-host.com/permid.org?format=json? op=search qp=CommonName.mdaas%3Aqqqqq length=0 offset=0 , self : http://cm-well-host.com/permid.org?format=json? op=search qp=CommonName.mdaas%3Aqqqqq length=0 offset=0 , last : http://cm-well-host.com/permid.org?format=json? op=search qp=CommonName.mdaas%3Aqqqqq length=0 offset=0 }, results : { type : SearchResults , total : 0, offset : 0, length : 0, infotons : [ ] } } Fuzzy Match Action: Get all entities under permid.org, whose CommonName value is a \"fuzzy\" (approximate) match of the string \"qqqqq\". The field condition uses the ~ fuzzy match operator. Fuzzy match Curl command: curl cm-well-host /permid.org?op=search qp=CommonName.mdaas~qqqqq format=json pretty with-data Fuzzy match response: { type : SearchResponse , pagination : { type : PaginationInfo , first : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-01T03%3A10%3A07.160Z to=2016-07-08T03%3A53%3A52.418Z qp=CommonName.mdaas%7Eqqqqq length=10 offset=0 , self : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-01T03%3A10%3A07.160Z to=2016-07-08T03%3A53%3A52.418Z qp=CommonName.mdaas%7Eqqqqq length=10 offset=0 , next : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-01T03%3A10%3A07.160Z to=2016-07-08T03%3A53%3A52.418Z qp=CommonName.mdaas%7Eqqqqq length=10 offset=10 , last : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-01T03%3A10%3A07.160Z to=2016-07-08T03%3A53%3A52.418Z qp=CommonName.mdaas%7Eqqqqq length=10 offset=350 }, results : { type : SearchResults , fromDate : 2016-07-01T03:10:07.160Z , toDate : 2016-07-08T03:53:52.418Z , total : 354, offset : 0, length : 10, infotons : [ { type : ObjectInfoton , system : { uuid : c780fe7c4a835a36ce386bbd81be0240 , lastModified : 2016-07-08T03:53:52.418Z , path : /permid.org/1-21591414360 , dataCenter : dc1 , indexTime : 1467950034046, parent : /permid.org }, fields : { RIC.mdaas : [ QQQD1W2HN6:OX ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], IlxID.mdaas : [ 2QQQ1DH/N6-OC,USD,NORM ], IsTradingIn.mdaas : [ USD ], CommonName.mdaas : [ QQQPo ND WK JUL6 ], RCSAssetClass.mdaas : [ FUT ], TRCSAssetClass.mdaas : [ Equity Futures ], ExchangeTicker.mdaas : [ QQQ2H ], QuoteExchangeCode.mdaas : [ ONE ] } }, { type : ObjectInfoton , system : { uuid : 5fdbe8ee644edceaf364a296659482be , lastModified : 2016-07-08T00:24:10.707Z , path : /permid.org/1-21591535341 , dataCenter : dc1 , indexTime : 1467937451672, parent : /permid.org }, fields : { RIC.mdaas : [ QQQD1W3FN6:OX ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], IsTradingIn.mdaas : [ USD ], CommonName.mdaas : [ QQQPo ND WK JUL6 ], RCSAssetClass.mdaas : [ FUT ], TRCSAssetClass.mdaas : [ Equity Futures ], ExchangeTicker.mdaas : [ QQQ3F ], QuoteExchangeCode.mdaas : [ ONE ] } }, { type : ObjectInfoton , system : { uuid : d378e665e282dc62bcdff76747c64a5a , lastModified : 2016-07-07T04:14:42.847Z , path : /permid.org/1-21591343981 , dataCenter : dc1 , indexTime : 1467864883985, parent : /permid.org }, fields : { RIC.mdaas : [ QQQD1W2WN6:OX ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], IlxID.mdaas : [ 2QQQ1DW/N6-OC,USD,NORM ], IsTradingIn.mdaas : [ USD ], CommonName.mdaas : [ QQQPo ND WK JUL6 ], RCSAssetClass.mdaas : [ FUT ], TRCSAssetClass.mdaas : [ Equity Futures ], ExchangeTicker.mdaas : [ QQQ2W ], QuoteExchangeCode.mdaas : [ ONE ] } }, { type : ObjectInfoton , system : { uuid : 49ebf361fcae4d04af02df231e383deb , lastModified : 2016-07-06T03:19:41.203Z , path : /permid.org/1-21591285520 , dataCenter : dc1 , indexTime : 1467775238523, parent : /permid.org }, fields : { RIC.mdaas : [ QQQD1W2MN6:OX ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], IlxID.mdaas : [ 2QQQ1DM/N6-OC,USD,NORM ], IsTradingIn.mdaas : [ USD ], CommonName.mdaas : [ QQQPo ND WK JUL6 ], RCSAssetClass.mdaas : [ FUT ], TRCSAssetClass.mdaas : [ Equity Futures ], ExchangeTicker.mdaas : [ QQQ2M ], QuoteExchangeCode.mdaas : [ ONE ] } }, { type : ObjectInfoton , system : { uuid : edb0aef87075bad3d8c6e8767e1cbbf9 , lastModified : 2016-07-06T03:19:40.964Z , path : /permid.org/1-21591285350 , dataCenter : dc1 , indexTime : 1467775187102, parent : /permid.org }, fields : { RIC.mdaas : [ QQQD1W2TN6:OX ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], IlxID.mdaas : [ 2QQQ1DT/N6-OC,USD,NORM ], IsTradingIn.mdaas : [ USD ], CommonName.mdaas : [ QQQPo ND WK JUL6 ], RCSAssetClass.mdaas : [ FUT ], TRCSAssetClass.mdaas : [ Equity Futures ], ExchangeTicker.mdaas : [ QQQ2T ], QuoteExchangeCode.mdaas : [ ONE ] } }, { type : ObjectInfoton , system : { uuid : 3d00c221fa4cc4036efa00bcfec33f59 , lastModified : 2016-07-05T02:43:57.872Z , path : /permid.org/1-21590488985 , dataCenter : dc1 , indexTime : 1467686639607, parent : /permid.org }, fields : { RIC.mdaas : [ QQQD1W1FN6:OX^1 ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], IlxID.mdaas : [ 1QQQ1DF/N6-OC,USD,NORM ], IsTradingIn.mdaas : [ USD ], CommonName.mdaas : [ QQQPo ND WK JUL6 ], RCSAssetClass.mdaas : [ FUT ], TRCSAssetClass.mdaas : [ Equity Futures ], ExchangeTicker.mdaas : [ QQQ1F ], QuoteExchangeCode.mdaas : [ ONE ] } }, { type : ObjectInfoton , system : { uuid : 19547d71542eaa8cd3c55c38e8065a5e , lastModified : 2016-07-04T02:23:47.608Z , path : /permid.org/1-21590381247 , dataCenter : dc1 , indexTime : 1467599028822, parent : /permid.org }, fields : { RIC.mdaas : [ QQQD1W5HM6:OX^1 ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], IlxID.mdaas : [ 5QQQ1DH/M6-OC,USD,NORM ], IsTradingIn.mdaas : [ USD ], CommonName.mdaas : [ QQQPo ND WK JUN6 ], RCSAssetClass.mdaas : [ FUT ], TRCSAssetClass.mdaas : [ Equity Futures ], ExchangeTicker.mdaas : [ QQQ5H ], QuoteExchangeCode.mdaas : [ ONE ] } }, { type : ObjectInfoton , system : { uuid : 6e3449bc916a5b9112e2971b2848d696 , lastModified : 2016-07-03T06:45:38.168Z , path : /permid.org/1-21590310413 , dataCenter : dc1 , indexTime : 1467528339678, parent : /permid.org }, fields : { RIC.mdaas : [ QQQD1W5WM6:OX^1 ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], IlxID.mdaas : [ 5QQQ1DW/M6-OC,USD,NORM ], IsTradingIn.mdaas : [ USD ], CommonName.mdaas : [ QQQPo ND WK JUN6 ], RCSAssetClass.mdaas : [ FUT ], TRCSAssetClass.mdaas : [ Equity Futures ], ExchangeTicker.mdaas : [ QQQ5W ], QuoteExchangeCode.mdaas : [ ONE ] } }, { type : ObjectInfoton , system : { uuid : eccf30dbdf6d72fd74fd3fc94bc62434 , lastModified : 2016-07-02T01:28:52.291Z , path : /permid.org/1-21590268843 , dataCenter : dc1 , indexTime : 1467422934086, parent : /permid.org }, fields : { RIC.mdaas : [ QQQD1W4TM6:OX^1 ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], IlxID.mdaas : [ 4QQQ1DT/M6-OC,USD,NORM ], IsTradingIn.mdaas : [ USD ], CommonName.mdaas : [ QQQPo ND WK JUN6 ], RCSAssetClass.mdaas : [ FUT ], TRCSAssetClass.mdaas : [ Equity Futures ], ExchangeTicker.mdaas : [ QQQ4T ], QuoteExchangeCode.mdaas : [ ONE ] } }, { type : ObjectInfoton , system : { uuid : b1902ece02d0184c39bac93fc36cbff0 , lastModified : 2016-07-01T03:10:07.160Z , path : /permid.org/1-21590006231 , dataCenter : dc1 , indexTime : 1467342607863, parent : /permid.org }, fields : { RIC.mdaas : [ QQQD1W4MM6:OX^1 ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], IlxID.mdaas : [ 4QQQ1DM/M6-OC,USD,NORM ], IsTradingIn.mdaas : [ USD ], CommonName.mdaas : [ QQQPo ND WK JUN6 ], RCSAssetClass.mdaas : [ FUT ], TRCSAssetClass.mdaas : [ Equity Futures ], ExchangeTicker.mdaas : [ QQQ4M ], QuoteExchangeCode.mdaas : [ ONE ] } } ] } } Numeric Comparison Action: Get up to 3 entities under permid.org, whose dsQuotationNumber value is greater than 950000. The field condition uses the greater-than operator. Numeric comparison Curl command: curl cm-well-host /permid.org?op=search qp=dsQuotationNumber.mdaas 950000 format=json pretty with-data length=3 Numeric comparison response: { type : SearchResponse , pagination : { type : PaginationInfo , first : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T09%3A39%3A09.320Z to=2016-07-08T11%3A54%3A49.121Z qp=dsQuotationNumber.mdaas%3E950000 length=3 offset=0 , self : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T09%3A39%3A09.320Z to=2016-07-08T11%3A54%3A49.121Z qp=dsQuotationNumber.mdaas%3E950000 length=3 offset=0 , next : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T09%3A39%3A09.320Z to=2016-07-08T11%3A54%3A49.121Z qp=dsQuotationNumber.mdaas%3E950000 length=3 offset=3 , last : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T09%3A39%3A09.320Z to=2016-07-08T11%3A54%3A49.121Z qp=dsQuotationNumber.mdaas%3E950000 length=3 offset=17736 }, results : { type : SearchResults , fromDate : 2016-07-08T09:39:09.320Z , toDate : 2016-07-08T11:54:49.121Z , total : 17737, offset : 0, length : 3, infotons : [ { type : ObjectInfoton , system : { uuid : 2afef8830546e1330ce2d6e8bd9b9527 , lastModified : 2016-07-08T11:54:49.121Z , path : /permid.org/1-21509276862 , dataCenter : dc1 , indexTime : 1467978889973, parent : /permid.org }, fields : { RIC.mdaas : [ IE0082945.I ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], IsQuoteOf.mdaas : [ http://permid.org/1-8590050227 ], IsTradingIn.mdaas : [ USD ], MIC.mdaas : [ XDUB ], CommonName.mdaas : [ BARING AUSTRALIA A OF ], RCSAssetClass.mdaas : [ OPF ], TRCSAssetClass.mdaas : [ Open-End Funds ], dsQuotationNumber.mdaas : [ 966075 ], QuoteExchangeCode.mdaas : [ ISE ] } }, { type : ObjectInfoton , system : { uuid : 4ae7630a8100b67984a56c848c26e49b , lastModified : 2016-07-08T11:54:49.121Z , path : /permid.org/1-21509276861 , dataCenter : dc1 , indexTime : 1467978889974, parent : /permid.org }, fields : { RIC.mdaas : [ IE0082923.I ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], IsQuoteOf.mdaas : [ http://permid.org/1-8590293290 ], IsTradingIn.mdaas : [ USD ], MIC.mdaas : [ XDUB ], CommonName.mdaas : [ BARING HONG KONG IT A OF ], RCSAssetClass.mdaas : [ OPF ], TRCSAssetClass.mdaas : [ Open-End Funds ], dsQuotationNumber.mdaas : [ 966489 ], QuoteExchangeCode.mdaas : [ ISE ] } }, { type : ObjectInfoton , system : { uuid : eff4fe6512ade35469157be12250c19e , lastModified : 2016-07-08T09:39:09.320Z , path : /permid.org/1-21567567815 , dataCenter : dc1 , indexTime : 1467970750181, parent : /permid.org }, fields : { RIC.mdaas : [ 2H6.F^G16 ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], IsQuoteOf.mdaas : [ http://permid.org/1-21566148656 ], IlxID.mdaas : [ 2H6-FF,EUR,NORM ], dsQuotationMnemonic.mdaas : [ D:2H6 ], IsTradingIn.mdaas : [ EUR ], MIC.mdaas : [ XFRA ], CommonName.mdaas : [ HORIZON GLOBAL ORD ], RCSAssetClass.mdaas : [ ORD ], TRCSAssetClass.mdaas : [ Ordinary Shares ], dsQuotationNumber.mdaas : [ 9818F6 ], ExchangeTicker.mdaas : [ 2H6 ], QuoteExchangeCode.mdaas : [ FRA ] } } ] } } 4. Specify Output Fields Action: Get only the CommonName and RCSAssetClass fields for up to 3 entities under permid.org, whose CommonName value contains the string \"Reuters\". Curl command: curl cm-well-host /permid.org?op=search qp=CommonName.mdaas:Reuters format=json pretty with-data=n3 fields=CommonName.mdaas,RCSAssetClass.mdaas length=3 Response: { type : SearchResponse , pagination : { type : PaginationInfo , first : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A40%3A01.740Z to=2016-07-08T15%3A40%3A01.979Z qp=CommonName.mdaas%3AReuters length=3 offset=0 , self : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A40%3A01.740Z to=2016-07-08T15%3A40%3A01.979Z qp=CommonName.mdaas%3AReuters length=3 offset=0 , next : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A40%3A01.740Z to=2016-07-08T15%3A40%3A01.979Z qp=CommonName.mdaas%3AReuters length=3 offset=3 , last : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A40%3A01.740Z to=2016-07-08T15%3A40%3A01.979Z qp=CommonName.mdaas%3AReuters length=3 offset=70914 }, results : { type : SearchResults , fromDate : 2016-07-08T15:40:01.740Z , toDate : 2016-07-08T15:40:01.979Z , total : 70914, offset : 0, length : 3, infotons : [ { type : ObjectInfoton , system : { uuid : 08e369b8d4660826eb9494810e0af09b , lastModified : 2016-07-08T15:40:01.979Z , path : /permid.org/1-21591377740 , dataCenter : dc1 , indexTime : 1467992402553, parent : /permid.org }, fields : { CommonName.mdaas : [ Goldman Sachs Co Wertpapier GMBH Call 1313.7255 USD Thomson Reuters: Gold / US Dollar FX Spot Rate 31Dec99 ], RCSAssetClass.mdaas : [ BARWNT ] } }, { type : ObjectInfoton , system : { uuid : c8fc5e38b51892b529caa66646d6a56a , lastModified : 2016-07-08T15:40:01.940Z , path : /permid.org/1-21591377619 , dataCenter : dc1 , indexTime : 1467992403912, parent : /permid.org }, fields : { CommonName.mdaas : [ Goldman Sachs Co Wertpapier GMBH Call 1240 USD Thomson Reuters: Gold / US Dollar FX Spot Rate 31Dec99 ], RCSAssetClass.mdaas : [ BARWNT ] } }, { type : ObjectInfoton , system : { uuid : f188963093cd7b90a169c81bb8973daf , lastModified : 2016-07-08T15:40:01.740Z , path : /permid.org/1-21591374238 , dataCenter : dc1 , indexTime : 1467992402499, parent : /permid.org }, fields : { CommonName.mdaas : [ COMMERZBANK AG Put 0.0001 USD Thomson Reuters: Gold / US Dollar FX Spot Rate 13Dec16 ], RCSAssetClass.mdaas : [ BARWNT ] } } ] } } 5. Implement AND, OR, NOT Multiple Conditions (\"AND\") Action: Get up to 3 entities under permid.org, whose CommonName value contains the string \"Reuters\", and whose RCSAssetClass value contains the string \"TRAD\". Curl command: curl cm-well-host /permid.org?op=search qp=CommonName.mdaas:Reuters,RCSAssetClass.mdaas:TRAD format=json pretty length=3 with-data Response: { type : SearchResponse , pagination : { type : PaginationInfo , first : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A25%3A07.856Z to=2016-07-08T15%3A25%3A07.856Z qp=CommonName.mdaas%3AReuters%2CRCSAssetClass.mdaas%3ATRAD length=3 offset=0 , self : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A25%3A07.856Z to=2016-07-08T15%3A25%3A07.856Z qp=CommonName.mdaas%3AReuters%2CRCSAssetClass.mdaas%3ATRAD length=3 offset=0 , next : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A25%3A07.856Z to=2016-07-08T15%3A25%3A07.856Z qp=CommonName.mdaas%3AReuters%2CRCSAssetClass.mdaas%3ATRAD length=3 offset=3 , last : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A25%3A07.856Z to=2016-07-08T15%3A25%3A07.856Z qp=CommonName.mdaas%3AReuters%2CRCSAssetClass.mdaas%3ATRAD length=3 offset=8592 }, results : { type : SearchResults , fromDate : 2016-07-08T15:25:07.856Z , toDate : 2016-07-08T15:25:07.856Z , total : 8593, offset : 0, length : 3, infotons : [ { type : ObjectInfoton , system : { uuid : 83d204f7495ebef595724af60bdcd83d , lastModified : 2016-07-08T15:25:07.856Z , path : /permid.org/1-21591362718 , dataCenter : dc1 , indexTime : 1467991508847, parent : /permid.org }, fields : { type.rdf : [ http://ont.thomsonreuters.com/mdaas/Instrument ], instrumentExpiryDate.mdaas : [ 2017-06-16 ], isIssuedBy.mdaas : [ http://permid.org/1-5000008825 ], CommonName.mdaas : [ Vontobel Financial Products Call 31 USD Thomson Reuters: Silver / US Dollar FX Spot Rate 16Jun17 ], instrumentCurrencyName.mdaas : [ EUR ], instrumentStatus.mdaas : [ Active ], RCSAssetClass.mdaas : [ TRAD ], instrumentAssetClass.mdaas : [ Traditional Warrants ] } }, { type : ObjectInfoton , system : { uuid : c2c05f8e258c6b33fcb6e53c84e93d2c , lastModified : 2016-07-08T15:25:07.856Z , path : /permid.org/1-21591362720 , dataCenter : dc1 , indexTime : 1467991508849, parent : /permid.org }, fields : { type.rdf : [ http://ont.thomsonreuters.com/mdaas/Instrument ], instrumentExpiryDate.mdaas : [ 2016-08-19 ], isIssuedBy.mdaas : [ http://permid.org/1-5000008825 ], CommonName.mdaas : [ Vontobel Financial Products Call 24.5 USD Thomson Reuters: Silver / US Dollar FX Spot Rate 19Aug16 ], instrumentCurrencyName.mdaas : [ EUR ], instrumentStatus.mdaas : [ Active ], RCSAssetClass.mdaas : [ TRAD ], instrumentAssetClass.mdaas : [ Traditional Warrants ] } }, { type : ObjectInfoton , system : { uuid : 84e8ea6d184fb1b68d88eba85e6ba031 , lastModified : 2016-07-08T15:25:07.856Z , path : /permid.org/1-21591362722 , dataCenter : dc1 , indexTime : 1467991508846, parent : /permid.org }, fields : { type.rdf : [ http://ont.thomsonreuters.com/mdaas/Instrument ], instrumentExpiryDate.mdaas : [ 2016-09-16 ], isIssuedBy.mdaas : [ http://permid.org/1-5000008825 ], CommonName.mdaas : [ Vontobel Financial Products Call 26 USD Thomson Reuters: Silver / US Dollar FX Spot Rate 16Sep16 ], instrumentCurrencyName.mdaas : [ EUR ], instrumentStatus.mdaas : [ Active ], RCSAssetClass.mdaas : [ TRAD ], instrumentAssetClass.mdaas : [ Traditional Warrants ] } } ] } } Optional Conditions (\"OR\") Action: Get up to 5 entities under permid.org, whose organizationStateProvince value contains either \"Delaware\" or \"Idaho\". Curl command: curl cm-well-host /permid.org?op=search qp=*organizationStateProvince.mdaas:Delaware,*organizationStateProvince.mdaas:Idaho format=json pretty with-data length=5 fields=organizationStateProvince.mdaas,organizationCity.mdaas Response: { type : SearchResponse , pagination : { type : PaginationInfo , first : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T12%3A55%3A25.659Z to=2016-07-08T16%3A10%3A15.331Z qp=*organizationStateProvince.mdaas%3ADelaware%2C*organizationStateProvince.mdaas%3AIdaho length=5 offset=0 , self : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T12%3A55%3A25.659Z to=2016-07-08T16%3A10%3A15.331Z qp=*organizationStateProvince.mdaas%3ADelaware%2C*organizationStateProvince.mdaas%3AIdaho length=5 offset=0 , next : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T12%3A55%3A25.659Z to=2016-07-08T16%3A10%3A15.331Z qp=*organizationStateProvince.mdaas%3ADelaware%2C*organizationStateProvince.mdaas%3AIdaho length=5 offset=5 , last : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T12%3A55%3A25.659Z to=2016-07-08T16%3A10%3A15.331Z qp=*organizationStateProvince.mdaas%3ADelaware%2C*organizationStateProvince.mdaas%3AIdaho length=5 offset=129660 }, results : { type : SearchResults , fromDate : 2016-07-08T12:55:25.659Z , toDate : 2016-07-08T16:10:15.331Z , total : 129664, offset : 0, length : 5, infotons : [ { type : ObjectInfoton , system : { uuid : ede36a0643a6273085cc782d861a811a , lastModified : 2016-07-08T16:10:15.331Z , path : /permid.org/1-5046728258 , dataCenter : dc1 , indexTime : 1467994216087, parent : /permid.org }, fields : { organizationCity.mdaas : [ HANOVER ], organizationStateProvince.mdaas : [ DELAWARE , NEW HAMPSHIRE ] } }, { type : ObjectInfoton , system : { uuid : 5518ea6ac23692ce30caa24b9c868ea6 , lastModified : 2016-07-08T15:25:13.079Z , path : /permid.org/1-5049099159 , dataCenter : dc1 , indexTime : 1467991566404, parent : /permid.org }, fields : { organizationCity.mdaas : [ SAN FRANCISCO ], organizationStateProvince.mdaas : [ CALIFORNIA , DELAWARE ] } }, { type : ObjectInfoton , system : { uuid : 65582f41fd62f409d3f6c4990c7af844 , lastModified : 2016-07-08T15:25:12.687Z , path : /permid.org/1-5001360647 , dataCenter : dc1 , indexTime : 1467991566572, parent : /permid.org }, fields : { organizationCity.mdaas : [ MOUNTAIN HOME ], organizationStateProvince.mdaas : [ IDAHO ] } }, { type : ObjectInfoton , system : { uuid : eaa7fe2bff508f77e203816c03f2d952 , lastModified : 2016-07-08T15:25:12.427Z , path : /permid.org/1-4297939554 , dataCenter : dc1 , indexTime : 1467991513916, parent : /permid.org }, fields : { organizationCity.mdaas : [ IDAHO FALLS ], organizationStateProvince.mdaas : [ IDAHO ] } }, { type : ObjectInfoton , system : { uuid : cc60f9c1ccf71019861f7277abcfd3ed , lastModified : 2016-07-08T12:55:25.659Z , path : /permid.org/1-5051394129 , dataCenter : dc1 , indexTime : 1467982577997, parent : /permid.org }, fields : { organizationCity.mdaas : [ EMMETT ], organizationStateProvince.mdaas : [ IDAHO ] } } ] } } Negative Conditions (\"NOT\") Action: Get up to 5 entities under permid.org, whose organizationStateProvince value contains \"New York\", but whose organizationCity value does not contain \"New York\" (i.e. the entity is located in New York state but not in New York city). Curl command: curl cm-well-host /permid.org?op=search qp=organizationStateProvince.mdaas:New%20York,-organizationCity.mdaas:new%20york format=json pretty with-data length=5 fields=organizationStateProvince.mdaas,organizationCity.mdaas Response: { type : SearchResponse , pagination : { type : PaginationInfo , first : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T10%3A39%3A27.444Z to=2016-07-08T15%3A25%3A13.470Z qp=organizationStateProvince.mdaas%3ANew+York%2C-organizationCity.mdaas%3Anew+york length=5 offset=0 , self : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T10%3A39%3A27.444Z to=2016-07-08T15%3A25%3A13.470Z qp=organizationStateProvince.mdaas%3ANew+York%2C-organizationCity.mdaas%3Anew+york length=5 offset=0 , next : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T10%3A39%3A27.444Z to=2016-07-08T15%3A25%3A13.470Z qp=organizationStateProvince.mdaas%3ANew+York%2C-organizationCity.mdaas%3Anew+york length=5 offset=5 , last : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T10%3A39%3A27.444Z to=2016-07-08T15%3A25%3A13.470Z qp=organizationStateProvince.mdaas%3ANew+York%2C-organizationCity.mdaas%3Anew+york length=5 offset=68905 }, results : { type : SearchResults , fromDate : 2016-07-08T10:39:27.444Z , toDate : 2016-07-08T15:25:13.470Z , total : 68905, offset : 0, length : 5, infotons : [ { type : ObjectInfoton , system : { uuid : b54c657343f7146989a6cda1fcdc6f64 , lastModified : 2016-07-08T15:25:13.470Z , path : /permid.org/1-5051394161 , dataCenter : dc1 , indexTime : 1467991566029, parent : /permid.org }, fields : { organizationCity.mdaas : [ GLENDALE ], organizationStateProvince.mdaas : [ NEW YORK ] } }, { type : ObjectInfoton , system : { uuid : cbed49332e66edd289da9481f8f3ac83 , lastModified : 2016-07-08T14:10:04.847Z , path : /permid.org/1-5051394157 , dataCenter : dc1 , indexTime : 1467987058263, parent : /permid.org }, fields : { organizationCity.mdaas : [ BROOKLYN ], organizationStateProvince.mdaas : [ NEW YORK ] } }, { type : ObjectInfoton , system : { uuid : 6d9600d422e7130b4309205af7f0f456 , lastModified : 2016-07-08T14:10:04.319Z , path : /permid.org/1-5034764167 , dataCenter : dc1 , indexTime : 1467987005379, parent : /permid.org }, fields : { organizationCity.mdaas : [ BROOKLYN ], organizationStateProvince.mdaas : [ NEW YORK ] } }, { type : ObjectInfoton , system : { uuid : 5c7476f29384a2f680e87ec95a8c2b9f , lastModified : 2016-07-08T12:55:25.206Z , path : /permid.org/1-5006279969 , dataCenter : dc1 , indexTime : 1467982578452, parent : /permid.org }, fields : { organizationCity.mdaas : [ WHITE PLAINS ], organizationStateProvince.mdaas : [ NEW YORK ] } }, { type : ObjectInfoton , system : { uuid : 740bb1c6ea1f85e169f96edb2cdd3567 , lastModified : 2016-07-08T10:39:27.444Z , path : /permid.org/1-5051393857 , dataCenter : dc1 , indexTime : 1467974417952, parent : /permid.org }, fields : { organizationCity.mdaas : [ RIDGEWOOD ], organizationStateProvince.mdaas : [ NEW YORK ] } } ] } } 6. Page through Results Action: Get the first 3 entities (offset=0, length=3) under permid.org, whose organizationStateProvince value contains \"New York\" . Curl command: curl cm-well-host /permid.org?op=search qp=organizationStateProvince.mdaas:New%20York format=json pretty with-data offset=0 length=3 fields=organizationStateProvince.mdaas,organizationCity.mdaas Response: { type : SearchResponse , pagination : { type : PaginationInfo , first : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T14%3A10%3A04.439Z to=2016-07-08T15%3A25%3A13.470Z qp=organizationStateProvince.mdaas%3ANew+York length=3 offset=0 , self : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T14%3A10%3A04.439Z to=2016-07-08T15%3A25%3A13.470Z qp=organizationStateProvince.mdaas%3ANew+York length=3 offset=0 , next : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T14%3A10%3A04.439Z to=2016-07-08T15%3A25%3A13.470Z qp=organizationStateProvince.mdaas%3ANew+York length=3 offset=3 , last : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T14%3A10%3A04.439Z to=2016-07-08T15%3A25%3A13.470Z qp=organizationStateProvince.mdaas%3ANew+York length=3 offset=123936 }, results : { type : SearchResults , fromDate : 2016-07-08T14:10:04.439Z , toDate : 2016-07-08T15:25:13.470Z , total : 123938, offset : 0, length : 3, infotons : [ { type : ObjectInfoton , system : { uuid : b54c657343f7146989a6cda1fcdc6f64 , lastModified : 2016-07-08T15:25:13.470Z , path : /permid.org/1-5051394161 , dataCenter : dc1 , indexTime : 1467991566029, parent : /permid.org }, fields : { organizationCity.mdaas : [ GLENDALE ], organizationStateProvince.mdaas : [ NEW YORK ] } }, { type : ObjectInfoton , system : { uuid : cbed49332e66edd289da9481f8f3ac83 , lastModified : 2016-07-08T14:10:04.847Z , path : /permid.org/1-5051394157 , dataCenter : dc1 , indexTime : 1467987058263, parent : /permid.org }, fields : { organizationCity.mdaas : [ BROOKLYN ], organizationStateProvince.mdaas : [ NEW YORK ] } }, { type : ObjectInfoton , system : { uuid : 4055b393538b016e7a05457301ea669b , lastModified : 2016-07-08T14:10:04.439Z , path : /permid.org/1-5038060478 , dataCenter : dc1 , indexTime : 1467987006101, parent : /permid.org }, fields : { organizationCity.mdaas : [ NEW YORK ], organizationStateProvince.mdaas : [ NEW YORK ] } } ] } } Action: Get the next 3 entities (offset=3, length=3) under permid.org, whose organizationStateProvince value contains \"New York\". Curl command: curl cm-well-host /permid.org?op=search qp=organizationStateProvince.mdaas:New%20York format=json pretty with-data offset=3 length=3 fields=organizationStateProvince.mdaas,organizationCity.mdaas Response: { type : SearchResponse , pagination : { type : PaginationInfo , first : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T10%3A39%3A27.503Z to=2016-07-08T14%3A10%3A04.319Z qp=organizationStateProvince.mdaas%3ANew+York length=3 offset=0 , previous : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T10%3A39%3A27.503Z to=2016-07-08T14%3A10%3A04.319Z qp=organizationStateProvince.mdaas%3ANew+York length=3 offset=0 , self : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T10%3A39%3A27.503Z to=2016-07-08T14%3A10%3A04.319Z qp=organizationStateProvince.mdaas%3ANew+York length=3 offset=3 , next : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T10%3A39%3A27.503Z to=2016-07-08T14%3A10%3A04.319Z qp=organizationStateProvince.mdaas%3ANew+York length=3 offset=6 , last : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T10%3A39%3A27.503Z to=2016-07-08T14%3A10%3A04.319Z qp=organizationStateProvince.mdaas%3ANew+York length=3 offset=123936 }, results : { type : SearchResults , fromDate : 2016-07-08T10:39:27.503Z , toDate : 2016-07-08T14:10:04.319Z , total : 123938, offset : 3, length : 3, infotons : [ { type : ObjectInfoton , system : { uuid : 6d9600d422e7130b4309205af7f0f456 , lastModified : 2016-07-08T14:10:04.319Z , path : /permid.org/1-5034764167 , dataCenter : dc1 , indexTime : 1467987005379, parent : /permid.org }, fields : { organizationCity.mdaas : [ BROOKLYN ], organizationStateProvince.mdaas : [ NEW YORK ] } }, { type : ObjectInfoton , system : { uuid : 5c7476f29384a2f680e87ec95a8c2b9f , lastModified : 2016-07-08T12:55:25.206Z , path : /permid.org/1-5006279969 , dataCenter : dc1 , indexTime : 1467982578452, parent : /permid.org }, fields : { organizationCity.mdaas : [ WHITE PLAINS ], organizationStateProvince.mdaas : [ NEW YORK ] } }, { type : ObjectInfoton , system : { uuid : 73cead0a965c98ea9e801fcf021284bc , lastModified : 2016-07-08T10:39:27.503Z , path : /permid.org/1-5051394063 , dataCenter : dc1 , indexTime : 1467974418394, parent : /permid.org }, fields : { organizationCity.mdaas : [ NEW YORK ], organizationStateProvince.mdaas : [ NEW YORK ] } } ] } } 7. Traverse Inbound and Outbound Links Action: Find the address of the company that issues a quote with a RIC code of \"VAC\". The query uses the yg flag that enables traversing inbound and outbound links. The steps in the query are: Find quotes with a RIC code of \"VAC\". Follow the quote's outbound links to find out what instrument issues the quote. Follow the instrument's inbound links to find out which company points to the instrument in its primaryInstrument field. Curl command: curl cm-well-host /permid.org?op=search qp=RIC.mdaas::VAC with-data yg= IsQuoteOf.mdaas primaryInstrument.mdaas format=json pretty Response: { type : SearchResponse , pagination : { type : PaginationInfo , first : http://cm-well-host.com/permid.org?format=json? op=search from=2015-03-24T11%3A39%3A46.462Z to=2015-03-24T11%3A39%3A46.462Z qp=RIC.mdaas%3A%3AVAC length=3 offset=0 , self : http://cm-well-host.com/permid.org?format=json? op=search from=2015-03-24T11%3A39%3A46.462Z to=2015-03-24T11%3A39%3A46.462Z qp=RIC.mdaas%3A%3AVAC length=3 offset=0 , last : http://cm-well-host.com/permid.org?format=json? op=search from=2015-03-24T11%3A39%3A46.462Z to=2015-03-24T11%3A39%3A46.462Z qp=RIC.mdaas%3A%3AVAC length=3 offset=0 }, results : { type : SearchResults , fromDate : 2015-03-24T11:39:46.462Z , toDate : 2015-03-24T11:39:46.462Z , total : 1, offset : 0, length : 3, infotons : [ { type : ObjectInfoton , system : { uuid : 0dcfaba91276c59c448bad93cc7e232e , lastModified : 2015-03-24T11:39:46.462Z , path : /permid.org/1-21478428449 , dataCenter : dc1 , indexTime : 1460125129760, parent : /permid.org }, fields : { RIC.mdaas : [ VAC ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], IsQuoteOf.mdaas : [ http://permid.org/1-21478428282 ], IlxID.mdaas : [ VAC-US,USD,NORM ], dsQuotationMnemonic.mdaas : [ U:VAC ], IsTradingIn.mdaas : [ USD ], MIC.mdaas : [ XXXX ], CommonName.mdaas : [ MARRIOTT VACATIONS WORLDWIDE ORD ], RCSAssetClass.mdaas : [ ORD ], TRCSAssetClass.mdaas : [ Ordinary Shares ], dsQuotationNumber.mdaas : [ 77857E ], ExchangeTicker.mdaas : [ VAC ], QuoteExchangeCode.mdaas : [ NYQ ] } }, { type : ObjectInfoton , system : { uuid : af45a50bfe5645b16ef1ccccd2ab3006 , lastModified : 2015-03-08T12:38:04.543Z , path : /permid.org/1-21478428282 , dataCenter : dc1 , indexTime : 1460133028465, parent : /permid.org }, fields : { WorldscopeID.mdaas : [ 57164Y107 ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Instrument ], WorldScopePermId.mdaas : [ C840UV2P0 ], mainQuoteId.mdaas : [ 21478428456 ], isIssuedBy.mdaas : [ http://permid.org/1-5035948006 ], CommonName.mdaas : [ Marriott Vacations Worldwide Ord Shs ], instrumentCurrencyName.mdaas : [ USD ], instrumentStatus.mdaas : [ Active ], RCSAssetClass.mdaas : [ ORD ], instrumentAssetClass.mdaas : [ Ordinary Shares ] } }, { type : ObjectInfoton , system : { uuid : 901803c75dd49427a4cba92878095e4b , lastModified : 2016-04-06T07:15:07.612Z , path : /permid.org/1-5035948006 , dataCenter : dc1 , indexTime : 1460098385554, parent : /permid.org }, fields : { legalRegistrationCommonAddress.mdaas : [ 2711 Centerville Rd\\nWILMINGTON\\nDELAWARE\\n19808-1660\\nUnited States\\n ], primaryInstrument.mdaas : [ http://permid.org/1-21478428282 ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Organization ], organizationAddressLine1.mdaas : [ 6649 Westwood Blvd , 6649 Westwood Blvd , 2711 Centerville Rd ], organizationAddressLine2.mdaas : [ 2711 Centerville Road ], MXID.mdaas : [ 111800547 ], PrimaryReportingEntityCode.mdaas : [ D9F64 ], organizationCity.mdaas : [ ORLANDO , WILMINGTON ], organizationFoundedDay.mdaas : [ 21 ], WorldscopeCompanyPermID.mdaas : [ C840UV2P0 ], organizationCountryCode.mdaas : [ 100319 ], instrumentCount.mdaas : [ 1 ], organizationFoundedYear.mdaas : [ 2011 ], mainQuoteId.mdaas : [ 21478428456 ], CIK.mdaas : [ 0001524358 ], hasRegistrationAuthority.mdaas : [ http://permid.org/1-5000008957 ], entityLastReviewedDate.mdaas : [ 2016-03-02 05:00:00 ], hasUltimateParent.mdaas : [ http://permid.org/1-5035948006 ], OrganizationProviderTypeCode.mdaas : [ 1 ], organizationWebsite.mdaas : [ http://www.marriottvacationsworldwide.com/ ], hasImmediateParent.mdaas : [ http://permid.org/1-5035948006 ], LEI.mdaas : [ 549300WA6BT5H4F7IO94 ], CommonName.mdaas : [ Marriott Vacations Worldwide Corp ], headquartersCommonAddress.mdaas : [ 6649 Westwood Blvd\\nORLANDO\\nFLORIDA\\n32821-8029\\nUnited States\\n ], registeredFax.mdaas : [ 13026365454 ], organizationStateProvinceOfficialCode.mdaas : [ DE , FL ], organizationStatusCode.mdaas : [ Active ], InvestextID.mdaas : [ VAC ], organizationFoundedMonth.mdaas : [ 6 ], officialName.mdaas : [ MARRIOTT VACATIONS WORLDWIDE CORPORATION ], headquartersPhone.mdaas : [ 14072066000 ], headquartersAddress.mdaas : [ ORLANDO\\nFLORIDA\\n32821-8029\\nUnited States\\n , 6649 Westwood Blvd\\nORLANDO\\nFLORIDA\\n32821-8029\\nUnited States\\n ], isDomiciledIn.mdaas : [ United States ], organizationCountry.mdaas : [ United States ], SDCID.mdaas : [ 1218547002 ], isPublicFlag.mdaas : [ true ], registeredPhone.mdaas : [ 13026365400 ], TaxID.mdaas : [ 452598330 ], organizationStateProvince.mdaas : [ DELAWARE , FLORIDA ], legalRegistrationAddress.mdaas : [ WILMINGTON\\nDELAWARE\\n19808-1660\\nUnited States\\n , 2711 Centerville Rd\\nWILMINGTON\\nDELAWARE\\n19808-1660\\nUnited States\\n ], subsidiariesCount.mdaas : [ 109 ], organizationTypeCode.mdaas : [ Business Organization ], organizationAddressPostalCode.mdaas : [ 32821-8029 , 19808-1660 ], organizationSubtypeCode.mdaas : [ Company ], SDCusip.mdaas : [ 56655E ], shortName.mdaas : [ Marriott Vaca ], equityInstrumentCount.mdaas : [ 1 ], organizationAddressLine3.mdaas : [ New Castle County ], isIncorporatedIn.mdaas : [ United States ], WorldscopeCompanyID.mdaas : [ 57164Y107 ], primaryIndustry.mdaas : [ Hotels, Motels Cruise Lines (NEC) ], RCPID.mdaas : [ 600304172 ] } } ] } } API Reference Query for Infotons Using Field Conditions CM-Well Query Parameters Field Condition Syntax","title":"Query for Infotons"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.QueryForInfotons.html#query-for-infotons","text":"","title":"Query for Infotons"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.QueryForInfotons.html#step-outline","text":"Note These steps are not dependent on each other and do not have to be completed in order. Query by One Field Value . Get Results with Data Use Various Comparison Operators . Specify Output Fields . Implement AND, OR, NOT . Page through Results . Traverse Inbound and Outbound Links .","title":"Step Outline"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.QueryForInfotons.html#1-query-by-one-field-value","text":"Action: Get up to 3 entities under permid.org, whose CommonName value contains the string \"Reuters\". Curl command: curl cm-well-host /permid.org?op=search qp=CommonName.mdaas:Reuters length=3 format=json pretty Response: { type : SearchResponse , pagination : { type : PaginationInfo , first : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A40%3A01.740Z to=2016-07-08T15%3A40%3A01.979Z qp=CommonName.mdaas%3AReuters length=3 offset=0 , self : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A40%3A01.740Z to=2016-07-08T15%3A40%3A01.979Z qp=CommonName.mdaas%3AReuters length=3 offset=0 , next : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A40%3A01.740Z to=2016-07-08T15%3A40%3A01.979Z qp=CommonName.mdaas%3AReuters length=3 offset=3 , last : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A40%3A01.740Z to=2016-07-08T15%3A40%3A01.979Z qp=CommonName.mdaas%3AReuters length=3 offset=70914 }, results : { type : SearchResults , fromDate : 2016-07-08T15:40:01.740Z , toDate : 2016-07-08T15:40:01.979Z , total : 70914, offset : 0, length : 3, infotons : [ { type : ObjectInfoton , system : { uuid : 08e369b8d4660826eb9494810e0af09b , lastModified : 2016-07-08T15:40:01.979Z , path : /permid.org/1-21591377740 , dataCenter : dc1 , indexTime : 1467992402553, parent : /permid.org } }, { type : ObjectInfoton , system : { uuid : c8fc5e38b51892b529caa66646d6a56a , lastModified : 2016-07-08T15:40:01.940Z , path : /permid.org/1-21591377619 , dataCenter : dc1 , indexTime : 1467992403912, parent : /permid.org } }, { type : ObjectInfoton , system : { uuid : f188963093cd7b90a169c81bb8973daf , lastModified : 2016-07-08T15:40:01.740Z , path : /permid.org/1-21591374238 , dataCenter : dc1 , indexTime : 1467992402499, parent : /permid.org } } ] } }","title":"1. Query by One Field Value"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.QueryForInfotons.html#2-get-results-with-data","text":"Action: Get up to 3 entities under permid.org, whose CommonName value contains the string \"Reuters\", with their data, i.e. with all fields and not just system fields. Curl command: curl cm-well-host /permid.org?op=search qp=CommonName.mdaas:Reuters length=3 format=json pretty with-data Response: { type : SearchResponse , pagination : { type : PaginationInfo , first : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A40%3A01.740Z to=2016-07-08T15%3A40%3A01.979Z qp=CommonName.mdaas%3AReuters length=3 offset=0 , self : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A40%3A01.740Z to=2016-07-08T15%3A40%3A01.979Z qp=CommonName.mdaas%3AReuters length=3 offset=0 , next : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A40%3A01.740Z to=2016-07-08T15%3A40%3A01.979Z qp=CommonName.mdaas%3AReuters length=3 offset=3 , last : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A40%3A01.740Z to=2016-07-08T15%3A40%3A01.979Z qp=CommonName.mdaas%3AReuters length=3 offset=70914 }, results : { type : SearchResults , fromDate : 2016-07-08T15:40:01.740Z , toDate : 2016-07-08T15:40:01.979Z , total : 70914, offset : 0, length : 3, infotons : [ { type : ObjectInfoton , system : { uuid : 08e369b8d4660826eb9494810e0af09b , lastModified : 2016-07-08T15:40:01.979Z , path : /permid.org/1-21591377740 , dataCenter : dc1 , indexTime : 1467992402553, parent : /permid.org }, fields : { type.rdf : [ http://ont.thomsonreuters.com/mdaas/Instrument ], instrumentExpiryDate.mdaas : [ 2050-12-31 ], isIssuedBy.mdaas : [ http://permid.org/1-4296733007 ], CommonName.mdaas : [ Goldman Sachs Co Wertpapier GMBH Call 1313.7255 USD Thomson Reuters: Gold / US Dollar FX Spot Rate 31Dec99 ], instrumentCurrencyName.mdaas : [ EUR ], instrumentStatus.mdaas : [ Active ], RCSAssetClass.mdaas : [ BARWNT ], instrumentAssetClass.mdaas : [ Barrier Warrants ] } }, { type : ObjectInfoton , system : { uuid : c8fc5e38b51892b529caa66646d6a56a , lastModified : 2016-07-08T15:40:01.940Z , path : /permid.org/1-21591377619 , dataCenter : dc1 , indexTime : 1467992403912, parent : /permid.org }, fields : { type.rdf : [ http://ont.thomsonreuters.com/mdaas/Instrument ], instrumentExpiryDate.mdaas : [ 2050-12-31 ], isIssuedBy.mdaas : [ http://permid.org/1-4296733007 ], CommonName.mdaas : [ Goldman Sachs Co Wertpapier GMBH Call 1240 USD Thomson Reuters: Gold / US Dollar FX Spot Rate 31Dec99 ], instrumentCurrencyName.mdaas : [ EUR ], instrumentStatus.mdaas : [ Active ], RCSAssetClass.mdaas : [ BARWNT ], instrumentAssetClass.mdaas : [ Barrier Warrants ] } }, { type : ObjectInfoton , system : { uuid : f188963093cd7b90a169c81bb8973daf , lastModified : 2016-07-08T15:40:01.740Z , path : /permid.org/1-21591374238 , dataCenter : dc1 , indexTime : 1467992402499, parent : /permid.org }, fields : { type.rdf : [ http://ont.thomsonreuters.com/mdaas/Instrument ], instrumentExpiryDate.mdaas : [ 2016-12-13 ], isIssuedBy.mdaas : [ http://permid.org/1-8589934314 ], CommonName.mdaas : [ COMMERZBANK AG Put 0.0001 USD Thomson Reuters: Gold / US Dollar FX Spot Rate 13Dec16 ], instrumentCurrencyName.mdaas : [ EUR ], instrumentStatus.mdaas : [ Active ], RCSAssetClass.mdaas : [ BARWNT ], instrumentAssetClass.mdaas : [ Barrier Warrants ] } } ] } }","title":"2. Get Results with Data"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.QueryForInfotons.html#3-use-various-comparison-operators","text":"","title":"3. Use Various Comparison Operators"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.QueryForInfotons.html#partial-match","text":"Action: Get all entities under permid.org, whose CommonName value contains the string \"qqqqq\" (there are no infotons that match this query). The field condition uses the : partial match operator. Partial match Curl command: curl cm-well-host /permid.org?op=search qp=CommonName.mdaas:qqqqq format=json pretty with-data Partial match response: { type : SearchResponse , pagination : { type : PaginationInfo , first : http://cm-well-host.com/permid.org?format=json? op=search qp=CommonName.mdaas%3Aqqqqq length=0 offset=0 , previous : http://cm-well-host.com/permid.org?format=json? op=search qp=CommonName.mdaas%3Aqqqqq length=0 offset=0 , self : http://cm-well-host.com/permid.org?format=json? op=search qp=CommonName.mdaas%3Aqqqqq length=0 offset=0 , last : http://cm-well-host.com/permid.org?format=json? op=search qp=CommonName.mdaas%3Aqqqqq length=0 offset=0 }, results : { type : SearchResults , total : 0, offset : 0, length : 0, infotons : [ ] } }","title":"Partial Match"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.QueryForInfotons.html#fuzzy-match","text":"Action: Get all entities under permid.org, whose CommonName value is a \"fuzzy\" (approximate) match of the string \"qqqqq\". The field condition uses the ~ fuzzy match operator. Fuzzy match Curl command: curl cm-well-host /permid.org?op=search qp=CommonName.mdaas~qqqqq format=json pretty with-data Fuzzy match response: { type : SearchResponse , pagination : { type : PaginationInfo , first : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-01T03%3A10%3A07.160Z to=2016-07-08T03%3A53%3A52.418Z qp=CommonName.mdaas%7Eqqqqq length=10 offset=0 , self : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-01T03%3A10%3A07.160Z to=2016-07-08T03%3A53%3A52.418Z qp=CommonName.mdaas%7Eqqqqq length=10 offset=0 , next : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-01T03%3A10%3A07.160Z to=2016-07-08T03%3A53%3A52.418Z qp=CommonName.mdaas%7Eqqqqq length=10 offset=10 , last : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-01T03%3A10%3A07.160Z to=2016-07-08T03%3A53%3A52.418Z qp=CommonName.mdaas%7Eqqqqq length=10 offset=350 }, results : { type : SearchResults , fromDate : 2016-07-01T03:10:07.160Z , toDate : 2016-07-08T03:53:52.418Z , total : 354, offset : 0, length : 10, infotons : [ { type : ObjectInfoton , system : { uuid : c780fe7c4a835a36ce386bbd81be0240 , lastModified : 2016-07-08T03:53:52.418Z , path : /permid.org/1-21591414360 , dataCenter : dc1 , indexTime : 1467950034046, parent : /permid.org }, fields : { RIC.mdaas : [ QQQD1W2HN6:OX ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], IlxID.mdaas : [ 2QQQ1DH/N6-OC,USD,NORM ], IsTradingIn.mdaas : [ USD ], CommonName.mdaas : [ QQQPo ND WK JUL6 ], RCSAssetClass.mdaas : [ FUT ], TRCSAssetClass.mdaas : [ Equity Futures ], ExchangeTicker.mdaas : [ QQQ2H ], QuoteExchangeCode.mdaas : [ ONE ] } }, { type : ObjectInfoton , system : { uuid : 5fdbe8ee644edceaf364a296659482be , lastModified : 2016-07-08T00:24:10.707Z , path : /permid.org/1-21591535341 , dataCenter : dc1 , indexTime : 1467937451672, parent : /permid.org }, fields : { RIC.mdaas : [ QQQD1W3FN6:OX ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], IsTradingIn.mdaas : [ USD ], CommonName.mdaas : [ QQQPo ND WK JUL6 ], RCSAssetClass.mdaas : [ FUT ], TRCSAssetClass.mdaas : [ Equity Futures ], ExchangeTicker.mdaas : [ QQQ3F ], QuoteExchangeCode.mdaas : [ ONE ] } }, { type : ObjectInfoton , system : { uuid : d378e665e282dc62bcdff76747c64a5a , lastModified : 2016-07-07T04:14:42.847Z , path : /permid.org/1-21591343981 , dataCenter : dc1 , indexTime : 1467864883985, parent : /permid.org }, fields : { RIC.mdaas : [ QQQD1W2WN6:OX ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], IlxID.mdaas : [ 2QQQ1DW/N6-OC,USD,NORM ], IsTradingIn.mdaas : [ USD ], CommonName.mdaas : [ QQQPo ND WK JUL6 ], RCSAssetClass.mdaas : [ FUT ], TRCSAssetClass.mdaas : [ Equity Futures ], ExchangeTicker.mdaas : [ QQQ2W ], QuoteExchangeCode.mdaas : [ ONE ] } }, { type : ObjectInfoton , system : { uuid : 49ebf361fcae4d04af02df231e383deb , lastModified : 2016-07-06T03:19:41.203Z , path : /permid.org/1-21591285520 , dataCenter : dc1 , indexTime : 1467775238523, parent : /permid.org }, fields : { RIC.mdaas : [ QQQD1W2MN6:OX ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], IlxID.mdaas : [ 2QQQ1DM/N6-OC,USD,NORM ], IsTradingIn.mdaas : [ USD ], CommonName.mdaas : [ QQQPo ND WK JUL6 ], RCSAssetClass.mdaas : [ FUT ], TRCSAssetClass.mdaas : [ Equity Futures ], ExchangeTicker.mdaas : [ QQQ2M ], QuoteExchangeCode.mdaas : [ ONE ] } }, { type : ObjectInfoton , system : { uuid : edb0aef87075bad3d8c6e8767e1cbbf9 , lastModified : 2016-07-06T03:19:40.964Z , path : /permid.org/1-21591285350 , dataCenter : dc1 , indexTime : 1467775187102, parent : /permid.org }, fields : { RIC.mdaas : [ QQQD1W2TN6:OX ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], IlxID.mdaas : [ 2QQQ1DT/N6-OC,USD,NORM ], IsTradingIn.mdaas : [ USD ], CommonName.mdaas : [ QQQPo ND WK JUL6 ], RCSAssetClass.mdaas : [ FUT ], TRCSAssetClass.mdaas : [ Equity Futures ], ExchangeTicker.mdaas : [ QQQ2T ], QuoteExchangeCode.mdaas : [ ONE ] } }, { type : ObjectInfoton , system : { uuid : 3d00c221fa4cc4036efa00bcfec33f59 , lastModified : 2016-07-05T02:43:57.872Z , path : /permid.org/1-21590488985 , dataCenter : dc1 , indexTime : 1467686639607, parent : /permid.org }, fields : { RIC.mdaas : [ QQQD1W1FN6:OX^1 ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], IlxID.mdaas : [ 1QQQ1DF/N6-OC,USD,NORM ], IsTradingIn.mdaas : [ USD ], CommonName.mdaas : [ QQQPo ND WK JUL6 ], RCSAssetClass.mdaas : [ FUT ], TRCSAssetClass.mdaas : [ Equity Futures ], ExchangeTicker.mdaas : [ QQQ1F ], QuoteExchangeCode.mdaas : [ ONE ] } }, { type : ObjectInfoton , system : { uuid : 19547d71542eaa8cd3c55c38e8065a5e , lastModified : 2016-07-04T02:23:47.608Z , path : /permid.org/1-21590381247 , dataCenter : dc1 , indexTime : 1467599028822, parent : /permid.org }, fields : { RIC.mdaas : [ QQQD1W5HM6:OX^1 ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], IlxID.mdaas : [ 5QQQ1DH/M6-OC,USD,NORM ], IsTradingIn.mdaas : [ USD ], CommonName.mdaas : [ QQQPo ND WK JUN6 ], RCSAssetClass.mdaas : [ FUT ], TRCSAssetClass.mdaas : [ Equity Futures ], ExchangeTicker.mdaas : [ QQQ5H ], QuoteExchangeCode.mdaas : [ ONE ] } }, { type : ObjectInfoton , system : { uuid : 6e3449bc916a5b9112e2971b2848d696 , lastModified : 2016-07-03T06:45:38.168Z , path : /permid.org/1-21590310413 , dataCenter : dc1 , indexTime : 1467528339678, parent : /permid.org }, fields : { RIC.mdaas : [ QQQD1W5WM6:OX^1 ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], IlxID.mdaas : [ 5QQQ1DW/M6-OC,USD,NORM ], IsTradingIn.mdaas : [ USD ], CommonName.mdaas : [ QQQPo ND WK JUN6 ], RCSAssetClass.mdaas : [ FUT ], TRCSAssetClass.mdaas : [ Equity Futures ], ExchangeTicker.mdaas : [ QQQ5W ], QuoteExchangeCode.mdaas : [ ONE ] } }, { type : ObjectInfoton , system : { uuid : eccf30dbdf6d72fd74fd3fc94bc62434 , lastModified : 2016-07-02T01:28:52.291Z , path : /permid.org/1-21590268843 , dataCenter : dc1 , indexTime : 1467422934086, parent : /permid.org }, fields : { RIC.mdaas : [ QQQD1W4TM6:OX^1 ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], IlxID.mdaas : [ 4QQQ1DT/M6-OC,USD,NORM ], IsTradingIn.mdaas : [ USD ], CommonName.mdaas : [ QQQPo ND WK JUN6 ], RCSAssetClass.mdaas : [ FUT ], TRCSAssetClass.mdaas : [ Equity Futures ], ExchangeTicker.mdaas : [ QQQ4T ], QuoteExchangeCode.mdaas : [ ONE ] } }, { type : ObjectInfoton , system : { uuid : b1902ece02d0184c39bac93fc36cbff0 , lastModified : 2016-07-01T03:10:07.160Z , path : /permid.org/1-21590006231 , dataCenter : dc1 , indexTime : 1467342607863, parent : /permid.org }, fields : { RIC.mdaas : [ QQQD1W4MM6:OX^1 ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], IlxID.mdaas : [ 4QQQ1DM/M6-OC,USD,NORM ], IsTradingIn.mdaas : [ USD ], CommonName.mdaas : [ QQQPo ND WK JUN6 ], RCSAssetClass.mdaas : [ FUT ], TRCSAssetClass.mdaas : [ Equity Futures ], ExchangeTicker.mdaas : [ QQQ4M ], QuoteExchangeCode.mdaas : [ ONE ] } } ] } }","title":"Fuzzy Match"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.QueryForInfotons.html#numeric-comparison","text":"Action: Get up to 3 entities under permid.org, whose dsQuotationNumber value is greater than 950000. The field condition uses the greater-than operator. Numeric comparison Curl command: curl cm-well-host /permid.org?op=search qp=dsQuotationNumber.mdaas 950000 format=json pretty with-data length=3 Numeric comparison response: { type : SearchResponse , pagination : { type : PaginationInfo , first : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T09%3A39%3A09.320Z to=2016-07-08T11%3A54%3A49.121Z qp=dsQuotationNumber.mdaas%3E950000 length=3 offset=0 , self : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T09%3A39%3A09.320Z to=2016-07-08T11%3A54%3A49.121Z qp=dsQuotationNumber.mdaas%3E950000 length=3 offset=0 , next : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T09%3A39%3A09.320Z to=2016-07-08T11%3A54%3A49.121Z qp=dsQuotationNumber.mdaas%3E950000 length=3 offset=3 , last : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T09%3A39%3A09.320Z to=2016-07-08T11%3A54%3A49.121Z qp=dsQuotationNumber.mdaas%3E950000 length=3 offset=17736 }, results : { type : SearchResults , fromDate : 2016-07-08T09:39:09.320Z , toDate : 2016-07-08T11:54:49.121Z , total : 17737, offset : 0, length : 3, infotons : [ { type : ObjectInfoton , system : { uuid : 2afef8830546e1330ce2d6e8bd9b9527 , lastModified : 2016-07-08T11:54:49.121Z , path : /permid.org/1-21509276862 , dataCenter : dc1 , indexTime : 1467978889973, parent : /permid.org }, fields : { RIC.mdaas : [ IE0082945.I ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], IsQuoteOf.mdaas : [ http://permid.org/1-8590050227 ], IsTradingIn.mdaas : [ USD ], MIC.mdaas : [ XDUB ], CommonName.mdaas : [ BARING AUSTRALIA A OF ], RCSAssetClass.mdaas : [ OPF ], TRCSAssetClass.mdaas : [ Open-End Funds ], dsQuotationNumber.mdaas : [ 966075 ], QuoteExchangeCode.mdaas : [ ISE ] } }, { type : ObjectInfoton , system : { uuid : 4ae7630a8100b67984a56c848c26e49b , lastModified : 2016-07-08T11:54:49.121Z , path : /permid.org/1-21509276861 , dataCenter : dc1 , indexTime : 1467978889974, parent : /permid.org }, fields : { RIC.mdaas : [ IE0082923.I ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], IsQuoteOf.mdaas : [ http://permid.org/1-8590293290 ], IsTradingIn.mdaas : [ USD ], MIC.mdaas : [ XDUB ], CommonName.mdaas : [ BARING HONG KONG IT A OF ], RCSAssetClass.mdaas : [ OPF ], TRCSAssetClass.mdaas : [ Open-End Funds ], dsQuotationNumber.mdaas : [ 966489 ], QuoteExchangeCode.mdaas : [ ISE ] } }, { type : ObjectInfoton , system : { uuid : eff4fe6512ade35469157be12250c19e , lastModified : 2016-07-08T09:39:09.320Z , path : /permid.org/1-21567567815 , dataCenter : dc1 , indexTime : 1467970750181, parent : /permid.org }, fields : { RIC.mdaas : [ 2H6.F^G16 ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], IsQuoteOf.mdaas : [ http://permid.org/1-21566148656 ], IlxID.mdaas : [ 2H6-FF,EUR,NORM ], dsQuotationMnemonic.mdaas : [ D:2H6 ], IsTradingIn.mdaas : [ EUR ], MIC.mdaas : [ XFRA ], CommonName.mdaas : [ HORIZON GLOBAL ORD ], RCSAssetClass.mdaas : [ ORD ], TRCSAssetClass.mdaas : [ Ordinary Shares ], dsQuotationNumber.mdaas : [ 9818F6 ], ExchangeTicker.mdaas : [ 2H6 ], QuoteExchangeCode.mdaas : [ FRA ] } } ] } }","title":"Numeric Comparison"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.QueryForInfotons.html#4-specify-output-fields","text":"Action: Get only the CommonName and RCSAssetClass fields for up to 3 entities under permid.org, whose CommonName value contains the string \"Reuters\". Curl command: curl cm-well-host /permid.org?op=search qp=CommonName.mdaas:Reuters format=json pretty with-data=n3 fields=CommonName.mdaas,RCSAssetClass.mdaas length=3 Response: { type : SearchResponse , pagination : { type : PaginationInfo , first : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A40%3A01.740Z to=2016-07-08T15%3A40%3A01.979Z qp=CommonName.mdaas%3AReuters length=3 offset=0 , self : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A40%3A01.740Z to=2016-07-08T15%3A40%3A01.979Z qp=CommonName.mdaas%3AReuters length=3 offset=0 , next : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A40%3A01.740Z to=2016-07-08T15%3A40%3A01.979Z qp=CommonName.mdaas%3AReuters length=3 offset=3 , last : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A40%3A01.740Z to=2016-07-08T15%3A40%3A01.979Z qp=CommonName.mdaas%3AReuters length=3 offset=70914 }, results : { type : SearchResults , fromDate : 2016-07-08T15:40:01.740Z , toDate : 2016-07-08T15:40:01.979Z , total : 70914, offset : 0, length : 3, infotons : [ { type : ObjectInfoton , system : { uuid : 08e369b8d4660826eb9494810e0af09b , lastModified : 2016-07-08T15:40:01.979Z , path : /permid.org/1-21591377740 , dataCenter : dc1 , indexTime : 1467992402553, parent : /permid.org }, fields : { CommonName.mdaas : [ Goldman Sachs Co Wertpapier GMBH Call 1313.7255 USD Thomson Reuters: Gold / US Dollar FX Spot Rate 31Dec99 ], RCSAssetClass.mdaas : [ BARWNT ] } }, { type : ObjectInfoton , system : { uuid : c8fc5e38b51892b529caa66646d6a56a , lastModified : 2016-07-08T15:40:01.940Z , path : /permid.org/1-21591377619 , dataCenter : dc1 , indexTime : 1467992403912, parent : /permid.org }, fields : { CommonName.mdaas : [ Goldman Sachs Co Wertpapier GMBH Call 1240 USD Thomson Reuters: Gold / US Dollar FX Spot Rate 31Dec99 ], RCSAssetClass.mdaas : [ BARWNT ] } }, { type : ObjectInfoton , system : { uuid : f188963093cd7b90a169c81bb8973daf , lastModified : 2016-07-08T15:40:01.740Z , path : /permid.org/1-21591374238 , dataCenter : dc1 , indexTime : 1467992402499, parent : /permid.org }, fields : { CommonName.mdaas : [ COMMERZBANK AG Put 0.0001 USD Thomson Reuters: Gold / US Dollar FX Spot Rate 13Dec16 ], RCSAssetClass.mdaas : [ BARWNT ] } } ] } }","title":"4. Specify Output Fields"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.QueryForInfotons.html#5-implement-and-or-not","text":"","title":"5. Implement AND, OR, NOT"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.QueryForInfotons.html#multiple-conditions-and","text":"Action: Get up to 3 entities under permid.org, whose CommonName value contains the string \"Reuters\", and whose RCSAssetClass value contains the string \"TRAD\". Curl command: curl cm-well-host /permid.org?op=search qp=CommonName.mdaas:Reuters,RCSAssetClass.mdaas:TRAD format=json pretty length=3 with-data Response: { type : SearchResponse , pagination : { type : PaginationInfo , first : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A25%3A07.856Z to=2016-07-08T15%3A25%3A07.856Z qp=CommonName.mdaas%3AReuters%2CRCSAssetClass.mdaas%3ATRAD length=3 offset=0 , self : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A25%3A07.856Z to=2016-07-08T15%3A25%3A07.856Z qp=CommonName.mdaas%3AReuters%2CRCSAssetClass.mdaas%3ATRAD length=3 offset=0 , next : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A25%3A07.856Z to=2016-07-08T15%3A25%3A07.856Z qp=CommonName.mdaas%3AReuters%2CRCSAssetClass.mdaas%3ATRAD length=3 offset=3 , last : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T15%3A25%3A07.856Z to=2016-07-08T15%3A25%3A07.856Z qp=CommonName.mdaas%3AReuters%2CRCSAssetClass.mdaas%3ATRAD length=3 offset=8592 }, results : { type : SearchResults , fromDate : 2016-07-08T15:25:07.856Z , toDate : 2016-07-08T15:25:07.856Z , total : 8593, offset : 0, length : 3, infotons : [ { type : ObjectInfoton , system : { uuid : 83d204f7495ebef595724af60bdcd83d , lastModified : 2016-07-08T15:25:07.856Z , path : /permid.org/1-21591362718 , dataCenter : dc1 , indexTime : 1467991508847, parent : /permid.org }, fields : { type.rdf : [ http://ont.thomsonreuters.com/mdaas/Instrument ], instrumentExpiryDate.mdaas : [ 2017-06-16 ], isIssuedBy.mdaas : [ http://permid.org/1-5000008825 ], CommonName.mdaas : [ Vontobel Financial Products Call 31 USD Thomson Reuters: Silver / US Dollar FX Spot Rate 16Jun17 ], instrumentCurrencyName.mdaas : [ EUR ], instrumentStatus.mdaas : [ Active ], RCSAssetClass.mdaas : [ TRAD ], instrumentAssetClass.mdaas : [ Traditional Warrants ] } }, { type : ObjectInfoton , system : { uuid : c2c05f8e258c6b33fcb6e53c84e93d2c , lastModified : 2016-07-08T15:25:07.856Z , path : /permid.org/1-21591362720 , dataCenter : dc1 , indexTime : 1467991508849, parent : /permid.org }, fields : { type.rdf : [ http://ont.thomsonreuters.com/mdaas/Instrument ], instrumentExpiryDate.mdaas : [ 2016-08-19 ], isIssuedBy.mdaas : [ http://permid.org/1-5000008825 ], CommonName.mdaas : [ Vontobel Financial Products Call 24.5 USD Thomson Reuters: Silver / US Dollar FX Spot Rate 19Aug16 ], instrumentCurrencyName.mdaas : [ EUR ], instrumentStatus.mdaas : [ Active ], RCSAssetClass.mdaas : [ TRAD ], instrumentAssetClass.mdaas : [ Traditional Warrants ] } }, { type : ObjectInfoton , system : { uuid : 84e8ea6d184fb1b68d88eba85e6ba031 , lastModified : 2016-07-08T15:25:07.856Z , path : /permid.org/1-21591362722 , dataCenter : dc1 , indexTime : 1467991508846, parent : /permid.org }, fields : { type.rdf : [ http://ont.thomsonreuters.com/mdaas/Instrument ], instrumentExpiryDate.mdaas : [ 2016-09-16 ], isIssuedBy.mdaas : [ http://permid.org/1-5000008825 ], CommonName.mdaas : [ Vontobel Financial Products Call 26 USD Thomson Reuters: Silver / US Dollar FX Spot Rate 16Sep16 ], instrumentCurrencyName.mdaas : [ EUR ], instrumentStatus.mdaas : [ Active ], RCSAssetClass.mdaas : [ TRAD ], instrumentAssetClass.mdaas : [ Traditional Warrants ] } } ] } }","title":"Multiple Conditions (\"AND\")"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.QueryForInfotons.html#optional-conditions-or","text":"Action: Get up to 5 entities under permid.org, whose organizationStateProvince value contains either \"Delaware\" or \"Idaho\". Curl command: curl cm-well-host /permid.org?op=search qp=*organizationStateProvince.mdaas:Delaware,*organizationStateProvince.mdaas:Idaho format=json pretty with-data length=5 fields=organizationStateProvince.mdaas,organizationCity.mdaas Response: { type : SearchResponse , pagination : { type : PaginationInfo , first : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T12%3A55%3A25.659Z to=2016-07-08T16%3A10%3A15.331Z qp=*organizationStateProvince.mdaas%3ADelaware%2C*organizationStateProvince.mdaas%3AIdaho length=5 offset=0 , self : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T12%3A55%3A25.659Z to=2016-07-08T16%3A10%3A15.331Z qp=*organizationStateProvince.mdaas%3ADelaware%2C*organizationStateProvince.mdaas%3AIdaho length=5 offset=0 , next : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T12%3A55%3A25.659Z to=2016-07-08T16%3A10%3A15.331Z qp=*organizationStateProvince.mdaas%3ADelaware%2C*organizationStateProvince.mdaas%3AIdaho length=5 offset=5 , last : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T12%3A55%3A25.659Z to=2016-07-08T16%3A10%3A15.331Z qp=*organizationStateProvince.mdaas%3ADelaware%2C*organizationStateProvince.mdaas%3AIdaho length=5 offset=129660 }, results : { type : SearchResults , fromDate : 2016-07-08T12:55:25.659Z , toDate : 2016-07-08T16:10:15.331Z , total : 129664, offset : 0, length : 5, infotons : [ { type : ObjectInfoton , system : { uuid : ede36a0643a6273085cc782d861a811a , lastModified : 2016-07-08T16:10:15.331Z , path : /permid.org/1-5046728258 , dataCenter : dc1 , indexTime : 1467994216087, parent : /permid.org }, fields : { organizationCity.mdaas : [ HANOVER ], organizationStateProvince.mdaas : [ DELAWARE , NEW HAMPSHIRE ] } }, { type : ObjectInfoton , system : { uuid : 5518ea6ac23692ce30caa24b9c868ea6 , lastModified : 2016-07-08T15:25:13.079Z , path : /permid.org/1-5049099159 , dataCenter : dc1 , indexTime : 1467991566404, parent : /permid.org }, fields : { organizationCity.mdaas : [ SAN FRANCISCO ], organizationStateProvince.mdaas : [ CALIFORNIA , DELAWARE ] } }, { type : ObjectInfoton , system : { uuid : 65582f41fd62f409d3f6c4990c7af844 , lastModified : 2016-07-08T15:25:12.687Z , path : /permid.org/1-5001360647 , dataCenter : dc1 , indexTime : 1467991566572, parent : /permid.org }, fields : { organizationCity.mdaas : [ MOUNTAIN HOME ], organizationStateProvince.mdaas : [ IDAHO ] } }, { type : ObjectInfoton , system : { uuid : eaa7fe2bff508f77e203816c03f2d952 , lastModified : 2016-07-08T15:25:12.427Z , path : /permid.org/1-4297939554 , dataCenter : dc1 , indexTime : 1467991513916, parent : /permid.org }, fields : { organizationCity.mdaas : [ IDAHO FALLS ], organizationStateProvince.mdaas : [ IDAHO ] } }, { type : ObjectInfoton , system : { uuid : cc60f9c1ccf71019861f7277abcfd3ed , lastModified : 2016-07-08T12:55:25.659Z , path : /permid.org/1-5051394129 , dataCenter : dc1 , indexTime : 1467982577997, parent : /permid.org }, fields : { organizationCity.mdaas : [ EMMETT ], organizationStateProvince.mdaas : [ IDAHO ] } } ] } }","title":"Optional Conditions (\"OR\")"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.QueryForInfotons.html#negative-conditions-not","text":"Action: Get up to 5 entities under permid.org, whose organizationStateProvince value contains \"New York\", but whose organizationCity value does not contain \"New York\" (i.e. the entity is located in New York state but not in New York city). Curl command: curl cm-well-host /permid.org?op=search qp=organizationStateProvince.mdaas:New%20York,-organizationCity.mdaas:new%20york format=json pretty with-data length=5 fields=organizationStateProvince.mdaas,organizationCity.mdaas Response: { type : SearchResponse , pagination : { type : PaginationInfo , first : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T10%3A39%3A27.444Z to=2016-07-08T15%3A25%3A13.470Z qp=organizationStateProvince.mdaas%3ANew+York%2C-organizationCity.mdaas%3Anew+york length=5 offset=0 , self : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T10%3A39%3A27.444Z to=2016-07-08T15%3A25%3A13.470Z qp=organizationStateProvince.mdaas%3ANew+York%2C-organizationCity.mdaas%3Anew+york length=5 offset=0 , next : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T10%3A39%3A27.444Z to=2016-07-08T15%3A25%3A13.470Z qp=organizationStateProvince.mdaas%3ANew+York%2C-organizationCity.mdaas%3Anew+york length=5 offset=5 , last : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T10%3A39%3A27.444Z to=2016-07-08T15%3A25%3A13.470Z qp=organizationStateProvince.mdaas%3ANew+York%2C-organizationCity.mdaas%3Anew+york length=5 offset=68905 }, results : { type : SearchResults , fromDate : 2016-07-08T10:39:27.444Z , toDate : 2016-07-08T15:25:13.470Z , total : 68905, offset : 0, length : 5, infotons : [ { type : ObjectInfoton , system : { uuid : b54c657343f7146989a6cda1fcdc6f64 , lastModified : 2016-07-08T15:25:13.470Z , path : /permid.org/1-5051394161 , dataCenter : dc1 , indexTime : 1467991566029, parent : /permid.org }, fields : { organizationCity.mdaas : [ GLENDALE ], organizationStateProvince.mdaas : [ NEW YORK ] } }, { type : ObjectInfoton , system : { uuid : cbed49332e66edd289da9481f8f3ac83 , lastModified : 2016-07-08T14:10:04.847Z , path : /permid.org/1-5051394157 , dataCenter : dc1 , indexTime : 1467987058263, parent : /permid.org }, fields : { organizationCity.mdaas : [ BROOKLYN ], organizationStateProvince.mdaas : [ NEW YORK ] } }, { type : ObjectInfoton , system : { uuid : 6d9600d422e7130b4309205af7f0f456 , lastModified : 2016-07-08T14:10:04.319Z , path : /permid.org/1-5034764167 , dataCenter : dc1 , indexTime : 1467987005379, parent : /permid.org }, fields : { organizationCity.mdaas : [ BROOKLYN ], organizationStateProvince.mdaas : [ NEW YORK ] } }, { type : ObjectInfoton , system : { uuid : 5c7476f29384a2f680e87ec95a8c2b9f , lastModified : 2016-07-08T12:55:25.206Z , path : /permid.org/1-5006279969 , dataCenter : dc1 , indexTime : 1467982578452, parent : /permid.org }, fields : { organizationCity.mdaas : [ WHITE PLAINS ], organizationStateProvince.mdaas : [ NEW YORK ] } }, { type : ObjectInfoton , system : { uuid : 740bb1c6ea1f85e169f96edb2cdd3567 , lastModified : 2016-07-08T10:39:27.444Z , path : /permid.org/1-5051393857 , dataCenter : dc1 , indexTime : 1467974417952, parent : /permid.org }, fields : { organizationCity.mdaas : [ RIDGEWOOD ], organizationStateProvince.mdaas : [ NEW YORK ] } } ] } }","title":"Negative Conditions (\"NOT\")"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.QueryForInfotons.html#6-page-through-results","text":"Action: Get the first 3 entities (offset=0, length=3) under permid.org, whose organizationStateProvince value contains \"New York\" . Curl command: curl cm-well-host /permid.org?op=search qp=organizationStateProvince.mdaas:New%20York format=json pretty with-data offset=0 length=3 fields=organizationStateProvince.mdaas,organizationCity.mdaas Response: { type : SearchResponse , pagination : { type : PaginationInfo , first : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T14%3A10%3A04.439Z to=2016-07-08T15%3A25%3A13.470Z qp=organizationStateProvince.mdaas%3ANew+York length=3 offset=0 , self : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T14%3A10%3A04.439Z to=2016-07-08T15%3A25%3A13.470Z qp=organizationStateProvince.mdaas%3ANew+York length=3 offset=0 , next : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T14%3A10%3A04.439Z to=2016-07-08T15%3A25%3A13.470Z qp=organizationStateProvince.mdaas%3ANew+York length=3 offset=3 , last : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T14%3A10%3A04.439Z to=2016-07-08T15%3A25%3A13.470Z qp=organizationStateProvince.mdaas%3ANew+York length=3 offset=123936 }, results : { type : SearchResults , fromDate : 2016-07-08T14:10:04.439Z , toDate : 2016-07-08T15:25:13.470Z , total : 123938, offset : 0, length : 3, infotons : [ { type : ObjectInfoton , system : { uuid : b54c657343f7146989a6cda1fcdc6f64 , lastModified : 2016-07-08T15:25:13.470Z , path : /permid.org/1-5051394161 , dataCenter : dc1 , indexTime : 1467991566029, parent : /permid.org }, fields : { organizationCity.mdaas : [ GLENDALE ], organizationStateProvince.mdaas : [ NEW YORK ] } }, { type : ObjectInfoton , system : { uuid : cbed49332e66edd289da9481f8f3ac83 , lastModified : 2016-07-08T14:10:04.847Z , path : /permid.org/1-5051394157 , dataCenter : dc1 , indexTime : 1467987058263, parent : /permid.org }, fields : { organizationCity.mdaas : [ BROOKLYN ], organizationStateProvince.mdaas : [ NEW YORK ] } }, { type : ObjectInfoton , system : { uuid : 4055b393538b016e7a05457301ea669b , lastModified : 2016-07-08T14:10:04.439Z , path : /permid.org/1-5038060478 , dataCenter : dc1 , indexTime : 1467987006101, parent : /permid.org }, fields : { organizationCity.mdaas : [ NEW YORK ], organizationStateProvince.mdaas : [ NEW YORK ] } } ] } } Action: Get the next 3 entities (offset=3, length=3) under permid.org, whose organizationStateProvince value contains \"New York\". Curl command: curl cm-well-host /permid.org?op=search qp=organizationStateProvince.mdaas:New%20York format=json pretty with-data offset=3 length=3 fields=organizationStateProvince.mdaas,organizationCity.mdaas Response: { type : SearchResponse , pagination : { type : PaginationInfo , first : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T10%3A39%3A27.503Z to=2016-07-08T14%3A10%3A04.319Z qp=organizationStateProvince.mdaas%3ANew+York length=3 offset=0 , previous : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T10%3A39%3A27.503Z to=2016-07-08T14%3A10%3A04.319Z qp=organizationStateProvince.mdaas%3ANew+York length=3 offset=0 , self : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T10%3A39%3A27.503Z to=2016-07-08T14%3A10%3A04.319Z qp=organizationStateProvince.mdaas%3ANew+York length=3 offset=3 , next : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T10%3A39%3A27.503Z to=2016-07-08T14%3A10%3A04.319Z qp=organizationStateProvince.mdaas%3ANew+York length=3 offset=6 , last : http://cm-well-host.com/permid.org?format=json? op=search from=2016-07-08T10%3A39%3A27.503Z to=2016-07-08T14%3A10%3A04.319Z qp=organizationStateProvince.mdaas%3ANew+York length=3 offset=123936 }, results : { type : SearchResults , fromDate : 2016-07-08T10:39:27.503Z , toDate : 2016-07-08T14:10:04.319Z , total : 123938, offset : 3, length : 3, infotons : [ { type : ObjectInfoton , system : { uuid : 6d9600d422e7130b4309205af7f0f456 , lastModified : 2016-07-08T14:10:04.319Z , path : /permid.org/1-5034764167 , dataCenter : dc1 , indexTime : 1467987005379, parent : /permid.org }, fields : { organizationCity.mdaas : [ BROOKLYN ], organizationStateProvince.mdaas : [ NEW YORK ] } }, { type : ObjectInfoton , system : { uuid : 5c7476f29384a2f680e87ec95a8c2b9f , lastModified : 2016-07-08T12:55:25.206Z , path : /permid.org/1-5006279969 , dataCenter : dc1 , indexTime : 1467982578452, parent : /permid.org }, fields : { organizationCity.mdaas : [ WHITE PLAINS ], organizationStateProvince.mdaas : [ NEW YORK ] } }, { type : ObjectInfoton , system : { uuid : 73cead0a965c98ea9e801fcf021284bc , lastModified : 2016-07-08T10:39:27.503Z , path : /permid.org/1-5051394063 , dataCenter : dc1 , indexTime : 1467974418394, parent : /permid.org }, fields : { organizationCity.mdaas : [ NEW YORK ], organizationStateProvince.mdaas : [ NEW YORK ] } } ] } }","title":"6. Page through Results"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.QueryForInfotons.html#7-traverse-inbound-and-outbound-links","text":"Action: Find the address of the company that issues a quote with a RIC code of \"VAC\". The query uses the yg flag that enables traversing inbound and outbound links. The steps in the query are: Find quotes with a RIC code of \"VAC\". Follow the quote's outbound links to find out what instrument issues the quote. Follow the instrument's inbound links to find out which company points to the instrument in its primaryInstrument field. Curl command: curl cm-well-host /permid.org?op=search qp=RIC.mdaas::VAC with-data yg= IsQuoteOf.mdaas primaryInstrument.mdaas format=json pretty Response: { type : SearchResponse , pagination : { type : PaginationInfo , first : http://cm-well-host.com/permid.org?format=json? op=search from=2015-03-24T11%3A39%3A46.462Z to=2015-03-24T11%3A39%3A46.462Z qp=RIC.mdaas%3A%3AVAC length=3 offset=0 , self : http://cm-well-host.com/permid.org?format=json? op=search from=2015-03-24T11%3A39%3A46.462Z to=2015-03-24T11%3A39%3A46.462Z qp=RIC.mdaas%3A%3AVAC length=3 offset=0 , last : http://cm-well-host.com/permid.org?format=json? op=search from=2015-03-24T11%3A39%3A46.462Z to=2015-03-24T11%3A39%3A46.462Z qp=RIC.mdaas%3A%3AVAC length=3 offset=0 }, results : { type : SearchResults , fromDate : 2015-03-24T11:39:46.462Z , toDate : 2015-03-24T11:39:46.462Z , total : 1, offset : 0, length : 3, infotons : [ { type : ObjectInfoton , system : { uuid : 0dcfaba91276c59c448bad93cc7e232e , lastModified : 2015-03-24T11:39:46.462Z , path : /permid.org/1-21478428449 , dataCenter : dc1 , indexTime : 1460125129760, parent : /permid.org }, fields : { RIC.mdaas : [ VAC ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Quote ], IsQuoteOf.mdaas : [ http://permid.org/1-21478428282 ], IlxID.mdaas : [ VAC-US,USD,NORM ], dsQuotationMnemonic.mdaas : [ U:VAC ], IsTradingIn.mdaas : [ USD ], MIC.mdaas : [ XXXX ], CommonName.mdaas : [ MARRIOTT VACATIONS WORLDWIDE ORD ], RCSAssetClass.mdaas : [ ORD ], TRCSAssetClass.mdaas : [ Ordinary Shares ], dsQuotationNumber.mdaas : [ 77857E ], ExchangeTicker.mdaas : [ VAC ], QuoteExchangeCode.mdaas : [ NYQ ] } }, { type : ObjectInfoton , system : { uuid : af45a50bfe5645b16ef1ccccd2ab3006 , lastModified : 2015-03-08T12:38:04.543Z , path : /permid.org/1-21478428282 , dataCenter : dc1 , indexTime : 1460133028465, parent : /permid.org }, fields : { WorldscopeID.mdaas : [ 57164Y107 ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Instrument ], WorldScopePermId.mdaas : [ C840UV2P0 ], mainQuoteId.mdaas : [ 21478428456 ], isIssuedBy.mdaas : [ http://permid.org/1-5035948006 ], CommonName.mdaas : [ Marriott Vacations Worldwide Ord Shs ], instrumentCurrencyName.mdaas : [ USD ], instrumentStatus.mdaas : [ Active ], RCSAssetClass.mdaas : [ ORD ], instrumentAssetClass.mdaas : [ Ordinary Shares ] } }, { type : ObjectInfoton , system : { uuid : 901803c75dd49427a4cba92878095e4b , lastModified : 2016-04-06T07:15:07.612Z , path : /permid.org/1-5035948006 , dataCenter : dc1 , indexTime : 1460098385554, parent : /permid.org }, fields : { legalRegistrationCommonAddress.mdaas : [ 2711 Centerville Rd\\nWILMINGTON\\nDELAWARE\\n19808-1660\\nUnited States\\n ], primaryInstrument.mdaas : [ http://permid.org/1-21478428282 ], type.rdf : [ http://ont.thomsonreuters.com/mdaas/Organization ], organizationAddressLine1.mdaas : [ 6649 Westwood Blvd , 6649 Westwood Blvd , 2711 Centerville Rd ], organizationAddressLine2.mdaas : [ 2711 Centerville Road ], MXID.mdaas : [ 111800547 ], PrimaryReportingEntityCode.mdaas : [ D9F64 ], organizationCity.mdaas : [ ORLANDO , WILMINGTON ], organizationFoundedDay.mdaas : [ 21 ], WorldscopeCompanyPermID.mdaas : [ C840UV2P0 ], organizationCountryCode.mdaas : [ 100319 ], instrumentCount.mdaas : [ 1 ], organizationFoundedYear.mdaas : [ 2011 ], mainQuoteId.mdaas : [ 21478428456 ], CIK.mdaas : [ 0001524358 ], hasRegistrationAuthority.mdaas : [ http://permid.org/1-5000008957 ], entityLastReviewedDate.mdaas : [ 2016-03-02 05:00:00 ], hasUltimateParent.mdaas : [ http://permid.org/1-5035948006 ], OrganizationProviderTypeCode.mdaas : [ 1 ], organizationWebsite.mdaas : [ http://www.marriottvacationsworldwide.com/ ], hasImmediateParent.mdaas : [ http://permid.org/1-5035948006 ], LEI.mdaas : [ 549300WA6BT5H4F7IO94 ], CommonName.mdaas : [ Marriott Vacations Worldwide Corp ], headquartersCommonAddress.mdaas : [ 6649 Westwood Blvd\\nORLANDO\\nFLORIDA\\n32821-8029\\nUnited States\\n ], registeredFax.mdaas : [ 13026365454 ], organizationStateProvinceOfficialCode.mdaas : [ DE , FL ], organizationStatusCode.mdaas : [ Active ], InvestextID.mdaas : [ VAC ], organizationFoundedMonth.mdaas : [ 6 ], officialName.mdaas : [ MARRIOTT VACATIONS WORLDWIDE CORPORATION ], headquartersPhone.mdaas : [ 14072066000 ], headquartersAddress.mdaas : [ ORLANDO\\nFLORIDA\\n32821-8029\\nUnited States\\n , 6649 Westwood Blvd\\nORLANDO\\nFLORIDA\\n32821-8029\\nUnited States\\n ], isDomiciledIn.mdaas : [ United States ], organizationCountry.mdaas : [ United States ], SDCID.mdaas : [ 1218547002 ], isPublicFlag.mdaas : [ true ], registeredPhone.mdaas : [ 13026365400 ], TaxID.mdaas : [ 452598330 ], organizationStateProvince.mdaas : [ DELAWARE , FLORIDA ], legalRegistrationAddress.mdaas : [ WILMINGTON\\nDELAWARE\\n19808-1660\\nUnited States\\n , 2711 Centerville Rd\\nWILMINGTON\\nDELAWARE\\n19808-1660\\nUnited States\\n ], subsidiariesCount.mdaas : [ 109 ], organizationTypeCode.mdaas : [ Business Organization ], organizationAddressPostalCode.mdaas : [ 32821-8029 , 19808-1660 ], organizationSubtypeCode.mdaas : [ Company ], SDCusip.mdaas : [ 56655E ], shortName.mdaas : [ Marriott Vaca ], equityInstrumentCount.mdaas : [ 1 ], organizationAddressLine3.mdaas : [ New Castle County ], isIncorporatedIn.mdaas : [ United States ], WorldscopeCompanyID.mdaas : [ 57164Y107 ], primaryIndustry.mdaas : [ Hotels, Motels Cruise Lines (NEC) ], RCPID.mdaas : [ 600304172 ] } } ] } }","title":"7. Traverse Inbound and Outbound Links"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.QueryForInfotons.html#api-reference","text":"Query for Infotons Using Field Conditions CM-Well Query Parameters Field Condition Syntax","title":"API Reference"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.QueryWithGremlin.html","text":"Query with Gremlin Step Outline Upload Data Run Gremlin Query 1. Upload Data Action: Upload some person infotons, with relationships among the individuals. Curl command: curl -X POST cm-well-host /_in?format=nquads -H Content-Type: text/plain --data-binary @inputfile.txt Input file contents: http://example.org/Individuals/DaisyDuck http://purl.org/vocab/relationship/colleagueOf http://example.org/Individuals/BruceWayne . http://example.org/Individuals/DaisyDuck http://www.tr-lbd.com/bold#active false . http://example.org/Individuals/BruceWayne http://purl.org/vocab/relationship/employedBy http://example.org/Individuals/DonaldDuck . http://example.org/Individuals/BruceWayne http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/DonaldDuck http://purl.org/vocab/relationship/mentorOf http://example.org/Individuals/JohnSmith . http://example.org/Individuals/DonaldDuck http://purl.org/vocab/relationship/knowsByReputation http://example.org/Individuals/MartinOdersky . http://example.org/Individuals/DonaldDuck http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/JohnSmith http://purl.org/vocab/relationship/friendOf http://example.org/Individuals/PeterParker http://example.org/graphs/spiderman . http://example.org/Individuals/JohnSmith http://purl.org/vocab/relationship/parentOf http://example.org/Individuals/SaraSmith http://example.org/graphs/spiderman . http://example.org/Individuals/JohnSmith http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/SaraSmith http://purl.org/vocab/relationship/siblingOf http://example.org/Individuals/RebbecaSmith . http://example.org/Individuals/SaraSmith http://purl.org/vocab/relationship/childOf http://example.org/Individuals/HarryMiller . http://example.org/Individuals/SaraSmith http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/RebbecaSmith http://purl.org/vocab/relationship/siblingOf http://example.org/Individuals/SaraSmith . http://example.org/Individuals/RebbecaSmith http://www.tr-lbd.com/bold#active false . http://example.org/Individuals/PeterParker http://purl.org/vocab/relationship/worksWith http://example.org/Individuals/HarryMiller . http://example.org/Individuals/PeterParker http://purl.org/vocab/relationship/neighborOf http://example.org/Individuals/ClarkKent . http://example.org/Individuals/PeterParker http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/HarryMiller http://purl.org/vocab/relationship/parentOf http://example.org/Individuals/NatalieMiller . http://example.org/Individuals/HarryMiller http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/NatalieMiller http://purl.org/vocab/relationship/childOf http://example.org/Individuals/HarryMiller . http://example.org/Individuals/NatalieMiller http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/MartinOdersky http://purl.org/vocab/relationship/collaboratesWith http://example.org/Individuals/RonaldKhun . http://example.org/Individuals/MartinOdersky http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/RonaldKhun http://purl.org/vocab/relationship/collaboratesWith http://example.org/Individuals/MartinOdersky . http://example.org/Individuals/RonaldKhun http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/RonaldKhun http://www.tr-lbd.com/bold#category deals . http://example.org/Individuals/RonaldKhun http://www.tr-lbd.com/bold#category news . Response: { success :true} 2. Run Gremlin Query Action: Retrieve person infotons which are outbound links of the \"Sara Smith\" infoton, whose active field value is \"true\". Curl command: curl -X POST cm-well-host /_sp --data-binary @inputfile.txt Input file contents: PATHS /example.org/Individuals?op=search length=1000 with-data Gremlin g.v( http://example.org/Individuals/SaraSmith ).out().filter{it[ http://www.tr-lbd.com/bold#active ]== true } Response: v[http://example.org/Individuals/RebbecaSmith] API Reference Apply Gremlin to Query Results","title":"Query with Gremlin"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.QueryWithGremlin.html#query-with-gremlin","text":"","title":"Query with Gremlin"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.QueryWithGremlin.html#step-outline","text":"Upload Data Run Gremlin Query","title":"Step Outline"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.QueryWithGremlin.html#1-upload-data","text":"Action: Upload some person infotons, with relationships among the individuals. Curl command: curl -X POST cm-well-host /_in?format=nquads -H Content-Type: text/plain --data-binary @inputfile.txt Input file contents: http://example.org/Individuals/DaisyDuck http://purl.org/vocab/relationship/colleagueOf http://example.org/Individuals/BruceWayne . http://example.org/Individuals/DaisyDuck http://www.tr-lbd.com/bold#active false . http://example.org/Individuals/BruceWayne http://purl.org/vocab/relationship/employedBy http://example.org/Individuals/DonaldDuck . http://example.org/Individuals/BruceWayne http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/DonaldDuck http://purl.org/vocab/relationship/mentorOf http://example.org/Individuals/JohnSmith . http://example.org/Individuals/DonaldDuck http://purl.org/vocab/relationship/knowsByReputation http://example.org/Individuals/MartinOdersky . http://example.org/Individuals/DonaldDuck http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/JohnSmith http://purl.org/vocab/relationship/friendOf http://example.org/Individuals/PeterParker http://example.org/graphs/spiderman . http://example.org/Individuals/JohnSmith http://purl.org/vocab/relationship/parentOf http://example.org/Individuals/SaraSmith http://example.org/graphs/spiderman . http://example.org/Individuals/JohnSmith http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/SaraSmith http://purl.org/vocab/relationship/siblingOf http://example.org/Individuals/RebbecaSmith . http://example.org/Individuals/SaraSmith http://purl.org/vocab/relationship/childOf http://example.org/Individuals/HarryMiller . http://example.org/Individuals/SaraSmith http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/RebbecaSmith http://purl.org/vocab/relationship/siblingOf http://example.org/Individuals/SaraSmith . http://example.org/Individuals/RebbecaSmith http://www.tr-lbd.com/bold#active false . http://example.org/Individuals/PeterParker http://purl.org/vocab/relationship/worksWith http://example.org/Individuals/HarryMiller . http://example.org/Individuals/PeterParker http://purl.org/vocab/relationship/neighborOf http://example.org/Individuals/ClarkKent . http://example.org/Individuals/PeterParker http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/HarryMiller http://purl.org/vocab/relationship/parentOf http://example.org/Individuals/NatalieMiller . http://example.org/Individuals/HarryMiller http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/NatalieMiller http://purl.org/vocab/relationship/childOf http://example.org/Individuals/HarryMiller . http://example.org/Individuals/NatalieMiller http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/MartinOdersky http://purl.org/vocab/relationship/collaboratesWith http://example.org/Individuals/RonaldKhun . http://example.org/Individuals/MartinOdersky http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/RonaldKhun http://purl.org/vocab/relationship/collaboratesWith http://example.org/Individuals/MartinOdersky . http://example.org/Individuals/RonaldKhun http://www.tr-lbd.com/bold#active true . http://example.org/Individuals/RonaldKhun http://www.tr-lbd.com/bold#category deals . http://example.org/Individuals/RonaldKhun http://www.tr-lbd.com/bold#category news . Response: { success :true}","title":"1. Upload Data"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.QueryWithGremlin.html#2-run-gremlin-query","text":"Action: Retrieve person infotons which are outbound links of the \"Sara Smith\" infoton, whose active field value is \"true\". Curl command: curl -X POST cm-well-host /_sp --data-binary @inputfile.txt Input file contents: PATHS /example.org/Individuals?op=search length=1000 with-data Gremlin g.v( http://example.org/Individuals/SaraSmith ).out().filter{it[ http://www.tr-lbd.com/bold#active ]== true } Response: v[http://example.org/Individuals/RebbecaSmith]","title":"2. Run Gremlin Query"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.QueryWithGremlin.html#api-reference","text":"Apply Gremlin to Query Results","title":"API Reference"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.QueryWithSPARQL.html","text":"Query with SPARQL Action: Search for organizations whose name contains the string \"Systems\", and apply SPARQL to the results to display the infotons' URIs, and the organization names and addresses. Curl command: curl -X POST cm-well-host /_sp?format=ascii -H Content-Type:text/plain --data-binary @inputfile.txt Input file contents: PATHS /permid.org?op=search qp=CommonName.mdaas:Systems with-data SPARQL SELECT * WHERE { ?Infoton http://ont.thomsonreuters.com/mdaas/CommonName ?Name. ?Infoton http://ont.thomsonreuters.com/mdaas/headquartersCommonAddress ?Address. } Response: -------------------------------------------------------------------------------------------------------------------------------------------------------------- | Infoton | Name | Address| ============================================================================================================================================================== | http://permid.org/1-5044348019 | Tiller Systems SAS | France\\n | | http://permid.org/1-5048323276 | Expert Systems Holdings Ltd | 17/F., AXA Tower, Landmark East, 100 How Ming Street, Kwun Tong, Kowloon\\nHong Kong\\n | | http://permid.org/1-5050714197 | Keyless Systems Ltd | Israel\\n | -------------------------------------------------------------------------------------------------------------------------------------------------------------- API Reference Using SPARQL on Infotons Apply SPARQL to Query Results Field Condition Syntax","title":"Query with SPARQL"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.QueryWithSPARQL.html#query-with-sparql","text":"Action: Search for organizations whose name contains the string \"Systems\", and apply SPARQL to the results to display the infotons' URIs, and the organization names and addresses. Curl command: curl -X POST cm-well-host /_sp?format=ascii -H Content-Type:text/plain --data-binary @inputfile.txt Input file contents: PATHS /permid.org?op=search qp=CommonName.mdaas:Systems with-data SPARQL SELECT * WHERE { ?Infoton http://ont.thomsonreuters.com/mdaas/CommonName ?Name. ?Infoton http://ont.thomsonreuters.com/mdaas/headquartersCommonAddress ?Address. } Response: -------------------------------------------------------------------------------------------------------------------------------------------------------------- | Infoton | Name | Address| ============================================================================================================================================================== | http://permid.org/1-5044348019 | Tiller Systems SAS | France\\n | | http://permid.org/1-5048323276 | Expert Systems Holdings Ltd | 17/F., AXA Tower, Landmark East, 100 How Ming Street, Kwun Tong, Kowloon\\nHong Kong\\n | | http://permid.org/1-5050714197 | Keyless Systems Ltd | Israel\\n | --------------------------------------------------------------------------------------------------------------------------------------------------------------","title":"Query with SPARQL"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.QueryWithSPARQL.html#api-reference","text":"Using SPARQL on Infotons Apply SPARQL to Query Results Field Condition Syntax","title":"API Reference"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.StreamWithIterator.html","text":"Stream with Iterator Step Outline Create Iterator . Get Next Chunk 1. Create Iterator Action: Create an iterator for retrieving all infotons under permid.org, with a session timeout of 60 seconds. Curl command: Curl cm-well-host /permid.org?op=create-iterator session-ttl=60000 Response: { type : IterationResults , iteratorId : YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjE3Ny4xOjQ4ODMxL3VzZXIvJGJkYiMtMTc4MTcxOTQwMA , totalHits :94271748, infotons :[]} 2. Get Next Chunk Action: Get the next chunk of infotons. Curl command: Curl cm-well-host /permid.org?op=next-chunk format=text iterator-id=YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjE3Ny4xOjQ4ODMxL3VzZXIvJGJkYiMtMTc4MTcxOTQwMA Response: (truncated) /permid.org/1-21568482685 /permid.org/1-21580881855 /permid.org/1-21581865726 /permid.org/1-21575060029 /permid.org/1-21582269193 /permid.org/1-21591345657 /permid.org/1-21488552284 /permid.org/1-21521516658 /permid.org/1-21591870173 /permid.org/1-21547405276 /permid.org/1-5013071490 /permid.org/1-21575672989 /permid.org/1-21580881956 /permid.org/1-21581873542 /permid.org/1-21520024307 /permid.org/1-21579664297 /permid.org/1-5051390958 /permid.org/1-21488618092 /permid.org/1-21523206626 /permid.org/1-21591885498 /permid.org/1-21501231546 /permid.org/1-5035946005 /permid.org/1-21580881913 /permid.org/1-21579628021 /permid.org/1-21582001600 /permid.org/1-5035157347 /permid.org/1-21590887958 /permid.org/1-21478191061 /permid.org/1-21508882736 /permid.org/1-18068376296 /permid.org/1-4296477614 /permid.org/1-5035890025 /permid.org/1-21580882088 /permid.org/1-21581889824 /permid.org/1-21582110667 /permid.org/1-21583763573 /permid.org/1-21589697989 /permid.org/1-21488094136 /permid.org/1-21482237965 /permid.org/1-21591877425 /permid.org/1-44636899891 /permid.org/1-5000452316 /permid.org/1-5048596216 /permid.org/1-21580882074 /permid.org/1-21581892706 /permid.org/1-21528445248 /permid.org/1-21525076756 /permid.org/1-5000219021 /permid.org/1-21488613002 /permid.org/1-21558246353 /permid.org/1-21591613531 /permid.org/1-5046060305 /permid.org/1-21489652020 /permid.org/1-21521413252 /permid.org/1-21581865725 /permid.org/1-21574480806 /permid.org/1-21582275031 /permid.org/1-21591343214 /permid.org/1-21487993355 /permid.org/1-21559482266 /permid.org/1-21591909662 /permid.org/1-21563832851 /permid.org/1-5049096098 /permid.org/1-21580881937 /permid.org/1-21581806260 /permid.org/1-21556465288 /permid.org/1-21583830902 /permid.org/1-21529570723 /permid.org/1-21488608017 /permid.org/1-21539740273 /permid.org/1-21591871192 /permid.org/1-21565873982 /permid.org/1-21570267509 /permid.org/1-5042243009 /permid.org/1-21581883351 /permid.org/1-21556474777 /permid.org/1-21579668412 /permid.org/1-21590881113 /permid.org/1-21488450878 /permid.org/1-21492520856 /permid.org/1-8590619498 /permid.org/1-21565338620 /permid.org/1-5000640649 /permid.org/1-21580881859 /permid.org/1-5000402082 /permid.org/1-21576588844 /permid.org/1-21512480306 /permid.org/1-21591379116 /permid.org/1-21488368741 /permid.org/1-21558983931 /permid.org/1-21523298659 /permid.org/1-4298179818 /permid.org/1-5000183475 /permid.org/1-21580881854 /permid.org/1-21549411863 /permid.org/1-21574852957 /permid.org/1-18068275065 /permid.org/1-21591352027 /permid.org/1-21487990515 /permid.org/1-21474872424 /permid.org/1-21579984601 /permid.org/1-21548845859 /permid.org/1-5043332094 /permid.org/1-21580881852 /permid.org/1-5050279707 /permid.org/1-21581993283 /permid.org/1-21516558266 /permid.org/1-21478088166 /permid.org/1-30064856600 /permid.org/1-21526646995 /permid.org/1-21591877885 /permid.org/1-21479763936 /permid.org/1-21566307920 /permid.org/1-5035313711 /permid.org/1-55839467139 /permid.org/1-21581875322 /permid.org/1-21574479411 /permid.org/1-21544147689 /permid.org/1-21591286646 /permid.org/1-21479617467 /permid.org/1-55870425147 /permid.org/1-21577738417 /permid.org/1-21552803529 /permid.org/1-5037932339 /permid.org/1-21580881857 /permid.org/1-21581875332 /permid.org/1-21524902390 /permid.org/1-21583533143 /permid.org/1-5051388402 /permid.org/1-4295956437 /permid.org/1-21559070814 /permid.org/1-21591877662 /permid.org/1-21561636345 /permid.org/1-21485759451 /permid.org/1-21563714085 /permid.org/1-21580882143 /permid.org/1-21574992466 /permid.org/1-21562569020 /permid.org/1-21571639830 /permid.org/1-21590290302 /permid.org/1-21488388271 /permid.org/1-21532662471 /permid.org/1-21591871530 /permid.org/1-5000938143 /permid.org/1-21564820233 /permid.org/1-5046292233 /permid.org/1-21580881850 /permid.org/1-5000019104 /permid.org/1-21581654770 /permid.org/1-21582772365 /permid.org/1-21478088320 /permid.org/1-21476453443 /permid.org/1-21484813520 /permid.org/1-21591872247 /permid.org/1-21495136489 /permid.org/1-21579658507 /permid.org/1-21580881864 /permid.org/1-21580789368 /permid.org/1-5000061310 /permid.org/1-21582482466 /permid.org/1-21591341349 /permid.org/1-21483344815 /permid.org/1-21559168048 /permid.org/1-21591913977 /permid.org/1-4296791421 /permid.org/1-21576341202 /permid.org/1-21580881919 /permid.org/1-21581784427 /permid.org/1-21578836421 /permid.org/1-5045675255 /permid.org/1-21591345948 /permid.org/1-21591908756 /permid.org/1-21591340756 /permid.org/1-21591871059 /permid.org/1-21591339811 /permid.org/1-21591876194 /permid.org/1-21558320602 /permid.org/1-21591901306 /permid.org/1-5039681949 /permid.org/1-21514426908 /permid.org/1-21591349673 /permid.org/1-21591908176 /permid.org/1-8589966963 /permid.org/1-21591876592 /permid.org/1-21591355648 /permid.org/1-21591870313 /permid.org/1-21591346066 /permid.org/1-21475048627 /permid.org/1-21591340780 /permid.org/1-21591876949 /permid.org/1-21591354789 /permid.org/1-21591872368 /permid.org/1-21590512357 /permid.org/1-21514427380 /permid.org/1-21591349692 /permid.org/1-21591873320 /permid.org/1-21591353604 /permid.org/1-21591914195 /permid.org/1-21591349806 /permid.org/1-5037119808 /permid.org/1-5035747133 /permid.org/1-21591287581 /permid.org/1-21478089114 /permid.org/1-47034259272 /permid.org/1-21591339705 /permid.org/1-21591866294 /permid.org/1-21589296852 /permid.org/1-21586852710 /permid.org/1-21591284610 /permid.org/1-21591885796 /permid.org/1-21478088773 /permid.org/1-21591908757 /permid.org/1-21590492363 /permid.org/1-21591909367 /permid.org/1-21591341410 /permid.org/1-21591883341 /permid.org/1-21591339888 /permid.org/1-21591877787 API Reference Create Iterator Get Next Chunk","title":"Stream with Iterator"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.StreamWithIterator.html#stream-with-iterator","text":"","title":"Stream with Iterator"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.StreamWithIterator.html#step-outline","text":"Create Iterator . Get Next Chunk","title":"Step Outline"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.StreamWithIterator.html#1-create-iterator","text":"Action: Create an iterator for retrieving all infotons under permid.org, with a session timeout of 60 seconds. Curl command: Curl cm-well-host /permid.org?op=create-iterator session-ttl=60000 Response: { type : IterationResults , iteratorId : YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjE3Ny4xOjQ4ODMxL3VzZXIvJGJkYiMtMTc4MTcxOTQwMA , totalHits :94271748, infotons :[]}","title":"1. Create Iterator"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.StreamWithIterator.html#2-get-next-chunk","text":"Action: Get the next chunk of infotons. Curl command: Curl cm-well-host /permid.org?op=next-chunk format=text iterator-id=YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjE3Ny4xOjQ4ODMxL3VzZXIvJGJkYiMtMTc4MTcxOTQwMA Response: (truncated) /permid.org/1-21568482685 /permid.org/1-21580881855 /permid.org/1-21581865726 /permid.org/1-21575060029 /permid.org/1-21582269193 /permid.org/1-21591345657 /permid.org/1-21488552284 /permid.org/1-21521516658 /permid.org/1-21591870173 /permid.org/1-21547405276 /permid.org/1-5013071490 /permid.org/1-21575672989 /permid.org/1-21580881956 /permid.org/1-21581873542 /permid.org/1-21520024307 /permid.org/1-21579664297 /permid.org/1-5051390958 /permid.org/1-21488618092 /permid.org/1-21523206626 /permid.org/1-21591885498 /permid.org/1-21501231546 /permid.org/1-5035946005 /permid.org/1-21580881913 /permid.org/1-21579628021 /permid.org/1-21582001600 /permid.org/1-5035157347 /permid.org/1-21590887958 /permid.org/1-21478191061 /permid.org/1-21508882736 /permid.org/1-18068376296 /permid.org/1-4296477614 /permid.org/1-5035890025 /permid.org/1-21580882088 /permid.org/1-21581889824 /permid.org/1-21582110667 /permid.org/1-21583763573 /permid.org/1-21589697989 /permid.org/1-21488094136 /permid.org/1-21482237965 /permid.org/1-21591877425 /permid.org/1-44636899891 /permid.org/1-5000452316 /permid.org/1-5048596216 /permid.org/1-21580882074 /permid.org/1-21581892706 /permid.org/1-21528445248 /permid.org/1-21525076756 /permid.org/1-5000219021 /permid.org/1-21488613002 /permid.org/1-21558246353 /permid.org/1-21591613531 /permid.org/1-5046060305 /permid.org/1-21489652020 /permid.org/1-21521413252 /permid.org/1-21581865725 /permid.org/1-21574480806 /permid.org/1-21582275031 /permid.org/1-21591343214 /permid.org/1-21487993355 /permid.org/1-21559482266 /permid.org/1-21591909662 /permid.org/1-21563832851 /permid.org/1-5049096098 /permid.org/1-21580881937 /permid.org/1-21581806260 /permid.org/1-21556465288 /permid.org/1-21583830902 /permid.org/1-21529570723 /permid.org/1-21488608017 /permid.org/1-21539740273 /permid.org/1-21591871192 /permid.org/1-21565873982 /permid.org/1-21570267509 /permid.org/1-5042243009 /permid.org/1-21581883351 /permid.org/1-21556474777 /permid.org/1-21579668412 /permid.org/1-21590881113 /permid.org/1-21488450878 /permid.org/1-21492520856 /permid.org/1-8590619498 /permid.org/1-21565338620 /permid.org/1-5000640649 /permid.org/1-21580881859 /permid.org/1-5000402082 /permid.org/1-21576588844 /permid.org/1-21512480306 /permid.org/1-21591379116 /permid.org/1-21488368741 /permid.org/1-21558983931 /permid.org/1-21523298659 /permid.org/1-4298179818 /permid.org/1-5000183475 /permid.org/1-21580881854 /permid.org/1-21549411863 /permid.org/1-21574852957 /permid.org/1-18068275065 /permid.org/1-21591352027 /permid.org/1-21487990515 /permid.org/1-21474872424 /permid.org/1-21579984601 /permid.org/1-21548845859 /permid.org/1-5043332094 /permid.org/1-21580881852 /permid.org/1-5050279707 /permid.org/1-21581993283 /permid.org/1-21516558266 /permid.org/1-21478088166 /permid.org/1-30064856600 /permid.org/1-21526646995 /permid.org/1-21591877885 /permid.org/1-21479763936 /permid.org/1-21566307920 /permid.org/1-5035313711 /permid.org/1-55839467139 /permid.org/1-21581875322 /permid.org/1-21574479411 /permid.org/1-21544147689 /permid.org/1-21591286646 /permid.org/1-21479617467 /permid.org/1-55870425147 /permid.org/1-21577738417 /permid.org/1-21552803529 /permid.org/1-5037932339 /permid.org/1-21580881857 /permid.org/1-21581875332 /permid.org/1-21524902390 /permid.org/1-21583533143 /permid.org/1-5051388402 /permid.org/1-4295956437 /permid.org/1-21559070814 /permid.org/1-21591877662 /permid.org/1-21561636345 /permid.org/1-21485759451 /permid.org/1-21563714085 /permid.org/1-21580882143 /permid.org/1-21574992466 /permid.org/1-21562569020 /permid.org/1-21571639830 /permid.org/1-21590290302 /permid.org/1-21488388271 /permid.org/1-21532662471 /permid.org/1-21591871530 /permid.org/1-5000938143 /permid.org/1-21564820233 /permid.org/1-5046292233 /permid.org/1-21580881850 /permid.org/1-5000019104 /permid.org/1-21581654770 /permid.org/1-21582772365 /permid.org/1-21478088320 /permid.org/1-21476453443 /permid.org/1-21484813520 /permid.org/1-21591872247 /permid.org/1-21495136489 /permid.org/1-21579658507 /permid.org/1-21580881864 /permid.org/1-21580789368 /permid.org/1-5000061310 /permid.org/1-21582482466 /permid.org/1-21591341349 /permid.org/1-21483344815 /permid.org/1-21559168048 /permid.org/1-21591913977 /permid.org/1-4296791421 /permid.org/1-21576341202 /permid.org/1-21580881919 /permid.org/1-21581784427 /permid.org/1-21578836421 /permid.org/1-5045675255 /permid.org/1-21591345948 /permid.org/1-21591908756 /permid.org/1-21591340756 /permid.org/1-21591871059 /permid.org/1-21591339811 /permid.org/1-21591876194 /permid.org/1-21558320602 /permid.org/1-21591901306 /permid.org/1-5039681949 /permid.org/1-21514426908 /permid.org/1-21591349673 /permid.org/1-21591908176 /permid.org/1-8589966963 /permid.org/1-21591876592 /permid.org/1-21591355648 /permid.org/1-21591870313 /permid.org/1-21591346066 /permid.org/1-21475048627 /permid.org/1-21591340780 /permid.org/1-21591876949 /permid.org/1-21591354789 /permid.org/1-21591872368 /permid.org/1-21590512357 /permid.org/1-21514427380 /permid.org/1-21591349692 /permid.org/1-21591873320 /permid.org/1-21591353604 /permid.org/1-21591914195 /permid.org/1-21591349806 /permid.org/1-5037119808 /permid.org/1-5035747133 /permid.org/1-21591287581 /permid.org/1-21478089114 /permid.org/1-47034259272 /permid.org/1-21591339705 /permid.org/1-21591866294 /permid.org/1-21589296852 /permid.org/1-21586852710 /permid.org/1-21591284610 /permid.org/1-21591885796 /permid.org/1-21478088773 /permid.org/1-21591908757 /permid.org/1-21590492363 /permid.org/1-21591909367 /permid.org/1-21591341410 /permid.org/1-21591883341 /permid.org/1-21591339888 /permid.org/1-21591877787","title":"2. Get Next Chunk"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.StreamWithIterator.html#api-reference","text":"Create Iterator Get Next Chunk","title":"API Reference"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.StreamWithTheStreamOperation.html","text":"Stream with the Stream Operation Action: Stream all infotons whose type is Organization from the permid.org path in CM-Well. Display only their CommonName triples. You can run this command in a command-line window. Streaming will continue until you abort the operation (e.g. using ctrl-C). Curl command: curl cm-well-host /permid.org?op=stream format=ntriples fields=CommonName.mdaas qp=type.rdf::http://ont.thomsonreuters.com/mdaas/Organization Response: (truncated) http://permid.org/1-5037249647 http://ont.thomsonreuters.com/mdaas/CommonName Sports Field Holdings Inc . http://permid.org/1-5040272935 http://ont.thomsonreuters.com/mdaas/CommonName LOGIC INVEST, A.S. . http://permid.org/1-4296216818 http://ont.thomsonreuters.com/mdaas/CommonName VALUE CONTRARIAN CANADIAN EQUITY FUND . http://permid.org/1-4296057952 http://ont.thomsonreuters.com/mdaas/CommonName UNIBANCORP INC-COMMERCIAL FIN . http://permid.org/1-5045164267 http://ont.thomsonreuters.com/mdaas/CommonName Trans Winaton NV . http://permid.org/1-4296004718 http://ont.thomsonreuters.com/mdaas/CommonName Residential Delivery Services Inc . http://permid.org/1-5044799944 http://ont.thomsonreuters.com/mdaas/CommonName Servipark Peiate SL . http://permid.org/1-5000651786 http://ont.thomsonreuters.com/mdaas/CommonName Proven Organics . http://permid.org/1-5043378395 http://ont.thomsonreuters.com/mdaas/CommonName Evenstone Pty Ltd . http://permid.org/1-5046708627 http://ont.thomsonreuters.com/mdaas/CommonName China Tobacco Corp Beijing Co . http://permid.org/1-5000100797 http://ont.thomsonreuters.com/mdaas/CommonName Portoline OU . http://permid.org/1-4298380507 http://ont.thomsonreuters.com/mdaas/CommonName Astreya OOO . http://permid.org/1-5001085989 http://ont.thomsonreuters.com/mdaas/CommonName County Agencies . http://permid.org/1-4297236436 http://ont.thomsonreuters.com/mdaas/CommonName Al Tameer Real Estate Co . http://permid.org/1-5044261953 http://ont.thomsonreuters.com/mdaas/CommonName Hainesville Village-Illinois . http://permid.org/1-5044835168 http://ont.thomsonreuters.com/mdaas/CommonName Belemnit Ooo . http://permid.org/1-5044636240 http://ont.thomsonreuters.com/mdaas/CommonName Bunka Kensetsu KK . http://permid.org/1-5038078670 http://ont.thomsonreuters.com/mdaas/CommonName Moelven Wood Prosjekt As @en . http://permid.org/1-4298027942 http://ont.thomsonreuters.com/mdaas/CommonName Kanachu Kanko Co Ltd . http://permid.org/1-5017190875 http://ont.thomsonreuters.com/mdaas/CommonName RJD Contractors Inc . http://permid.org/1-4296037972 http://ont.thomsonreuters.com/mdaas/CommonName M R MARTINI ROSSI LTD . http://permid.org/1-4296248337 http://ont.thomsonreuters.com/mdaas/CommonName Planters Equipment Co Inc . http://permid.org/1-5000610829 http://ont.thomsonreuters.com/mdaas/CommonName Municipalite Saint Wenceslas . http://permid.org/1-5035558956 http://ont.thomsonreuters.com/mdaas/CommonName Teldent Ltd . http://permid.org/1-5001071578 http://ont.thomsonreuters.com/mdaas/CommonName Palmer Davis Seika Inc . http://permid.org/1-5042239591 http://ont.thomsonreuters.com/mdaas/CommonName Fujiki Corporation KK . http://permid.org/1-4296666350 http://ont.thomsonreuters.com/mdaas/CommonName Champion Intl Brown Paper Sys . http://permid.org/1-5044190752 http://ont.thomsonreuters.com/mdaas/CommonName HFP Holdings Inc . http://permid.org/1-4296686895 http://ont.thomsonreuters.com/mdaas/CommonName Carrot s Ink Cartridges . http://permid.org/1-5014129143 http://ont.thomsonreuters.com/mdaas/CommonName 687336 Ontario Ltd . http://permid.org/1-5001124463 http://ont.thomsonreuters.com/mdaas/CommonName Ppm 2000 Inc . http://permid.org/1-4296856642 http://ont.thomsonreuters.com/mdaas/CommonName AGRO-PECUANIA CFM LTDA . http://permid.org/1-5037911314 http://ont.thomsonreuters.com/mdaas/CommonName Thunder Production Services Inc . http://permid.org/1-5001311345 http://ont.thomsonreuters.com/mdaas/CommonName Hoyukai Medical Association . http://permid.org/1-5036211782 http://ont.thomsonreuters.com/mdaas/CommonName Fairdeal Textile Park Pvt Ltd . http://permid.org/1-4296277224 http://ont.thomsonreuters.com/mdaas/CommonName B2sb Technologies Corp . http://permid.org/1-5035702933 http://ont.thomsonreuters.com/mdaas/CommonName GNMA REMIC Trust 1996-14 . http://permid.org/1-4296789461 http://ont.thomsonreuters.com/mdaas/CommonName BROMAR INC . http://permid.org/1-5041178494 http://ont.thomsonreuters.com/mdaas/CommonName R K Water Truck Rental Inc . http://permid.org/1-4296711536 http://ont.thomsonreuters.com/mdaas/CommonName 1500 Records . http://permid.org/1-5045858458 http://ont.thomsonreuters.com/mdaas/CommonName Guggenheim Defined Portfolios Series 753 . ... API Reference Stream Infotons","title":"Stream with the Stream Operation"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.StreamWithTheStreamOperation.html#stream-with-the-stream-operation","text":"Action: Stream all infotons whose type is Organization from the permid.org path in CM-Well. Display only their CommonName triples. You can run this command in a command-line window. Streaming will continue until you abort the operation (e.g. using ctrl-C). Curl command: curl cm-well-host /permid.org?op=stream format=ntriples fields=CommonName.mdaas qp=type.rdf::http://ont.thomsonreuters.com/mdaas/Organization Response: (truncated) http://permid.org/1-5037249647 http://ont.thomsonreuters.com/mdaas/CommonName Sports Field Holdings Inc . http://permid.org/1-5040272935 http://ont.thomsonreuters.com/mdaas/CommonName LOGIC INVEST, A.S. . http://permid.org/1-4296216818 http://ont.thomsonreuters.com/mdaas/CommonName VALUE CONTRARIAN CANADIAN EQUITY FUND . http://permid.org/1-4296057952 http://ont.thomsonreuters.com/mdaas/CommonName UNIBANCORP INC-COMMERCIAL FIN . http://permid.org/1-5045164267 http://ont.thomsonreuters.com/mdaas/CommonName Trans Winaton NV . http://permid.org/1-4296004718 http://ont.thomsonreuters.com/mdaas/CommonName Residential Delivery Services Inc . http://permid.org/1-5044799944 http://ont.thomsonreuters.com/mdaas/CommonName Servipark Peiate SL . http://permid.org/1-5000651786 http://ont.thomsonreuters.com/mdaas/CommonName Proven Organics . http://permid.org/1-5043378395 http://ont.thomsonreuters.com/mdaas/CommonName Evenstone Pty Ltd . http://permid.org/1-5046708627 http://ont.thomsonreuters.com/mdaas/CommonName China Tobacco Corp Beijing Co . http://permid.org/1-5000100797 http://ont.thomsonreuters.com/mdaas/CommonName Portoline OU . http://permid.org/1-4298380507 http://ont.thomsonreuters.com/mdaas/CommonName Astreya OOO . http://permid.org/1-5001085989 http://ont.thomsonreuters.com/mdaas/CommonName County Agencies . http://permid.org/1-4297236436 http://ont.thomsonreuters.com/mdaas/CommonName Al Tameer Real Estate Co . http://permid.org/1-5044261953 http://ont.thomsonreuters.com/mdaas/CommonName Hainesville Village-Illinois . http://permid.org/1-5044835168 http://ont.thomsonreuters.com/mdaas/CommonName Belemnit Ooo . http://permid.org/1-5044636240 http://ont.thomsonreuters.com/mdaas/CommonName Bunka Kensetsu KK . http://permid.org/1-5038078670 http://ont.thomsonreuters.com/mdaas/CommonName Moelven Wood Prosjekt As @en . http://permid.org/1-4298027942 http://ont.thomsonreuters.com/mdaas/CommonName Kanachu Kanko Co Ltd . http://permid.org/1-5017190875 http://ont.thomsonreuters.com/mdaas/CommonName RJD Contractors Inc . http://permid.org/1-4296037972 http://ont.thomsonreuters.com/mdaas/CommonName M R MARTINI ROSSI LTD . http://permid.org/1-4296248337 http://ont.thomsonreuters.com/mdaas/CommonName Planters Equipment Co Inc . http://permid.org/1-5000610829 http://ont.thomsonreuters.com/mdaas/CommonName Municipalite Saint Wenceslas . http://permid.org/1-5035558956 http://ont.thomsonreuters.com/mdaas/CommonName Teldent Ltd . http://permid.org/1-5001071578 http://ont.thomsonreuters.com/mdaas/CommonName Palmer Davis Seika Inc . http://permid.org/1-5042239591 http://ont.thomsonreuters.com/mdaas/CommonName Fujiki Corporation KK . http://permid.org/1-4296666350 http://ont.thomsonreuters.com/mdaas/CommonName Champion Intl Brown Paper Sys . http://permid.org/1-5044190752 http://ont.thomsonreuters.com/mdaas/CommonName HFP Holdings Inc . http://permid.org/1-4296686895 http://ont.thomsonreuters.com/mdaas/CommonName Carrot s Ink Cartridges . http://permid.org/1-5014129143 http://ont.thomsonreuters.com/mdaas/CommonName 687336 Ontario Ltd . http://permid.org/1-5001124463 http://ont.thomsonreuters.com/mdaas/CommonName Ppm 2000 Inc . http://permid.org/1-4296856642 http://ont.thomsonreuters.com/mdaas/CommonName AGRO-PECUANIA CFM LTDA . http://permid.org/1-5037911314 http://ont.thomsonreuters.com/mdaas/CommonName Thunder Production Services Inc . http://permid.org/1-5001311345 http://ont.thomsonreuters.com/mdaas/CommonName Hoyukai Medical Association . http://permid.org/1-5036211782 http://ont.thomsonreuters.com/mdaas/CommonName Fairdeal Textile Park Pvt Ltd . http://permid.org/1-4296277224 http://ont.thomsonreuters.com/mdaas/CommonName B2sb Technologies Corp . http://permid.org/1-5035702933 http://ont.thomsonreuters.com/mdaas/CommonName GNMA REMIC Trust 1996-14 . http://permid.org/1-4296789461 http://ont.thomsonreuters.com/mdaas/CommonName BROMAR INC . http://permid.org/1-5041178494 http://ont.thomsonreuters.com/mdaas/CommonName R K Water Truck Rental Inc . http://permid.org/1-4296711536 http://ont.thomsonreuters.com/mdaas/CommonName 1500 Records . http://permid.org/1-5045858458 http://ont.thomsonreuters.com/mdaas/CommonName Guggenheim Defined Portfolios Series 753 . ...","title":"Stream with the Stream Operation"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.StreamWithTheStreamOperation.html#api-reference","text":"Stream Infotons","title":"API Reference"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.SubscribeForPulledData.html","text":"Subscribe for Pulled Data Step Outline Subscribe for Pulled Data . Get Latest Data Unsubscribe . 1. Query by One Field Value Action: Get all new entities under permid.org. Curl command: curl cm-well-host /permid.org?op=subscribe method=pull Response: YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjczLjE2MDozNDA5NS91c2VyLzdlYWM2NzI3 2. Get Latest Data Action: Get the latest updated infotons under permid.org. Curl command: curl cm-well-host /permid.org?op=pull sub=YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjczLjE2MDozNDA5NS91c2VyLzdlYWM2NzI3 format=text Response: o:nRSR4409Ea-2016-07-18 sys:data Document \\n Source RNS /Source ... ; sys:dataCenter dc1 ; sys:indexTime 1468833593106 ^^xsd:long ; sys:lastModified 2016-07-18T09:19:51.344Z ^^xsd:dateTime ; sys:length 11981 ^^xsd:long ; sys:mimeType text/plain; utf-8 ; sys:parent /data.com/sc/docs/input/news ; sys:path /data.com/sc/docs/input/news/nRSR4409Ea-2016-07-18 ; sys:type FileInfoton ; sys:uuid 05e3ae867c2928cb7cd2e8ec254bf005 ; supplyChain:Codes LSEN ; supplyChain:DATE 2016-07-18 ^^xsd:dateTime ; supplyChain:Feed UCDP ; supplyChain:MetaCodes.product LSEN ; supplyChain:MetaCodes.rcscode M:1NN , B:201 , R:DRTY.L , G:AL , G:3 , M:Z , R:FNAC.PA , P:4295897654 , B:100 , G:7J , M:32 , B:202 , B:69 , M:3H , G:5M , P:4295867209 , B:104 , G:A , B:98 ; supplyChain:PNAC nRSR4409Ea ; supplyChain:Source RNS ; supplyChain:Title REG - Morgan Stanley Co. Darty PLC Groupe FNAC - Form 8.5 (EPT/RI)Groupe Fnac SA ; supplyChain:Urgency 3 ^^xsd:int . 3. Unsubscribe Action: Unsubscribe from real-time updates. Curl command: curl cm-well-host /permid.org?op=unsubscribe sub=YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjczLjE2MDozNDA5NS91c2VyLzdlYWM2NzI3 Response: unsubscribe YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjczLjE2MDozNDA5NS91c2VyLzdlYWM2NzI3 API Reference Subscribe for Pushed Data Pull New Data Unsubscribe","title":"Subscribe for Pulled Data"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.SubscribeForPulledData.html#subscribe-for-pulled-data","text":"","title":"Subscribe for Pulled Data"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.SubscribeForPulledData.html#step-outline","text":"Subscribe for Pulled Data . Get Latest Data Unsubscribe .","title":"Step Outline"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.SubscribeForPulledData.html#1-query-by-one-field-value","text":"Action: Get all new entities under permid.org. Curl command: curl cm-well-host /permid.org?op=subscribe method=pull Response: YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjczLjE2MDozNDA5NS91c2VyLzdlYWM2NzI3","title":"1. Query by One Field Value"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.SubscribeForPulledData.html#2-get-latest-data","text":"Action: Get the latest updated infotons under permid.org. Curl command: curl cm-well-host /permid.org?op=pull sub=YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjczLjE2MDozNDA5NS91c2VyLzdlYWM2NzI3 format=text Response: o:nRSR4409Ea-2016-07-18 sys:data Document \\n Source RNS /Source ... ; sys:dataCenter dc1 ; sys:indexTime 1468833593106 ^^xsd:long ; sys:lastModified 2016-07-18T09:19:51.344Z ^^xsd:dateTime ; sys:length 11981 ^^xsd:long ; sys:mimeType text/plain; utf-8 ; sys:parent /data.com/sc/docs/input/news ; sys:path /data.com/sc/docs/input/news/nRSR4409Ea-2016-07-18 ; sys:type FileInfoton ; sys:uuid 05e3ae867c2928cb7cd2e8ec254bf005 ; supplyChain:Codes LSEN ; supplyChain:DATE 2016-07-18 ^^xsd:dateTime ; supplyChain:Feed UCDP ; supplyChain:MetaCodes.product LSEN ; supplyChain:MetaCodes.rcscode M:1NN , B:201 , R:DRTY.L , G:AL , G:3 , M:Z , R:FNAC.PA , P:4295897654 , B:100 , G:7J , M:32 , B:202 , B:69 , M:3H , G:5M , P:4295867209 , B:104 , G:A , B:98 ; supplyChain:PNAC nRSR4409Ea ; supplyChain:Source RNS ; supplyChain:Title REG - Morgan Stanley Co. Darty PLC Groupe FNAC - Form 8.5 (EPT/RI)Groupe Fnac SA ; supplyChain:Urgency 3 ^^xsd:int .","title":"2. Get Latest Data"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.SubscribeForPulledData.html#3-unsubscribe","text":"Action: Unsubscribe from real-time updates. Curl command: curl cm-well-host /permid.org?op=unsubscribe sub=YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjczLjE2MDozNDA5NS91c2VyLzdlYWM2NzI3 Response: unsubscribe YWtrYS50Y3A6Ly9jbS13ZWxsLXByb2RAMTAuMjA0LjczLjE2MDozNDA5NS91c2VyLzdlYWM2NzI3","title":"3. Unsubscribe"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.SubscribeForPulledData.html#api-reference","text":"Subscribe for Pushed Data Pull New Data Unsubscribe","title":"API Reference"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.UpdateFields.html","text":"Update Fields Step Outline Add Infotons and Fields . Update Field Values 1. Add Infotons and Fields Action: Add several infotons and field values. Curl command: curl -X POST cm-well-host /_in?format=ntriples --data-binary @input.txt File contents: http://example/Individuals/MamaBear http://purl.org/vocab/relationship/spouseOf http://example/Individuals/PapaBear . http://example/Individuals/MamaBear http://ont.thomsonreuters.com/bermuda/hasName Betty . http://example/Individuals/PapaBear http://ont.thomsonreuters.com/bermuda/hasName Barney . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear1 http://ont.thomsonreuters.com/bermuda/hasName Barbara . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/siblingOf http://example/Individuals/BabyBear2 . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/siblingOf http://example/Individuals/BabyBear3 . http://example/Individuals/BabyBear2 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear2 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear2 http://ont.thomsonreuters.com/bermuda/hasName Bobby . http://example/Individuals/BabyBear3 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear3 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear3 http://ont.thomsonreuters.com/bermuda/hasName Bert . Response: { success :true} 2. Update Field Values Action: Change values of all \"BabyBear\" name fields. After changing the field values, you can browse to the infoton URIs to see the updated values. Note You can also update fields without replacing the existing value, by adding a new triple with the same predicate name as the existing field. In this case, two (or more) instances of the same field exist, with the same name but different values. Curl command: curl -X POST cm-well-host /_in?format=ntriples --data-binary @input.txt File contents: http://example/Individuals/BabyBear1 cmwell://meta/sys#markReplace http://ont.thomsonreuters.com/bermuda/hasName . http://example/Individuals/BabyBear1 http://ont.thomsonreuters.com/bermuda/hasName Cathy . http://example/Individuals/BabyBear2 cmwell://meta/sys#markReplace http://ont.thomsonreuters.com/bermuda/hasName . http://example/Individuals/BabyBear2 http://ont.thomsonreuters.com/bermuda/hasName Craig . http://example/Individuals/BabyBear3 cmwell://meta/sys#markReplace http://ont.thomsonreuters.com/bermuda/hasName . http://example/Individuals/BabyBear3 http://ont.thomsonreuters.com/bermuda/hasName Curt . Response: { success :true} API Reference Add Infotons and Fields Replace Field Values","title":"Update Fields"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.UpdateFields.html#update-fields","text":"","title":"Update Fields"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.UpdateFields.html#step-outline","text":"Add Infotons and Fields . Update Field Values","title":"Step Outline"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.UpdateFields.html#1-add-infotons-and-fields","text":"Action: Add several infotons and field values. Curl command: curl -X POST cm-well-host /_in?format=ntriples --data-binary @input.txt File contents: http://example/Individuals/MamaBear http://purl.org/vocab/relationship/spouseOf http://example/Individuals/PapaBear . http://example/Individuals/MamaBear http://ont.thomsonreuters.com/bermuda/hasName Betty . http://example/Individuals/PapaBear http://ont.thomsonreuters.com/bermuda/hasName Barney . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear1 http://ont.thomsonreuters.com/bermuda/hasName Barbara . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/siblingOf http://example/Individuals/BabyBear2 . http://example/Individuals/BabyBear1 http://purl.org/vocab/relationship/siblingOf http://example/Individuals/BabyBear3 . http://example/Individuals/BabyBear2 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear2 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear2 http://ont.thomsonreuters.com/bermuda/hasName Bobby . http://example/Individuals/BabyBear3 http://purl.org/vocab/relationship/childOf http://example/Individuals/MamaBear . http://example/Individuals/BabyBear3 http://purl.org/vocab/relationship/childOf http://example/Individuals/PapaBear . http://example/Individuals/BabyBear3 http://ont.thomsonreuters.com/bermuda/hasName Bert . Response: { success :true}","title":"1. Add Infotons and Fields"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.UpdateFields.html#2-update-field-values","text":"Action: Change values of all \"BabyBear\" name fields. After changing the field values, you can browse to the infoton URIs to see the updated values. Note You can also update fields without replacing the existing value, by adding a new triple with the same predicate name as the existing field. In this case, two (or more) instances of the same field exist, with the same name but different values. Curl command: curl -X POST cm-well-host /_in?format=ntriples --data-binary @input.txt File contents: http://example/Individuals/BabyBear1 cmwell://meta/sys#markReplace http://ont.thomsonreuters.com/bermuda/hasName . http://example/Individuals/BabyBear1 http://ont.thomsonreuters.com/bermuda/hasName Cathy . http://example/Individuals/BabyBear2 cmwell://meta/sys#markReplace http://ont.thomsonreuters.com/bermuda/hasName . http://example/Individuals/BabyBear2 http://ont.thomsonreuters.com/bermuda/hasName Craig . http://example/Individuals/BabyBear3 cmwell://meta/sys#markReplace http://ont.thomsonreuters.com/bermuda/hasName . http://example/Individuals/BabyBear3 http://ont.thomsonreuters.com/bermuda/hasName Curt . Response: { success :true}","title":"2. Update Field Values"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.UpdateFields.html#api-reference","text":"Add Infotons and Fields Replace Field Values","title":"API Reference"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.WorkWithSubGraphs.html","text":"Work with Sub-Graphs Step Outline Add Quad Values . Replace Quad Values Delete Quad Values . 1. Add Quad Values Action: Add 3 movie infotons, with critic scores from Rotten Tomatoes and New York Times. Curl command: curl -X POST cm-well-host /_in?format=nquads --data-binary @input.txt File Contents: http://example/movies/ET http://www.w3.org/2000/01/rdf-schema#type http://dbpedia.org/ontology/Film . http://example/movies/GoneWithTheWind http://www.w3.org/2000/01/rdf-schema#type http://dbpedia.org/ontology/Film . http://example/movies/TheAvenger http://www.w3.org/2000/01/rdf-schema#type http://dbpedia.org/ontology/Film . http://example/movies/ET http://MyOntology/Score 8.3 http://MyOntology/RottenTomatoes . http://example/movies/ET http://MyOntology/Score 8.7 http://MyOntology/NewYorkTimes . http://example/movies/GoneWithTheWind http://MyOntology/Score 6.5 http://MyOntology/RottenTomatoes . http://example/movies/GoneWithTheWind http://MyOntology/Score 8.9 http://MyOntology/NewYorkTimes . http://example/movies/TheAvenger http://MyOntology/Score 7.2 http://MyOntology/RottenTomatoes . http://example/movies/TheAvenger http://MyOntology/Score 7.7 http://MyOntology/NewYorkTimes . Response: { success :true} 2. Replace Quad Values Action: Change all New York Times scores to 10. Curl command: curl -X POST cm-well-host /_in?format=nquads --data-binary @input.txt File Contents: cmwell://meta/sys#replaceGraph http://MyOntology/NewYorkTimes . http://example.org/movies/ET http://MyOntology/Score 10 http://MyOntology/NewYorkTimes . http://example.org/movies/GoneWithTheWind http://MyOntology/Score 10 http://MyOntology/NewYorkTimes . http://example.org/movies/TheAvenger http://MyOntology/Score 10 http://MyOntology/NewYorkTimes . Response: { success :true} 3. Delete Quad Values Action: Delete all Rotten Tomatoes scores. Curl command: curl -X POST cm-well-host /_in?format=nquads --data-binary @input.txt File Contents: http://example/movies/ET cmwell://meta/sys#markReplace * http://MyOntology/RottenTomatoes . http://example/movies/GoneWithTheWind cmwell://meta/sys#markReplace * http://MyOntology/RottenTomatoes . http://example/movies/TheAvenger cmwell://meta/sys#markReplace * http://MyOntology/RottenTomatoes . Response: { success :true} API Reference Add Infotons and Fields to Sub-Graph Delete or Replace Values in Named Sub-Graph","title":"Work with Sub-Graphs"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.WorkWithSubGraphs.html#work-with-sub-graphs","text":"","title":"Work with Sub-Graphs"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.WorkWithSubGraphs.html#step-outline","text":"Add Quad Values . Replace Quad Values Delete Quad Values .","title":"Step Outline"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.WorkWithSubGraphs.html#1-add-quad-values","text":"Action: Add 3 movie infotons, with critic scores from Rotten Tomatoes and New York Times. Curl command: curl -X POST cm-well-host /_in?format=nquads --data-binary @input.txt File Contents: http://example/movies/ET http://www.w3.org/2000/01/rdf-schema#type http://dbpedia.org/ontology/Film . http://example/movies/GoneWithTheWind http://www.w3.org/2000/01/rdf-schema#type http://dbpedia.org/ontology/Film . http://example/movies/TheAvenger http://www.w3.org/2000/01/rdf-schema#type http://dbpedia.org/ontology/Film . http://example/movies/ET http://MyOntology/Score 8.3 http://MyOntology/RottenTomatoes . http://example/movies/ET http://MyOntology/Score 8.7 http://MyOntology/NewYorkTimes . http://example/movies/GoneWithTheWind http://MyOntology/Score 6.5 http://MyOntology/RottenTomatoes . http://example/movies/GoneWithTheWind http://MyOntology/Score 8.9 http://MyOntology/NewYorkTimes . http://example/movies/TheAvenger http://MyOntology/Score 7.2 http://MyOntology/RottenTomatoes . http://example/movies/TheAvenger http://MyOntology/Score 7.7 http://MyOntology/NewYorkTimes . Response: { success :true}","title":"1. Add Quad Values"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.WorkWithSubGraphs.html#2-replace-quad-values","text":"Action: Change all New York Times scores to 10. Curl command: curl -X POST cm-well-host /_in?format=nquads --data-binary @input.txt File Contents: cmwell://meta/sys#replaceGraph http://MyOntology/NewYorkTimes . http://example.org/movies/ET http://MyOntology/Score 10 http://MyOntology/NewYorkTimes . http://example.org/movies/GoneWithTheWind http://MyOntology/Score 10 http://MyOntology/NewYorkTimes . http://example.org/movies/TheAvenger http://MyOntology/Score 10 http://MyOntology/NewYorkTimes . Response: { success :true}","title":"2. Replace Quad Values"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.WorkWithSubGraphs.html#3-delete-quad-values","text":"Action: Delete all Rotten Tomatoes scores. Curl command: curl -X POST cm-well-host /_in?format=nquads --data-binary @input.txt File Contents: http://example/movies/ET cmwell://meta/sys#markReplace * http://MyOntology/RottenTomatoes . http://example/movies/GoneWithTheWind cmwell://meta/sys#markReplace * http://MyOntology/RottenTomatoes . http://example/movies/TheAvenger cmwell://meta/sys#markReplace * http://MyOntology/RottenTomatoes . Response: { success :true}","title":"3. Delete Quad Values"},{"location":"Tutorials/HandsOnExercises/Tutorial.HandsOnExercises.WorkWithSubGraphs.html#api-reference","text":"Add Infotons and Fields to Sub-Graph Delete or Replace Values in Named Sub-Graph","title":"API Reference"},{"location":"WebInterface/CM-Well.OldWebInterface.html","text":"The Previous CM-Well Web Interface Introduction The CM-Well web interface is a graphical user interface for accessing CM-Well through your browser. When you browse to the root URI of a CM-Well instance, you see this page: Using the CM-Well web interface, you can browse among the CM-Well folders and infotons, run queries and get results, and examine the query results. This page describes the features of the CM-Well web interface and how to use them. CM-Well Paths CM-Well is a Linked Data repository with a hierarchical folder structure. Each folder can contain infotons and other folders. (See CM-Well Data Paradigms to learn more about infotons). An infoton's URI is similar to an internet URI in that it refers to a specific internet resource. In this case the resource is an infoton rather than a web page. The infoton itself has no display information, but the CM-Well UI renders the infoton information as a visual web page. A path to an infoton contains the CM-Well host, the sub-folders and the infoton's unique ID. For example: cm-well-host /data.com/1-34415653093 CM-Well UI Controls Address Bar You can browse to an infoton by entering its path in a browser address bar. Results Page The central page area of the CM-Well web interface displays your query results, or in other words, the folders and/or infoton/s that reside under the CM-Well path in the address bar. If the URI refers to a single infoton, the results page shows that infoton's fields and values. If there are sub-folders or infotons under the URI in the address bar, they are displayed as a list on the left of the results page. Clicking on the URI of a folder or infoton displays the page for the selected folder or infoton. Note A CM-Well folder is also an infoton, which has system fields that are displayed when you browse to a folder's URI. (It can potentially also have object fields.) Home Button Clicking on the Home button at the top left navigates to the CM-Well root URI. HELP Link Clicking on the HELP link at the top right displays the Table of Contents page for the CM-Well help documentation. Paging Controls When there is more than one sub-folder or infoton under the URI in the address bar, the results are displayed in a list on the left of the page. If there are many results, they are divided among several pages, through which you can navigate using the paging controls. A message above the results list shows how many results are displayed on this page and from which offset. You can page among subsets of results using the page number and arrow controls at the top left. Message Banner Sometimes CM-Well may display a special message to its users, in the message banner at the bottom of the page. Atom Feed Buttons You may want to examine an atom feed (a.k.a. RSS feed) of the latest infotons in a certain CM-Well path. There are two ways to do this: Click the atom feed button at the top left to retrieve an atom feed of the infotons under the URI in the address bar. * Hover over a folder link on the left, then click the atom feed button that appears in the same line. After you click on an atom feed button, the first 50 results in the feed are displayed. Note To conveniently retrieve and handle an ongoing stream of infotons, use the Consumer API . Format Dropdown You can choose the format of the infotons displayed by selecting a value from the Format dropdown menu. History Dropdown You can view all historical versions of the infoton in the address bar, in the format of your choice, by selecting a value from the History dropdown menu. History Button To view all historical versions of an infoton in the left-hand list, hover over the infoton link, then click the history button that appears in the same line. History Diff Button To compare historical versions of an infoton in the left-hand list, hover over the infoton link, then click the History (Diff View) button that appears in the same line. Type Navigation Button Sometimes it is useful to retrieve infotons according to their RDF type. For instance, you may want to examine only the infotons whose RDF type is Person. To navigate by RDF type, click the Type button on the top left. CM-Well displays a partial list of the type values that are found under the current URI, and the counts of each type in parentheses after the type name. You can click the more link on the right to see the complete type list. When you click on a type name, only infotons with that type are displayed. Field Dropdown The Field dropdown menu shows all field names found in the first 100 infotons under the current URI. You can choose a field name in order to apply a search to that field (see next section). Search Box To search for a value in all infoton fields, type a value in the Search box and click the search button. To search for a value in a specific field, first select the field name in the Field dropdown menu, then type a value in the Search box and click the search button. After you click the search button, the first 10 search results are displayed. Exact Term Checkbox If you check the Exact Term checkbox, the search will match the search term exactly, rather than performing a tokenized string search, which is the default behavior. Statistics Dropdown You will see a dropdown entitled Analytics to the right of the Search button. This refers to a legacy feature for activating statistical functions. This feature is deprecated and will be replaced by an enhanced version of the feature. SPARQL Query Button You can activate a special page for submitting SPARQL queries, by clicking the (S) button in CM-Well's home page graphic. See Using SPARQL on CM-Well Infotons to learn more. When you click on the (S) button, the SPARQL query editor page is displayed: From this page, you can click on the SPARQL on whole graph link to display the page for submitting a SPARQL query that runs on the entire CM-Well graph. See Apply SPARQL to the Entire Graph to learn more. The Infoton View When a single infoton's URI appears in the browser address bar, the CM-Well web interface shows that infoton's page. On this page, you can see the infoton's field names and values. These include: System fields - fields added to the infoton by CM-Well itself. These include \"administrative\" details such as the infoton's path, UUID and the time it was last modified. Object fields - fields added to the infoton by the a user, via the CM-Well API. You may notice that some fields have a small, orange graph icon. This indicates that these fields are part of a sub-graph, or in other words, have been given a label. (See Working with Named Sub-Graphs to learn more.) You can see the label value by hovering over this icon. Running Queries in the UI You can run simple CM-Well queries by entering them in your browser's address bar. These queries correspond to GET operations in CM-Well's REST API. The simplest kind of query is one that retrieves a single infoton (which could also be a folder infoton). The infoton is retrieved by its URI. You can also add query parameters to the address line, to retrieve several results while applying filters to their field values. For example, the following query searches for infotons under the permid.org folder (these are mainly Organization entities), which are located in New York state: http://cm-well-prod.int.thomsonreuters.com/permid.org?op=search qp=organizationStateProvince.mdaas:New%20York When you enter this query in the address bar, CM-Well displays a list of links to infotons that match the query. You can click on these links to see those infotons' pages. See the Developer Guide and API Reference topics to learn more about CM-Well queries. Note You can add the with-data flag to retrieve query results with their field values instead of links only. Special Folders and Files In addition to folders and infotons that users create on CM-Well, there are several folders and files kept on CM-Well for various monitoring purposes and other functional purposes. (Files may be saved to CM-Well as a special kind of infoton.) The following special folders, files and infotons may be of interest to users and operations personnel: Health pages - under the proc folder, there are several pages that reflect the health of CM-Well nodes and sub-systems. See Health Dashboards to learn more. meta/lib - you can copy your own Java library files (jar files) under this folder, and call their functions from within SPARQL queries. See Calling Java Functions from SPARQL Queries to learn more. proc/node - in this infoton you can see version numbers of CM-Well components. proc/fields - in this infoton you can see a list of all field names from all infotons on the specific CM-Well platform. Configuring Link Display by Type Authorized users can configure the display of infoton links according to RDF type, instead of displaying the infoton link only as a path with a cryptic UUID. For example, for a Person infoton, you might want to display the person's first and last names in the link. For an organization, you might want to display the organization's name, CEO and country of origin. Display Configuration Infoton The Display Name configuration infoton must be placed in /meta/dn/\\ HASH> , where HASH is the md5 encoding of a type.rdf value. The configuration infoton must have a forType field, containing the RDF type for which you want to configure display. In addition, it should have at least one field with the displayName prefix. The field values define the string that should be added to the displayed link for infotons of the given type. The values are either the name of a field that usually appears in the infoton, or a javascript snippet that defines a manipulation of such fields. For example: In this example, displayName1 and displayName2 refer to name fields that usually appear in Person infotons. displayNameA and displayNameB contain javascript snippets that define concatenations of such fields and string constants. Calculating Display Names Multiple displayName values provide alternate display names. Display names are calculated until one of them produces a non-empty string, and then that string is used in the displayed link. (Note that an empty string might be produced if the relevant field values are missing). Display name values are calculated in the following order: First javascript value are calculated, in lexicographical order of all the displayNames whose value contains javascript. If none of the javascript displayNames produces a non-empty string (or there were none to begin with), the rest of the values are calculated in lexicographical order of the displayNames. In the example that appears above, displayNameA would be the first to be calculated, because it contains javascript, and displayNameA comes before displayNameB in lexicographical order. If the calculation produces a non-empty string, the result is added to the link's display. This is what the configured Person links look like:","title":"The Previous CM-Well Web Interface"},{"location":"WebInterface/CM-Well.OldWebInterface.html#the-previous-cm-well-web-interface","text":"","title":"The Previous CM-Well Web Interface"},{"location":"WebInterface/CM-Well.OldWebInterface.html#introduction","text":"The CM-Well web interface is a graphical user interface for accessing CM-Well through your browser. When you browse to the root URI of a CM-Well instance, you see this page: Using the CM-Well web interface, you can browse among the CM-Well folders and infotons, run queries and get results, and examine the query results. This page describes the features of the CM-Well web interface and how to use them.","title":"Introduction"},{"location":"WebInterface/CM-Well.OldWebInterface.html#cm-well-paths","text":"CM-Well is a Linked Data repository with a hierarchical folder structure. Each folder can contain infotons and other folders. (See CM-Well Data Paradigms to learn more about infotons). An infoton's URI is similar to an internet URI in that it refers to a specific internet resource. In this case the resource is an infoton rather than a web page. The infoton itself has no display information, but the CM-Well UI renders the infoton information as a visual web page. A path to an infoton contains the CM-Well host, the sub-folders and the infoton's unique ID. For example: cm-well-host /data.com/1-34415653093","title":"CM-Well Paths"},{"location":"WebInterface/CM-Well.OldWebInterface.html#cm-well-ui-controls","text":"","title":"CM-Well UI Controls"},{"location":"WebInterface/CM-Well.OldWebInterface.html#address-bar","text":"You can browse to an infoton by entering its path in a browser address bar.","title":"Address Bar"},{"location":"WebInterface/CM-Well.OldWebInterface.html#results-page","text":"The central page area of the CM-Well web interface displays your query results, or in other words, the folders and/or infoton/s that reside under the CM-Well path in the address bar. If the URI refers to a single infoton, the results page shows that infoton's fields and values. If there are sub-folders or infotons under the URI in the address bar, they are displayed as a list on the left of the results page. Clicking on the URI of a folder or infoton displays the page for the selected folder or infoton. Note A CM-Well folder is also an infoton, which has system fields that are displayed when you browse to a folder's URI. (It can potentially also have object fields.)","title":"Results Page"},{"location":"WebInterface/CM-Well.OldWebInterface.html#home-button","text":"Clicking on the Home button at the top left navigates to the CM-Well root URI.","title":"Home Button"},{"location":"WebInterface/CM-Well.OldWebInterface.html#help-link","text":"Clicking on the HELP link at the top right displays the Table of Contents page for the CM-Well help documentation.","title":"HELP Link"},{"location":"WebInterface/CM-Well.OldWebInterface.html#paging-controls","text":"When there is more than one sub-folder or infoton under the URI in the address bar, the results are displayed in a list on the left of the page. If there are many results, they are divided among several pages, through which you can navigate using the paging controls. A message above the results list shows how many results are displayed on this page and from which offset. You can page among subsets of results using the page number and arrow controls at the top left.","title":"Paging Controls"},{"location":"WebInterface/CM-Well.OldWebInterface.html#message-banner","text":"Sometimes CM-Well may display a special message to its users, in the message banner at the bottom of the page.","title":"Message Banner"},{"location":"WebInterface/CM-Well.OldWebInterface.html#atom-feed-buttons","text":"You may want to examine an atom feed (a.k.a. RSS feed) of the latest infotons in a certain CM-Well path. There are two ways to do this: Click the atom feed button at the top left to retrieve an atom feed of the infotons under the URI in the address bar. * Hover over a folder link on the left, then click the atom feed button that appears in the same line. After you click on an atom feed button, the first 50 results in the feed are displayed. Note To conveniently retrieve and handle an ongoing stream of infotons, use the Consumer API .","title":"Atom Feed Buttons"},{"location":"WebInterface/CM-Well.OldWebInterface.html#format-dropdown","text":"You can choose the format of the infotons displayed by selecting a value from the Format dropdown menu.","title":"Format Dropdown"},{"location":"WebInterface/CM-Well.OldWebInterface.html#history-dropdown","text":"You can view all historical versions of the infoton in the address bar, in the format of your choice, by selecting a value from the History dropdown menu.","title":"History Dropdown"},{"location":"WebInterface/CM-Well.OldWebInterface.html#history-button","text":"To view all historical versions of an infoton in the left-hand list, hover over the infoton link, then click the history button that appears in the same line.","title":"History Button"},{"location":"WebInterface/CM-Well.OldWebInterface.html#history-diff-button","text":"To compare historical versions of an infoton in the left-hand list, hover over the infoton link, then click the History (Diff View) button that appears in the same line.","title":"History Diff Button"},{"location":"WebInterface/CM-Well.OldWebInterface.html#type-navigation-button","text":"Sometimes it is useful to retrieve infotons according to their RDF type. For instance, you may want to examine only the infotons whose RDF type is Person. To navigate by RDF type, click the Type button on the top left. CM-Well displays a partial list of the type values that are found under the current URI, and the counts of each type in parentheses after the type name. You can click the more link on the right to see the complete type list. When you click on a type name, only infotons with that type are displayed.","title":"Type Navigation Button"},{"location":"WebInterface/CM-Well.OldWebInterface.html#field-dropdown","text":"The Field dropdown menu shows all field names found in the first 100 infotons under the current URI. You can choose a field name in order to apply a search to that field (see next section).","title":"Field Dropdown"},{"location":"WebInterface/CM-Well.OldWebInterface.html#search-box","text":"To search for a value in all infoton fields, type a value in the Search box and click the search button. To search for a value in a specific field, first select the field name in the Field dropdown menu, then type a value in the Search box and click the search button. After you click the search button, the first 10 search results are displayed.","title":"Search Box"},{"location":"WebInterface/CM-Well.OldWebInterface.html#exact-term-checkbox","text":"If you check the Exact Term checkbox, the search will match the search term exactly, rather than performing a tokenized string search, which is the default behavior.","title":"Exact Term Checkbox"},{"location":"WebInterface/CM-Well.OldWebInterface.html#statistics-dropdown","text":"You will see a dropdown entitled Analytics to the right of the Search button. This refers to a legacy feature for activating statistical functions. This feature is deprecated and will be replaced by an enhanced version of the feature.","title":"Statistics Dropdown"},{"location":"WebInterface/CM-Well.OldWebInterface.html#sparql-query-button","text":"You can activate a special page for submitting SPARQL queries, by clicking the (S) button in CM-Well's home page graphic. See Using SPARQL on CM-Well Infotons to learn more. When you click on the (S) button, the SPARQL query editor page is displayed: From this page, you can click on the SPARQL on whole graph link to display the page for submitting a SPARQL query that runs on the entire CM-Well graph. See Apply SPARQL to the Entire Graph to learn more.","title":"SPARQL Query Button"},{"location":"WebInterface/CM-Well.OldWebInterface.html#the-infoton-view","text":"When a single infoton's URI appears in the browser address bar, the CM-Well web interface shows that infoton's page. On this page, you can see the infoton's field names and values. These include: System fields - fields added to the infoton by CM-Well itself. These include \"administrative\" details such as the infoton's path, UUID and the time it was last modified. Object fields - fields added to the infoton by the a user, via the CM-Well API. You may notice that some fields have a small, orange graph icon. This indicates that these fields are part of a sub-graph, or in other words, have been given a label. (See Working with Named Sub-Graphs to learn more.) You can see the label value by hovering over this icon.","title":"The Infoton View"},{"location":"WebInterface/CM-Well.OldWebInterface.html#running-queries-in-the-ui","text":"You can run simple CM-Well queries by entering them in your browser's address bar. These queries correspond to GET operations in CM-Well's REST API. The simplest kind of query is one that retrieves a single infoton (which could also be a folder infoton). The infoton is retrieved by its URI. You can also add query parameters to the address line, to retrieve several results while applying filters to their field values. For example, the following query searches for infotons under the permid.org folder (these are mainly Organization entities), which are located in New York state: http://cm-well-prod.int.thomsonreuters.com/permid.org?op=search qp=organizationStateProvince.mdaas:New%20York When you enter this query in the address bar, CM-Well displays a list of links to infotons that match the query. You can click on these links to see those infotons' pages. See the Developer Guide and API Reference topics to learn more about CM-Well queries. Note You can add the with-data flag to retrieve query results with their field values instead of links only.","title":"Running Queries in the UI"},{"location":"WebInterface/CM-Well.OldWebInterface.html#special-folders-and-files","text":"In addition to folders and infotons that users create on CM-Well, there are several folders and files kept on CM-Well for various monitoring purposes and other functional purposes. (Files may be saved to CM-Well as a special kind of infoton.) The following special folders, files and infotons may be of interest to users and operations personnel: Health pages - under the proc folder, there are several pages that reflect the health of CM-Well nodes and sub-systems. See Health Dashboards to learn more. meta/lib - you can copy your own Java library files (jar files) under this folder, and call their functions from within SPARQL queries. See Calling Java Functions from SPARQL Queries to learn more. proc/node - in this infoton you can see version numbers of CM-Well components. proc/fields - in this infoton you can see a list of all field names from all infotons on the specific CM-Well platform.","title":"Special Folders and Files"},{"location":"WebInterface/CM-Well.OldWebInterface.html#configuring-link-display-by-type","text":"Authorized users can configure the display of infoton links according to RDF type, instead of displaying the infoton link only as a path with a cryptic UUID. For example, for a Person infoton, you might want to display the person's first and last names in the link. For an organization, you might want to display the organization's name, CEO and country of origin.","title":"Configuring Link Display by Type"},{"location":"WebInterface/CM-Well.OldWebInterface.html#display-configuration-infoton","text":"The Display Name configuration infoton must be placed in /meta/dn/\\ HASH> , where HASH is the md5 encoding of a type.rdf value. The configuration infoton must have a forType field, containing the RDF type for which you want to configure display. In addition, it should have at least one field with the displayName prefix. The field values define the string that should be added to the displayed link for infotons of the given type. The values are either the name of a field that usually appears in the infoton, or a javascript snippet that defines a manipulation of such fields. For example: In this example, displayName1 and displayName2 refer to name fields that usually appear in Person infotons. displayNameA and displayNameB contain javascript snippets that define concatenations of such fields and string constants.","title":"Display Configuration Infoton"},{"location":"WebInterface/CM-Well.OldWebInterface.html#calculating-display-names","text":"Multiple displayName values provide alternate display names. Display names are calculated until one of them produces a non-empty string, and then that string is used in the displayed link. (Note that an empty string might be produced if the relevant field values are missing). Display name values are calculated in the following order: First javascript value are calculated, in lexicographical order of all the displayNames whose value contains javascript. If none of the javascript displayNames produces a non-empty string (or there were none to begin with), the rest of the values are calculated in lexicographical order of the displayNames. In the example that appears above, displayNameA would be the first to be calculated, because it contains javascript, and displayNameA comes before displayNameB in lexicographical order. If the calculation produces a non-empty string, the result is added to the link's display. This is what the configured Person links look like:","title":"Calculating Display Names"},{"location":"WebInterface/CM-WellWebInterface.html","text":"The CM-Well Web Interface Introduction The CM-Well web interface is a graphical user interface for accessing CM-Well through your browser. When you browse to the root URI of a CM-Well instance, you see this page: Using the CM-Well web interface, you can browse among the CM-Well folders and infotons, run queries and get results, and examine the query results. Anyone with network access to CM-Well can browse to its web UI; this requires no special permissions. Note The CM-Well web UI is currently fully supported only in the Chrome browser. This page describes the features of the CM-Well web interface and how to use them. CM-Well Paths CM-Well is a Linked Data repository with a hierarchical folder structure. Each folder can contain infotons and other folders. (See CM-Well Data Paradigms to learn more about infotons). An infoton's URI is similar to an internet URI in that it refers to a specific internet resource. In this case the resource is an infoton rather than a web page. The infoton itself has no display information, but the CM-Well UI renders the infoton information as a visual web page. A path to an infoton contains the CM-Well host, the sub-folders and the infoton's unique ID. For example: cm-well-host /data.com/1-34415653093 CM-Well UI Controls Address Bar You can browse to an infoton by entering its path in a browser address bar. Search Results The left-hand pane of the CM-Well web interface displays your query results, or in other words, the folders and/or infoton/s that reside under the CM-Well path in the address bar. If the URI refers to a single infoton, the results page shows that infoton's fields and values (see Infoton View ). If there are sub-folders or infotons under the URI in the address bar, they are displayed as a list on the left of the results page. Clicking on the URI of a folder or infoton displays the page for the selected folder or infoton. Note A CM-Well folder is also an infoton. It can potentially have data fields as well as child folders and infotons. Infoton View When a single infoton's URI appears in the browser address bar, the CM-Well web interface shows that infoton's page. On this page, you can see the infoton's field names and values. Sub-Graph Icon For some infotons, you may notice that some fields have a blue graph icon. This indicates that these fields are part of a sub-graph, or in other words, have been given a label. (See Working with Named Sub-Graphs to learn more.) You can see the label value by hovering over this icon. Format Dropdown At the top of the infoton view, you can see the View in format dropdown menu. This allows you to see the infoton fields in the triples format of your choice. To view the infoton in one of the triples formats: Select one of the values from the View in format dropdown menu. A new browser tab opens, displaying the infoton triples in the format you selected. System Information Fields Infotons have two types of fields: user-defined data fields (also known as \"object fields\") which the user adds to the infoton, and system fields, which the CM-Well system creates. System fields include items such as the infoton's path, UUID and last modified time. By default, system field are hidden in the infoton view. You can show or hide these fields by clicking on the (i) button on the left of the page. Favorite Field Controls Using the favorite field controls in the infoton view, you can choose to display only a subset of fields that interests you. To display only your favorite fields: Click the stars to the left of the fields you want to display. Selected stars are highlighted in yellow. Move the slider over the fields to the Only Favorites position. Only the selected fields are displayed. Note The favorite field settings apply to all infotons regardless of type, and are saved for your user and browser. They are retained for your user between browser sessions as long as you don't clear the browser data. Home Button Clicking on the Home button at the top left navigates to the CM-Well root URI. HELP Link Clicking on the HELP link at the top right displays the Table of Contents page for the CM-Well help documentation. Use Old UI Link If you prefer to use the previous version of the CM-Well web UI, you can click on the Use old UI link at the top right of the page. Note See Old CM-Well Web Interface to learn more about how to use the old UI. Results List Scrollbar When there is more than one sub-folder or infoton under the URI in the address bar, the results are displayed in a list on the left of the page. A message above the results list shows how many results are displayed on this page. If there are many results, you can use the scrollbar to the right of the list to scroll down. The UI loads additional infotons for viewing as you scroll down the list. Search Controls The CM-Well search controls appear at the top of the page. To search for a value in all infoton fields: Select a folder to search in from the dropdown menu. You can also choose Search all folders . Type the value you want to search for in the edit box on the left. Click the Search button. Search results are displayed in a list on the left. Navigating by Type Sometimes you may want to retrieve infotons according to their RDF type. For instance, you may want to examine only the infotons whose RDF type is Person. At the top of the page in the CM-Well web interface, you can see the type section. This displays all the RDF types of all the infotons retrieved by the current URL (which may or may not include query parameters). After each type, the number of infotons of that type is displayed in parentheses. To show only a specific type, click on the type name in the type section. The list of infotons is filtered to show only the selected type. To expand the type section to display all types, click the down arrow at the right-hand side of the type section. The type section expands to show all available types. You can click the up-arrow on the right to hide all type lines but the first. Running Queries in the UI You can run simple CM-Well queries by entering them in your browser's address bar. These queries correspond to GET operations in CM-Well's REST API. The simplest kind of query is one that retrieves a single infoton (which could also be a folder infoton). The infoton is retrieved by its URI. You can also add query parameters to the address line, to retrieve several results while applying filters to their field values. For example, the following query searches for infotons under the permid.org folder (these are mainly Organization entities), which are located in New York state: http://cm-well-host/permid.org?op=search qp=organizationStateProvince.mdaas:New%20York When you enter this query in the address bar, CM-Well displays a list of links to infotons that match the query. You can click on these links to see those infotons' pages. See the Developer Guide and API Reference topics to learn more about CM-Well queries. Special Folders and Files In addition to folders and infotons that users create on CM-Well, there are several folders and files kept on CM-Well for various monitoring purposes and other functional purposes. (Files may be saved to CM-Well as a special kind of infoton.) The following special folders, files and infotons may be of interest to users and operations personnel: Health pages - under the proc folder, there are several pages that reflect the health of CM-Well nodes and sub-systems. See Health Dashboards to learn more. meta/lib - you can copy your own Java library files (jar files) under this folder, and call their functions from within SPARQL queries. See Calling Java Functions from SPARQL Queries to learn more. proc/node - in this infoton you can see version numbers of CM-Well components. proc/fields - in this infoton you can see a list of all field names from all infotons on the specific CM-Well platform. Configuring Link Display by Type Authorized users can configure the display of infoton links according to RDF type, instead of displaying the infoton link only as a path with a cryptic UUID. For example, for a Person infoton, you might want to display the person's first and last names in the link. For an organization, you might want to display the organization's name, CEO and country of origin. Display Configuration Infoton The Display Name configuration infoton must be placed in /meta/dn/\\ HASH> , where HASH is the md5 encoding of a type.rdf value. The configuration infoton must have a forType field, containing the RDF type for which you want to configure display. In addition, it should have at least one field with the displayName prefix. The field values define the string that should be added to the displayed link for infotons of the given type. The values are either the name of a field that usually appears in the infoton, or a javascript snippet that defines a manipulation of such fields. For example: In this example, displayName1 and displayName2 refer to name fields that usually appear in Person infotons. displayNameA and displayNameB contain javascript snippets that define concatenations of such fields and string constants. Calculating Display Names Multiple displayName values provide alternate display names. Display names are calculated until one of them produces a non-empty string, and then that string is used in the displayed link. (Note that an empty string might be produced if the relevant field values are missing). Display name values are calculated in the following order: First javascript value are calculated, in lexicographical order of all the displayNames whose value contains javascript. If none of the javascript displayNames produces a non-empty string (or there were none to begin with), the rest of the values are calculated in lexicographical order of the displayNames. In the example that appears above, displayNameA would be the first to be calculated, because it contains javascript, and displayNameA comes before displayNameB in lexicographical order. If the calculation produces a non-empty string, the result is added to the link's display. This is what the configured Person links look like:","title":"The CM-Well Web Interface"},{"location":"WebInterface/CM-WellWebInterface.html#the-cm-well-web-interface","text":"","title":"The CM-Well Web Interface"},{"location":"WebInterface/CM-WellWebInterface.html#introduction","text":"The CM-Well web interface is a graphical user interface for accessing CM-Well through your browser. When you browse to the root URI of a CM-Well instance, you see this page: Using the CM-Well web interface, you can browse among the CM-Well folders and infotons, run queries and get results, and examine the query results. Anyone with network access to CM-Well can browse to its web UI; this requires no special permissions. Note The CM-Well web UI is currently fully supported only in the Chrome browser. This page describes the features of the CM-Well web interface and how to use them.","title":"Introduction"},{"location":"WebInterface/CM-WellWebInterface.html#cm-well-paths","text":"CM-Well is a Linked Data repository with a hierarchical folder structure. Each folder can contain infotons and other folders. (See CM-Well Data Paradigms to learn more about infotons). An infoton's URI is similar to an internet URI in that it refers to a specific internet resource. In this case the resource is an infoton rather than a web page. The infoton itself has no display information, but the CM-Well UI renders the infoton information as a visual web page. A path to an infoton contains the CM-Well host, the sub-folders and the infoton's unique ID. For example: cm-well-host /data.com/1-34415653093","title":"CM-Well Paths"},{"location":"WebInterface/CM-WellWebInterface.html#cm-well-ui-controls","text":"","title":"CM-Well UI Controls"},{"location":"WebInterface/CM-WellWebInterface.html#address-bar","text":"You can browse to an infoton by entering its path in a browser address bar.","title":"Address Bar"},{"location":"WebInterface/CM-WellWebInterface.html#search-results","text":"The left-hand pane of the CM-Well web interface displays your query results, or in other words, the folders and/or infoton/s that reside under the CM-Well path in the address bar. If the URI refers to a single infoton, the results page shows that infoton's fields and values (see Infoton View ). If there are sub-folders or infotons under the URI in the address bar, they are displayed as a list on the left of the results page. Clicking on the URI of a folder or infoton displays the page for the selected folder or infoton. Note A CM-Well folder is also an infoton. It can potentially have data fields as well as child folders and infotons.","title":"Search Results"},{"location":"WebInterface/CM-WellWebInterface.html#infoton-view","text":"When a single infoton's URI appears in the browser address bar, the CM-Well web interface shows that infoton's page. On this page, you can see the infoton's field names and values.","title":"Infoton View"},{"location":"WebInterface/CM-WellWebInterface.html#sub-graph-icon","text":"For some infotons, you may notice that some fields have a blue graph icon. This indicates that these fields are part of a sub-graph, or in other words, have been given a label. (See Working with Named Sub-Graphs to learn more.) You can see the label value by hovering over this icon.","title":"Sub-Graph Icon"},{"location":"WebInterface/CM-WellWebInterface.html#format-dropdown","text":"At the top of the infoton view, you can see the View in format dropdown menu. This allows you to see the infoton fields in the triples format of your choice. To view the infoton in one of the triples formats: Select one of the values from the View in format dropdown menu. A new browser tab opens, displaying the infoton triples in the format you selected.","title":"Format Dropdown"},{"location":"WebInterface/CM-WellWebInterface.html#system-information-fields","text":"Infotons have two types of fields: user-defined data fields (also known as \"object fields\") which the user adds to the infoton, and system fields, which the CM-Well system creates. System fields include items such as the infoton's path, UUID and last modified time. By default, system field are hidden in the infoton view. You can show or hide these fields by clicking on the (i) button on the left of the page.","title":"System Information Fields"},{"location":"WebInterface/CM-WellWebInterface.html#favorite-field-controls","text":"Using the favorite field controls in the infoton view, you can choose to display only a subset of fields that interests you. To display only your favorite fields: Click the stars to the left of the fields you want to display. Selected stars are highlighted in yellow. Move the slider over the fields to the Only Favorites position. Only the selected fields are displayed. Note The favorite field settings apply to all infotons regardless of type, and are saved for your user and browser. They are retained for your user between browser sessions as long as you don't clear the browser data.","title":"Favorite Field Controls"},{"location":"WebInterface/CM-WellWebInterface.html#home-button","text":"Clicking on the Home button at the top left navigates to the CM-Well root URI.","title":"Home Button"},{"location":"WebInterface/CM-WellWebInterface.html#help-link","text":"Clicking on the HELP link at the top right displays the Table of Contents page for the CM-Well help documentation.","title":"HELP Link"},{"location":"WebInterface/CM-WellWebInterface.html#use-old-ui-link","text":"If you prefer to use the previous version of the CM-Well web UI, you can click on the Use old UI link at the top right of the page. Note See Old CM-Well Web Interface to learn more about how to use the old UI.","title":"Use Old UI Link"},{"location":"WebInterface/CM-WellWebInterface.html#results-list-scrollbar","text":"When there is more than one sub-folder or infoton under the URI in the address bar, the results are displayed in a list on the left of the page. A message above the results list shows how many results are displayed on this page. If there are many results, you can use the scrollbar to the right of the list to scroll down. The UI loads additional infotons for viewing as you scroll down the list.","title":"Results List Scrollbar"},{"location":"WebInterface/CM-WellWebInterface.html#search-controls","text":"The CM-Well search controls appear at the top of the page. To search for a value in all infoton fields: Select a folder to search in from the dropdown menu. You can also choose Search all folders . Type the value you want to search for in the edit box on the left. Click the Search button. Search results are displayed in a list on the left.","title":"Search Controls"},{"location":"WebInterface/CM-WellWebInterface.html#navigating-by-type","text":"Sometimes you may want to retrieve infotons according to their RDF type. For instance, you may want to examine only the infotons whose RDF type is Person. At the top of the page in the CM-Well web interface, you can see the type section. This displays all the RDF types of all the infotons retrieved by the current URL (which may or may not include query parameters). After each type, the number of infotons of that type is displayed in parentheses. To show only a specific type, click on the type name in the type section. The list of infotons is filtered to show only the selected type. To expand the type section to display all types, click the down arrow at the right-hand side of the type section. The type section expands to show all available types. You can click the up-arrow on the right to hide all type lines but the first.","title":"Navigating by Type"},{"location":"WebInterface/CM-WellWebInterface.html#running-queries-in-the-ui","text":"You can run simple CM-Well queries by entering them in your browser's address bar. These queries correspond to GET operations in CM-Well's REST API. The simplest kind of query is one that retrieves a single infoton (which could also be a folder infoton). The infoton is retrieved by its URI. You can also add query parameters to the address line, to retrieve several results while applying filters to their field values. For example, the following query searches for infotons under the permid.org folder (these are mainly Organization entities), which are located in New York state: http://cm-well-host/permid.org?op=search qp=organizationStateProvince.mdaas:New%20York When you enter this query in the address bar, CM-Well displays a list of links to infotons that match the query. You can click on these links to see those infotons' pages. See the Developer Guide and API Reference topics to learn more about CM-Well queries.","title":"Running Queries in the UI"},{"location":"WebInterface/CM-WellWebInterface.html#special-folders-and-files","text":"In addition to folders and infotons that users create on CM-Well, there are several folders and files kept on CM-Well for various monitoring purposes and other functional purposes. (Files may be saved to CM-Well as a special kind of infoton.) The following special folders, files and infotons may be of interest to users and operations personnel: Health pages - under the proc folder, there are several pages that reflect the health of CM-Well nodes and sub-systems. See Health Dashboards to learn more. meta/lib - you can copy your own Java library files (jar files) under this folder, and call their functions from within SPARQL queries. See Calling Java Functions from SPARQL Queries to learn more. proc/node - in this infoton you can see version numbers of CM-Well components. proc/fields - in this infoton you can see a list of all field names from all infotons on the specific CM-Well platform.","title":"Special Folders and Files"},{"location":"WebInterface/CM-WellWebInterface.html#configuring-link-display-by-type","text":"Authorized users can configure the display of infoton links according to RDF type, instead of displaying the infoton link only as a path with a cryptic UUID. For example, for a Person infoton, you might want to display the person's first and last names in the link. For an organization, you might want to display the organization's name, CEO and country of origin.","title":"Configuring Link Display by Type"},{"location":"WebInterface/CM-WellWebInterface.html#display-configuration-infoton","text":"The Display Name configuration infoton must be placed in /meta/dn/\\ HASH> , where HASH is the md5 encoding of a type.rdf value. The configuration infoton must have a forType field, containing the RDF type for which you want to configure display. In addition, it should have at least one field with the displayName prefix. The field values define the string that should be added to the displayed link for infotons of the given type. The values are either the name of a field that usually appears in the infoton, or a javascript snippet that defines a manipulation of such fields. For example: In this example, displayName1 and displayName2 refer to name fields that usually appear in Person infotons. displayNameA and displayNameB contain javascript snippets that define concatenations of such fields and string constants.","title":"Display Configuration Infoton"},{"location":"WebInterface/CM-WellWebInterface.html#calculating-display-names","text":"Multiple displayName values provide alternate display names. Display names are calculated until one of them produces a non-empty string, and then that string is used in the displayed link. (Note that an empty string might be produced if the relevant field values are missing). Display name values are calculated in the following order: First javascript value are calculated, in lexicographical order of all the displayNames whose value contains javascript. If none of the javascript displayNames produces a non-empty string (or there were none to begin with), the rest of the values are calculated in lexicographical order of the displayNames. In the example that appears above, displayNameA would be the first to be calculated, because it contains javascript, and displayNameA comes before displayNameB in lexicographical order. If the calculation produces a non-empty string, the result is added to the link's display. This is what the configured Person links look like:","title":"Calculating Display Names"}]}